{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NoelBird TechLog","title":"**NoelBird TechLog**"},{"location":"#noelbird-techlog","text":"","title":"NoelBird TechLog"},{"location":"competition-programming/atcoder/abc223/","text":"atcoder beginner contest 223 https://atcoder.jp/contests/abc223 standings: 1465 / total 6724 problem A: easy(no description) problem B: easy(no description) problem C: distance, time, velocity relation. 1 2 3 1. find total time 2. divide the time by 2 3. find total distance(for loop) problem D: topological sort. khan algorithm(using multiset rather than queue). my solution: a.py my solution: b.py my solution: c.py my solution: d.py my solution: d.cpp Task Score A 100 B 200 C 300 D 400 E 500 F 500 G 600 H 600","title":"atcoder beginner contest 223"},{"location":"competition-programming/atcoder/abc223/#atcoder-beginner-contest-223","text":"https://atcoder.jp/contests/abc223 standings: 1465 / total 6724 problem A: easy(no description) problem B: easy(no description) problem C: distance, time, velocity relation. 1 2 3 1. find total time 2. divide the time by 2 3. find total distance(for loop) problem D: topological sort. khan algorithm(using multiset rather than queue). my solution: a.py my solution: b.py my solution: c.py my solution: d.py my solution: d.cpp Task Score A 100 B 200 C 300 D 400 E 500 F 500 G 600 H 600","title":"atcoder beginner contest 223"},{"location":"cpp-deep-learning/01/","text":"\ubaa9\uc801 python\uc740 \uac1c\ubc1c \uc18d\ub3c4\uac00 \ud504\ub85c\uc81d\ud2b8 \ucd08\uae30\uc5d0 \ube60\ub974\uc9c0\ub9cc, \ud504\ub85c\uc81d\ud2b8\uac00 \uc870\uae08 \ucee4\uc9c0\uace0 \ub098\uba74 \uadf8\ub807\uac8c \uc18d\ub3c4\uac00 \ube60\ub978 \uac83 \uac19\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub610\ud55c, \uc2e4\ud589 \uc18d\ub3c4\ub3c4 \ub9cc\uc871\ud560 \ub9cc\ud07c \ube60\ub974\uc9c0 \uc54a\uc544\uc11c C++\ub85c \ub525\ub7ec\ub2dd\uc744 \ud558\ub824\uace0 \ud569\ub2c8\ub2e4. \uad6c\uccb4\uc801\uc778 \uacc4\ud68d\uc740 GNN\uacfc NLP\uc758 \uc720\uba85\ud55c \ub808\ud3ec\ub4e4\uc744 \uad6c\ud604\ud574\ubcfc \uacc4\ud68d\uc785\ub2c8\ub2e4.","title":"intro"},{"location":"cpp-deep-learning/01/#_1","text":"python\uc740 \uac1c\ubc1c \uc18d\ub3c4\uac00 \ud504\ub85c\uc81d\ud2b8 \ucd08\uae30\uc5d0 \ube60\ub974\uc9c0\ub9cc, \ud504\ub85c\uc81d\ud2b8\uac00 \uc870\uae08 \ucee4\uc9c0\uace0 \ub098\uba74 \uadf8\ub807\uac8c \uc18d\ub3c4\uac00 \ube60\ub978 \uac83 \uac19\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub610\ud55c, \uc2e4\ud589 \uc18d\ub3c4\ub3c4 \ub9cc\uc871\ud560 \ub9cc\ud07c \ube60\ub974\uc9c0 \uc54a\uc544\uc11c C++\ub85c \ub525\ub7ec\ub2dd\uc744 \ud558\ub824\uace0 \ud569\ub2c8\ub2e4. \uad6c\uccb4\uc801\uc778 \uacc4\ud68d\uc740 GNN\uacfc NLP\uc758 \uc720\uba85\ud55c \ub808\ud3ec\ub4e4\uc744 \uad6c\ud604\ud574\ubcfc \uacc4\ud68d\uc785\ub2c8\ub2e4.","title":"\ubaa9\uc801"},{"location":"cpp-deep-learning/02/","text":"yolo implementation in cpp \uc624\ub298\uc758 \uae30\ub2a5 \uad6c\ud604 \uc624\ub298\uc740 \ub2e4\uc74c\uc758 \uae30\ub2a5\ub4e4\uc744 \uad6c\ud604\ud588\uc2b5\ub2c8\ub2e4. normalize: \uac01 \ucc44\ub110\ubcc4\ub85c normalize \uac01 \ucc44\ub110\ubcc4\ub85c \ucd5c\uc18c\uac12, \ucd5c\ub313\uac12\uc744 \ucc3e\uae30 \uc608\uc678 \ucc98\ub9ac: \ub9cc\uc57d \ucc44\ub110 i \uc5d0 \ub300\ud55c val\uac12\uc774 0\uc5d0 \ub9e4\uc6b0 \uadfc\uc811\ud55c \uac12\uc774\ub77c\uba74, max_i, min_i\ub294 \uac01\uac01 1, 0 \uc73c\ub85c \ub46c\uc11c \ubc1c\uc0b0\uc5d0 \ub300\ud55c \uc608\uc678 \ucc98\ub9ac\ub97c \ud568 $$ val_i = max_i - min_i $$ \uac01 pixel \uac12\ub4e4\uc5d0 \ub300\ud574\uc11c normalize(a: \uac01 \ud53d\uc140\uc758 index\ub97c \uc758\ubbf8. a\ub294 \ud55c\uc7a5\uc758 \uc0ac\uc9c4\uc5d0\uc11c \ubaa8\ub4e0 \uc810\ub4e4\uc744 \uc21c\ud68c \ud6c4 \ub2e4\uc74c channel\ub85c \uc6c0\uc9c1\uc785\ub2c8\ub2e4. j\ub294 \ucc44\ub110) $$ data_a = \\frac{(data_a - min_j)}{(max_j-min_j)} $$ \uc774\ubbf8\uc9c0 \ubcf5\uc0ac \uc774\ubbf8\uc9c0 \uba54\ubaa8\ub9ac \ud560\ub2f9 \uc774\ubbf8\uc9c0 0\uc73c\ub85c \ucd08\uae30\ud654 \uc774\ubbf8\uc9c0 \ubcf4\uc5ec\uc8fc\uae30 \ud558\ub098\uc758 \ud53d\uc140 \uac00\uc838\uc624\uae30 \uc6d0\ubcf8 \uba4d\ubb49\uc774\ub4e4 normalize\ud55c \uba4d\ubb49\uc774\ub4e4 normalize\ud558\uc9c0 \uc54a\uc740 \uba4d\ubb49\uc774\ub4e4(\ud751\ud654\ud588\ub530..) \uc704\uc758 \ubcf4\ub77c\uc0c9\uc774 \uc9c0\ubc30\uc801\uc778 \uc774\ubbf8\uc9c0\ub294 \uc800\uc7a5\ud558\ub294 data type\uc774 double \ud615\uc774\uace0 \uac01 \ucc44\ub110\uc758 \ud53d\uc140 \uac12\uc774 0~1\uae4c\uc9c0\ub9cc \ud45c\ud604\ud560 \uc218 \uc788\uc74c\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0, 255\uae4c\uc9c0\uc758 \uac12\uc744 \uac00\uc9d0\uc73c\ub85c\uc368 \uc798\ubabb\ub41c \uac12 \ud45c\ud604\uc774 \ub41c \uac83\uc785\ub2c8\ub2e4. \uad81\uae08\ud55c \uc810 integer overflow \uac00\ub2a5\uc131..? \uc704\uc640 \uac19\uc774 image\uc5d0\uc11c \uacc4\uc0b0\uc744 \ud560 \ub54c, _h, _w, _c\ub294 \ubaa8\ub450 integer type\uc774\ub77c\uace0 \ud558\uba74 \uacc4\uc0b0 \ub3c4\uc911\uc5d0 integer overflow\uac00 \uc77c\uc5b4\ub098\uace0 new operator\uc5d0 \uc74c\uc218\uac00 \ub4e4\uc5b4\uac08 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uac83\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc740 \ubb34\uc5c7\uc77c\uae4c\uc694...? => \uadf8\ub0e5 \ub118\uc9c0 \uc54a\ub3c4\ub85d if\ubb38 \uba87 \uac1c \ucd94\uac00...? array vs container \ub450 \uac00\uc9c0 \ubc29\ubc95 \uc911\uc5d0\uc11c array\uac00 \ubb3c\ub860 \uc18d\ub3c4\uac00 \ub354 \ube60\ub974\uaca0\uc9c0\ub9cc, \uc5b4\ub5a4 \ubc29\ubc95\uc774 \ub354 \uc720\uc5f0\ud558\uac8c \ucf54\ub4dc \uad6c\uc870\ub97c \uc124\uacc4\ud560 \uc218 \uc788\ub294 \uac78\uae4c\uc694...? \ub610\ud55c, modern C++\ubc29\ubc95\uc5d0\uc11c\ub294 auto \ud0a4\uc6cc\ub4dc\ub97c \uc801\uc808\ud558\uac8c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ubbf8\ub355\uc77c\uae4c\uc694..? array 1 2 3 4 5 6 void Image::normalize () { double * min = new double [ _c ]; double * max = new double [ _c ]; int i , j ; for ( i = 0 ; i < _c ; ++ i ) min [ i ] = max [ i ] = _data [ i * _h * _w ]; container 1 2 3 4 5 6 void Image::normalize () { vector < double > min ( _c ); vector < double > max ( _c ); int i , j ; for ( i = 0 ; i < _c ; ++ i ) min [ i ] = max [ i ] = _data [ i * _h * _w ]; \ucf54\ub4dc history github \ub9c1\ud06c","title":"day1: \uc774\ubbf8\uc9c0 load & show"},{"location":"cpp-deep-learning/02/#yolo-implementation-in-cpp","text":"","title":"yolo implementation in cpp"},{"location":"cpp-deep-learning/02/#_1","text":"\uc624\ub298\uc740 \ub2e4\uc74c\uc758 \uae30\ub2a5\ub4e4\uc744 \uad6c\ud604\ud588\uc2b5\ub2c8\ub2e4. normalize: \uac01 \ucc44\ub110\ubcc4\ub85c normalize \uac01 \ucc44\ub110\ubcc4\ub85c \ucd5c\uc18c\uac12, \ucd5c\ub313\uac12\uc744 \ucc3e\uae30 \uc608\uc678 \ucc98\ub9ac: \ub9cc\uc57d \ucc44\ub110 i \uc5d0 \ub300\ud55c val\uac12\uc774 0\uc5d0 \ub9e4\uc6b0 \uadfc\uc811\ud55c \uac12\uc774\ub77c\uba74, max_i, min_i\ub294 \uac01\uac01 1, 0 \uc73c\ub85c \ub46c\uc11c \ubc1c\uc0b0\uc5d0 \ub300\ud55c \uc608\uc678 \ucc98\ub9ac\ub97c \ud568 $$ val_i = max_i - min_i $$ \uac01 pixel \uac12\ub4e4\uc5d0 \ub300\ud574\uc11c normalize(a: \uac01 \ud53d\uc140\uc758 index\ub97c \uc758\ubbf8. a\ub294 \ud55c\uc7a5\uc758 \uc0ac\uc9c4\uc5d0\uc11c \ubaa8\ub4e0 \uc810\ub4e4\uc744 \uc21c\ud68c \ud6c4 \ub2e4\uc74c channel\ub85c \uc6c0\uc9c1\uc785\ub2c8\ub2e4. j\ub294 \ucc44\ub110) $$ data_a = \\frac{(data_a - min_j)}{(max_j-min_j)} $$ \uc774\ubbf8\uc9c0 \ubcf5\uc0ac \uc774\ubbf8\uc9c0 \uba54\ubaa8\ub9ac \ud560\ub2f9 \uc774\ubbf8\uc9c0 0\uc73c\ub85c \ucd08\uae30\ud654 \uc774\ubbf8\uc9c0 \ubcf4\uc5ec\uc8fc\uae30 \ud558\ub098\uc758 \ud53d\uc140 \uac00\uc838\uc624\uae30 \uc6d0\ubcf8 \uba4d\ubb49\uc774\ub4e4 normalize\ud55c \uba4d\ubb49\uc774\ub4e4 normalize\ud558\uc9c0 \uc54a\uc740 \uba4d\ubb49\uc774\ub4e4(\ud751\ud654\ud588\ub530..) \uc704\uc758 \ubcf4\ub77c\uc0c9\uc774 \uc9c0\ubc30\uc801\uc778 \uc774\ubbf8\uc9c0\ub294 \uc800\uc7a5\ud558\ub294 data type\uc774 double \ud615\uc774\uace0 \uac01 \ucc44\ub110\uc758 \ud53d\uc140 \uac12\uc774 0~1\uae4c\uc9c0\ub9cc \ud45c\ud604\ud560 \uc218 \uc788\uc74c\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0, 255\uae4c\uc9c0\uc758 \uac12\uc744 \uac00\uc9d0\uc73c\ub85c\uc368 \uc798\ubabb\ub41c \uac12 \ud45c\ud604\uc774 \ub41c \uac83\uc785\ub2c8\ub2e4.","title":"\uc624\ub298\uc758 \uae30\ub2a5 \uad6c\ud604"},{"location":"cpp-deep-learning/02/#_2","text":"integer overflow \uac00\ub2a5\uc131..? \uc704\uc640 \uac19\uc774 image\uc5d0\uc11c \uacc4\uc0b0\uc744 \ud560 \ub54c, _h, _w, _c\ub294 \ubaa8\ub450 integer type\uc774\ub77c\uace0 \ud558\uba74 \uacc4\uc0b0 \ub3c4\uc911\uc5d0 integer overflow\uac00 \uc77c\uc5b4\ub098\uace0 new operator\uc5d0 \uc74c\uc218\uac00 \ub4e4\uc5b4\uac08 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uac83\uc744 \ud6a8\uacfc\uc801\uc73c\ub85c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc740 \ubb34\uc5c7\uc77c\uae4c\uc694...? => \uadf8\ub0e5 \ub118\uc9c0 \uc54a\ub3c4\ub85d if\ubb38 \uba87 \uac1c \ucd94\uac00...? array vs container \ub450 \uac00\uc9c0 \ubc29\ubc95 \uc911\uc5d0\uc11c array\uac00 \ubb3c\ub860 \uc18d\ub3c4\uac00 \ub354 \ube60\ub974\uaca0\uc9c0\ub9cc, \uc5b4\ub5a4 \ubc29\ubc95\uc774 \ub354 \uc720\uc5f0\ud558\uac8c \ucf54\ub4dc \uad6c\uc870\ub97c \uc124\uacc4\ud560 \uc218 \uc788\ub294 \uac78\uae4c\uc694...? \ub610\ud55c, modern C++\ubc29\ubc95\uc5d0\uc11c\ub294 auto \ud0a4\uc6cc\ub4dc\ub97c \uc801\uc808\ud558\uac8c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \ubbf8\ub355\uc77c\uae4c\uc694..? array 1 2 3 4 5 6 void Image::normalize () { double * min = new double [ _c ]; double * max = new double [ _c ]; int i , j ; for ( i = 0 ; i < _c ; ++ i ) min [ i ] = max [ i ] = _data [ i * _h * _w ]; container 1 2 3 4 5 6 void Image::normalize () { vector < double > min ( _c ); vector < double > max ( _c ); int i , j ; for ( i = 0 ; i < _c ; ++ i ) min [ i ] = max [ i ] = _data [ i * _h * _w ];","title":"\uad81\uae08\ud55c \uc810"},{"location":"cpp-deep-learning/02/#history","text":"github \ub9c1\ud06c","title":"\ucf54\ub4dc history"},{"location":"cpp-deep-learning/03/","text":"convolve \uc5f0\uc0b0\uae4c\uc9c0 \uc624\ub298\uc758 \uad6c\ud604\ub41c \uae30\ub2a5\ub4e4 \uc624\ub298 \uad6c\ud604\ud55c \ubd80\ubd84\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ub808\uc774\uc5b4 \ubcc4\ub85c \ubcf4\uc5ec\uc8fc\uae30 Fig1. channel(layer) \ubd84\ub9ac\ud55c \uacbd\uc6b0\uc758 \uc774\ubbf8\uc9c0 \uc5c5 \uc0d8\ud50c\ub9c1(=\ud655\ub300 \uae30\ub2a5): \uc774 \uae30\ub2a5\uc740 \ub2e8\uc21c\ud788 \uc774\ubbf8\uc9c0\ub97c \ud655\ub300\ud558\ub294 \uae30\ub2a5\uc785\ub2c8\ub2e4. \uc774\ubbf8\uc9c0\uac00 \ucee4\uc9d0\uc5d0 \ub530\ub77c\uc11c, \uc8fc\ubcc0 \uc810\ub4e4\uc744 \ucc38\uc870\ud574\uc11c \ucc44\uc6cc \ub123\uc9c0\ub294 \uc54a\uace0, \uae30\ubcf8 \uc0c9\uc778 \uac80\uc815\uc0c9\uc73c\ub85c \ucc44\uc6cc\ub123\uc5c8\uc2b5\ub2c8\ub2e4. Fig2. \uc6d0\ubcf8 \uba4d\ubb49\uc774 \uc0ac\uc9c4 Fig3. \uc5c5\uc0d8\ud50c\ub9c1\ub41c \uba4d\ubb49\uc774 \uc0ac\uc9c4 \uc774\ubbf8\uc9c0 \uc0c1\ud558\ubc18\uc804: 499(width)x375(height)x3(channels)\uc758 \uc774\ubbf8\uc9c0\ub97c \ub300\ub7b5 \ucc9c \ubc88 \uc815\ub3c4 \uc0c1\ud558\ubc18\uc804 \uc2dc\ud0a4\ub294\ub370, 2.3\ucd08 \uc815\ub3c4 \uac78\ub838\uc2b5\ub2c8\ub2e4. \ud55c \ubc88 \uc815\ub3c4 \ub4a4\uc9d1\ub294\ub370, 2.3 milliseconds\uac00 \uc18c\uc694\ub429\ub2c8\ub2e4. \ub79c\ub364 \uc0c9\uc0c1\uc744 \uac00\uc9c4 \uc774\ubbf8\uc9c0 \uc0dd\uc131: \uc704\uc758 \uc774\ubbf8\uc9c0\uc5d0\uc11c \ucc98\ub7fc, 3x3 \ub79c\ub364\uc774\ubbf8\uc9c0\ub77c\uace0 \ud558\uba74, \uc704\uc640 \uac19\uc740 \ub79c\ub364 \uc0c9\uc0c1\uc744 \ubd80\uc5ec\ud574\uc11c \uc774\ubbf8\uc9c0\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc624\ub298 \uc7a1\uc740 \ubc84\uadf8\ub4e4 \uc624\ub298 \uc7a1\uc740 \ubc84\uadf8\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ub525\uce74\ud53c \ubb38\uc81c: Image \ud074\ub798\uc2a4\uc758 show \ud568\uc218\uc5d0\uc11c, \uc774\ubbf8\uc9c0\ub97c \ubcf4\uc5ec\uc8fc\ub824\uba74 1) \uc6d0\ubcf8 \uc774\ubbf8\uc9c0\ub97c \uce74\ud53c \ud6c4, 2) normalize \ud574\uc11c \ubcf4\uc5ec\uc918\uc57c \ud569\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc5d0\uc11c deep copy\uac00 \uc774\ub8e8\uc5b4\uc9c0\uc9c0 \uc54a\uc544\uc11c \uc5ec\ub7ec \ubc88 \uc5f0\uc0b0 \ud558\ub294 \uacbd\uc6b0 \ubb38\uc81c\uac00 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc744 Image \ud074\ub798\uc2a4\uc758 \ubcf5\uc0ac\uc0dd\uc131\uc790\uc5d0\uc11c deep copy\ub97c \ud558\ub3c4\ub85d \ubcc0\uacbd\ud588\uc2b5\ub2c8\ub2e4. shallow copy 1 2 3 4 class Image { public : Image ( Image & p ) : _h ( p . _h ), _w ( p . _w ), _c ( p . _c ), _data ( p . _data ) { }; deep copy 1 2 3 4 5 6 7 class Image { public : Image ( Image & p ) : _h ( p . _h ), _w ( p . _w ), _c ( p . _c ), _data ( nullptr ) { // TODO: \uc774\ub7f0 \uc2dd\uc73c\ub85c index\ub97c \uc4f0\ub294\uac8c \ub9de\ub098..? \uace0\uce58\uae30 _data = new double [( long long ) _h * _w * _c ]; memcpy ( _data , p . _data , ( long long ) _h * _w * _c * sizeof ( double )); }; \uc0dd\uac01\ud560 \uac70\ub9ac\ub4e4 memcpy\ub97c \ud560 \ub54c, data\uc758 \uc0ac\uc774\uc988\ub97c \uace0\ub824\ud560 \uac83 \uc704\uc758 memcpy(_data, p._data, (long long)_h * _w * _c * sizeof(double)); \uc774 \ucf54\ub4dc\uc5d0\uc11c, sizeof(double) \uc744 \uc4f0\uc9c0 \uc54a\uc544\uc11c, \ud654\uba74\uc774 \ud654\uba74\uc774 \ub098\uc654\uc2b5\ub2c8\ub2e4. \uaf2d width, height, channels, \ub370\uc774\ud130 \ud0c0\uc785\uc758 \uc0ac\uc774\uc988 \ub97c \uace0\ub824\ud574\uc11c \uba54\ubaa8\ub9ac \ubcf5\uc0ac\ub97c \ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. depth vs channel : depth\ub77c\uace0 \ud558\ub294 \ud45c\ud604\ub4e4\uc774 \ucf54\ub4dc\uc5d0 \ud55c \ubc88\uc529 \ub098\uc624\ub294\ub370, \uc774\ub294 \uc0ac\uc2e4 color depth \ub97c \ub098\ud0c0\ub0b8 \uac83\uc785\ub2c8\ub2e4. color depth\ub294 \uceec\ub7ec\ub97c \ud45c\ud604 \ud558\ub294\ub370, \uba87 \ube44\ud2b8\ub97c \uc0ac\uc6a9\ud574\uc11c \ud45c\ud604\ud560 \uac83\uc77c \uc9c0\uc5d0 \ub300\ud55c \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\uc11c, 0~255 \uc0ac\uc774\uc758 \uc815\uc218\uac12\uc744 \uc774\uc6a9\ud574\uc11c \ud45c\ud604\ud558\ub294 \uac83\uc774\uba74, \uc774\ub294 8\ube44\ud2b8\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\ub530\ub77c\uc11c depth\ub294 8\uc785\ub2c8\ub2e4. \ucc44\ub110(=\ub808\uc774\uc5b4)\uc740 rgb, bgr, cmyk \ucc98\ub7fc \uc5b4\ub5bb\uac8c \uc0c9\uc744 \ubd84\ub9ac\ud574\uc11c \ud45c\ud604\ud560 \uc9c0\uc5d0 \ub300\ud55c \uac83\uc785\ub2c8\ub2e4. integer overflow \uc624\ub298 \ubc84\uadf8\ub97c \uace0\uce58\uba74\uc11c integer overflow \ub54c\ubb38\uc5d0 (long long)_h * _w * _c \ucc98\ub7fc (long long)\uc73c\ub85c \ud0c0\uc785 \uce90\uc2a4\ud305\uc744 \ud588\uc2b5\ub2c8\ub2e4. \ub610\ud55c, day01 \uc5d0\uc11c\ub3c4 \uac19\uc740 \uace0\ubbfc\uc744 \ud588\uc5c8\uc2b5\ub2c8\ub2e4. \uc624\ub298 \uc0dd\uac01 \ud574\ubcf4\ub2c8, unsigned int\ud615\uc2dd\uc740 32\ube44\ud2b8\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uace0, \uc774\uac83\uc740 536MB\ub9cc\ud07c\uc744 \ud45c\ud604\ud560 \uc218 \uc788\ub294\ub370, \uc774\ubbf8\uc9c0\uc758 \ud06c\uae30\ub294 \uc77c\ubc18\uc801\uc73c\ub85c 500MB\ub97c \ub118\uae30\uac00 \ud798\ub4dc\ub2c8\uae4c \uc608\uc678\uac12\uc774 \ub4e4\uc5b4\uc624\uc9c0 \uc54a\ub3c4\ub85d \ucc98\ub9ac\ud558\ub294 \uac83\uc774 \uc880 \ub354 \ub0ab\uc9c0 \uc54a\ub098 \ud558\ub294 \uc0dd\uac01\uc774 \ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. code history \ub0b4 github \ub9c1\ud06c darknet\uc758 First Commit\uc744 C++\ub85c \ubcc0\ud658\ud558\ub294 \uc791\uc5c5 \uc911(50%)\uc785\ub2c8\ub2e4. tests.c \ud30c\uc77c\uc5d0\uc11c 8\uac1c\uc758 \ud568\uc218 \uc911\uc5d0\uc11c 4\uac1c\uc758 \ud568\uc218\ub97c \uc55e\uc73c\ub85c \ub354 \uad6c\ud604\ud574\uc57c \ud569\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 test_backpropagate (); test_convolve (); //test_upsample(); //test_rotate(); //test_load(); test_network (); test_convolutional_layer (); //test_color(); convolve => convolutional_layer => backpropagate => network \uc21c\uc73c\ub85c \uc791\uc5c5\ud560 \uc0dd\uac01\uc785\ub2c8\ub2e4.","title":"day2: \ud654\uc18c \uc601\uc5ed \ucc98\ub9ac \uc911 rotate & convolve"},{"location":"cpp-deep-learning/03/#convolve","text":"","title":"convolve \uc5f0\uc0b0\uae4c\uc9c0"},{"location":"cpp-deep-learning/03/#_1","text":"\uc624\ub298 \uad6c\ud604\ud55c \ubd80\ubd84\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ub808\uc774\uc5b4 \ubcc4\ub85c \ubcf4\uc5ec\uc8fc\uae30 Fig1. channel(layer) \ubd84\ub9ac\ud55c \uacbd\uc6b0\uc758 \uc774\ubbf8\uc9c0 \uc5c5 \uc0d8\ud50c\ub9c1(=\ud655\ub300 \uae30\ub2a5): \uc774 \uae30\ub2a5\uc740 \ub2e8\uc21c\ud788 \uc774\ubbf8\uc9c0\ub97c \ud655\ub300\ud558\ub294 \uae30\ub2a5\uc785\ub2c8\ub2e4. \uc774\ubbf8\uc9c0\uac00 \ucee4\uc9d0\uc5d0 \ub530\ub77c\uc11c, \uc8fc\ubcc0 \uc810\ub4e4\uc744 \ucc38\uc870\ud574\uc11c \ucc44\uc6cc \ub123\uc9c0\ub294 \uc54a\uace0, \uae30\ubcf8 \uc0c9\uc778 \uac80\uc815\uc0c9\uc73c\ub85c \ucc44\uc6cc\ub123\uc5c8\uc2b5\ub2c8\ub2e4. Fig2. \uc6d0\ubcf8 \uba4d\ubb49\uc774 \uc0ac\uc9c4 Fig3. \uc5c5\uc0d8\ud50c\ub9c1\ub41c \uba4d\ubb49\uc774 \uc0ac\uc9c4 \uc774\ubbf8\uc9c0 \uc0c1\ud558\ubc18\uc804: 499(width)x375(height)x3(channels)\uc758 \uc774\ubbf8\uc9c0\ub97c \ub300\ub7b5 \ucc9c \ubc88 \uc815\ub3c4 \uc0c1\ud558\ubc18\uc804 \uc2dc\ud0a4\ub294\ub370, 2.3\ucd08 \uc815\ub3c4 \uac78\ub838\uc2b5\ub2c8\ub2e4. \ud55c \ubc88 \uc815\ub3c4 \ub4a4\uc9d1\ub294\ub370, 2.3 milliseconds\uac00 \uc18c\uc694\ub429\ub2c8\ub2e4. \ub79c\ub364 \uc0c9\uc0c1\uc744 \uac00\uc9c4 \uc774\ubbf8\uc9c0 \uc0dd\uc131: \uc704\uc758 \uc774\ubbf8\uc9c0\uc5d0\uc11c \ucc98\ub7fc, 3x3 \ub79c\ub364\uc774\ubbf8\uc9c0\ub77c\uace0 \ud558\uba74, \uc704\uc640 \uac19\uc740 \ub79c\ub364 \uc0c9\uc0c1\uc744 \ubd80\uc5ec\ud574\uc11c \uc774\ubbf8\uc9c0\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.","title":"\uc624\ub298\uc758 \uad6c\ud604\ub41c \uae30\ub2a5\ub4e4"},{"location":"cpp-deep-learning/03/#_2","text":"\uc624\ub298 \uc7a1\uc740 \ubc84\uadf8\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ub525\uce74\ud53c \ubb38\uc81c: Image \ud074\ub798\uc2a4\uc758 show \ud568\uc218\uc5d0\uc11c, \uc774\ubbf8\uc9c0\ub97c \ubcf4\uc5ec\uc8fc\ub824\uba74 1) \uc6d0\ubcf8 \uc774\ubbf8\uc9c0\ub97c \uce74\ud53c \ud6c4, 2) normalize \ud574\uc11c \ubcf4\uc5ec\uc918\uc57c \ud569\ub2c8\ub2e4. \uc774 \uacfc\uc815\uc5d0\uc11c deep copy\uac00 \uc774\ub8e8\uc5b4\uc9c0\uc9c0 \uc54a\uc544\uc11c \uc5ec\ub7ec \ubc88 \uc5f0\uc0b0 \ud558\ub294 \uacbd\uc6b0 \ubb38\uc81c\uac00 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc744 Image \ud074\ub798\uc2a4\uc758 \ubcf5\uc0ac\uc0dd\uc131\uc790\uc5d0\uc11c deep copy\ub97c \ud558\ub3c4\ub85d \ubcc0\uacbd\ud588\uc2b5\ub2c8\ub2e4. shallow copy 1 2 3 4 class Image { public : Image ( Image & p ) : _h ( p . _h ), _w ( p . _w ), _c ( p . _c ), _data ( p . _data ) { }; deep copy 1 2 3 4 5 6 7 class Image { public : Image ( Image & p ) : _h ( p . _h ), _w ( p . _w ), _c ( p . _c ), _data ( nullptr ) { // TODO: \uc774\ub7f0 \uc2dd\uc73c\ub85c index\ub97c \uc4f0\ub294\uac8c \ub9de\ub098..? \uace0\uce58\uae30 _data = new double [( long long ) _h * _w * _c ]; memcpy ( _data , p . _data , ( long long ) _h * _w * _c * sizeof ( double )); };","title":"\uc624\ub298 \uc7a1\uc740 \ubc84\uadf8\ub4e4"},{"location":"cpp-deep-learning/03/#_3","text":"memcpy\ub97c \ud560 \ub54c, data\uc758 \uc0ac\uc774\uc988\ub97c \uace0\ub824\ud560 \uac83 \uc704\uc758 memcpy(_data, p._data, (long long)_h * _w * _c * sizeof(double)); \uc774 \ucf54\ub4dc\uc5d0\uc11c, sizeof(double) \uc744 \uc4f0\uc9c0 \uc54a\uc544\uc11c, \ud654\uba74\uc774 \ud654\uba74\uc774 \ub098\uc654\uc2b5\ub2c8\ub2e4. \uaf2d width, height, channels, \ub370\uc774\ud130 \ud0c0\uc785\uc758 \uc0ac\uc774\uc988 \ub97c \uace0\ub824\ud574\uc11c \uba54\ubaa8\ub9ac \ubcf5\uc0ac\ub97c \ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. depth vs channel : depth\ub77c\uace0 \ud558\ub294 \ud45c\ud604\ub4e4\uc774 \ucf54\ub4dc\uc5d0 \ud55c \ubc88\uc529 \ub098\uc624\ub294\ub370, \uc774\ub294 \uc0ac\uc2e4 color depth \ub97c \ub098\ud0c0\ub0b8 \uac83\uc785\ub2c8\ub2e4. color depth\ub294 \uceec\ub7ec\ub97c \ud45c\ud604 \ud558\ub294\ub370, \uba87 \ube44\ud2b8\ub97c \uc0ac\uc6a9\ud574\uc11c \ud45c\ud604\ud560 \uac83\uc77c \uc9c0\uc5d0 \ub300\ud55c \uac83\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\uc11c, 0~255 \uc0ac\uc774\uc758 \uc815\uc218\uac12\uc744 \uc774\uc6a9\ud574\uc11c \ud45c\ud604\ud558\ub294 \uac83\uc774\uba74, \uc774\ub294 8\ube44\ud2b8\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\ub530\ub77c\uc11c depth\ub294 8\uc785\ub2c8\ub2e4. \ucc44\ub110(=\ub808\uc774\uc5b4)\uc740 rgb, bgr, cmyk \ucc98\ub7fc \uc5b4\ub5bb\uac8c \uc0c9\uc744 \ubd84\ub9ac\ud574\uc11c \ud45c\ud604\ud560 \uc9c0\uc5d0 \ub300\ud55c \uac83\uc785\ub2c8\ub2e4. integer overflow \uc624\ub298 \ubc84\uadf8\ub97c \uace0\uce58\uba74\uc11c integer overflow \ub54c\ubb38\uc5d0 (long long)_h * _w * _c \ucc98\ub7fc (long long)\uc73c\ub85c \ud0c0\uc785 \uce90\uc2a4\ud305\uc744 \ud588\uc2b5\ub2c8\ub2e4. \ub610\ud55c, day01 \uc5d0\uc11c\ub3c4 \uac19\uc740 \uace0\ubbfc\uc744 \ud588\uc5c8\uc2b5\ub2c8\ub2e4. \uc624\ub298 \uc0dd\uac01 \ud574\ubcf4\ub2c8, unsigned int\ud615\uc2dd\uc740 32\ube44\ud2b8\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uace0, \uc774\uac83\uc740 536MB\ub9cc\ud07c\uc744 \ud45c\ud604\ud560 \uc218 \uc788\ub294\ub370, \uc774\ubbf8\uc9c0\uc758 \ud06c\uae30\ub294 \uc77c\ubc18\uc801\uc73c\ub85c 500MB\ub97c \ub118\uae30\uac00 \ud798\ub4dc\ub2c8\uae4c \uc608\uc678\uac12\uc774 \ub4e4\uc5b4\uc624\uc9c0 \uc54a\ub3c4\ub85d \ucc98\ub9ac\ud558\ub294 \uac83\uc774 \uc880 \ub354 \ub0ab\uc9c0 \uc54a\ub098 \ud558\ub294 \uc0dd\uac01\uc774 \ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.","title":"\uc0dd\uac01\ud560 \uac70\ub9ac\ub4e4"},{"location":"cpp-deep-learning/03/#code-history","text":"\ub0b4 github \ub9c1\ud06c darknet\uc758 First Commit\uc744 C++\ub85c \ubcc0\ud658\ud558\ub294 \uc791\uc5c5 \uc911(50%)\uc785\ub2c8\ub2e4. tests.c \ud30c\uc77c\uc5d0\uc11c 8\uac1c\uc758 \ud568\uc218 \uc911\uc5d0\uc11c 4\uac1c\uc758 \ud568\uc218\ub97c \uc55e\uc73c\ub85c \ub354 \uad6c\ud604\ud574\uc57c \ud569\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 test_backpropagate (); test_convolve (); //test_upsample(); //test_rotate(); //test_load(); test_network (); test_convolutional_layer (); //test_color(); convolve => convolutional_layer => backpropagate => network \uc21c\uc73c\ub85c \uc791\uc5c5\ud560 \uc0dd\uac01\uc785\ub2c8\ub2e4.","title":"code history"},{"location":"cpp-deep-learning/04/","text":"convolution \uc624\ub298 \ud55c \uc791\uc5c5: convolution \uc6d0\ub798 yolo\uc5d0\uc11c\ub294 random\ud55c kernel(3 x 3 matrix)\uc744 \ub9cc\ub4e4 \ub54c, random seed\ub97c \uc8fc\uc9c0 \uc54a\uc558\uc9c0\ub9cc, \uc81c\ub300\ub85c \ub3d9\uc791\ud558\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574\uc11c \uc81c \ucf54\ub4dc\uc5d0\uc11c\ub294 random seed\ub97c \uc8fc\uba74\uc11c \ud655\uc778\ud588\uc2b5\ub2c8\ub2e4. random \uc774\ub77c\uc11c \uc798 \uc54c\ub824\uc9c4 filter(=kernel)\ub4e4\uc740 \ub098\ud0c0\ub098\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4\ub9cc, \uc544\ub7ab\ucabd \uc774\ubbf8\uc9c0\uc5d0\uc11c\ub294 \ud480\uc758 \uc0c9\uae54\uc774 \uc880 \uc5f0\ud574\ubcf4\uc774\uace0, \uc67c\ucabd \uac15\uc544\uc9c0 \uc544\ub798\uc758 \uadf8\ub9bc\uc790\ub3c4 \uc880 \ub354 \uc605\uc740 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \uc704\uc758 \uc774\ubbf8\uc9c0\ub4e4\uc758 \uacbd\uc6b0\uc5d0\ub294 \ud070 \ubcc0\ud654\ub294 \ub098\ud0c0\ub098\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uc720\ub294 RGB \uc138\uac1c\uc758 \ucc44\ub110 \uc911\uc5d0\uc11c R \ucc44\ub110\uc5d0\ub9cc kernel\uc744 \uc801\uc6a9\ud588\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc138 \uac1c\uc758 \ucc44\ub110 \uc804\ubd80\uc5d0 \uc784\uc758\uc758 \uac12\uc744 \uc544\ub798\uc640 \uac19\uc774 \uc900\ub2e4\uba74, \ud655\uc2e4\ud558\uac8c \ud544\ud130\uc758 \ud6a8\uacfc\uac00 \ub098\ud0c0\ub0a9\ub2c8\ub2e4. sobel filter\ub97c \uc900 \uacbd\uc6b0 \uacbd\uacc4\uc120 \uac80\ucd9c \ud544\ud130 \uc911 \ud558\ub098\uc778 sobel filter\ub97c \uc92c\uc2b5\ub2c8\ub2e4. $$ G_y = \\begin{bmatrix}-1 & 0 & 1\\-2 & 0 & 2 \\ -1 & 0 & 1\\end{bmatrix} $$ 1 2 3 4 5 6 7 8 9 10 11 12 13 Image * kernel = new Image (); kernel -> makeRandomImage ( 3 , 3 , dog -> getChannel ()); for ( int i = 0 ; i < 3 ; i ++ ) { kernel -> setPixel ( 0 , 0 , i , -1 ); // setPixel(x, y, channel, value) kernel -> setPixel ( 0 , 1 , i , 0 ); kernel -> setPixel ( 0 , 2 , i , 1 ); kernel -> setPixel ( 1 , 0 , i , -2 ); kernel -> setPixel ( 1 , 1 , i , 0 ); kernel -> setPixel ( 1 , 2 , i , 2 ); kernel -> setPixel ( 2 , 0 , i , -1 ); kernel -> setPixel ( 2 , 1 , i , 0 ); kernel -> setPixel ( 2 , 2 , i , 1 ); } \ub9c1\ud06c \uc624\ub298\uae4c\uc9c0 \uc791\uc5c5\ud55c \ucee4\ubc0b github","title":"day3: convolve operator"},{"location":"cpp-deep-learning/04/#convolution","text":"","title":"convolution"},{"location":"cpp-deep-learning/04/#convolution_1","text":"\uc6d0\ub798 yolo\uc5d0\uc11c\ub294 random\ud55c kernel(3 x 3 matrix)\uc744 \ub9cc\ub4e4 \ub54c, random seed\ub97c \uc8fc\uc9c0 \uc54a\uc558\uc9c0\ub9cc, \uc81c\ub300\ub85c \ub3d9\uc791\ud558\ub294\uc9c0 \ud655\uc778\ud558\uae30 \uc704\ud574\uc11c \uc81c \ucf54\ub4dc\uc5d0\uc11c\ub294 random seed\ub97c \uc8fc\uba74\uc11c \ud655\uc778\ud588\uc2b5\ub2c8\ub2e4. random \uc774\ub77c\uc11c \uc798 \uc54c\ub824\uc9c4 filter(=kernel)\ub4e4\uc740 \ub098\ud0c0\ub098\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4\ub9cc, \uc544\ub7ab\ucabd \uc774\ubbf8\uc9c0\uc5d0\uc11c\ub294 \ud480\uc758 \uc0c9\uae54\uc774 \uc880 \uc5f0\ud574\ubcf4\uc774\uace0, \uc67c\ucabd \uac15\uc544\uc9c0 \uc544\ub798\uc758 \uadf8\ub9bc\uc790\ub3c4 \uc880 \ub354 \uc605\uc740 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \uc704\uc758 \uc774\ubbf8\uc9c0\ub4e4\uc758 \uacbd\uc6b0\uc5d0\ub294 \ud070 \ubcc0\ud654\ub294 \ub098\ud0c0\ub098\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uc720\ub294 RGB \uc138\uac1c\uc758 \ucc44\ub110 \uc911\uc5d0\uc11c R \ucc44\ub110\uc5d0\ub9cc kernel\uc744 \uc801\uc6a9\ud588\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc138 \uac1c\uc758 \ucc44\ub110 \uc804\ubd80\uc5d0 \uc784\uc758\uc758 \uac12\uc744 \uc544\ub798\uc640 \uac19\uc774 \uc900\ub2e4\uba74, \ud655\uc2e4\ud558\uac8c \ud544\ud130\uc758 \ud6a8\uacfc\uac00 \ub098\ud0c0\ub0a9\ub2c8\ub2e4.","title":"\uc624\ub298 \ud55c \uc791\uc5c5: convolution"},{"location":"cpp-deep-learning/04/#sobel-filter","text":"\uacbd\uacc4\uc120 \uac80\ucd9c \ud544\ud130 \uc911 \ud558\ub098\uc778 sobel filter\ub97c \uc92c\uc2b5\ub2c8\ub2e4. $$ G_y = \\begin{bmatrix}-1 & 0 & 1\\-2 & 0 & 2 \\ -1 & 0 & 1\\end{bmatrix} $$ 1 2 3 4 5 6 7 8 9 10 11 12 13 Image * kernel = new Image (); kernel -> makeRandomImage ( 3 , 3 , dog -> getChannel ()); for ( int i = 0 ; i < 3 ; i ++ ) { kernel -> setPixel ( 0 , 0 , i , -1 ); // setPixel(x, y, channel, value) kernel -> setPixel ( 0 , 1 , i , 0 ); kernel -> setPixel ( 0 , 2 , i , 1 ); kernel -> setPixel ( 1 , 0 , i , -2 ); kernel -> setPixel ( 1 , 1 , i , 0 ); kernel -> setPixel ( 1 , 2 , i , 2 ); kernel -> setPixel ( 2 , 0 , i , -1 ); kernel -> setPixel ( 2 , 1 , i , 0 ); kernel -> setPixel ( 2 , 2 , i , 1 ); }","title":"sobel filter\ub97c \uc900 \uacbd\uc6b0"},{"location":"cpp-deep-learning/04/#_1","text":"\uc624\ub298\uae4c\uc9c0 \uc791\uc5c5\ud55c \ucee4\ubc0b github","title":"\ub9c1\ud06c"},{"location":"cpp-deep-learning/05/","text":"feed-forward network \uc624\ub298 \ud55c \uc791\uc5c5 fully-connected layer\ub97c \uad6c\uc131 feed-forward network\ub97c \uad6c\uc131 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 void test_network () { // network\uc758 \ud0c0\uc785 \uc9c0\uc815 Network * net = new Network ( 11 ); net -> setTypes ( 0 , LAYER_TYPE :: CONVOLUTIONAL ); net -> setTypes ( 1 , LAYER_TYPE :: MAXPOOL ); net -> setTypes ( 2 , LAYER_TYPE :: CONVOLUTIONAL ); net -> setTypes ( 3 , LAYER_TYPE :: MAXPOOL ); net -> setTypes ( 4 , LAYER_TYPE :: CONVOLUTIONAL ); net -> setTypes ( 5 , LAYER_TYPE :: CONVOLUTIONAL ); net -> setTypes ( 6 , LAYER_TYPE :: CONVOLUTIONAL ); net -> setTypes ( 7 , LAYER_TYPE :: MAXPOOL ); net -> setTypes ( 8 , LAYER_TYPE :: CONNECTED ); net -> setTypes ( 9 , LAYER_TYPE :: CONNECTED ); net -> setTypes ( 10 , LAYER_TYPE :: CONNECTED ); // input \uc774\ubbf8\uc9c0 \uc124\uc815 Image * dog = new Image (); dog -> loadFromFile ( \"images/test_hinton.jpg\" ); // \uac01 \ub808\uc774\uc5b4\ubcc4 \uc138\ud305 int n = 48 ; int stride = 4 ; int size = 11 ; ConvolutionalLayer * cl = new ConvolutionalLayer ( dog -> getHeight (), dog -> getWidth (), dog -> getChannel (), n , size , stride ); MaxpoolLayer * ml = new MaxpoolLayer ( cl -> getOutput () -> getHeight (), cl -> getOutput () -> getWidth (), cl -> getOutput () -> getChannel (), 2 ); n = 128 ; size = 5 ; stride = 1 ; ConvolutionalLayer * cl2 = new ConvolutionalLayer ( ml -> getOutput () -> getHeight (), ml -> getOutput () -> getWidth (), ml -> getOutput () -> getChannel (), n , size , stride ); MaxpoolLayer * ml2 = new MaxpoolLayer ( cl2 -> getOutput () -> getHeight (), cl2 -> getOutput () -> getWidth (), cl2 -> getOutput () -> getChannel (), 2 ); n = 192 ; size = 3 ; ConvolutionalLayer * cl3 = new ConvolutionalLayer ( ml2 -> getOutput () -> getHeight (), ml2 -> getOutput () -> getWidth (), ml2 -> getOutput () -> getChannel (), n , size , stride ); ConvolutionalLayer * cl4 = new ConvolutionalLayer ( cl3 -> getOutput () -> getHeight (), cl3 -> getOutput () -> getWidth (), cl3 -> getOutput () -> getChannel (), n , size , stride ); n = 128 ; ConvolutionalLayer * cl5 = new ConvolutionalLayer ( cl4 -> getOutput () -> getHeight (), cl4 -> getOutput () -> getWidth (), cl4 -> getOutput () -> getChannel (), n , size , stride ); MaxpoolLayer * ml3 = new MaxpoolLayer ( cl5 -> getOutput () -> getHeight (), cl5 -> getOutput () -> getWidth (), cl5 -> getOutput () -> getChannel (), 4 ); ConnectedLayer * nl = new ConnectedLayer ( ml3 -> getOutput () -> getHeight () * ml3 -> getOutput () -> getWidth () * ml3 -> getOutput () -> getChannel (), 4096 ); ConnectedLayer * nl2 = new ConnectedLayer ( 4096 , 4096 ); ConnectedLayer * nl3 = new ConnectedLayer ( 4096 , 1000 ); net -> setLayers ( 0 , cl ); net -> setLayers ( 1 , ml ); net -> setLayers ( 2 , cl2 ); net -> setLayers ( 3 , ml2 ); net -> setLayers ( 4 , cl3 ); net -> setLayers ( 5 , cl4 ); net -> setLayers ( 6 , cl5 ); net -> setLayers ( 7 , ml3 ); net -> setLayers ( 8 , nl ); net -> setLayers ( 9 , nl2 ); net -> setLayers ( 10 , nl3 ); // feed-forward \uacc4\uc0b0 clock_t start = clock (), end ; for ( int i = 0 ; i < 10 ; ++ i ) { net -> run ( dog ); dog -> rotate (); } end = clock (); printf ( \"Ran %lf second per iteration \\n \" , ( double )( end - start ) / CLOCKS_PER_SEC / 10 ); net -> getImage () -> showImageLayers ( \"Test Network Layer\" ); } yolo \ucf54\ub4dc\uc5d0\uc11c\ub294 \ucef4\ud30c\uc77c \ud560 \ub54c Makefile\uc5d0\uc11c fast-math\ub77c\ub294 \uc635\uc158\uc744 \uc8fc\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc5f0\uc0b0\uc744 \uc880 \ub354 \ube68\ub9ac\ud560 \uc218 \uc788\uac8c \ub3c4\uc640\uc8fc\ub294 \uc635\uc158\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. stackoverflow\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc124\uba85\uc774 \ub41c \uc790\ub8cc\uac00 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // https://stackoverflow.com/questions/7420665/what-does-gccs-ffast-math-actually-do -ffast-math does a lot more than just break strict IEEE compliance. First of all, of course, it does break strict IEEE compliance, allowing e.g. the reordering of instructions to something which is mathematically the same (ideally) but not exactly the same in floating point. Second, it disables setting errno after single-instruction math functions, which means avoiding a write to a thread-local variable (this can make a 100% difference for those functions on some architectures). Third, it makes the assumption that all math is finite, which means that no checks for NaN (or zero) are made in place where they would have detrimental effects. It is simply assumed that this isn't going to happen. Fourth, it enables reciprocal approximations for division and reciprocal square root. Further, it disables signed zero (code assumes signed zero does not exist, even if the target supports it) and rounding math, which enables among other things constant folding at compile-time. Last, it generates code that assumes that no hardware interrupts can happen due to signalling/trapping math (that is, if these cannot be disabled on the target architecture and consequently do happen, they will not be handled). \uc5f0\uc0b0 \uc21c\uc11c reordering(\uc218\ud559\uc801\uc73c\ub85c\ub294 \uac19\uc9c0\ub9cc, floating point\uacc4\uc0b0\uc73c\ub85c\ub294 \uacb0\uacfc \uac12\uc774 \uc57d\uac04 \ub2e4\ub97c \uc218 \uc788\uc74c) errno \ub77c\ub294 \uac83\uc744 disable \uc2dc\ud0b4. \uc774\uac78 disable \uc2dc\ud0a4\uba74, thread-local variable\uc5d0 \uac12\uc744 \uc4f0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \uc218\ud559 \uc5f0\uc0b0\uc744 finite \ud558\ub2e4\uace0 \uac00\uc815\ud568. NaN(\ub610\ub294 zero) \uccb4\ud06c\ub97c \ud558\uc9c0 \uc54a\uc74c \uc81c\uacf1\uadfc\uc5d0 \ub300\ud574\uc11c \uc5ed\uc5f0\uc0b0\uc744 enable \uc2dc\ud0b4 signed zero \ub97c disable\uc2dc\ud0b4 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\uac00 \uc77c\uc5b4\ub0a0 \uc218 \uc5c6\ub2e4\uace0 \uac00\uc815\ud568. \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\uac00 \uc77c\uc5b4\ub098\uac8c \ub41c\ub2e4\uba74, \ud558\ub4dc\uc6e8\uc5b4\uc5d0 \ub300\ud55c \uc778\ud130\ub7fd\ud2b8\ub97c \ucc98\ub9ac\ud558\uc9c0 \uc54a\uc74c visual studio(2019)\uc5d0\ub294 fast-math \uc635\uc158\uc774 \uc5c6\uae30 \ub54c\ubb38\uc5d0, \uac00\uc7a5 \ube44\uc2b7\ud55c \ubd80\ub3d9\uc18c\uc218\uc810 \uc635\uc158\uc744 precise -> fast\ub85c \uc138\ud305\ud588\uc2b5\ub2c8\ub2e4. \ud55c \ubc88 model\uc744 \uc2e4\ud589\ud560 \ub54c\ub9c8\ub2e4, \uc57d 250\ucd08 \uc815\ub3c4\uac00 \uc18c\uc694\ub418\uc5c8\ub294\ub370, \ub300\ubd80\ubd84\uc758 \uc2dc\uac04\uc774 convolutional layer\uc5d0\uc11c \uc18c\uc694\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uac00\uc7a5 \uc2dc\uac04\uc774 \ub9ce\uc778 \uac78\ub9b0 \uac83\uc740 \ud53d\uc140\uc744 \uac00\uc838\uc624\ub294 \uc5f0\uc0b0\uc774 \uc2dc\uac04\uc744 \ub9ce\uc774 \ucc28\uc9c0\ud588\uc2b5\ub2c8\ub2e4. \uba54\ubaa8\ub9ac IO\uc5d0\uc11c \uc2dc\uac04\uc744 \ub9ce\uc774 \ucc28\uc9c0\ud55c \uac83 \uac19\uace0 \uac1c\uc120\ud574\uc57c \ud560 \ub4ef \ud569\ub2c8\ub2e4. visual studio\uc5d0\uc11c \ubd80\ub3d9\uc18c\uc218\uc810 \uc635\uc158(FP)\uc744 precise -> fast\ub85c \uc138\ud305\ud6c4 \ud55c iteration \ub2f9 225 -> 217 \ucd08\ub85c \uac10\uc18c\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc55e\uc73c\ub85c \uc9c4\ud589\ud560 \uc791\uc5c5 backpropagation \uc131\ub2a5 \uac1c\uc120 Image::getPixel\ud568\uc218 \uc218\uc815 Image::getPixelExtended\ud568\uc218 \uc218\uc815","title":"day4: fully-connected layer & network"},{"location":"cpp-deep-learning/05/#feed-forward-network","text":"","title":"feed-forward network"},{"location":"cpp-deep-learning/05/#_1","text":"fully-connected layer\ub97c \uad6c\uc131 feed-forward network\ub97c \uad6c\uc131 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 void test_network () { // network\uc758 \ud0c0\uc785 \uc9c0\uc815 Network * net = new Network ( 11 ); net -> setTypes ( 0 , LAYER_TYPE :: CONVOLUTIONAL ); net -> setTypes ( 1 , LAYER_TYPE :: MAXPOOL ); net -> setTypes ( 2 , LAYER_TYPE :: CONVOLUTIONAL ); net -> setTypes ( 3 , LAYER_TYPE :: MAXPOOL ); net -> setTypes ( 4 , LAYER_TYPE :: CONVOLUTIONAL ); net -> setTypes ( 5 , LAYER_TYPE :: CONVOLUTIONAL ); net -> setTypes ( 6 , LAYER_TYPE :: CONVOLUTIONAL ); net -> setTypes ( 7 , LAYER_TYPE :: MAXPOOL ); net -> setTypes ( 8 , LAYER_TYPE :: CONNECTED ); net -> setTypes ( 9 , LAYER_TYPE :: CONNECTED ); net -> setTypes ( 10 , LAYER_TYPE :: CONNECTED ); // input \uc774\ubbf8\uc9c0 \uc124\uc815 Image * dog = new Image (); dog -> loadFromFile ( \"images/test_hinton.jpg\" ); // \uac01 \ub808\uc774\uc5b4\ubcc4 \uc138\ud305 int n = 48 ; int stride = 4 ; int size = 11 ; ConvolutionalLayer * cl = new ConvolutionalLayer ( dog -> getHeight (), dog -> getWidth (), dog -> getChannel (), n , size , stride ); MaxpoolLayer * ml = new MaxpoolLayer ( cl -> getOutput () -> getHeight (), cl -> getOutput () -> getWidth (), cl -> getOutput () -> getChannel (), 2 ); n = 128 ; size = 5 ; stride = 1 ; ConvolutionalLayer * cl2 = new ConvolutionalLayer ( ml -> getOutput () -> getHeight (), ml -> getOutput () -> getWidth (), ml -> getOutput () -> getChannel (), n , size , stride ); MaxpoolLayer * ml2 = new MaxpoolLayer ( cl2 -> getOutput () -> getHeight (), cl2 -> getOutput () -> getWidth (), cl2 -> getOutput () -> getChannel (), 2 ); n = 192 ; size = 3 ; ConvolutionalLayer * cl3 = new ConvolutionalLayer ( ml2 -> getOutput () -> getHeight (), ml2 -> getOutput () -> getWidth (), ml2 -> getOutput () -> getChannel (), n , size , stride ); ConvolutionalLayer * cl4 = new ConvolutionalLayer ( cl3 -> getOutput () -> getHeight (), cl3 -> getOutput () -> getWidth (), cl3 -> getOutput () -> getChannel (), n , size , stride ); n = 128 ; ConvolutionalLayer * cl5 = new ConvolutionalLayer ( cl4 -> getOutput () -> getHeight (), cl4 -> getOutput () -> getWidth (), cl4 -> getOutput () -> getChannel (), n , size , stride ); MaxpoolLayer * ml3 = new MaxpoolLayer ( cl5 -> getOutput () -> getHeight (), cl5 -> getOutput () -> getWidth (), cl5 -> getOutput () -> getChannel (), 4 ); ConnectedLayer * nl = new ConnectedLayer ( ml3 -> getOutput () -> getHeight () * ml3 -> getOutput () -> getWidth () * ml3 -> getOutput () -> getChannel (), 4096 ); ConnectedLayer * nl2 = new ConnectedLayer ( 4096 , 4096 ); ConnectedLayer * nl3 = new ConnectedLayer ( 4096 , 1000 ); net -> setLayers ( 0 , cl ); net -> setLayers ( 1 , ml ); net -> setLayers ( 2 , cl2 ); net -> setLayers ( 3 , ml2 ); net -> setLayers ( 4 , cl3 ); net -> setLayers ( 5 , cl4 ); net -> setLayers ( 6 , cl5 ); net -> setLayers ( 7 , ml3 ); net -> setLayers ( 8 , nl ); net -> setLayers ( 9 , nl2 ); net -> setLayers ( 10 , nl3 ); // feed-forward \uacc4\uc0b0 clock_t start = clock (), end ; for ( int i = 0 ; i < 10 ; ++ i ) { net -> run ( dog ); dog -> rotate (); } end = clock (); printf ( \"Ran %lf second per iteration \\n \" , ( double )( end - start ) / CLOCKS_PER_SEC / 10 ); net -> getImage () -> showImageLayers ( \"Test Network Layer\" ); } yolo \ucf54\ub4dc\uc5d0\uc11c\ub294 \ucef4\ud30c\uc77c \ud560 \ub54c Makefile\uc5d0\uc11c fast-math\ub77c\ub294 \uc635\uc158\uc744 \uc8fc\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc5f0\uc0b0\uc744 \uc880 \ub354 \ube68\ub9ac\ud560 \uc218 \uc788\uac8c \ub3c4\uc640\uc8fc\ub294 \uc635\uc158\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. stackoverflow\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc124\uba85\uc774 \ub41c \uc790\ub8cc\uac00 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // https://stackoverflow.com/questions/7420665/what-does-gccs-ffast-math-actually-do -ffast-math does a lot more than just break strict IEEE compliance. First of all, of course, it does break strict IEEE compliance, allowing e.g. the reordering of instructions to something which is mathematically the same (ideally) but not exactly the same in floating point. Second, it disables setting errno after single-instruction math functions, which means avoiding a write to a thread-local variable (this can make a 100% difference for those functions on some architectures). Third, it makes the assumption that all math is finite, which means that no checks for NaN (or zero) are made in place where they would have detrimental effects. It is simply assumed that this isn't going to happen. Fourth, it enables reciprocal approximations for division and reciprocal square root. Further, it disables signed zero (code assumes signed zero does not exist, even if the target supports it) and rounding math, which enables among other things constant folding at compile-time. Last, it generates code that assumes that no hardware interrupts can happen due to signalling/trapping math (that is, if these cannot be disabled on the target architecture and consequently do happen, they will not be handled). \uc5f0\uc0b0 \uc21c\uc11c reordering(\uc218\ud559\uc801\uc73c\ub85c\ub294 \uac19\uc9c0\ub9cc, floating point\uacc4\uc0b0\uc73c\ub85c\ub294 \uacb0\uacfc \uac12\uc774 \uc57d\uac04 \ub2e4\ub97c \uc218 \uc788\uc74c) errno \ub77c\ub294 \uac83\uc744 disable \uc2dc\ud0b4. \uc774\uac78 disable \uc2dc\ud0a4\uba74, thread-local variable\uc5d0 \uac12\uc744 \uc4f0\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \uc218\ud559 \uc5f0\uc0b0\uc744 finite \ud558\ub2e4\uace0 \uac00\uc815\ud568. NaN(\ub610\ub294 zero) \uccb4\ud06c\ub97c \ud558\uc9c0 \uc54a\uc74c \uc81c\uacf1\uadfc\uc5d0 \ub300\ud574\uc11c \uc5ed\uc5f0\uc0b0\uc744 enable \uc2dc\ud0b4 signed zero \ub97c disable\uc2dc\ud0b4 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\uac00 \uc77c\uc5b4\ub0a0 \uc218 \uc5c6\ub2e4\uace0 \uac00\uc815\ud568. \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\uac00 \uc77c\uc5b4\ub098\uac8c \ub41c\ub2e4\uba74, \ud558\ub4dc\uc6e8\uc5b4\uc5d0 \ub300\ud55c \uc778\ud130\ub7fd\ud2b8\ub97c \ucc98\ub9ac\ud558\uc9c0 \uc54a\uc74c visual studio(2019)\uc5d0\ub294 fast-math \uc635\uc158\uc774 \uc5c6\uae30 \ub54c\ubb38\uc5d0, \uac00\uc7a5 \ube44\uc2b7\ud55c \ubd80\ub3d9\uc18c\uc218\uc810 \uc635\uc158\uc744 precise -> fast\ub85c \uc138\ud305\ud588\uc2b5\ub2c8\ub2e4. \ud55c \ubc88 model\uc744 \uc2e4\ud589\ud560 \ub54c\ub9c8\ub2e4, \uc57d 250\ucd08 \uc815\ub3c4\uac00 \uc18c\uc694\ub418\uc5c8\ub294\ub370, \ub300\ubd80\ubd84\uc758 \uc2dc\uac04\uc774 convolutional layer\uc5d0\uc11c \uc18c\uc694\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uac00\uc7a5 \uc2dc\uac04\uc774 \ub9ce\uc778 \uac78\ub9b0 \uac83\uc740 \ud53d\uc140\uc744 \uac00\uc838\uc624\ub294 \uc5f0\uc0b0\uc774 \uc2dc\uac04\uc744 \ub9ce\uc774 \ucc28\uc9c0\ud588\uc2b5\ub2c8\ub2e4. \uba54\ubaa8\ub9ac IO\uc5d0\uc11c \uc2dc\uac04\uc744 \ub9ce\uc774 \ucc28\uc9c0\ud55c \uac83 \uac19\uace0 \uac1c\uc120\ud574\uc57c \ud560 \ub4ef \ud569\ub2c8\ub2e4. visual studio\uc5d0\uc11c \ubd80\ub3d9\uc18c\uc218\uc810 \uc635\uc158(FP)\uc744 precise -> fast\ub85c \uc138\ud305\ud6c4 \ud55c iteration \ub2f9 225 -> 217 \ucd08\ub85c \uac10\uc18c\ud558\uc600\uc2b5\ub2c8\ub2e4.","title":"\uc624\ub298 \ud55c \uc791\uc5c5"},{"location":"cpp-deep-learning/05/#_2","text":"backpropagation \uc131\ub2a5 \uac1c\uc120 Image::getPixel\ud568\uc218 \uc218\uc815 Image::getPixelExtended\ud568\uc218 \uc218\uc815","title":"\uc55e\uc73c\ub85c \uc9c4\ud589\ud560 \uc791\uc5c5"},{"location":"cpp-deep-learning/06/","text":"backpropagate \uc624\ub298 \ud55c \uc77c backpropage \uad6c\ud604 yolo\uc758 first commit \ub530\ub77c\ud558\uae30 first commit\uc5d0 \uad6c\ud604\ub41c \uae30\ub2a5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int main () { test_load (); test_color (); test_upsample (); test_rotate (); test_convolve (); test_convolutional_layer (); test_network (); test_backpropagate (); cv :: waitKey ( 0 ); return 0 ; } ConvolutionalLayer\uc5d0 \ucd08\uae30\ud654 \uc624\ub958 \uc218\uc815 Yolo First Commit \uc774\ubc88 \ucee8\ud150\uce20\uae4c\uc9c0\uc758 \ub0b4\uc6a9\uc774 Yolo\uc758 First Commit\uc5d0 \ud574\ub2f9\ub418\ub294 \ub0b4\uc6a9\uc774\uc5c8\uc2b5\ub2c8\ub2e4. \uc704\uc758 \ud568\uc218\ub4e4\uc744 \ub2e4\uc2dc \ub418\ub3cc\ub824 \ubcf4\uba74 1. \ub808\uc774\uc5b4 \ubcc4\ub85c \ud654\uba74 \ud45c\uc2dc \ud14c\uc2a4\ud2b8 2. \uceec\ub7ec \ud14c\uc2a4\ud2b8 \uc6d0\ubcf8 \uc774\ubbf8\uc9c0 \uac01 \ucc44\ub110 \ubcc4 \uc774\ubbf8\uc9c0 3. upsampling \ud654\uba74\uc774 \uc880 \uc5b4\ub461\uac8c \ubcf4\uc774\ub294 \uac83\uc740 \ud53d\uc140\ub4e4 \uac04\uc758 \uac70\ub9ac\ub97c \uba40\uac8c \ud588\uc744 \ubfd0, \uba40\uc5b4\uc9c4 \uac70\ub9ac \uc548\uc744 \ucc44\uc6b0\ub294 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uba40\uc5b4\uc9c4 \ud53d\uc140\ub4e4 \uc0ac\uc774\ub97c \ucc44\uc6b0\ub294 \ubc29\ubc95\uc740 \ub300\ud45c\uc801\uc73c\ub85c bi-linear interpolation, cubic interpolation \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4. 4. rotation 90\ub3c4\ub85c \ub4a4\uc9d1\ub294 \uc5f0\uc0b0\uc785\ub2c8\ub2e4. 5. convolution \uc5f0\uc0b0 \uc6d0\ubcf8 \uc774\ubbf8\uc9c0 \uac01 \ub808\uc774\uc5b4\ubcc4 \uc774\ubbf8\uc9c0 \uc801\uc6a9\ud560 kernel(3x3, 3\ucc44\ub110) after(\ud06c\uac8c \ud2f0\ub294 \uc548 \ub098\ub294\ub370, \uc880 \ud750\ub824\uc9c4 \uac83 \uac19\uc2b5\ub2c8\ub2e4.) second order edge detection filter\ub97c \uc138 \ucc44\ub110\uc5d0 \ub3d9\uc77c\ud558\uac8c \uc801\uc6a9 6. max pool layer 7. network \uad6c\uc131 \ubcc4\ub3c4\uc758 \uc774\ubbf8\uc9c0\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. 8. backpropage \ubcc4\ub3c4\uc758 \uc774\ubbf8\uc9c0\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \uc5ec\ub35f \uac00\uc9c0\uc758 \uae30\ub2a5\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c 2013\ub144 11\uc6d4 5\uc77c\uae4c\uc9c0 \ub530\ub77c\uc654\ub124\uc694!","title":"day5: backpropage & done first commit"},{"location":"cpp-deep-learning/06/#backpropagate","text":"","title":"backpropagate"},{"location":"cpp-deep-learning/06/#_1","text":"backpropage \uad6c\ud604 yolo\uc758 first commit \ub530\ub77c\ud558\uae30 first commit\uc5d0 \uad6c\ud604\ub41c \uae30\ub2a5 1 2 3 4 5 6 7 8 9 10 11 12 13 14 int main () { test_load (); test_color (); test_upsample (); test_rotate (); test_convolve (); test_convolutional_layer (); test_network (); test_backpropagate (); cv :: waitKey ( 0 ); return 0 ; } ConvolutionalLayer\uc5d0 \ucd08\uae30\ud654 \uc624\ub958 \uc218\uc815","title":"\uc624\ub298 \ud55c \uc77c"},{"location":"cpp-deep-learning/06/#yolo-first-commit","text":"\uc774\ubc88 \ucee8\ud150\uce20\uae4c\uc9c0\uc758 \ub0b4\uc6a9\uc774 Yolo\uc758 First Commit\uc5d0 \ud574\ub2f9\ub418\ub294 \ub0b4\uc6a9\uc774\uc5c8\uc2b5\ub2c8\ub2e4. \uc704\uc758 \ud568\uc218\ub4e4\uc744 \ub2e4\uc2dc \ub418\ub3cc\ub824 \ubcf4\uba74","title":"Yolo First Commit"},{"location":"cpp-deep-learning/06/#1","text":"","title":"1. \ub808\uc774\uc5b4 \ubcc4\ub85c \ud654\uba74 \ud45c\uc2dc \ud14c\uc2a4\ud2b8"},{"location":"cpp-deep-learning/06/#2","text":"\uc6d0\ubcf8 \uc774\ubbf8\uc9c0 \uac01 \ucc44\ub110 \ubcc4 \uc774\ubbf8\uc9c0","title":"2. \uceec\ub7ec \ud14c\uc2a4\ud2b8"},{"location":"cpp-deep-learning/06/#3-upsampling","text":"\ud654\uba74\uc774 \uc880 \uc5b4\ub461\uac8c \ubcf4\uc774\ub294 \uac83\uc740 \ud53d\uc140\ub4e4 \uac04\uc758 \uac70\ub9ac\ub97c \uba40\uac8c \ud588\uc744 \ubfd0, \uba40\uc5b4\uc9c4 \uac70\ub9ac \uc548\uc744 \ucc44\uc6b0\ub294 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uba40\uc5b4\uc9c4 \ud53d\uc140\ub4e4 \uc0ac\uc774\ub97c \ucc44\uc6b0\ub294 \ubc29\ubc95\uc740 \ub300\ud45c\uc801\uc73c\ub85c bi-linear interpolation, cubic interpolation \ub4f1\uc774 \uc788\uc2b5\ub2c8\ub2e4.","title":"3. upsampling"},{"location":"cpp-deep-learning/06/#4-rotation","text":"90\ub3c4\ub85c \ub4a4\uc9d1\ub294 \uc5f0\uc0b0\uc785\ub2c8\ub2e4.","title":"4. rotation"},{"location":"cpp-deep-learning/06/#5-convolution","text":"\uc6d0\ubcf8 \uc774\ubbf8\uc9c0 \uac01 \ub808\uc774\uc5b4\ubcc4 \uc774\ubbf8\uc9c0 \uc801\uc6a9\ud560 kernel(3x3, 3\ucc44\ub110) after(\ud06c\uac8c \ud2f0\ub294 \uc548 \ub098\ub294\ub370, \uc880 \ud750\ub824\uc9c4 \uac83 \uac19\uc2b5\ub2c8\ub2e4.) second order edge detection filter\ub97c \uc138 \ucc44\ub110\uc5d0 \ub3d9\uc77c\ud558\uac8c \uc801\uc6a9","title":"5. convolution \uc5f0\uc0b0"},{"location":"cpp-deep-learning/06/#6-max-pool-layer","text":"","title":"6. max pool layer"},{"location":"cpp-deep-learning/06/#7-network","text":"\ubcc4\ub3c4\uc758 \uc774\ubbf8\uc9c0\ub294 \uc5c6\uc2b5\ub2c8\ub2e4.","title":"7. network \uad6c\uc131"},{"location":"cpp-deep-learning/06/#8-backpropage","text":"\ubcc4\ub3c4\uc758 \uc774\ubbf8\uc9c0\ub294 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \uc5ec\ub35f \uac00\uc9c0\uc758 \uae30\ub2a5\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c 2013\ub144 11\uc6d4 5\uc77c\uae4c\uc9c0 \ub530\ub77c\uc654\ub124\uc694!","title":"8. backpropage"},{"location":"daily/2021-02-21/","text":"\uc11c\ubc84 \uad6c\ucd95 vscode\uc5d0\uc11c \uc6d0\uaca9 \uc811\uc18d\uc744 \uc124\uc815\ud588\uace0, \uc77c\ub2e8 \ube60\ub978 \uc11c\ube44\uc2a4 \uc62c\ub9ac\uae30\ub97c \uc704\ud574\uc11c \uc7a5\uace0\ub85c \uba3c\uc800 \uc11c\ube44\uc2a4\ud560 \uacc4\ud68d\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc11c spring\uc5d0 \uc810\uc810 \uc775\uc219\ud574 \uc9c0\uba74, spring\uc73c\ub85c \uac08\uc544\ud0c0\ub824\uace0 \ud569\ub2c8\ub2e4. \uc624\ub298\uc758 \uad81\uae08\uc99d\uc740 spring\uacfc spring boot\ub294 \uc5b4\ub5bb\uac8c \ub2e4\ub978\uac00? \uac00 \uad81\uae08\ud569\ub2c8\ub2e4. \ubb38\ub4dd \ub4dc\ub294 \uc0dd\uac01\uc774 \uad81\uae08\ud55c \uac83\ub4e4\uc744 \uc27d\uac8c \uad00\ub9ac\ud574 \uc8fc\ub294 \uae30\ub2a5\ub3c4 \uc788\uc5c8\uc73c\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. \uc624\ub298 \ud588\ub358 \uc791\uc5c5\ub4e4 (TODO: \uc791\uc5c5\ud55c \uc2dc\uac04\ub4e4\uc744 \uae30\ub85d\ud558\ub294 \uae30\ub2a5\uc774 \uc788\uc73c\uba74 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4) \ucee8\ud150\uce20 \uae30\ub85d\uc744 \uc704\ud55c \uc791\uc5c5(10min) \uc11c\ubc84 \uc791\uc5c5(3h) C++\ub85c \ubc30\uc6b0\ub294 \ub525\ub7ec\ub2dd \uacf5\ubd80(3h): \ub300\ubd80\ubd84\uc758 \uc2dc\uac04\uc744 cuda C++ \ud658\uacbd\uc124\uc815\uc5d0 \uc37c\uc74c... \uc55e\uc73c\ub85c \ud560 \uc791\uc5c5\ub4e4 TODO \uceec\ub809\ud130 \ub9cc\ub4e4\uae30 \uc791\uc5c5\uc744 \ud558\ub2e4\uac00 \uac11\uc790\uae30 \ub5a0\uc624\ub974\ub294 \uc0dd\uac01\ub4e4\uc774 \uc788\ub294\ub370, \uadf8\uac78 \ubcc4\ub3c4\uc758 \uacf3\uc5d0\ub2e4\uac00 \uc801\uc9c0\ub9d0\uace0 \uc65c \uadf8\ub7f0 \uc0dd\uac01\uc774 \ub4e4\uc5c8\ub294\uc9c0\ub97c \ub2e4\uc2dc \ub5a0\uc62c\ub9b4 \uc218 \uc788\uac8c, \uc791\uc5c5\ud558\ub294 \uacf3\uc5d0\uc11c \uadf8\ub300\ub85c \uc801\uc73c\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. \uc624\ub298\uc740 \uc218\ub3d9 TODO \uceec\ub809\ud130\uac00 \uc791\ub3d9\ud569\ub2c8\ub2e4. :happy: \uc624\ub298\uc758 \uc218\ub3d9 TODO \uceec\ub809\ud130 \uc791\uc5c5\uad00\ub9ac: \uc791\uc5c5\ud55c \uc2dc\uac04\ub4e4\uc744 \uae30\ub85d\ud558\ub294 \uae30\ub2a5 \ub9cc\ub4e4\uae30(jira or python\uc73c\ub85c) \uc11c\ubc84\uc791\uc5c5: google analytics \ubd99\uc774\uae30 \uc11c\ubc84\uc791\uc5c5: markdown\uc5d0\uc11c \ucf54\ub4dc \uc791\uc131\ud588\uc744 \ub54c, html\ub85c \ub80c\ub354\ub9c1 \ud558\uba74 Syntax HighLighter \uc801\uc6a9\ub418\uc5b4\uc11c \ub80c\ub354\ub9c1 \ub418\uba74 \uc88b\uaca0\uc74c [\ucee8\ud150\uce20 \uae30\ub85d\uc744 \uc704\ud55c \uc791\uc5c5] \uac04\ub2e8\ud55c screen capture\ub85c gif\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c screen to gif \uc124\uce58 https://www.screentogif.com/ [\uc11c\ubc84 \uc791\uc5c5] \uc624\ub298 \ubaa9\ud45c\ub294 \uc784\uc2dc\ub85c django\ub97c \uc774\uc6a9\ud574\uc11c page\ub97c \ub744\uc6b8 \uc815\ub3c4\ub9cc \ub9cc\ub4dc\ub294 \uac83\uc774 \uc11c\ubc84 \uc791\uc5c5\uc758 \ubaa9\ud45c\uc785\ub2c8\ub2e4. aws light sail\uc5d0\uc11c \uc11c\ubc84 \uc784\ub300 ubuntu 20.04 LTS : \uc544\uc9c1\uc740 \uc870\uae08 \ubd88\uc548\uc815\ud560 \uc218\ub3c4 \uc788\uc744 \uac83 \uac19\uc740\ub370 \uadf8\ub798\ub3c4 20\ub144\uc774 \uc9c0\ub0ac\uc73c\ub2c8\uae4c 20.04\ub3c4 \uad1c\ucc2e\uc9c0 \uc54a\uc744\uae4c \ud558\uba74\uc11c \uc124\uce58\ud588\uc2b5\ub2c8\ub2e4. vs code \uc6d0\uaca9 \uc811\uc18d \ud658\uacbd \uc124\uc815 ssh key\ub97c \uc0dd\uc131\ud574\uc11c, \ud328\uc2a4\uc6cc\ub4dc \uc5c6\uc774 \uc811\uc18d\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uc815 \uc124\uc815\uc744 \ud558\uace0 \ub098\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud3b8\ud558\uac8c \uc6d0\uaca9 \ud658\uacbd\uc5d0 \uc811\uc18d\ud560 \uc218 \uc788\uc74c \uc11c\ubc84\uc5d0 \ub300\ud55c \uac04\ub2e8\ud55c \uba85\ub839\ub4e4 \uc218\ud589(\uc7a5\uace0\ub85c \uc77c\ub2e8 \uc11c\ubc84\ub97c \ub3cc\ub9ac\uae30 \uc704\ud55c \uc784\uc2dc \uc11c\ubc84 \uad6c\ucd95) \uba85\ub839\uc5b4 \uc2e4\ud589 1 2 3 4 5 sudo apt-get update && sudo apt-get upgrade sudo apt-get install python3-dev sudo apt-get install python3-pip pip3 install django git clone https://github.com/noelbird/site-my-thinking \uc774\ud6c4, django \uc791\uc5c5 \ub0b4\uc6a9 \uc624\ub298\uae4c\uc9c0 django \uc791\uc5c5\ud55c \uac83 \ub9cc\ub9cc\ud55c bootstrap \uc801\uc6a9 django\ub85c \ub300\ub7b5\uc801\uc778 layout \uc7a1\uc544\ubd24\uc74c(\uae30\ub85d\uc774 \uc5b4\ub290\uc815\ub3c4 \uac00\ub2a5\ud55c \uc815\ub3c4\ub85c\ub9cc \ub9cc\ub4e4\uace0, \uc774\ud6c4\uc5d0 spring\uc73c\ub85c \uc544\uc608 \ub118\uc5b4\uac08 \uac83) markdown renderer \uc801\uc6a9: mistune 2.0.0rc1 \uc544\uc9c1\uae4c\uc9c0 \ucee8\ud150\uce20\ub4e4 \ub9ac\uc2a4\ud2b8\ub97c \ubcf4\uc5ec\uc8fc\ub294 \ubaa9\ub85d\uc740 \uc5c6\uc74c markdown\uc758 \uc774\ubbf8\uc9c0 \uc815\uc0c1\uc801\uc73c\ub85c \ubcf4\uc5ec\uc9c0\uc9c0 \uc54a\uc74c server\ub97c \uc678\ubd80\ub178\ucd9c \uc2dc\ud0a4\uae30 \uc704\ud574 \ubc29\ud654\ubcbd \ud574\uc81c 80\ud3ec\ud2b8\ub294 \uc678\ubd80\uc5d0\uc11c \uc790\uafb8 \uc811\uc18d \uc2dc\ub3c4\ub97c \ud558\uae30 \ub54c\ubb38\uc5d0 50080\uc73c\ub85c \uc784\uc2dc\ub85c \ub6ab\uc5b4\ub1a8\uc2b5\ub2c8\ub2e4. wappalyzer \uc124\uce58 wappalyzer\ub294 \ub2e4\ub978 \uc0ac\uc774\ud2b8\uc758 \uac1c\ubc1c \uc2a4\ud0dd\uc744 \ud30c\uc545\ud560 \uc218 \uc788\ub294 \ub3c4\uad6c\uc785\ub2c8\ub2e4. \ub2e4\ub978 \uc0ac\uc774\ud2b8\ub4e4\uc744 \ub3cc\uc544\ub2e4\ub2c8\uba74\uc11c, \uad1c\ucc2e\uc740 \uc2a4\ud0dd\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\uba74 \ucc38\uace0\ud558\uae30 \uc704\ud574\uc11c \uc124\uce58\ud588\uc2b5\ub2c8\ub2e4. gabia: google analytics\uc640 Element UI\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub124\uc694. Element UI\ub294 vue\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 UI Library\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud639\uc2dc\ub098 \ub098\uc911\uc5d0 vue\ub97c \uc0ac\uc6a9\ud558\uac8c \ub41c\ub2e4\uba74 \uae54\ub054\ud558\uae30 \ub54c\ubb38\uc5d0 \ucc38\uace0\ud560\ub9cc \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. intelliJ \uc124\uce58 \uc644\ub8cc(spring kotlin\uc73c\ub85c \uc11c\ubc84\ub97c \uad6c\ucd95\ud558\uae30 \uc704\ud574\uc11c \ud658\uacbd \uc138\ud305) [\uc11c\ubc84 \uc791\uc5c5 - TODO] google analytics \ubd99\uc774\uae30 [C++\ub85c \ubc30\uc6b0\ub294 \ub525\ub7ec\ub2dd \uacf5\ubd80] \uad50\uc7ac: \uc131\uc548\ub2f9 - C++\ub85c \ubc30\uc6b0\ub294 \ub525\ub7ec\ub2dd 1\ud310 Chapter 01. \ub525\ub7ec\ub2dd \uac1c\uc694 p. 15 map map\uc5d0 \uad00\ud55c \uc0dd\uac01 \ucc45\uc5d0 \ub098\uc640 \uc788\ub294 \uc608\uc2dc \ucf54\ub4dc - map\uc5d0 \ub300\ud55c \uc18c\uac1c\ub97c \ud558\ub294 \ucf54\ub4dc\uc785\ub2c8\ub2e4. 1 2 3 4 5 // example.cpp Graph * g = new Graph (); map < string , Graph *> m ; m [ \"variable1\" ] = g ; // \ud0a4-\uac12\uc744 \uc9c0\uc815\ud574\uc11c \uc0bd\uc785 Graph * g2 = m [ \"variable1\" ]; // \ud0a4\ub85c \ucc38\uc870 \ucc45\uc5d0\ub294 map\uc774\ub77c\ub294 C++ STL container\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc map\uc740 tree\uad6c\uc870\ub85c \ub418\uc5b4 \uc788\uace0, unordered_map\uc774 hash\ub85c \uad6c\ud604\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0, \uc544\uc774\ud15c\uc758 \uac1c\uc218\uac00 \ub9ce\uc544\uc9c0\uba74 \ub9ce\uc544\uc9c8 \uc218\ub85d map\uc774 unordered_map\uc5d0 \ube44\ud574\uc11c \uc131\ub2a5\uc774 \ub5a8\uc5b4\uc9c8 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \uc870\uae08 \uc544\uc27d\uc2b5\ub2c8\ub2e4. unordered_map\uc5d0 \ub300\ud55c \uc18c\uac1c\ub294 \uc5c6\ub124\uc694 p. 18 \ud2b8\ub9ac\uad6c\uc870 \ucc45\uc5d0 \uc788\ub294 \uc608\uc2dc \ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 // [\ucf54\ub4dc1.9] main.cpp #include <iostream> #include <stdio.h> #include <vector> #include <memory> using namespace std ; class Function ; class Variable { public : float a = 0 ; Function * creator = NULL ; Variable ( float a ){ this -> a = a ; } }; using PVariable = shared_ptr < Variable > ; class Function { public : vector < PVariable > v ; PVariable forward ( PVariable v1 , PVariable v2 ) { v . push_back ( v1 ); v . push_back ( v2 ); PVariable pv = PVariable ( new Variable ( 0 )); pv -> creator = this ; pv -> a += v1 -> a ; pv -> a += v2 -> a ; return pv ; } } PVariable forward ( PVariable v1 ){ v . push_back ( v1 ); PVariable pv = PVariable ( new Variable ( 0 )); pv -> creator = this ; pv -> a += v1 -> a ; return pv ; } void traverse ( PVariable v ){ cout << v -> a << endl ; Function * f = v -> creator ; if ( f == NULL ) return ; for ( int i = 0 ; i < f -> v . size (); i ++ ){ traverse ( f -> v [ i ]); } } int main ( void ){ PVariable v1 = PVariable ( new Variable ( 1 )); PVariable v2 = PVariable ( new Variable ( 2 )); Function * f1 = new Function (); Function * f2 = new Function (); Function * f3 = new Function (); PVariable r1 = f1 -> forward ( v1 , v2 ); PVariable r2 = f2 -> forward ( r1 ); PVariable r3 = f3 -> forward ( r2 ); traverse ( r3 ); return 0 ; } (TODO: markdown\uc5d0\uc11c \ucf54\ub4dc \uc791\uc131\ud588\uc744 \ub54c, html\ub85c \ub80c\ub354\ub9c1 \ud558\uba74 Syntax HighLighter \uc801\uc6a9\ub418\uc5b4\uc11c \ub80c\ub354\ub9c1 \ub418\uba74 \uc88b\uaca0\uc74c) (TODO: TODO\uac00 \ub9ce\uc544\uc11c todo\ub97c \uad00\ub9ac\ud558\ub294 \ubc29\ubc95\uc774 \ub3c4\uc785\ub418\uba74 \uc88b\uaca0\uc74c. jira\uc5d0\uc11c \uad00\ub9ac \ud558\uac70\ub098 \uadf8\ub0e5 \uad00\ub9ac\ud558\ub294 \ud234\uc744 \ub9cc\ub4e4\uac70\ub098..) \uc774 \ucf54\ub4dc\uc5d0 \ub300\ud55c \ub0b4 \uc0dd\uac01 using PVariable = shared_ptr<Variable>; \ubd80\ubd84 - shared_ptr \uad6c\ud604\uc5d0\uc11c weak ptr\ub85c \ud574\uc57c \uba54\ubaa8\ub9ac \ub204\uc218\uac00 \uc5c6\uc744 \uac83 \uc8fc\ub85c \uc774 \ubd80\ubd84\uc5d0\ub294 \uc608\uc804\uc5d0 \uacf5\ubd80\ud588\ub358 C++\uc744 \ubcf5\uc2b5\ud558\uba74\uc11c \ubd24\uc2b5\ub2c8\ub2e4.(POCU teachable \ucc38\uc870) \uc911\uc694\ud55c \uc810\uc740 shared_ptr\uc744 \uc0ac\uc6a9\ud560 \ub54c\ub294 \ub2e4\ub978 \ud074\ub798\uc2a4\uc5d0\uc11c \uba64\ubc84 \ubcc0\uc218\ub85c shared_ptr\uc744 \uac00\uc9c0\uace0 \uc788\uc744 \ub54c, \ud074\ub798\uc2a4 \uac04\uc758 \uc21c\ud658 \ucc38\uc870\ub97c \uc8fc\uc758\ud574\uc57c \ud55c\ub2e4\ub294 \uc810\uc785\ub2c8\ub2e4. \ud558\ub098\ub294 weak_ptr\uc744 \uc0ac\uc6a9\ud574\uc11c \uba64\ubc84 \ubcc0\uc218\ub85c \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c \uc21c\ud658\ucc38\uc870\uc5d0 \uc758\ud55c \uba54\ubaa8\ub9ac \ub204\uc218\uac00 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. shared_ptr\ub294 \ub0b4\ubd80\uc801\uc73c\ub85c \ub450 \uac1c\uc758 \ud3ec\uc778\ud130\ub97c \uc18c\uc720\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4(\ub370\uc774\ud130(\uc6d0\uc2dc) \ud3ec\uc778\ud130, \uc81c\uc5b4\ube14\ub85d\uc744 \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130). shared_ptr\ub294 unique_ptr\uc640\ub294 \ub2ec\ub9ac \ud3ec\uc778\ud130\ub97c \ub2e4\ub978 shared_ptr\uc640 \uacf5\uc720\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucc38\uc870 \uce74\uc6b4\ud305 \uae30\ubc18\uc73c\ub85c \ub3d9\uc791\ud568 \uc6d0\uc2dc \ud3ec\uc778\ud130\ub294 \uc5b4\ub5a0\ud55c shared_ptr\uc5d0\uac8c\ub3c4 \ucc38\uc870\ub418\uc9c0 \uc54a\uc744 \ub54c \uc18c\uba78\ub428 shared_ptr\uc744 \uc0ac\uc6a9\ud558\ub824\uba74, #include <memory> \ub97c \ud574\uc918\uc57c \ud588\ub358 \uac78\ub85c \uae30\uc5b5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc717\ucabd\uc5d0\uc11c memory\ub97c \uc778\ud074\ub8e8\ub4dc\ud55c \uac83 \uac19\uc2b5\ub2c8\ub2e4. PVariable\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0, shared_ptr\uc744 \ub9cc\ub4e4\uace0\uc790 \ud55c\ub2e4\uba74, \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uc608\uc804\uc5d0 \uacf5\ubd80\ud588\ub358 C++ \ubcf5\uc2b5\ucc28\uc6d0) 1 std :: shared_ptr < Variable > vector = std :: make_shared < Variable > ( 0.0f ); \ub9cc\uc57d \uc544\ub798\uc640 \uac19\uc774 \ud3ec\uc778\ud130\ub97c \uacf5\uc720\ud558\uac8c \ub418\uba74, strong refs \uce74\uc6b4\ud2b8\uac00 \ub298\uc5b4\ub098\uac8c \ub418\uace0, weak_refs \uce74\uc6b4\ud2b8\ub294 \ub298\uc5b4\ub098\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. (\uc798 \ubabb\ub41c \uc0ac\uc6a9\ubc95) 1 2 std :: shared_ptr < Variable > vector = std :: make_shared < Variable > ( 0.0f ); std :: shared_ptr < Variable > copiedVector = vector ; \uc544\ub798\uc758 \uba85\ub839\uc5b4\ub85c vector\ub97c \ube44\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 vector . reset () // vector = null; \uacfc \uac19\uc74c. \ucc38\uc870 \uce74\uc6b4\ud2b8\uac00 1\uc774 \uc904\uc5b4\ub4e6 \uc544\ub798\uc758 \uba85\ub839\uc5b4\ub85c \ucc38\uc870 \ud69f\uc218\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 long number = vector . use_count (); Chapter 02. \uc2e0\uacbd\ub9dd\uc744 \uc704\ud55c \ud589\ub82c \uc5f0\uc0b0\uacfc \ubcd1\ub82c \ud504\ub85c\uadf8\ub798\ubc0d 2.1. GPU \ud65c\uc6a9\ud558\uae30 p.25 \ubcd1\ub82c \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uc911\uc694\uc131 \ucc98\ub9ac\uc758 \ubcd1\ub82c\ud654\ub294 \uc2e0\uacbd\ub9dd\uacfc \uc9c1\uc811 \uad00\ub828\ub41c \uae30\uc220\uc740 \uc544\ub2d9\ub2c8\ub2e4...(\uc911\ub7b5) \ubb3c\ub860 \uc778\ud504\ub77c\uc801\uc778 \ubd80\ubd84\uc740 \ube14\ub799\ubc15\uc2a4\ud654\ub418\uc5b4 \uc788\uc73c\ub2c8 \ubab0\ub77c\ub3c4 \uc0c1\uad00\uc5c6\ub2e4\uace0 \ud558\ub294 \uc0ac\ub78c\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \uae30\ucd08\ub97c \uc774\ud574\ud558\uc9c0 \uc54a\uc740 \ucc44 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\uba74, \ub73b\ubc16\uc758 \uc7a5\ubcbd\uc5d0 \ubd80\ub2e5\uce60 \uac00\ub2a5\uc131\uc774 \ub192\uc544\uc9c0\ub294 \uac83\uc740 \ubd80\uc815\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc608\uc0c1 \ubc16\uc758 \uc77c\uc774 \ubc1c\uc0dd\ud588\uc744 \ub54c \uc5b4\ub5bb\uac8c \ub300\ucc98\ud560 \uc218 \uc788\uc744\uc9c0\ub294 \uc751\uc6a9\ub825\uc5d0 \ub2ec\ub838\uc2b5\ub2c8\ub2e4. \ub610 \uc644\uc804\ud788 \uc0c8\ub85c\uc6b4 \ubb54\uac00\ub97c \ub9cc\ub4e4\uc5b4 \ub0b4\ub294 \ud798\ub3c4 \ud0c4\ud0c4\ud788 \uc313\uc778 \uae30\ucd08\uc5d0\uc11c \ub098\uc624\ub294 \uc751\uc6a9\ub825\uc5d0 \ub2ec\ub838\ub2e4\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4. \uc800\uc790\uac00 \ub9d0\ud55c \uac83\ucc98\ub7fc \uc778\ud504\ub77c\uc801\uc778 \ubd80\ubd84\uc740 \ub525\ub7ec\ub2dd\uacfc \uc9c1\uc811\uc801\uc778 \uad00\ub828\uc774 \uc5c6\ub2e4\uace0 \ub9d0\ud560 \uc218\ub3c4 \uc788\uaca0\uc9c0\ub9cc, inference \uc18d\ub3c4 \ucd5c\uc801\ud654 \ubd80\ubd84\uc5d0\uc11c\ub294 \ubc18\ub4dc\uc2dc \ud544\uc694\ud55c \ubd80\ubd84\uc774\uae30 \ub54c\ubb38\uc5d0 \uc911\uc694\ud558\ub2e4\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud0c4\ud0c4\ud788 \uc313\uc778 \uae30\ucd08\uc5d0\uc11c \uc644\uc804\ud788 \uc0c8\ub85c\uc6b4 \ubb54\uac00\ub97c \ub9cc\ub4e4\uc5b4\ub0b4\ub294 \ud798\uc774 \uc0dd\uae34\ub2e4\uace0 \ud558\ub294 \uac83\uc5d0\ub294 \uc644\uc804\ud788 \ub3d9\uac10\ud569\ub2c8\ub2e4. \ucc45\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ud658\uacbd CPU: \uc778\ud154 \ucf54\uc5b4 i7 \uba54\ubaa8\ub9ac: 16GB GPU: \uc5d4\ube44\ub514\uc544 \ud0c0\uc774\ud0c4 X OS: \ub9ac\ub205\uc2a4(\uc6b0\ubd84\ud22c 16.04) CUDA \ud234\ud0b7\ubc84\uc804: 8.0 \uc2e4\uc2b5 \ud658\uacbd \uc138\ud305(\uc9d1\uc5d0 \uc788\ub294 \ub370\uc2a4\ud06c\ud0d1) CPU: AMD Ryzen 5 5600X 6-Core (12 CPUs, ~3.7GHz) \uba54\ubaa8\ub9ac: 32GB OS: windows 10 GPU: nvidia RTX 3070 (memory 8GB) CUDA \ud234\ud0b7 \ubc84\uc804: 11.0 2-2. CUDA \ud504\ub85c\uadf8\ub798\ubc0d p.28 CUDA \ucee4\ub110 CUDA \ucee4\ub110\uc774\ub780 \uc2e4\ud589\uc758 \ucd5c\uc18c\ub2e8\uc704\ub97c \uc815\uc758\ud558\ub294 \ud568\uc218\uc785\ub2c8\ub2e4. CUDA \ucee4\ub110\uc5d0 \uc815\uc758\ub41c \ub0b4\uc6a9\uc744 \ubcf5\uc218\uc758 \uc2a4\ub808\ub4dc\uac00 \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc608\uc81c \ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // [\ucf54\ub4dc 2.2] kernel_sample.cpp // \ucee4\ub110 \uc815\uc758 __global__ void MatAdd ( float A [ N ][ N ], float B [ N ][ N ], float C [ N ][ N ]) { int i = threadIdx . x ; int j = threadIdx . y ; C [ i ][ j ] = A [ i ][ j ] + B [ i ][ j ]; } int main () { float * A , * B , * C ; int N = 100 ; cudaMalloc (( void ** ) & A , N * N * sizeof ( float )); cudaMalloc (( void ** ) & B , N * N * sizeof ( float )); cudaMalloc (( void ** ) & C , N * N * sizeof ( float )); float * a = malloc ( N * N * sizeof ( float )); float * b = malloc ( N * N * sizeof ( float )); float * c = malloc ( N * N * sizeof ( float )); cudaMemcpy ( A , a , N * N * sizeof ( * A ), cudaMemcpyHostTodevice ); cudaMemcpy ( B , b , N * N * sizeof ( * B ), cudaMemcpyHostTodevice ); // N * N * 1threads\uc758 \ud55c \ube14\ub85d\uacfc \ud568\uaed8 \uc2e4\ud589\ub418\ub294 \ucee4\ub110 \uc778\ubcf4\ucf00\uc774\uc158 int numBlocks = 1 ; dim3 threadsPerBlock ( N , N ); MatAdd <<< numblocks , threadsPerBloc >>> ( A , B , C ); cudaMemcpy ( c , C , N * N * sizeof ( * C ), cudaMemcpyHostToDevice ); cudaFree ( A ); cudaFree ( B ); cudaFree ( C ); } \uc704\uc758 \ucf54\ub4dc\ub97c \ucef4\ud30c\uc77c\ud558\uae30 \uc704\ud574\uc11c, visual studio 2019\ub97c \uc124\uce58\ud588\uc2b5\ub2c8\ub2e4(vs code \uc544\ub2d8). C++ \ub370\uc2a4\ud06c\ud1b1 \uac1c\ubc1c \uae30\ub2a5 \uc800\ub294 \uc704\uc758 \uc2e4\uc2b5 \ud658\uacbd\uc744 visual studio\uc5d0\uc11c cmake\ub97c \uc0ac\uc6a9\ud574\uc11c \ud658\uacbd \uc124\uc815\uc744 \ud55c \ub2e4\uc74c, visual studio\ub85c \ube4c\ub4dc\ub97c \ud558\ub3c4\ub85d \ud560 \uc608\uc815\uc785\ub2c8\ub2e4. \uc0dd\uac01\ubcf4\ub2e4 \uc124\uce58\uac00 \uc27d\uac8c \ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. visual studio\ub97c \uc124\uce58\ud55c \ud6c4\uc5d0 cuda\ub97c \uc124\uce58\ud558\uba74 \ub420 \uac83 \uac19\uae30\ub3c4 \ud558\uace0... \uc544\ub798\uc758 \ube14\ub85c\uadf8\ub97c \ucc38\uace0\ud574\uc11c \ub2e4\uc74c\uc5d0 \ud574\ubcfc \uacc4\ud68d\uc785\ub2c8\ub2e4. https://velog.io/@springkim/CUDA-CUDA-8.09.0-Visual-Studio-2015-%EC%84%A4%EC%A0%95","title":"2021-02-21"},{"location":"daily/2021-02-21/#_1","text":"vscode\uc5d0\uc11c \uc6d0\uaca9 \uc811\uc18d\uc744 \uc124\uc815\ud588\uace0, \uc77c\ub2e8 \ube60\ub978 \uc11c\ube44\uc2a4 \uc62c\ub9ac\uae30\ub97c \uc704\ud574\uc11c \uc7a5\uace0\ub85c \uba3c\uc800 \uc11c\ube44\uc2a4\ud560 \uacc4\ud68d\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub098\uc11c spring\uc5d0 \uc810\uc810 \uc775\uc219\ud574 \uc9c0\uba74, spring\uc73c\ub85c \uac08\uc544\ud0c0\ub824\uace0 \ud569\ub2c8\ub2e4. \uc624\ub298\uc758 \uad81\uae08\uc99d\uc740 spring\uacfc spring boot\ub294 \uc5b4\ub5bb\uac8c \ub2e4\ub978\uac00? \uac00 \uad81\uae08\ud569\ub2c8\ub2e4. \ubb38\ub4dd \ub4dc\ub294 \uc0dd\uac01\uc774 \uad81\uae08\ud55c \uac83\ub4e4\uc744 \uc27d\uac8c \uad00\ub9ac\ud574 \uc8fc\ub294 \uae30\ub2a5\ub3c4 \uc788\uc5c8\uc73c\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4.","title":"\uc11c\ubc84 \uad6c\ucd95"},{"location":"daily/2021-02-21/#_2","text":"(TODO: \uc791\uc5c5\ud55c \uc2dc\uac04\ub4e4\uc744 \uae30\ub85d\ud558\ub294 \uae30\ub2a5\uc774 \uc788\uc73c\uba74 \uc88b\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4) \ucee8\ud150\uce20 \uae30\ub85d\uc744 \uc704\ud55c \uc791\uc5c5(10min) \uc11c\ubc84 \uc791\uc5c5(3h) C++\ub85c \ubc30\uc6b0\ub294 \ub525\ub7ec\ub2dd \uacf5\ubd80(3h): \ub300\ubd80\ubd84\uc758 \uc2dc\uac04\uc744 cuda C++ \ud658\uacbd\uc124\uc815\uc5d0 \uc37c\uc74c...","title":"\uc624\ub298 \ud588\ub358 \uc791\uc5c5\ub4e4"},{"location":"daily/2021-02-21/#_3","text":"TODO \uceec\ub809\ud130 \ub9cc\ub4e4\uae30 \uc791\uc5c5\uc744 \ud558\ub2e4\uac00 \uac11\uc790\uae30 \ub5a0\uc624\ub974\ub294 \uc0dd\uac01\ub4e4\uc774 \uc788\ub294\ub370, \uadf8\uac78 \ubcc4\ub3c4\uc758 \uacf3\uc5d0\ub2e4\uac00 \uc801\uc9c0\ub9d0\uace0 \uc65c \uadf8\ub7f0 \uc0dd\uac01\uc774 \ub4e4\uc5c8\ub294\uc9c0\ub97c \ub2e4\uc2dc \ub5a0\uc62c\ub9b4 \uc218 \uc788\uac8c, \uc791\uc5c5\ud558\ub294 \uacf3\uc5d0\uc11c \uadf8\ub300\ub85c \uc801\uc73c\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. \uc624\ub298\uc740 \uc218\ub3d9 TODO \uceec\ub809\ud130\uac00 \uc791\ub3d9\ud569\ub2c8\ub2e4. :happy: \uc624\ub298\uc758 \uc218\ub3d9 TODO \uceec\ub809\ud130 \uc791\uc5c5\uad00\ub9ac: \uc791\uc5c5\ud55c \uc2dc\uac04\ub4e4\uc744 \uae30\ub85d\ud558\ub294 \uae30\ub2a5 \ub9cc\ub4e4\uae30(jira or python\uc73c\ub85c) \uc11c\ubc84\uc791\uc5c5: google analytics \ubd99\uc774\uae30 \uc11c\ubc84\uc791\uc5c5: markdown\uc5d0\uc11c \ucf54\ub4dc \uc791\uc131\ud588\uc744 \ub54c, html\ub85c \ub80c\ub354\ub9c1 \ud558\uba74 Syntax HighLighter \uc801\uc6a9\ub418\uc5b4\uc11c \ub80c\ub354\ub9c1 \ub418\uba74 \uc88b\uaca0\uc74c [\ucee8\ud150\uce20 \uae30\ub85d\uc744 \uc704\ud55c \uc791\uc5c5] \uac04\ub2e8\ud55c screen capture\ub85c gif\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c screen to gif \uc124\uce58 https://www.screentogif.com/ [\uc11c\ubc84 \uc791\uc5c5] \uc624\ub298 \ubaa9\ud45c\ub294 \uc784\uc2dc\ub85c django\ub97c \uc774\uc6a9\ud574\uc11c page\ub97c \ub744\uc6b8 \uc815\ub3c4\ub9cc \ub9cc\ub4dc\ub294 \uac83\uc774 \uc11c\ubc84 \uc791\uc5c5\uc758 \ubaa9\ud45c\uc785\ub2c8\ub2e4. aws light sail\uc5d0\uc11c \uc11c\ubc84 \uc784\ub300 ubuntu 20.04 LTS : \uc544\uc9c1\uc740 \uc870\uae08 \ubd88\uc548\uc815\ud560 \uc218\ub3c4 \uc788\uc744 \uac83 \uac19\uc740\ub370 \uadf8\ub798\ub3c4 20\ub144\uc774 \uc9c0\ub0ac\uc73c\ub2c8\uae4c 20.04\ub3c4 \uad1c\ucc2e\uc9c0 \uc54a\uc744\uae4c \ud558\uba74\uc11c \uc124\uce58\ud588\uc2b5\ub2c8\ub2e4. vs code \uc6d0\uaca9 \uc811\uc18d \ud658\uacbd \uc124\uc815 ssh key\ub97c \uc0dd\uc131\ud574\uc11c, \ud328\uc2a4\uc6cc\ub4dc \uc5c6\uc774 \uc811\uc18d\ud560 \uc218 \uc788\ub3c4\ub85d \uc124\uc815 \uc124\uc815\uc744 \ud558\uace0 \ub098\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \ud3b8\ud558\uac8c \uc6d0\uaca9 \ud658\uacbd\uc5d0 \uc811\uc18d\ud560 \uc218 \uc788\uc74c \uc11c\ubc84\uc5d0 \ub300\ud55c \uac04\ub2e8\ud55c \uba85\ub839\ub4e4 \uc218\ud589(\uc7a5\uace0\ub85c \uc77c\ub2e8 \uc11c\ubc84\ub97c \ub3cc\ub9ac\uae30 \uc704\ud55c \uc784\uc2dc \uc11c\ubc84 \uad6c\ucd95) \uba85\ub839\uc5b4 \uc2e4\ud589 1 2 3 4 5 sudo apt-get update && sudo apt-get upgrade sudo apt-get install python3-dev sudo apt-get install python3-pip pip3 install django git clone https://github.com/noelbird/site-my-thinking \uc774\ud6c4, django \uc791\uc5c5 \ub0b4\uc6a9 \uc624\ub298\uae4c\uc9c0 django \uc791\uc5c5\ud55c \uac83 \ub9cc\ub9cc\ud55c bootstrap \uc801\uc6a9 django\ub85c \ub300\ub7b5\uc801\uc778 layout \uc7a1\uc544\ubd24\uc74c(\uae30\ub85d\uc774 \uc5b4\ub290\uc815\ub3c4 \uac00\ub2a5\ud55c \uc815\ub3c4\ub85c\ub9cc \ub9cc\ub4e4\uace0, \uc774\ud6c4\uc5d0 spring\uc73c\ub85c \uc544\uc608 \ub118\uc5b4\uac08 \uac83) markdown renderer \uc801\uc6a9: mistune 2.0.0rc1 \uc544\uc9c1\uae4c\uc9c0 \ucee8\ud150\uce20\ub4e4 \ub9ac\uc2a4\ud2b8\ub97c \ubcf4\uc5ec\uc8fc\ub294 \ubaa9\ub85d\uc740 \uc5c6\uc74c markdown\uc758 \uc774\ubbf8\uc9c0 \uc815\uc0c1\uc801\uc73c\ub85c \ubcf4\uc5ec\uc9c0\uc9c0 \uc54a\uc74c server\ub97c \uc678\ubd80\ub178\ucd9c \uc2dc\ud0a4\uae30 \uc704\ud574 \ubc29\ud654\ubcbd \ud574\uc81c 80\ud3ec\ud2b8\ub294 \uc678\ubd80\uc5d0\uc11c \uc790\uafb8 \uc811\uc18d \uc2dc\ub3c4\ub97c \ud558\uae30 \ub54c\ubb38\uc5d0 50080\uc73c\ub85c \uc784\uc2dc\ub85c \ub6ab\uc5b4\ub1a8\uc2b5\ub2c8\ub2e4. wappalyzer \uc124\uce58 wappalyzer\ub294 \ub2e4\ub978 \uc0ac\uc774\ud2b8\uc758 \uac1c\ubc1c \uc2a4\ud0dd\uc744 \ud30c\uc545\ud560 \uc218 \uc788\ub294 \ub3c4\uad6c\uc785\ub2c8\ub2e4. \ub2e4\ub978 \uc0ac\uc774\ud2b8\ub4e4\uc744 \ub3cc\uc544\ub2e4\ub2c8\uba74\uc11c, \uad1c\ucc2e\uc740 \uc2a4\ud0dd\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\uba74 \ucc38\uace0\ud558\uae30 \uc704\ud574\uc11c \uc124\uce58\ud588\uc2b5\ub2c8\ub2e4. gabia: google analytics\uc640 Element UI\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub124\uc694. Element UI\ub294 vue\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 UI Library\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \ud639\uc2dc\ub098 \ub098\uc911\uc5d0 vue\ub97c \uc0ac\uc6a9\ud558\uac8c \ub41c\ub2e4\uba74 \uae54\ub054\ud558\uae30 \ub54c\ubb38\uc5d0 \ucc38\uace0\ud560\ub9cc \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. intelliJ \uc124\uce58 \uc644\ub8cc(spring kotlin\uc73c\ub85c \uc11c\ubc84\ub97c \uad6c\ucd95\ud558\uae30 \uc704\ud574\uc11c \ud658\uacbd \uc138\ud305) [\uc11c\ubc84 \uc791\uc5c5 - TODO] google analytics \ubd99\uc774\uae30 [C++\ub85c \ubc30\uc6b0\ub294 \ub525\ub7ec\ub2dd \uacf5\ubd80] \uad50\uc7ac: \uc131\uc548\ub2f9 - C++\ub85c \ubc30\uc6b0\ub294 \ub525\ub7ec\ub2dd 1\ud310","title":"\uc55e\uc73c\ub85c \ud560 \uc791\uc5c5\ub4e4"},{"location":"daily/2021-02-21/#chapter-01","text":"","title":"Chapter 01. \ub525\ub7ec\ub2dd \uac1c\uc694"},{"location":"daily/2021-02-21/#p-15-map","text":"map\uc5d0 \uad00\ud55c \uc0dd\uac01 \ucc45\uc5d0 \ub098\uc640 \uc788\ub294 \uc608\uc2dc \ucf54\ub4dc - map\uc5d0 \ub300\ud55c \uc18c\uac1c\ub97c \ud558\ub294 \ucf54\ub4dc\uc785\ub2c8\ub2e4. 1 2 3 4 5 // example.cpp Graph * g = new Graph (); map < string , Graph *> m ; m [ \"variable1\" ] = g ; // \ud0a4-\uac12\uc744 \uc9c0\uc815\ud574\uc11c \uc0bd\uc785 Graph * g2 = m [ \"variable1\" ]; // \ud0a4\ub85c \ucc38\uc870 \ucc45\uc5d0\ub294 map\uc774\ub77c\ub294 C++ STL container\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc map\uc740 tree\uad6c\uc870\ub85c \ub418\uc5b4 \uc788\uace0, unordered_map\uc774 hash\ub85c \uad6c\ud604\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0, \uc544\uc774\ud15c\uc758 \uac1c\uc218\uac00 \ub9ce\uc544\uc9c0\uba74 \ub9ce\uc544\uc9c8 \uc218\ub85d map\uc774 unordered_map\uc5d0 \ube44\ud574\uc11c \uc131\ub2a5\uc774 \ub5a8\uc5b4\uc9c8 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 \uc870\uae08 \uc544\uc27d\uc2b5\ub2c8\ub2e4. unordered_map\uc5d0 \ub300\ud55c \uc18c\uac1c\ub294 \uc5c6\ub124\uc694","title":"p. 15 map"},{"location":"daily/2021-02-21/#p-18","text":"\ucc45\uc5d0 \uc788\ub294 \uc608\uc2dc \ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 // [\ucf54\ub4dc1.9] main.cpp #include <iostream> #include <stdio.h> #include <vector> #include <memory> using namespace std ; class Function ; class Variable { public : float a = 0 ; Function * creator = NULL ; Variable ( float a ){ this -> a = a ; } }; using PVariable = shared_ptr < Variable > ; class Function { public : vector < PVariable > v ; PVariable forward ( PVariable v1 , PVariable v2 ) { v . push_back ( v1 ); v . push_back ( v2 ); PVariable pv = PVariable ( new Variable ( 0 )); pv -> creator = this ; pv -> a += v1 -> a ; pv -> a += v2 -> a ; return pv ; } } PVariable forward ( PVariable v1 ){ v . push_back ( v1 ); PVariable pv = PVariable ( new Variable ( 0 )); pv -> creator = this ; pv -> a += v1 -> a ; return pv ; } void traverse ( PVariable v ){ cout << v -> a << endl ; Function * f = v -> creator ; if ( f == NULL ) return ; for ( int i = 0 ; i < f -> v . size (); i ++ ){ traverse ( f -> v [ i ]); } } int main ( void ){ PVariable v1 = PVariable ( new Variable ( 1 )); PVariable v2 = PVariable ( new Variable ( 2 )); Function * f1 = new Function (); Function * f2 = new Function (); Function * f3 = new Function (); PVariable r1 = f1 -> forward ( v1 , v2 ); PVariable r2 = f2 -> forward ( r1 ); PVariable r3 = f3 -> forward ( r2 ); traverse ( r3 ); return 0 ; } (TODO: markdown\uc5d0\uc11c \ucf54\ub4dc \uc791\uc131\ud588\uc744 \ub54c, html\ub85c \ub80c\ub354\ub9c1 \ud558\uba74 Syntax HighLighter \uc801\uc6a9\ub418\uc5b4\uc11c \ub80c\ub354\ub9c1 \ub418\uba74 \uc88b\uaca0\uc74c) (TODO: TODO\uac00 \ub9ce\uc544\uc11c todo\ub97c \uad00\ub9ac\ud558\ub294 \ubc29\ubc95\uc774 \ub3c4\uc785\ub418\uba74 \uc88b\uaca0\uc74c. jira\uc5d0\uc11c \uad00\ub9ac \ud558\uac70\ub098 \uadf8\ub0e5 \uad00\ub9ac\ud558\ub294 \ud234\uc744 \ub9cc\ub4e4\uac70\ub098..) \uc774 \ucf54\ub4dc\uc5d0 \ub300\ud55c \ub0b4 \uc0dd\uac01 using PVariable = shared_ptr<Variable>; \ubd80\ubd84 - shared_ptr \uad6c\ud604\uc5d0\uc11c weak ptr\ub85c \ud574\uc57c \uba54\ubaa8\ub9ac \ub204\uc218\uac00 \uc5c6\uc744 \uac83 \uc8fc\ub85c \uc774 \ubd80\ubd84\uc5d0\ub294 \uc608\uc804\uc5d0 \uacf5\ubd80\ud588\ub358 C++\uc744 \ubcf5\uc2b5\ud558\uba74\uc11c \ubd24\uc2b5\ub2c8\ub2e4.(POCU teachable \ucc38\uc870) \uc911\uc694\ud55c \uc810\uc740 shared_ptr\uc744 \uc0ac\uc6a9\ud560 \ub54c\ub294 \ub2e4\ub978 \ud074\ub798\uc2a4\uc5d0\uc11c \uba64\ubc84 \ubcc0\uc218\ub85c shared_ptr\uc744 \uac00\uc9c0\uace0 \uc788\uc744 \ub54c, \ud074\ub798\uc2a4 \uac04\uc758 \uc21c\ud658 \ucc38\uc870\ub97c \uc8fc\uc758\ud574\uc57c \ud55c\ub2e4\ub294 \uc810\uc785\ub2c8\ub2e4. \ud558\ub098\ub294 weak_ptr\uc744 \uc0ac\uc6a9\ud574\uc11c \uba64\ubc84 \ubcc0\uc218\ub85c \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c \uc21c\ud658\ucc38\uc870\uc5d0 \uc758\ud55c \uba54\ubaa8\ub9ac \ub204\uc218\uac00 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. shared_ptr\ub294 \ub0b4\ubd80\uc801\uc73c\ub85c \ub450 \uac1c\uc758 \ud3ec\uc778\ud130\ub97c \uc18c\uc720\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4(\ub370\uc774\ud130(\uc6d0\uc2dc) \ud3ec\uc778\ud130, \uc81c\uc5b4\ube14\ub85d\uc744 \uac00\ub9ac\ud0a4\ub294 \ud3ec\uc778\ud130). shared_ptr\ub294 unique_ptr\uc640\ub294 \ub2ec\ub9ac \ud3ec\uc778\ud130\ub97c \ub2e4\ub978 shared_ptr\uc640 \uacf5\uc720\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucc38\uc870 \uce74\uc6b4\ud305 \uae30\ubc18\uc73c\ub85c \ub3d9\uc791\ud568 \uc6d0\uc2dc \ud3ec\uc778\ud130\ub294 \uc5b4\ub5a0\ud55c shared_ptr\uc5d0\uac8c\ub3c4 \ucc38\uc870\ub418\uc9c0 \uc54a\uc744 \ub54c \uc18c\uba78\ub428 shared_ptr\uc744 \uc0ac\uc6a9\ud558\ub824\uba74, #include <memory> \ub97c \ud574\uc918\uc57c \ud588\ub358 \uac78\ub85c \uae30\uc5b5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc717\ucabd\uc5d0\uc11c memory\ub97c \uc778\ud074\ub8e8\ub4dc\ud55c \uac83 \uac19\uc2b5\ub2c8\ub2e4. PVariable\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0, shared_ptr\uc744 \ub9cc\ub4e4\uace0\uc790 \ud55c\ub2e4\uba74, \ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uc608\uc804\uc5d0 \uacf5\ubd80\ud588\ub358 C++ \ubcf5\uc2b5\ucc28\uc6d0) 1 std :: shared_ptr < Variable > vector = std :: make_shared < Variable > ( 0.0f ); \ub9cc\uc57d \uc544\ub798\uc640 \uac19\uc774 \ud3ec\uc778\ud130\ub97c \uacf5\uc720\ud558\uac8c \ub418\uba74, strong refs \uce74\uc6b4\ud2b8\uac00 \ub298\uc5b4\ub098\uac8c \ub418\uace0, weak_refs \uce74\uc6b4\ud2b8\ub294 \ub298\uc5b4\ub098\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. (\uc798 \ubabb\ub41c \uc0ac\uc6a9\ubc95) 1 2 std :: shared_ptr < Variable > vector = std :: make_shared < Variable > ( 0.0f ); std :: shared_ptr < Variable > copiedVector = vector ; \uc544\ub798\uc758 \uba85\ub839\uc5b4\ub85c vector\ub97c \ube44\uc6b8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 vector . reset () // vector = null; \uacfc \uac19\uc74c. \ucc38\uc870 \uce74\uc6b4\ud2b8\uac00 1\uc774 \uc904\uc5b4\ub4e6 \uc544\ub798\uc758 \uba85\ub839\uc5b4\ub85c \ucc38\uc870 \ud69f\uc218\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 long number = vector . use_count ();","title":"p. 18 \ud2b8\ub9ac\uad6c\uc870"},{"location":"daily/2021-02-21/#chapter-02","text":"","title":"Chapter 02. \uc2e0\uacbd\ub9dd\uc744 \uc704\ud55c \ud589\ub82c \uc5f0\uc0b0\uacfc \ubcd1\ub82c \ud504\ub85c\uadf8\ub798\ubc0d"},{"location":"daily/2021-02-21/#21-gpu","text":"","title":"2.1. GPU \ud65c\uc6a9\ud558\uae30"},{"location":"daily/2021-02-21/#p25","text":"\ucc98\ub9ac\uc758 \ubcd1\ub82c\ud654\ub294 \uc2e0\uacbd\ub9dd\uacfc \uc9c1\uc811 \uad00\ub828\ub41c \uae30\uc220\uc740 \uc544\ub2d9\ub2c8\ub2e4...(\uc911\ub7b5) \ubb3c\ub860 \uc778\ud504\ub77c\uc801\uc778 \ubd80\ubd84\uc740 \ube14\ub799\ubc15\uc2a4\ud654\ub418\uc5b4 \uc788\uc73c\ub2c8 \ubab0\ub77c\ub3c4 \uc0c1\uad00\uc5c6\ub2e4\uace0 \ud558\ub294 \uc0ac\ub78c\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \uae30\ucd08\ub97c \uc774\ud574\ud558\uc9c0 \uc54a\uc740 \ucc44 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud558\uba74, \ub73b\ubc16\uc758 \uc7a5\ubcbd\uc5d0 \ubd80\ub2e5\uce60 \uac00\ub2a5\uc131\uc774 \ub192\uc544\uc9c0\ub294 \uac83\uc740 \ubd80\uc815\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uc608\uc0c1 \ubc16\uc758 \uc77c\uc774 \ubc1c\uc0dd\ud588\uc744 \ub54c \uc5b4\ub5bb\uac8c \ub300\ucc98\ud560 \uc218 \uc788\uc744\uc9c0\ub294 \uc751\uc6a9\ub825\uc5d0 \ub2ec\ub838\uc2b5\ub2c8\ub2e4. \ub610 \uc644\uc804\ud788 \uc0c8\ub85c\uc6b4 \ubb54\uac00\ub97c \ub9cc\ub4e4\uc5b4 \ub0b4\ub294 \ud798\ub3c4 \ud0c4\ud0c4\ud788 \uc313\uc778 \uae30\ucd08\uc5d0\uc11c \ub098\uc624\ub294 \uc751\uc6a9\ub825\uc5d0 \ub2ec\ub838\ub2e4\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4. \uc800\uc790\uac00 \ub9d0\ud55c \uac83\ucc98\ub7fc \uc778\ud504\ub77c\uc801\uc778 \ubd80\ubd84\uc740 \ub525\ub7ec\ub2dd\uacfc \uc9c1\uc811\uc801\uc778 \uad00\ub828\uc774 \uc5c6\ub2e4\uace0 \ub9d0\ud560 \uc218\ub3c4 \uc788\uaca0\uc9c0\ub9cc, inference \uc18d\ub3c4 \ucd5c\uc801\ud654 \ubd80\ubd84\uc5d0\uc11c\ub294 \ubc18\ub4dc\uc2dc \ud544\uc694\ud55c \ubd80\ubd84\uc774\uae30 \ub54c\ubb38\uc5d0 \uc911\uc694\ud558\ub2e4\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud0c4\ud0c4\ud788 \uc313\uc778 \uae30\ucd08\uc5d0\uc11c \uc644\uc804\ud788 \uc0c8\ub85c\uc6b4 \ubb54\uac00\ub97c \ub9cc\ub4e4\uc5b4\ub0b4\ub294 \ud798\uc774 \uc0dd\uae34\ub2e4\uace0 \ud558\ub294 \uac83\uc5d0\ub294 \uc644\uc804\ud788 \ub3d9\uac10\ud569\ub2c8\ub2e4. \ucc45\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ud658\uacbd CPU: \uc778\ud154 \ucf54\uc5b4 i7 \uba54\ubaa8\ub9ac: 16GB GPU: \uc5d4\ube44\ub514\uc544 \ud0c0\uc774\ud0c4 X OS: \ub9ac\ub205\uc2a4(\uc6b0\ubd84\ud22c 16.04) CUDA \ud234\ud0b7\ubc84\uc804: 8.0 \uc2e4\uc2b5 \ud658\uacbd \uc138\ud305(\uc9d1\uc5d0 \uc788\ub294 \ub370\uc2a4\ud06c\ud0d1) CPU: AMD Ryzen 5 5600X 6-Core (12 CPUs, ~3.7GHz) \uba54\ubaa8\ub9ac: 32GB OS: windows 10 GPU: nvidia RTX 3070 (memory 8GB) CUDA \ud234\ud0b7 \ubc84\uc804: 11.0","title":"p.25 \ubcd1\ub82c \ud504\ub85c\uadf8\ub798\ubc0d\uc758 \uc911\uc694\uc131"},{"location":"daily/2021-02-21/#2-2-cuda","text":"","title":"2-2. CUDA \ud504\ub85c\uadf8\ub798\ubc0d"},{"location":"daily/2021-02-21/#p28-cuda","text":"CUDA \ucee4\ub110\uc774\ub780 \uc2e4\ud589\uc758 \ucd5c\uc18c\ub2e8\uc704\ub97c \uc815\uc758\ud558\ub294 \ud568\uc218\uc785\ub2c8\ub2e4. CUDA \ucee4\ub110\uc5d0 \uc815\uc758\ub41c \ub0b4\uc6a9\uc744 \ubcf5\uc218\uc758 \uc2a4\ub808\ub4dc\uac00 \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc608\uc81c \ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 // [\ucf54\ub4dc 2.2] kernel_sample.cpp // \ucee4\ub110 \uc815\uc758 __global__ void MatAdd ( float A [ N ][ N ], float B [ N ][ N ], float C [ N ][ N ]) { int i = threadIdx . x ; int j = threadIdx . y ; C [ i ][ j ] = A [ i ][ j ] + B [ i ][ j ]; } int main () { float * A , * B , * C ; int N = 100 ; cudaMalloc (( void ** ) & A , N * N * sizeof ( float )); cudaMalloc (( void ** ) & B , N * N * sizeof ( float )); cudaMalloc (( void ** ) & C , N * N * sizeof ( float )); float * a = malloc ( N * N * sizeof ( float )); float * b = malloc ( N * N * sizeof ( float )); float * c = malloc ( N * N * sizeof ( float )); cudaMemcpy ( A , a , N * N * sizeof ( * A ), cudaMemcpyHostTodevice ); cudaMemcpy ( B , b , N * N * sizeof ( * B ), cudaMemcpyHostTodevice ); // N * N * 1threads\uc758 \ud55c \ube14\ub85d\uacfc \ud568\uaed8 \uc2e4\ud589\ub418\ub294 \ucee4\ub110 \uc778\ubcf4\ucf00\uc774\uc158 int numBlocks = 1 ; dim3 threadsPerBlock ( N , N ); MatAdd <<< numblocks , threadsPerBloc >>> ( A , B , C ); cudaMemcpy ( c , C , N * N * sizeof ( * C ), cudaMemcpyHostToDevice ); cudaFree ( A ); cudaFree ( B ); cudaFree ( C ); } \uc704\uc758 \ucf54\ub4dc\ub97c \ucef4\ud30c\uc77c\ud558\uae30 \uc704\ud574\uc11c, visual studio 2019\ub97c \uc124\uce58\ud588\uc2b5\ub2c8\ub2e4(vs code \uc544\ub2d8). C++ \ub370\uc2a4\ud06c\ud1b1 \uac1c\ubc1c \uae30\ub2a5 \uc800\ub294 \uc704\uc758 \uc2e4\uc2b5 \ud658\uacbd\uc744 visual studio\uc5d0\uc11c cmake\ub97c \uc0ac\uc6a9\ud574\uc11c \ud658\uacbd \uc124\uc815\uc744 \ud55c \ub2e4\uc74c, visual studio\ub85c \ube4c\ub4dc\ub97c \ud558\ub3c4\ub85d \ud560 \uc608\uc815\uc785\ub2c8\ub2e4. \uc0dd\uac01\ubcf4\ub2e4 \uc124\uce58\uac00 \uc27d\uac8c \ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. visual studio\ub97c \uc124\uce58\ud55c \ud6c4\uc5d0 cuda\ub97c \uc124\uce58\ud558\uba74 \ub420 \uac83 \uac19\uae30\ub3c4 \ud558\uace0... \uc544\ub798\uc758 \ube14\ub85c\uadf8\ub97c \ucc38\uace0\ud574\uc11c \ub2e4\uc74c\uc5d0 \ud574\ubcfc \uacc4\ud68d\uc785\ub2c8\ub2e4. https://velog.io/@springkim/CUDA-CUDA-8.09.0-Visual-Studio-2015-%EC%84%A4%EC%A0%95","title":"p.28 CUDA \ucee4\ub110"},{"location":"daily/2021-02-22/","text":"github webhook \uc5f0\ub3d9 [\uc11c\ubc84\uc791\uc5c5] github hook\uc758 \uc5f0\ub3d9\uc774 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud604\uc7ac \uc5b4\ub5a4 branch\uc774\ub4e0 push\ub97c \ud558\uba74, \ud648\ud398\uc774\uc9c0\uc758 \ub0b4\uc6a9\uc774 \uc5c5\ub370\uc774\ud2b8\ub418\ub3c4\ub85d \uc124\uc815\ud588\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ubc88\uc5d4, contents \ub514\ub809\ud1a0\ub9ac\uac00 push\ub418\ub294 \uacbd\uc6b0\uc5d0\ub9cc \ud648\ud398\uc774\uc9c0\uc758 \ub0b4\uc6a9\uc774 \uc5c5\ub370\uc774\ud2b8 \ub418\ub3c4\ub85d \ubcc0\uacbd\ud574\uc57c\uaca0\uc2b5\ub2c8\ub2e4.","title":"2021-02-22"},{"location":"daily/2021-02-22/#github-webhook","text":"[\uc11c\ubc84\uc791\uc5c5] github hook\uc758 \uc5f0\ub3d9\uc774 \uc644\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud604\uc7ac \uc5b4\ub5a4 branch\uc774\ub4e0 push\ub97c \ud558\uba74, \ud648\ud398\uc774\uc9c0\uc758 \ub0b4\uc6a9\uc774 \uc5c5\ub370\uc774\ud2b8\ub418\ub3c4\ub85d \uc124\uc815\ud588\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ubc88\uc5d4, contents \ub514\ub809\ud1a0\ub9ac\uac00 push\ub418\ub294 \uacbd\uc6b0\uc5d0\ub9cc \ud648\ud398\uc774\uc9c0\uc758 \ub0b4\uc6a9\uc774 \uc5c5\ub370\uc774\ud2b8 \ub418\ub3c4\ub85d \ubcc0\uacbd\ud574\uc57c\uaca0\uc2b5\ub2c8\ub2e4.","title":"github webhook \uc5f0\ub3d9"},{"location":"daily/2021-03-01/","text":"create table in kotlin sqlite DB\uc5f0\ub3d9 db\uac12\uc744 table\uc5d0 \uc9d1\uc5b4\ub123\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // MainActivitiy.kt class MainActivity : AppCompatActivity () { lateinit var dbHelper : DBHelper lateinit var database : SQLiteDatabase override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) dbHelper = DBHelper ( this , \"newdb.db\" , null , 1 ) database = dbHelper . writableDatabase // insert values into database var contentValues = ContentValues () contentValues . put ( \"txt\" , \"Bulgogi\" ) database . insert ( \"mytable\" , null , contentValues ) // select from db and print something var c : Cursor = database . query ( \"mytable\" , null , null , null , null , null , null ) // while(c.moveToNext()){ // System.out.println(\"txt : \"+c.getString(c.getColumnIndex(\"txt\"))); // } setContentView ( R . layout . activity_main ) var stringAtext : TextView? = findViewById < TextView?> ( R . id . stringA ) c . moveToNext () stringAtext ?. text = c . getString ( c . getColumnIndex ( \"txt\" )) stringAtext ?. setBackgroundColor ( Color . parseColor ( \"#FA8293\" )) } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 <!-- activity_main.xml --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <androidx.constraintlayout.widget.ConstraintLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" tools:context= \".MainActivity\" > <TableLayout android:id= \"@+id/aaba\" android:stretchColumns= \"*\" android:layout_width= \"313dp\" android:layout_height= \"234dp\" tools:layout_editor_absoluteX= \"49dp\" tools:layout_editor_absoluteY= \"56dp\" > <TableRow android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:id= \"@+id/stringA\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"a\" app:layout_constraintBottom_toBottomOf= \"parent\" app:layout_constraintLeft_toLeftOf= \"parent\" app:layout_constraintRight_toRightOf= \"parent\" app:layout_constraintTop_toTopOf= \"parent\" /> <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"b\" app:layout_constraintBottom_toBottomOf= \"parent\" app:layout_constraintLeft_toLeftOf= \"parent\" app:layout_constraintRight_toRightOf= \"parent\" app:layout_constraintTop_toTopOf= \"parent\" /> </TableRow> <TableRow android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> <TableRow android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> <TableRow android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </TableLayout> </androidx.constraintlayout.widget.ConstraintLayout>","title":"2021-03-01"},{"location":"daily/2021-03-01/#create-table-in-kotlin","text":"sqlite DB\uc5f0\ub3d9 db\uac12\uc744 table\uc5d0 \uc9d1\uc5b4\ub123\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // MainActivitiy.kt class MainActivity : AppCompatActivity () { lateinit var dbHelper : DBHelper lateinit var database : SQLiteDatabase override fun onCreate ( savedInstanceState : Bundle?) { super . onCreate ( savedInstanceState ) dbHelper = DBHelper ( this , \"newdb.db\" , null , 1 ) database = dbHelper . writableDatabase // insert values into database var contentValues = ContentValues () contentValues . put ( \"txt\" , \"Bulgogi\" ) database . insert ( \"mytable\" , null , contentValues ) // select from db and print something var c : Cursor = database . query ( \"mytable\" , null , null , null , null , null , null ) // while(c.moveToNext()){ // System.out.println(\"txt : \"+c.getString(c.getColumnIndex(\"txt\"))); // } setContentView ( R . layout . activity_main ) var stringAtext : TextView? = findViewById < TextView?> ( R . id . stringA ) c . moveToNext () stringAtext ?. text = c . getString ( c . getColumnIndex ( \"txt\" )) stringAtext ?. setBackgroundColor ( Color . parseColor ( \"#FA8293\" )) } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 <!-- activity_main.xml --> <?xml version=\"1.0\" encoding=\"utf-8\"?> <androidx.constraintlayout.widget.ConstraintLayout xmlns:android= \"http://schemas.android.com/apk/res/android\" xmlns:app= \"http://schemas.android.com/apk/res-auto\" xmlns:tools= \"http://schemas.android.com/tools\" android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" tools:context= \".MainActivity\" > <TableLayout android:id= \"@+id/aaba\" android:stretchColumns= \"*\" android:layout_width= \"313dp\" android:layout_height= \"234dp\" tools:layout_editor_absoluteX= \"49dp\" tools:layout_editor_absoluteY= \"56dp\" > <TableRow android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" > <TextView android:id= \"@+id/stringA\" android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"a\" app:layout_constraintBottom_toBottomOf= \"parent\" app:layout_constraintLeft_toLeftOf= \"parent\" app:layout_constraintRight_toRightOf= \"parent\" app:layout_constraintTop_toTopOf= \"parent\" /> <TextView android:layout_width= \"match_parent\" android:layout_height= \"wrap_content\" android:text= \"b\" app:layout_constraintBottom_toBottomOf= \"parent\" app:layout_constraintLeft_toLeftOf= \"parent\" app:layout_constraintRight_toRightOf= \"parent\" app:layout_constraintTop_toTopOf= \"parent\" /> </TableRow> <TableRow android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> <TableRow android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> <TableRow android:layout_width= \"match_parent\" android:layout_height= \"match_parent\" /> </TableLayout> </androidx.constraintlayout.widget.ConstraintLayout>","title":"create table in kotlin"},{"location":"daily/2021-03-04/","text":"\ub2ee\uace0 \uc2f6\uc740 \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc758 \uc2b5\uad00 \uc720\ud6a8\ud55c \uc9c8\ubb38\uc744 \ub9ce\uc774 \ud574\uc11c, \ud575\uc2ec\uc5d0 \ube60\ub974\uac8c \ub3c4\ub2ec\ud558\ub294 \uac83 \ud55c \ubd84\uc57c\uc758 \ub3c4\uba54\uc778 \uc9c0\uc2dd\uc774 \ub9ce\uc774 \ucd95\uc801\ub41c \uac83 \ube60\ub974\uac8c \uc9c0\uc2dd\uc744 \ubc30\uc6cc\uc11c \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \uacf5\uc720\ub97c \ud574\uc8fc\ub294 \uac83 \uc0c8\ub85c\uc6b4 \uae30\uc220\uc744 \ub450\ub824\uc6cc \ud558\uc9c0 \uc54a\ub294 \uac83","title":"2021-03-04"},{"location":"daily/2021-03-04/#_1","text":"\uc720\ud6a8\ud55c \uc9c8\ubb38\uc744 \ub9ce\uc774 \ud574\uc11c, \ud575\uc2ec\uc5d0 \ube60\ub974\uac8c \ub3c4\ub2ec\ud558\ub294 \uac83 \ud55c \ubd84\uc57c\uc758 \ub3c4\uba54\uc778 \uc9c0\uc2dd\uc774 \ub9ce\uc774 \ucd95\uc801\ub41c \uac83 \ube60\ub974\uac8c \uc9c0\uc2dd\uc744 \ubc30\uc6cc\uc11c \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc5d0\uac8c \uacf5\uc720\ub97c \ud574\uc8fc\ub294 \uac83 \uc0c8\ub85c\uc6b4 \uae30\uc220\uc744 \ub450\ub824\uc6cc \ud558\uc9c0 \uc54a\ub294 \uac83","title":"\ub2ee\uace0 \uc2f6\uc740 \ub2e4\ub978 \uc0ac\ub78c\ub4e4\uc758 \uc2b5\uad00"},{"location":"daily/2021-03-09/","text":"BST(Binary Search Tree) \ubb38\uc81c https://leetcode.com/problems/binary-search-tree-iterator/ \ub9cc\uc57d, binary search tree\ub97c \uc7ac\uadc0\uc801\uc73c\ub85c \uc21c\ud68c\ud558\uc9c0 \uc54a\uace0, generator\ub97c \ub9cc\ub4e4\uace0\uc790 \ud55c\ub2e4\uba74, \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. root\ub178\ub4dc\ub97c \uae30\uc900\uc73c\ub85c \uac00\uc7a5 \uc67c\ucabd\uc5d0 \uc788\ub294 \uac12(leftmost\ub77c\uace0 \ud558\uc790)\uc774 \uac00\uc7a5 \uc791\uc740 \uac12\uc774 \ub428 \uadf8 \ub2e4\uc74c \uac12\uc744 \ucc3e\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. \ub9cc\uc57d leftmost\uc758 \uc624\ub978\ucabd \uc790\uc2dd\ub178\ub4dc\uac00 \uc788\ub2e4\uba74, \uc624\ub978\ucabd \uc790\uc2dd\ub178\ub4dc\uc758 leftmost\ub97c \ud55c \ubc88 \ub354 \ucc3e\uc544 \ub4e4\uc5b4\uac04 \uac83\uc774 \ub2e4\uc74c \ub178\ub4dc\uac00 \ub41c\ub2e4. \ub9cc\uc57d leftmost\uc758 \uc624\ub978\ucabd \uc790\uc2dd\ub178\ub4dc\uac00 \uc5c6\ub2e4\uba74, \ubd80\ubaa8 \ub178\ub4dc\uc758 \uc624\ub978\ucabd \uc790\uc2dd\ub178\ub4dc\uc758 leftmost\ub97c \ud55c \ubc88 \ub354 \ucc3e\uc544 \ub4e4\uc5b4\uac04 \uac83\uc774 \ub2e4\uc74c \ub178\ub4dc\uac00 \ub41c\ub2e4. \ubd80\ubaa8\uc758 \ub178\ub4dc\ub97c \uc54c\uae30 \uc704\ud574\uc11c\ub294 stack\uc744 \uc0ac\uc6a9\ud574\uc11c \uae30\ub85d\ud558\ub294 \uac83\uc774 \uc88b\ub2e4. \ub0b4 \ud480\uc774(golang) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 /** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ type BSTIterator struct { Stack [] * TreeNode } func Constructor ( root * TreeNode ) BSTIterator { // create Iterator // find leftmost bst := BSTIterator {} for root != nil { bst . Stack = append ( bst . Stack , root ) root = root . Left } return bst } func ( this * BSTIterator ) Next () int { // pop rslt := this . Stack [ len ( this . Stack ) - 1 ] this . Stack = this . Stack [: len ( this . Stack ) - 1 ] if rslt . Right != nil { leftmost := rslt . Right for leftmost != nil { this . Stack = append ( this . Stack , leftmost ) leftmost = leftmost . Left } } return rslt . Val } func ( this * BSTIterator ) HasNext () bool { if len ( this . Stack ) > 0 { return true } else { return false } } /** * Your BSTIterator object will be instantiated and called as such: * obj := Constructor(root); * param_1 := obj.Next(); * param_2 := obj.HasNext(); */","title":"2021-03-09"},{"location":"daily/2021-03-09/#bstbinary-search-tree","text":"","title":"BST(Binary Search Tree)"},{"location":"daily/2021-03-09/#_1","text":"https://leetcode.com/problems/binary-search-tree-iterator/ \ub9cc\uc57d, binary search tree\ub97c \uc7ac\uadc0\uc801\uc73c\ub85c \uc21c\ud68c\ud558\uc9c0 \uc54a\uace0, generator\ub97c \ub9cc\ub4e4\uace0\uc790 \ud55c\ub2e4\uba74, \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. root\ub178\ub4dc\ub97c \uae30\uc900\uc73c\ub85c \uac00\uc7a5 \uc67c\ucabd\uc5d0 \uc788\ub294 \uac12(leftmost\ub77c\uace0 \ud558\uc790)\uc774 \uac00\uc7a5 \uc791\uc740 \uac12\uc774 \ub428 \uadf8 \ub2e4\uc74c \uac12\uc744 \ucc3e\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4. \ub9cc\uc57d leftmost\uc758 \uc624\ub978\ucabd \uc790\uc2dd\ub178\ub4dc\uac00 \uc788\ub2e4\uba74, \uc624\ub978\ucabd \uc790\uc2dd\ub178\ub4dc\uc758 leftmost\ub97c \ud55c \ubc88 \ub354 \ucc3e\uc544 \ub4e4\uc5b4\uac04 \uac83\uc774 \ub2e4\uc74c \ub178\ub4dc\uac00 \ub41c\ub2e4. \ub9cc\uc57d leftmost\uc758 \uc624\ub978\ucabd \uc790\uc2dd\ub178\ub4dc\uac00 \uc5c6\ub2e4\uba74, \ubd80\ubaa8 \ub178\ub4dc\uc758 \uc624\ub978\ucabd \uc790\uc2dd\ub178\ub4dc\uc758 leftmost\ub97c \ud55c \ubc88 \ub354 \ucc3e\uc544 \ub4e4\uc5b4\uac04 \uac83\uc774 \ub2e4\uc74c \ub178\ub4dc\uac00 \ub41c\ub2e4. \ubd80\ubaa8\uc758 \ub178\ub4dc\ub97c \uc54c\uae30 \uc704\ud574\uc11c\ub294 stack\uc744 \uc0ac\uc6a9\ud574\uc11c \uae30\ub85d\ud558\ub294 \uac83\uc774 \uc88b\ub2e4.","title":"\ubb38\uc81c"},{"location":"daily/2021-03-09/#golang","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 /** * Definition for a binary tree node. * type TreeNode struct { * Val int * Left *TreeNode * Right *TreeNode * } */ type BSTIterator struct { Stack [] * TreeNode } func Constructor ( root * TreeNode ) BSTIterator { // create Iterator // find leftmost bst := BSTIterator {} for root != nil { bst . Stack = append ( bst . Stack , root ) root = root . Left } return bst } func ( this * BSTIterator ) Next () int { // pop rslt := this . Stack [ len ( this . Stack ) - 1 ] this . Stack = this . Stack [: len ( this . Stack ) - 1 ] if rslt . Right != nil { leftmost := rslt . Right for leftmost != nil { this . Stack = append ( this . Stack , leftmost ) leftmost = leftmost . Left } } return rslt . Val } func ( this * BSTIterator ) HasNext () bool { if len ( this . Stack ) > 0 { return true } else { return false } } /** * Your BSTIterator object will be instantiated and called as such: * obj := Constructor(root); * param_1 := obj.Next(); * param_2 := obj.HasNext(); */","title":"\ub0b4 \ud480\uc774(golang)"},{"location":"daily/2021-03-11-2/","text":"electron \uc27d\uac8c \uc2dc\uc791\ud558\uae30 1. \uc900\ube44 \uc5b8\uc5b4: nodejs (\uc800\ub294 v14.16\uc744 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4) \ud328\ud0a4\uc9c0 \ub9e4\ub2c8\uc800: yarn 2. \ucf54\ub529 electron \uc124\uce58 1 2 3 4 mkdir electron_app cd electron_app yarn init yarn add electron@beta \ud3f4\ub354 \uad6c\uc870 1 2 3 4 5 electron_app - index.html - main.js - package.json - node_modules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!-- index.html --> <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Hello World! </ title > < meta http-equiv = \"Content-Security-Policy\" content = \"script-src 'self' 'unsafe-inline';\" /> </ head > < body style = \"background: white;\" > < h1 > Hello World! </ h1 > < p > We are using node < script > document . write ( process . versions . node )</ script > , Chrome < script > document . write ( process . versions . chrome )</ script > , and Electron < script > document . write ( process . versions . electron )</ script > . </ p > </ body > </ html > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // main.js const { app , BrowserWindow } = require ( 'electron' ) function createWindow () { const win = new BrowserWindow ({ width : 800 , height : 600 , webPreferences : { nodeIntegration : true } }) win . loadFile ( 'index.html' ) } app . whenReady (). then ( createWindow ) app . on ( 'window-all-closed' , () => { if ( process . platform !== 'darwin' ) { app . quit () } }) app . on ( 'activate' , () => { if ( BrowserWindow . getAllWindows (). length === 0 ) { createWindow () } }) \ud2b9\uc9d5\uc73c\ub85c\ub294 electron\uc758 javascript\ub294 ES6\ubb38\ubc95\uc774 \uc544\ub2cc ES5\ubb38\ubc95\uc744 \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uc810\uc774\uc5c8\uc2b5\ub2c8\ub2e4. react\ub97c \uc62c\ub9ac\ub824\uace0 \ud55c\ub2e4\uba74, babel\uc5d0 webpack\uc744 \uc124\uce58\ud574\uc11c \ubcc0\ud658\uc744 \ud558\ub294 \uacfc\uc815\uc774 \ud544\uc694\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108 \uac19\uc740 \uac83\ub4e4\uc744 \uc0ac\uc6a9\ud574\uc11c \ud2b9\uc815 \ud0a4\uc6cc\ub4dc\ub4e4\uc5d0 \ub300\ud574\uc11c \ud568\uc218\ub97c \uc815\uc758\ud55c \ucf54\ub4dc\uc778\ub4ef \ubcf4\uc785\ub2c8\ub2e4. 3. \uc2e4\ud589 1 2 3 4 5 6 7 8 9 10 11 12 13 // package.jso n { \"devDependencies\" : { \"electron\" : \"^13.0.0-beta.3\" }, \"name\" : \"electron_app\" , \"version\" : \"1.0.0\" , \"main\" : \"main.js\" , \"license\" : \"MIT\" , \"scripts\" : { \"start\" : \"electron .\" } } yarn start \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.","title":"2021-03-11-2"},{"location":"daily/2021-03-11-2/#electron","text":"","title":"electron \uc27d\uac8c \uc2dc\uc791\ud558\uae30"},{"location":"daily/2021-03-11-2/#1","text":"\uc5b8\uc5b4: nodejs (\uc800\ub294 v14.16\uc744 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4) \ud328\ud0a4\uc9c0 \ub9e4\ub2c8\uc800: yarn","title":"1. \uc900\ube44"},{"location":"daily/2021-03-11-2/#2","text":"electron \uc124\uce58 1 2 3 4 mkdir electron_app cd electron_app yarn init yarn add electron@beta \ud3f4\ub354 \uad6c\uc870 1 2 3 4 5 electron_app - index.html - main.js - package.json - node_modules 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 <!-- index.html --> <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Hello World! </ title > < meta http-equiv = \"Content-Security-Policy\" content = \"script-src 'self' 'unsafe-inline';\" /> </ head > < body style = \"background: white;\" > < h1 > Hello World! </ h1 > < p > We are using node < script > document . write ( process . versions . node )</ script > , Chrome < script > document . write ( process . versions . chrome )</ script > , and Electron < script > document . write ( process . versions . electron )</ script > . </ p > </ body > </ html > 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 // main.js const { app , BrowserWindow } = require ( 'electron' ) function createWindow () { const win = new BrowserWindow ({ width : 800 , height : 600 , webPreferences : { nodeIntegration : true } }) win . loadFile ( 'index.html' ) } app . whenReady (). then ( createWindow ) app . on ( 'window-all-closed' , () => { if ( process . platform !== 'darwin' ) { app . quit () } }) app . on ( 'activate' , () => { if ( BrowserWindow . getAllWindows (). length === 0 ) { createWindow () } }) \ud2b9\uc9d5\uc73c\ub85c\ub294 electron\uc758 javascript\ub294 ES6\ubb38\ubc95\uc774 \uc544\ub2cc ES5\ubb38\ubc95\uc744 \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uc810\uc774\uc5c8\uc2b5\ub2c8\ub2e4. react\ub97c \uc62c\ub9ac\ub824\uace0 \ud55c\ub2e4\uba74, babel\uc5d0 webpack\uc744 \uc124\uce58\ud574\uc11c \ubcc0\ud658\uc744 \ud558\ub294 \uacfc\uc815\uc774 \ud544\uc694\ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc774\ubca4\ud2b8 \ub9ac\uc2a4\ub108 \uac19\uc740 \uac83\ub4e4\uc744 \uc0ac\uc6a9\ud574\uc11c \ud2b9\uc815 \ud0a4\uc6cc\ub4dc\ub4e4\uc5d0 \ub300\ud574\uc11c \ud568\uc218\ub97c \uc815\uc758\ud55c \ucf54\ub4dc\uc778\ub4ef \ubcf4\uc785\ub2c8\ub2e4.","title":"2. \ucf54\ub529"},{"location":"daily/2021-03-11-2/#3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 // package.jso n { \"devDependencies\" : { \"electron\" : \"^13.0.0-beta.3\" }, \"name\" : \"electron_app\" , \"version\" : \"1.0.0\" , \"main\" : \"main.js\" , \"license\" : \"MIT\" , \"scripts\" : { \"start\" : \"electron .\" } } yarn start \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.","title":"3. \uc2e4\ud589"},{"location":"daily/2021-03-11/","text":"easy setting for cuda programming 1. \ud658\uacbd OS: windows 10 IDE: visual studio 2019 CUDA Toolkit: 11.2 IDE\uc640 CUDA\ub97c \uc124\uce58\ud55c \ud6c4\uc5d0 visual studio 2019\ub97c \uc2dc\uc791 \ud560 \ub54c \uc0c8 \ud504\ub85c\uc81d\ud2b8\ub97c \ub9cc\ub4e4\uace0, \ud504\ub85c\uc81d\ud2b8 \ud615\uc2dd\uc5d0\uc11c cuda\ub97c \uac80\uc0c9\ud558\uba74 CUDA 11.2 Runtime\uc774 \ub098\uc635\ub2c8\ub2e4. \uc704\uc758 \ud504\ub85c\uc81d\ud2b8\ub97c \uc120\ud0dd\ud574\uc11c \uc2e4\ud589\ud558\uba74, \uace7 \ubc14\ub85c \ube4c\ub4dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c \uc81c\uacf5\ub418\ub294 \uc18c\uc2a4\ucf54\ub4dc\uc640 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 // kernel.cu #include \"cuda_runtime.h\" #include \"device_launch_parameters.h\" #include <stdio.h> cudaError_t addWithCuda ( int * c , const int * a , const int * b , unsigned int size ); __global__ void addKernel ( int * c , const int * a , const int * b ) { int i = threadIdx . x ; c [ i ] = a [ i ] + b [ i ]; } int main () { const int arraySize = 5 ; const int a [ arraySize ] = { 1 , 2 , 3 , 4 , 5 }; const int b [ arraySize ] = { 10 , 20 , 30 , 40 , 50 }; int c [ arraySize ] = { 0 }; // Add vectors in parallel. cudaError_t cudaStatus = addWithCuda ( c , a , b , arraySize ); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"addWithCuda failed!\" ); return 1 ; } printf ( \"{1,2,3,4,5} + {10,20,30,40,50} = {%d,%d,%d,%d,%d} \\n \" , c [ 0 ], c [ 1 ], c [ 2 ], c [ 3 ], c [ 4 ]); // cudaDeviceReset must be called before exiting in order for profiling and // tracing tools such as Nsight and Visual Profiler to show complete traces. cudaStatus = cudaDeviceReset (); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaDeviceReset failed!\" ); return 1 ; } return 0 ; } // Helper function for using CUDA to add vectors in parallel. cudaError_t addWithCuda ( int * c , const int * a , const int * b , unsigned int size ) { int * dev_a = 0 ; int * dev_b = 0 ; int * dev_c = 0 ; cudaError_t cudaStatus ; // Choose which GPU to run on, change this on a multi-GPU system. cudaStatus = cudaSetDevice ( 0 ); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaSetDevice failed! Do you have a CUDA-capable GPU installed?\" ); goto Error ; } // Allocate GPU buffers for three vectors (two input, one output) . cudaStatus = cudaMalloc (( void ** ) & dev_c , size * sizeof ( int )); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaMalloc failed!\" ); goto Error ; } cudaStatus = cudaMalloc (( void ** ) & dev_a , size * sizeof ( int )); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaMalloc failed!\" ); goto Error ; } cudaStatus = cudaMalloc (( void ** ) & dev_b , size * sizeof ( int )); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaMalloc failed!\" ); goto Error ; } // Copy input vectors from host memory to GPU buffers. cudaStatus = cudaMemcpy ( dev_a , a , size * sizeof ( int ), cudaMemcpyHostToDevice ); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaMemcpy failed!\" ); goto Error ; } cudaStatus = cudaMemcpy ( dev_b , b , size * sizeof ( int ), cudaMemcpyHostToDevice ); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaMemcpy failed!\" ); goto Error ; } // Launch a kernel on the GPU with one thread for each element. addKernel <<< 1 , size >>> ( dev_c , dev_a , dev_b ); // Check for any errors launching the kernel cudaStatus = cudaGetLastError (); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"addKernel launch failed: %s \\n \" , cudaGetErrorString ( cudaStatus )); goto Error ; } // cudaDeviceSynchronize waits for the kernel to finish, and returns // any errors encountered during the launch. cudaStatus = cudaDeviceSynchronize (); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaDeviceSynchronize returned error code %d after launching addKernel! \\n \" , cudaStatus ); goto Error ; } // Copy output vector from GPU buffer to host memory. cudaStatus = cudaMemcpy ( c , dev_c , size * sizeof ( int ), cudaMemcpyDeviceToHost ); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaMemcpy failed!\" ); goto Error ; } Error : cudaFree ( dev_c ); cudaFree ( dev_a ); cudaFree ( dev_b ); return cudaStatus ; } \ucf54\ub4dc\uc5d0\uc11c goto\ubb38\uc744 \uc0ac\uc6a9\ud55c \ub2e4\ub294 \uac83\uc774 \uaf64 \ucda9\uaca9\uc801\uc774\ub124\uc694.. \uacf5\uc2dd \uc608\uc81c\uc778\ub370 goto\ubb38\uc744 \uc0ac\uc6a9\ud560 \uc0dd\uac01\uc744 \ud558\ub2e4\ub2c8... \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ub098\uc635\ub2c8\ub2e4.","title":"2021-03-11"},{"location":"daily/2021-03-11/#easy-setting-for-cuda-programming","text":"","title":"easy setting for cuda programming"},{"location":"daily/2021-03-11/#1","text":"OS: windows 10 IDE: visual studio 2019 CUDA Toolkit: 11.2 IDE\uc640 CUDA\ub97c \uc124\uce58\ud55c \ud6c4\uc5d0 visual studio 2019\ub97c \uc2dc\uc791 \ud560 \ub54c \uc0c8 \ud504\ub85c\uc81d\ud2b8\ub97c \ub9cc\ub4e4\uace0, \ud504\ub85c\uc81d\ud2b8 \ud615\uc2dd\uc5d0\uc11c cuda\ub97c \uac80\uc0c9\ud558\uba74 CUDA 11.2 Runtime\uc774 \ub098\uc635\ub2c8\ub2e4. \uc704\uc758 \ud504\ub85c\uc81d\ud2b8\ub97c \uc120\ud0dd\ud574\uc11c \uc2e4\ud589\ud558\uba74, \uace7 \ubc14\ub85c \ube4c\ub4dc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c \uc81c\uacf5\ub418\ub294 \uc18c\uc2a4\ucf54\ub4dc\uc640 \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 // kernel.cu #include \"cuda_runtime.h\" #include \"device_launch_parameters.h\" #include <stdio.h> cudaError_t addWithCuda ( int * c , const int * a , const int * b , unsigned int size ); __global__ void addKernel ( int * c , const int * a , const int * b ) { int i = threadIdx . x ; c [ i ] = a [ i ] + b [ i ]; } int main () { const int arraySize = 5 ; const int a [ arraySize ] = { 1 , 2 , 3 , 4 , 5 }; const int b [ arraySize ] = { 10 , 20 , 30 , 40 , 50 }; int c [ arraySize ] = { 0 }; // Add vectors in parallel. cudaError_t cudaStatus = addWithCuda ( c , a , b , arraySize ); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"addWithCuda failed!\" ); return 1 ; } printf ( \"{1,2,3,4,5} + {10,20,30,40,50} = {%d,%d,%d,%d,%d} \\n \" , c [ 0 ], c [ 1 ], c [ 2 ], c [ 3 ], c [ 4 ]); // cudaDeviceReset must be called before exiting in order for profiling and // tracing tools such as Nsight and Visual Profiler to show complete traces. cudaStatus = cudaDeviceReset (); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaDeviceReset failed!\" ); return 1 ; } return 0 ; } // Helper function for using CUDA to add vectors in parallel. cudaError_t addWithCuda ( int * c , const int * a , const int * b , unsigned int size ) { int * dev_a = 0 ; int * dev_b = 0 ; int * dev_c = 0 ; cudaError_t cudaStatus ; // Choose which GPU to run on, change this on a multi-GPU system. cudaStatus = cudaSetDevice ( 0 ); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaSetDevice failed! Do you have a CUDA-capable GPU installed?\" ); goto Error ; } // Allocate GPU buffers for three vectors (two input, one output) . cudaStatus = cudaMalloc (( void ** ) & dev_c , size * sizeof ( int )); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaMalloc failed!\" ); goto Error ; } cudaStatus = cudaMalloc (( void ** ) & dev_a , size * sizeof ( int )); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaMalloc failed!\" ); goto Error ; } cudaStatus = cudaMalloc (( void ** ) & dev_b , size * sizeof ( int )); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaMalloc failed!\" ); goto Error ; } // Copy input vectors from host memory to GPU buffers. cudaStatus = cudaMemcpy ( dev_a , a , size * sizeof ( int ), cudaMemcpyHostToDevice ); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaMemcpy failed!\" ); goto Error ; } cudaStatus = cudaMemcpy ( dev_b , b , size * sizeof ( int ), cudaMemcpyHostToDevice ); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaMemcpy failed!\" ); goto Error ; } // Launch a kernel on the GPU with one thread for each element. addKernel <<< 1 , size >>> ( dev_c , dev_a , dev_b ); // Check for any errors launching the kernel cudaStatus = cudaGetLastError (); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"addKernel launch failed: %s \\n \" , cudaGetErrorString ( cudaStatus )); goto Error ; } // cudaDeviceSynchronize waits for the kernel to finish, and returns // any errors encountered during the launch. cudaStatus = cudaDeviceSynchronize (); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaDeviceSynchronize returned error code %d after launching addKernel! \\n \" , cudaStatus ); goto Error ; } // Copy output vector from GPU buffer to host memory. cudaStatus = cudaMemcpy ( c , dev_c , size * sizeof ( int ), cudaMemcpyDeviceToHost ); if ( cudaStatus != cudaSuccess ) { fprintf ( stderr , \"cudaMemcpy failed!\" ); goto Error ; } Error : cudaFree ( dev_c ); cudaFree ( dev_a ); cudaFree ( dev_b ); return cudaStatus ; } \ucf54\ub4dc\uc5d0\uc11c goto\ubb38\uc744 \uc0ac\uc6a9\ud55c \ub2e4\ub294 \uac83\uc774 \uaf64 \ucda9\uaca9\uc801\uc774\ub124\uc694.. \uacf5\uc2dd \uc608\uc81c\uc778\ub370 goto\ubb38\uc744 \uc0ac\uc6a9\ud560 \uc0dd\uac01\uc744 \ud558\ub2e4\ub2c8... \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ub098\uc635\ub2c8\ub2e4.","title":"1. \ud658\uacbd"},{"location":"daily/2021-03-22/","text":"mkdocs\ub85c \uc774\uc8fc mkdocs\uac00 \uac00\uc9c0\ub294 \uc7a5\uc810\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. math jax code highlight multiple tabs mathjax $$y^2$$ python code 1 2 3 print ( \"hello\" ) def hello ( aa ): print ( aa ) C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"2021-03-22"},{"location":"daily/2021-03-22/#mkdocs","text":"mkdocs\uac00 \uac00\uc9c0\ub294 \uc7a5\uc810\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. math jax code highlight multiple tabs mathjax $$y^2$$ python code 1 2 3 print ( \"hello\" ) def hello ( aa ): print ( aa ) C 1 2 3 4 5 6 #include <stdio.h> int main ( void ) { printf ( \"Hello world! \\n \" ); return 0 ; } C++ 1 2 3 4 5 6 #include <iostream> int main ( void ) { std :: cout << \"Hello world!\" << std :: endl ; return 0 ; }","title":"mkdocs\ub85c \uc774\uc8fc"},{"location":"daily/2021-03-24/","text":"\uac1c\ubc1c \uace0\ud004\ub9ac\ud2f0 \uc0ac\uc774\ud2b8\uac00 \ubaa8\uc5ec\uc788\ub294 \uacf3 https://github.com/Integerous/goQuality-dev-contents","title":"2021-03-24"},{"location":"daily/2021-03-24/#_1","text":"https://github.com/Integerous/goQuality-dev-contents","title":"\uac1c\ubc1c \uace0\ud004\ub9ac\ud2f0 \uc0ac\uc774\ud2b8\uac00 \ubaa8\uc5ec\uc788\ub294 \uacf3"},{"location":"daily/2021-03-28/","text":"google codejam \uc608\uc120 1\ubc88 \ubb38\uc81c - reversort input.txt 1 2 3 4 5 6 7 3 4 4 2 1 3 2 1 2 7 7 6 5 4 3 2 1 output.txt 1 2 3 Case #1: 6 Case #2: 1 Case #3: 12 \ub0b4 \ud480\uc774 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import sys sys . stdin = open ( \"1 \\\\ input.txt\" ) T = int ( input ()) def reversort ( l ): cost = 0 len_l = len ( l ) for i in range ( len_l - 1 ): min_idx = l . index ( min ( l )) l [ 0 : min_idx + 1 ] = l [ 0 : min_idx + 1 ][:: - 1 ] cost_i = min_idx + 1 cost += cost_i l . pop ( 0 ) return cost for t in range ( T ): N = int ( input ()) l = list ( map ( int , input () . split ())) cost = reversort ( l ) print ( \"Case # %d : %d \" % ( t + 1 , cost )) 2\ubc88 \ubb38\uc81c input.txt 1 2 3 4 5 4 2 3 CJ?CC? 4 2 CJCJ 1 3 C?J 2 5 ??J??? output.txt 1 2 3 4 Case #1: 5 Case #2: 10 Case #3: 1 Case #4: 0 \ub0b4 \ud480\uc774 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import sys sys . stdin = open ( \"2 \\\\ input.txt\" ) T = int ( input ()) for t in range ( T ): X , Y , ARR = input () . split () X = int ( X ) Y = int ( Y ) cost = 0 ARR = ARR . replace ( \"?\" , \"\" ) for i in range ( len ( ARR )): if ARR [ i : i + 2 ] == \"CJ\" : cost += X elif ARR [ i : i + 2 ] == \"JC\" : cost += Y print ( \"Case # %d : %d \" % ( t + 1 , cost )) 3\ubc88 \ubb38\uc81c input.txt 1 2 3 4 5 6 5 4 6 2 1 7 12 7 2 2 1000 output.txt 1 2 3 4 5 Case #1: 4 2 1 3 Case #2: 1 2 Case #3: 7 6 5 4 3 2 1 Case #4: IMPOSSIBLE Case #5: IMPOSSIBLE \ub0b4 \ud480\uc774 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import sys sys . stdin = open ( \"3 \\\\ input.txt\" ) T = int ( input ()) for t in range ( T ): rslt = None len_l , cost = map ( int , input () . split ()) max_cost = ( len_l * ( len_l + 1 )) // 2 - 1 min_cost = len_l - 1 if cost > max_cost : rslt = \"IMPOSSIBLE\" elif cost < min_cost : rslt = \"IMPOSSIBLE\" else : cost -= ( len_l - 1 ) left_l = [] right_l = [] mid_l = [] is_max_order = True cur_val = 1 cost_to_be_used = len_l - 1 while ( cost >= cost_to_be_used ) and ( cost_to_be_used > 0 ): if is_max_order : right_l = [ cur_val ] + right_l else : left_l . append ( cur_val ) cur_val += 1 cost -= cost_to_be_used cost_to_be_used -= 1 is_max_order = not is_max_order if is_max_order : mid_l = list ( range ( cur_val , len_l + 1 )) else : mid_l = list ( range ( cur_val , len_l + 1 ))[:: - 1 ] if cost > 0 : mid_l [: cost + 1 ] = mid_l [: cost + 1 ][:: - 1 ] rslt = left_l + mid_l + right_l rslt = ' ' . join ( map ( str , rslt )) print ( \"Case # %d : %s \" % ( t + 1 , rslt )) 4, 5\ubc88 \ubb38\uc81c\ub294 skip... (\ubcf8\uc120 1A\ub294 4\uc6d4 10\uc77c \uc608\uc815\uc785\ub2c8\ub2e4...)","title":"2021-03-28"},{"location":"daily/2021-03-28/#google-codejam","text":"","title":"google codejam \uc608\uc120"},{"location":"daily/2021-03-28/#1-reversort","text":"input.txt 1 2 3 4 5 6 7 3 4 4 2 1 3 2 1 2 7 7 6 5 4 3 2 1 output.txt 1 2 3 Case #1: 6 Case #2: 1 Case #3: 12 \ub0b4 \ud480\uc774 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import sys sys . stdin = open ( \"1 \\\\ input.txt\" ) T = int ( input ()) def reversort ( l ): cost = 0 len_l = len ( l ) for i in range ( len_l - 1 ): min_idx = l . index ( min ( l )) l [ 0 : min_idx + 1 ] = l [ 0 : min_idx + 1 ][:: - 1 ] cost_i = min_idx + 1 cost += cost_i l . pop ( 0 ) return cost for t in range ( T ): N = int ( input ()) l = list ( map ( int , input () . split ())) cost = reversort ( l ) print ( \"Case # %d : %d \" % ( t + 1 , cost ))","title":"1\ubc88 \ubb38\uc81c - reversort"},{"location":"daily/2021-03-28/#2","text":"input.txt 1 2 3 4 5 4 2 3 CJ?CC? 4 2 CJCJ 1 3 C?J 2 5 ??J??? output.txt 1 2 3 4 Case #1: 5 Case #2: 10 Case #3: 1 Case #4: 0 \ub0b4 \ud480\uc774 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 import sys sys . stdin = open ( \"2 \\\\ input.txt\" ) T = int ( input ()) for t in range ( T ): X , Y , ARR = input () . split () X = int ( X ) Y = int ( Y ) cost = 0 ARR = ARR . replace ( \"?\" , \"\" ) for i in range ( len ( ARR )): if ARR [ i : i + 2 ] == \"CJ\" : cost += X elif ARR [ i : i + 2 ] == \"JC\" : cost += Y print ( \"Case # %d : %d \" % ( t + 1 , cost ))","title":"2\ubc88 \ubb38\uc81c"},{"location":"daily/2021-03-28/#3","text":"input.txt 1 2 3 4 5 6 5 4 6 2 1 7 12 7 2 2 1000 output.txt 1 2 3 4 5 Case #1: 4 2 1 3 Case #2: 1 2 Case #3: 7 6 5 4 3 2 1 Case #4: IMPOSSIBLE Case #5: IMPOSSIBLE \ub0b4 \ud480\uc774 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 import sys sys . stdin = open ( \"3 \\\\ input.txt\" ) T = int ( input ()) for t in range ( T ): rslt = None len_l , cost = map ( int , input () . split ()) max_cost = ( len_l * ( len_l + 1 )) // 2 - 1 min_cost = len_l - 1 if cost > max_cost : rslt = \"IMPOSSIBLE\" elif cost < min_cost : rslt = \"IMPOSSIBLE\" else : cost -= ( len_l - 1 ) left_l = [] right_l = [] mid_l = [] is_max_order = True cur_val = 1 cost_to_be_used = len_l - 1 while ( cost >= cost_to_be_used ) and ( cost_to_be_used > 0 ): if is_max_order : right_l = [ cur_val ] + right_l else : left_l . append ( cur_val ) cur_val += 1 cost -= cost_to_be_used cost_to_be_used -= 1 is_max_order = not is_max_order if is_max_order : mid_l = list ( range ( cur_val , len_l + 1 )) else : mid_l = list ( range ( cur_val , len_l + 1 ))[:: - 1 ] if cost > 0 : mid_l [: cost + 1 ] = mid_l [: cost + 1 ][:: - 1 ] rslt = left_l + mid_l + right_l rslt = ' ' . join ( map ( str , rslt )) print ( \"Case # %d : %s \" % ( t + 1 , rslt )) 4, 5\ubc88 \ubb38\uc81c\ub294 skip... (\ubcf8\uc120 1A\ub294 4\uc6d4 10\uc77c \uc608\uc815\uc785\ub2c8\ub2e4...)","title":"3\ubc88 \ubb38\uc81c"},{"location":"daily/2021-03-29/","text":"\uc775\uc2a4\ud2b8\ub9bc \ud504\ub85c\uadf8\ub798\ubc0d \ub2e4\uc74c \uc77d\uace0 \uc2f6\uc740 \ucc45\uc73c\ub85c \uc774 \ucc45\uc744 \uc77d\uc73c\ub824\uace0 \ud569\ub2c8\ub2e4. XP\uc758 5\uac00\uc9c0 \uac00\uce58: \uc758\uc0ac\uc18c\ud1b5, \ub2e8\uc21c\uc131, \ud53c\ub4dc\ubc31, \uc6a9\uae30, \uc874\uc911","title":"2021-03-29"},{"location":"daily/2021-03-29/#_1","text":"\ub2e4\uc74c \uc77d\uace0 \uc2f6\uc740 \ucc45\uc73c\ub85c \uc774 \ucc45\uc744 \uc77d\uc73c\ub824\uace0 \ud569\ub2c8\ub2e4. XP\uc758 5\uac00\uc9c0 \uac00\uce58: \uc758\uc0ac\uc18c\ud1b5, \ub2e8\uc21c\uc131, \ud53c\ub4dc\ubc31, \uc6a9\uae30, \uc874\uc911","title":"\uc775\uc2a4\ud2b8\ub9bc \ud504\ub85c\uadf8\ub798\ubc0d"},{"location":"daily/2021-04-06/","text":"aws S3 \ud3f4\ub354 \uacf5\uc720(\uad8c\ud55c \uc815\ucc45 \ubd80\uc5ec\ud558\uae30) \ucc38\uace0: https://aws.amazon.com/ko/premiumsupport/knowledge-center/cross-account-access-s3/","title":"2021-04-06"},{"location":"daily/2021-04-06/#aws-s3","text":"\ucc38\uace0: https://aws.amazon.com/ko/premiumsupport/knowledge-center/cross-account-access-s3/","title":"aws S3 \ud3f4\ub354 \uacf5\uc720(\uad8c\ud55c \uc815\ucc45 \ubd80\uc5ec\ud558\uae30)"},{"location":"daily/2021-04-07/","text":"google codejam 2020 questions google codejam 2021\uc758 1A round\ub294 4\uc6d4 10\uc77c \ud1a0\uc694\uc77c \uc624\uc804 10\uc2dc\uc5d0 \uc5f4\ub9bd\ub2c8\ub2e4. \uc791\ub144\uc758 \ubb38\uc81c\ub4e4\uc744 \ubcf4\uace0 \ubcf5\uc2b5\uc744 \ud558\ub824\uace0 \ud569\ub2c8\ub2e4. Round 1A: Pattern Matching: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b3034 Pascal Walk: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b1353 Square Dance: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b1355","title":"2021-04-07"},{"location":"daily/2021-04-07/#google-codejam-2020-questions","text":"google codejam 2021\uc758 1A round\ub294 4\uc6d4 10\uc77c \ud1a0\uc694\uc77c \uc624\uc804 10\uc2dc\uc5d0 \uc5f4\ub9bd\ub2c8\ub2e4. \uc791\ub144\uc758 \ubb38\uc81c\ub4e4\uc744 \ubcf4\uace0 \ubcf5\uc2b5\uc744 \ud558\ub824\uace0 \ud569\ub2c8\ub2e4. Round 1A: Pattern Matching: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b3034 Pascal Walk: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b1353 Square Dance: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b1355","title":"google codejam 2020 questions"},{"location":"daily/2021-04-08/","text":"google codejam 2020 questions \uc791\ub144 \uae30\ucd9c \ubb38\uc81c \ud480\uc774 Round 1A: Pattern Matching: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b3034 Pascal Walk: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b1353 Square Dance: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b1355 Round 1B: Expogo: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef2/00000000002d5b62 Blindfolded Bullseye: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef2/00000000002d5b63 Join the Ranks: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef2/00000000002d5b64 Round 1C: Overexcited Fan: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef4/0000000000317409 Overrandomized: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef4/00000000003179a1 Oversized Pancake Choppers: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef4/00000000003172d1","title":"2021-04-08"},{"location":"daily/2021-04-08/#google-codejam-2020-questions","text":"\uc791\ub144 \uae30\ucd9c \ubb38\uc81c \ud480\uc774 Round 1A: Pattern Matching: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b3034 Pascal Walk: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b1353 Square Dance: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fd74/00000000002b1355 Round 1B: Expogo: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef2/00000000002d5b62 Blindfolded Bullseye: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef2/00000000002d5b63 Join the Ranks: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef2/00000000002d5b64 Round 1C: Overexcited Fan: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef4/0000000000317409 Overrandomized: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef4/00000000003179a1 Oversized Pancake Choppers: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef4/00000000003172d1","title":"google codejam 2020 questions"},{"location":"daily/2021-04-09/","text":"2020 codejam 1A asterisk\uac00 \ud3ec\ud568\ub41c \uc608\uc81c \ubb38\uc790\uc5f4\ub4e4\uc744 \ud3ec\ud568\ud558\ub294 \ubb38\uc790\uc5f4 \ucc3e\uae30. \ub9cc\uc57d \uacf5\ud1b5\ub41c \ubb38\uc790\uc5f4\uc774 \uc5c6\uc73c\uba74, asterisk\ub85c \ud45c\ud604 \uacf5\ud1b5\uc870\uc0c1 \ucc3e\uae30?\uc640 \uac19\uc740 \ubb38\uc81c\uc778\uac00? \ucd5c\uc7a5 \ubb38\uc790\uc5f4 \ucc3e\uae30? \ub098\uc911\uc5d0 \ud480\uc5b4\ubcf4\uc790","title":"2021-04-09"},{"location":"daily/2021-04-09/#2020-codejam-1a","text":"asterisk\uac00 \ud3ec\ud568\ub41c \uc608\uc81c \ubb38\uc790\uc5f4\ub4e4\uc744 \ud3ec\ud568\ud558\ub294 \ubb38\uc790\uc5f4 \ucc3e\uae30. \ub9cc\uc57d \uacf5\ud1b5\ub41c \ubb38\uc790\uc5f4\uc774 \uc5c6\uc73c\uba74, asterisk\ub85c \ud45c\ud604 \uacf5\ud1b5\uc870\uc0c1 \ucc3e\uae30?\uc640 \uac19\uc740 \ubb38\uc81c\uc778\uac00? \ucd5c\uc7a5 \ubb38\uc790\uc5f4 \ucc3e\uae30? \ub098\uc911\uc5d0 \ud480\uc5b4\ubcf4\uc790","title":"2020 codejam 1A"},{"location":"daily/2021-04-10/","text":"codejam 2021 1A \uc815\ud655\ud55c \uad6c\ud604\uc744 \uc2dc\uac04 \ub0b4\uc5d0 \ud558\uc9c0 \ubabb \ud574\uc11c \ud1b5\uacfc\ud558\uc9c0 \ubabb \ud588\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ub77c\uc6b4\ub4dc\ub294 15\uc77c \ud6c4\uc5d0 \uc9c4\ud589\ub429\ub2c8\ub2e4. 1\ubc88 \ubb38\uc81c\ub294 append sort\ub77c\ub294 \ubb38\uc81c\uc600\uc2b5\ub2c8\ub2e4. \ub9c1\ud06c \ub2e4\ub978 \uc0ac\ub78c\uc758 \ud480\uc774\ub97c \ubcf4\ub2c8\uae4c \uad49\uc7a5\ud788 \uac04\ub2e8\ud55c\ub370, \uc2dc\uac04 \ub0b4\uc5d0 \uc774\ub7f0 \ud480\uc774\ub97c \ub5a0\uc62c\ub9ac\ub294 \uac83\uc774 \uc27d\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc5b4\ub835\ub354\ub77c\ub3c4 \uc0dd\uac01\ud55c \ubc14\ub97c \uc815\ud655\ud558\uac8c \uad6c\ud604\ud574\uc57c \ud558\ub294\ub370, \uadf8\uac8c \uc81c\uac00 \ud480\uc5b4\uc57c \ud560 \uc219\uc81c\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. codejam\uc740 \uc0dd\uac01\ubcf4\ub2e4 \uc5b4\ub824\uc6b4 \uc9c0\uc2dd\uc744 \uc694\uad6c\ud558\uc9c0\ub294 \uc54a\uc558\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 for T in range ( 1 , 1 + int ( input ())): N = int ( input ()) A = list ( map ( int , input () . split ())) cur = A [ 0 ] ans = 0 for x in A [ 1 :]: for n in range ( 0 , 1000 ): l = x * 10 ** n r = x * 10 ** n + ( 10 ** n - 1 ) if r <= cur : continue if cur < l : cur = l ans += n break if l <= cur < r : cur += 1 ans += n break raise Exception ( \"??\" ) print ( \"Case # %d :\" % T , ans ) \uadf8\ub9ac\uace0 \ud56d\uc0c1 \ub9c8\uc9c0\ub9c9 \ubb38\uc81c\ub294 \ud655\ub960 \ubb38\uc81c\uac00 \ub098\uc624\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","title":"2021-04-10"},{"location":"daily/2021-04-10/#codejam-2021-1a","text":"\uc815\ud655\ud55c \uad6c\ud604\uc744 \uc2dc\uac04 \ub0b4\uc5d0 \ud558\uc9c0 \ubabb \ud574\uc11c \ud1b5\uacfc\ud558\uc9c0 \ubabb \ud588\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ub77c\uc6b4\ub4dc\ub294 15\uc77c \ud6c4\uc5d0 \uc9c4\ud589\ub429\ub2c8\ub2e4. 1\ubc88 \ubb38\uc81c\ub294 append sort\ub77c\ub294 \ubb38\uc81c\uc600\uc2b5\ub2c8\ub2e4. \ub9c1\ud06c \ub2e4\ub978 \uc0ac\ub78c\uc758 \ud480\uc774\ub97c \ubcf4\ub2c8\uae4c \uad49\uc7a5\ud788 \uac04\ub2e8\ud55c\ub370, \uc2dc\uac04 \ub0b4\uc5d0 \uc774\ub7f0 \ud480\uc774\ub97c \ub5a0\uc62c\ub9ac\ub294 \uac83\uc774 \uc27d\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc5b4\ub835\ub354\ub77c\ub3c4 \uc0dd\uac01\ud55c \ubc14\ub97c \uc815\ud655\ud558\uac8c \uad6c\ud604\ud574\uc57c \ud558\ub294\ub370, \uadf8\uac8c \uc81c\uac00 \ud480\uc5b4\uc57c \ud560 \uc219\uc81c\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. codejam\uc740 \uc0dd\uac01\ubcf4\ub2e4 \uc5b4\ub824\uc6b4 \uc9c0\uc2dd\uc744 \uc694\uad6c\ud558\uc9c0\ub294 \uc54a\uc558\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 for T in range ( 1 , 1 + int ( input ())): N = int ( input ()) A = list ( map ( int , input () . split ())) cur = A [ 0 ] ans = 0 for x in A [ 1 :]: for n in range ( 0 , 1000 ): l = x * 10 ** n r = x * 10 ** n + ( 10 ** n - 1 ) if r <= cur : continue if cur < l : cur = l ans += n break if l <= cur < r : cur += 1 ans += n break raise Exception ( \"??\" ) print ( \"Case # %d :\" % T , ans ) \uadf8\ub9ac\uace0 \ud56d\uc0c1 \ub9c8\uc9c0\ub9c9 \ubb38\uc81c\ub294 \ud655\ub960 \ubb38\uc81c\uac00 \ub098\uc624\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4.","title":"codejam 2021 1A"},{"location":"daily/2021-04-14/","text":"\uba40\ud2f0 \ud504\ub85c\uc138\uc2f1\uc758 \uc885\ub958 \uba40\ud2f0 \ud504\ub85c\uc138\uc2f1 \uc544\ud0a4\ud14d\ucc98\uc758 \uc885\ub958 SMP: Symmetric Multi Processing AMP:Asymmetric Multi Processing 1. \uc0ac\uc804 \uc9c0\uc2dd \ud504\ub85c\uc138\uc11c\ub294 core\uc640 cache \ub4f1\uc73c\ub85c \uad6c\uc131\uc774 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\uc11c CPU\uac00\uc774 \ud504\ub85c\uc138\uc11c\uc774\uace0 CPU\uc640 \ud504\ub85c\uc138\uc11c\ub294 \uac19\uc740 \uc6a9\uc5b4\ub85c \ubd10\ub3c4 \ubb34\ubc29\ud569\ub2c8\ub2e4. (https://donghoson.tistory.com/14) 2. multi processing \ud504\ub85c\uc138\uc11c\uac00 \uac19\uc740 \uc791\uc5c5\uc744 \ud611\ub825\ud574\uc11c(=\uc791\uc5c5\uc744 \ub098\ub204\uc5b4\uc11c) \uc218\ud589 \ud568 \uc774 \uacfc\uc815\uc744 \ucc98\ub9ac \ud558\ub824\uba74 \ud558\ub098\uc758 \uba54\ub85c\ub9ac\ub97c \ud504\ub85c\uc138\uc11c\ub4e4\uc774 \uacf5\uc720\ub97c \ud574\uc57c \ud569\ub2c8\ub2e4. 3. SMP vs AMP \uadf8\ub9bc \ucd9c\ucc98: https://jacking75.github.io/thread_SMP_AMP/","title":"2021-04-14"},{"location":"daily/2021-04-14/#_1","text":"\uba40\ud2f0 \ud504\ub85c\uc138\uc2f1 \uc544\ud0a4\ud14d\ucc98\uc758 \uc885\ub958 SMP: Symmetric Multi Processing AMP:Asymmetric Multi Processing","title":"\uba40\ud2f0 \ud504\ub85c\uc138\uc2f1\uc758 \uc885\ub958"},{"location":"daily/2021-04-14/#1","text":"\ud504\ub85c\uc138\uc11c\ub294 core\uc640 cache \ub4f1\uc73c\ub85c \uad6c\uc131\uc774 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\uc11c CPU\uac00\uc774 \ud504\ub85c\uc138\uc11c\uc774\uace0 CPU\uc640 \ud504\ub85c\uc138\uc11c\ub294 \uac19\uc740 \uc6a9\uc5b4\ub85c \ubd10\ub3c4 \ubb34\ubc29\ud569\ub2c8\ub2e4. (https://donghoson.tistory.com/14)","title":"1. \uc0ac\uc804 \uc9c0\uc2dd"},{"location":"daily/2021-04-14/#2-multi-processing","text":"\ud504\ub85c\uc138\uc11c\uac00 \uac19\uc740 \uc791\uc5c5\uc744 \ud611\ub825\ud574\uc11c(=\uc791\uc5c5\uc744 \ub098\ub204\uc5b4\uc11c) \uc218\ud589 \ud568 \uc774 \uacfc\uc815\uc744 \ucc98\ub9ac \ud558\ub824\uba74 \ud558\ub098\uc758 \uba54\ub85c\ub9ac\ub97c \ud504\ub85c\uc138\uc11c\ub4e4\uc774 \uacf5\uc720\ub97c \ud574\uc57c \ud569\ub2c8\ub2e4.","title":"2. multi processing"},{"location":"daily/2021-04-14/#3-smp-vs-amp","text":"\uadf8\ub9bc \ucd9c\ucc98: https://jacking75.github.io/thread_SMP_AMP/","title":"3. SMP vs AMP"},{"location":"daily/2021-04-15/","text":"google repo \ud558\ub098\uc758 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c git\uc758 \uc8fc\uc18c\uac00 \ub9ce\uc544\uc9c0\uba74 \uad00\ub9ac\ud558\uae30\uac00 \ud798\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4. \uadf8\ub798\uc11c google repo\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294\ub370, google repo\ub294 \ud2b9\uc815 \ucee4\ubc0b \uc774\ub984\ub9cc \ucc0d\uc5b4\uc11c \uace0\uac1d\uc0ac\uc5d0\uac8c \ubcf4\ub0b4\uba74 \ub611\uac19\uc740 \ubc84\uc804\uc73c\ub85c \uc7ac\ud604\ud574\ubcfc \uc218 \uc788\ub2e4\ub294 \uc7a5\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4.","title":"2021-04-15"},{"location":"daily/2021-04-15/#google-repo","text":"\ud558\ub098\uc758 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c git\uc758 \uc8fc\uc18c\uac00 \ub9ce\uc544\uc9c0\uba74 \uad00\ub9ac\ud558\uae30\uac00 \ud798\ub4e4\uc5b4\uc9d1\ub2c8\ub2e4. \uadf8\ub798\uc11c google repo\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294\ub370, google repo\ub294 \ud2b9\uc815 \ucee4\ubc0b \uc774\ub984\ub9cc \ucc0d\uc5b4\uc11c \uace0\uac1d\uc0ac\uc5d0\uac8c \ubcf4\ub0b4\uba74 \ub611\uac19\uc740 \ubc84\uc804\uc73c\ub85c \uc7ac\ud604\ud574\ubcfc \uc218 \uc788\ub2e4\ub294 \uc7a5\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4.","title":"google repo"},{"location":"daily/2021-04-16/","text":"typescript type \uae30\ubcf8 ===\"type script\" 1 2 3 4 function someFunc ( a : TYPE_A , b : TYPE_B ) : TYPE_RETURN { return a + b ; } let some : TYPE_SOME = someFunc ( 1 , 2 ); \uc77c\ubc18 \ubcc0\uc218, \ub9e4\uac1c \ubcc0\uc218, \uac1d\uccb4 \uc18d\uc131(Property) \ub4f1\uc5d0 : TYPE\uacfc \uac19\uc740 \ud615\ud0dc\ub85c \ud0c0\uc785\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubc30\uc5f4 ===\"array \uc608\uc81c\" 1 2 3 4 5 6 7 8 9 // \ubb38\uc790\uc5f4\ub9cc \uac00\uc9c0\ub294 \ubc30\uc5f4 let fruits : string [] = [ 'Apple' , 'Banana' , 'Mango' ]; // Or let fruits : Array < string > = [ 'Apple' , 'Banana' , 'Mango' ]; // \uc22b\uc790\ub9cc \uac00\uc9c0\ub294 \ubc30\uc5f4 let oneToSeven : number [] = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]; // Or let oneToSeven : Array < number > = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]; array\ub294 \ub450 \uac00\uc9c0 \ud615\ud0dc\ub85c \ud0c0\uc785\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 let array : ( string | number )[] = [ 'Apple' , 1 , 2 , 'Banana' , 'Mango' , 3 ]; // Or let array : Array < string | number > = [ 'Apple' , 1 , 2 , 'Banana' , 'Mango' , 3 ]; union type\uc744 \uac00\uc9c0\ub294 array \uc778\ud130\ud398\uc774\uc2a4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 interface IUser { name : string , age : number , isValid : boolean } let userArr : IUser [] = [ { name : 'Neo' , age : 85 , isValid : true }, { name : 'Lewis' , age : 52 , isValid : false }, { name : 'Evan' , age : 36 , isValid : true } ]; \uc77d\uae30 \uc804\uc6a9 \ubc30\uc5f4\uc744 \uc0dd\uc131 1 2 3 4 5 6 7 8 let arrA : readonly number [] = [ 1 , 2 , 3 , 4 ]; let arrB : ReadonlyArray < number > = [ 0 , 9 , 8 , 7 ]; arrA [ 0 ] = 123 ; // Error - TS2542: Index signature in type 'readonly number[]' only permits reading. arrA . push ( 123 ); // Error - TS2339: Property 'push' does not exist on type 'readonly number[]'. arrB [ 0 ] = 123 ; // Error - TS2542: Index signature in type 'readonly number[]' only permits reading. arrB . push ( 123 ); // Error - TS2339: Property 'push' does not exist on type 'readonly number[]'. \ud29c\ud50c 1 2 3 4 let tuple : [ string , number ]; tuple = [ 'a' , 1 ]; tuple = [ 'a' , 1 , 2 ]; // Error - TS2322 tuple = [ 1 , 'a' ]; // Error - TS2322 \ud29c\ud50c\uc740 \uace0\uc815 \uae38\uc774\ub77c\ub294 \uc810\uc774 array\uc640 \ub2e4\ub985\ub2c8\ub2e4. \ud29c\ud50c \ud0c0\uc785\uc758 array 1 2 3 4 5 let users : [ number , string , boolean ][]; // Or // let users: Array<[number, string, boolean]>; users = [[ 1 , 'Neo' , true ], [ 2 , 'Evan' , false ], [ 3 , 'Lewis' , true ]]; \uc5f4\uac70\ud615 1 2 3 4 5 6 7 8 9 enum Week { Sun , Mon , Tue , Wed , Thu , Fri , Sat }","title":"2021-04-16"},{"location":"daily/2021-04-16/#typescript","text":"","title":"typescript"},{"location":"daily/2021-04-16/#type","text":"===\"type script\" 1 2 3 4 function someFunc ( a : TYPE_A , b : TYPE_B ) : TYPE_RETURN { return a + b ; } let some : TYPE_SOME = someFunc ( 1 , 2 ); \uc77c\ubc18 \ubcc0\uc218, \ub9e4\uac1c \ubcc0\uc218, \uac1d\uccb4 \uc18d\uc131(Property) \ub4f1\uc5d0 : TYPE\uacfc \uac19\uc740 \ud615\ud0dc\ub85c \ud0c0\uc785\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubc30\uc5f4 ===\"array \uc608\uc81c\" 1 2 3 4 5 6 7 8 9 // \ubb38\uc790\uc5f4\ub9cc \uac00\uc9c0\ub294 \ubc30\uc5f4 let fruits : string [] = [ 'Apple' , 'Banana' , 'Mango' ]; // Or let fruits : Array < string > = [ 'Apple' , 'Banana' , 'Mango' ]; // \uc22b\uc790\ub9cc \uac00\uc9c0\ub294 \ubc30\uc5f4 let oneToSeven : number [] = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]; // Or let oneToSeven : Array < number > = [ 1 , 2 , 3 , 4 , 5 , 6 , 7 ]; array\ub294 \ub450 \uac00\uc9c0 \ud615\ud0dc\ub85c \ud0c0\uc785\uc744 \uc120\uc5b8\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 let array : ( string | number )[] = [ 'Apple' , 1 , 2 , 'Banana' , 'Mango' , 3 ]; // Or let array : Array < string | number > = [ 'Apple' , 1 , 2 , 'Banana' , 'Mango' , 3 ]; union type\uc744 \uac00\uc9c0\ub294 array \uc778\ud130\ud398\uc774\uc2a4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 interface IUser { name : string , age : number , isValid : boolean } let userArr : IUser [] = [ { name : 'Neo' , age : 85 , isValid : true }, { name : 'Lewis' , age : 52 , isValid : false }, { name : 'Evan' , age : 36 , isValid : true } ]; \uc77d\uae30 \uc804\uc6a9 \ubc30\uc5f4\uc744 \uc0dd\uc131 1 2 3 4 5 6 7 8 let arrA : readonly number [] = [ 1 , 2 , 3 , 4 ]; let arrB : ReadonlyArray < number > = [ 0 , 9 , 8 , 7 ]; arrA [ 0 ] = 123 ; // Error - TS2542: Index signature in type 'readonly number[]' only permits reading. arrA . push ( 123 ); // Error - TS2339: Property 'push' does not exist on type 'readonly number[]'. arrB [ 0 ] = 123 ; // Error - TS2542: Index signature in type 'readonly number[]' only permits reading. arrB . push ( 123 ); // Error - TS2339: Property 'push' does not exist on type 'readonly number[]'. \ud29c\ud50c 1 2 3 4 let tuple : [ string , number ]; tuple = [ 'a' , 1 ]; tuple = [ 'a' , 1 , 2 ]; // Error - TS2322 tuple = [ 1 , 'a' ]; // Error - TS2322 \ud29c\ud50c\uc740 \uace0\uc815 \uae38\uc774\ub77c\ub294 \uc810\uc774 array\uc640 \ub2e4\ub985\ub2c8\ub2e4. \ud29c\ud50c \ud0c0\uc785\uc758 array 1 2 3 4 5 let users : [ number , string , boolean ][]; // Or // let users: Array<[number, string, boolean]>; users = [[ 1 , 'Neo' , true ], [ 2 , 'Evan' , false ], [ 3 , 'Lewis' , true ]]; \uc5f4\uac70\ud615 1 2 3 4 5 6 7 8 9 enum Week { Sun , Mon , Tue , Wed , Thu , Fri , Sat }","title":"type \uae30\ubcf8"},{"location":"daily/2021-04-17/","text":"leet code linked-list https://leetcode.com/explore/learn/card/linked-list/209/singly-linked-list/1290/ design linked list \ud3ec\uc778\ud2b8: head\ub294 \ud56d\uc0c1 \ube44\uc5b4\uc788\ub294 \ud3ec\uc778\ud130\ub85c \ub450\uc5b4\uc11c, \uc27d\uac8c \uc5f0\uc0b0\uc744 \ud588\uc74c. design linked_list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 struct Node { Node * prev ; Node * next ; int val ; }; class MyLinkedList { public : /** Initialize your data structure here. */ MyLinkedList () { _head = new Node (); _head -> val = 0 ; _size = 0 ; } /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */ int get ( int index ) { if ( index >= _size ) { return -1 ; } else { Node * idx = _head -> next ; while ( index -- ) { idx = idx -> next ; } return idx -> val ; } } /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */ void addAtHead ( int val ) { if ( _size == 0 ) { Node * newNode = new Node (); newNode -> val = val ; newNode -> prev = _head ; _head -> next = newNode ; _size ++ ; } else { Node * newNode = new Node (); newNode -> val = val ; newNode -> prev = _head ; newNode -> next = _head -> next ; _head -> next -> prev = newNode ; _head -> next = newNode ; _size ++ ; } } /** Append a node of value val to the last element of the linked list. */ void addAtTail ( int val ) { Node * idx = _head ; while ( idx -> next != nullptr ) { idx = idx -> next ; } Node * newNode = new Node (); newNode -> val = val ; idx -> next = newNode ; newNode -> prev = idx ; _size ++ ; } /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */ void addAtIndex ( int index , int val ) { if ( index == 0 ) { addAtHead ( val ); } else if ( index < _size ) { Node * newNode = new Node (); newNode -> val = val ; Node * idx = _head -> next ; while ( index -- ) { idx = idx -> next ; } idx -> prev -> next = newNode ; newNode -> prev = idx -> prev ; newNode -> next = idx ; idx -> prev = newNode ; _size ++ ; } else if ( index == _size ) { addAtTail ( val ); } else { } } /** Delete the index-th node in the linked list, if the index is valid. */ void deleteAtIndex ( int index ) { if ( index == 0 ) { Node * idx = _head -> next ; if ( _size > 1 ) { idx -> next -> prev = _head ; } _head -> next = idx -> next ; delete idx ; _size -- ; } else if ( index == _size - 1 ) { Node * idx = _head -> next ; while ( index -- ) { idx = idx -> next ; } idx -> prev -> next = nullptr ; delete idx ; _size -- ; } else if (( index > 0 ) && ( index < _size )) { Node * idx = _head -> next ; while ( index -- ) { idx = idx -> next ; } idx -> prev -> next = idx -> next ; idx -> next -> prev = idx -> prev ; delete idx ; _size -- ; } else { } } private : Node * _head ; int _size ; }; int main () { MyLinkedList * obj = new MyLinkedList (); obj -> addAtTail ( 1 ); std :: cout << \"null\" ; std :: cout << obj -> get ( 0 ); return 0 ; }","title":"2021-04-17"},{"location":"daily/2021-04-17/#leet-code-linked-list","text":"https://leetcode.com/explore/learn/card/linked-list/209/singly-linked-list/1290/ design linked list \ud3ec\uc778\ud2b8: head\ub294 \ud56d\uc0c1 \ube44\uc5b4\uc788\ub294 \ud3ec\uc778\ud130\ub85c \ub450\uc5b4\uc11c, \uc27d\uac8c \uc5f0\uc0b0\uc744 \ud588\uc74c. design linked_list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 struct Node { Node * prev ; Node * next ; int val ; }; class MyLinkedList { public : /** Initialize your data structure here. */ MyLinkedList () { _head = new Node (); _head -> val = 0 ; _size = 0 ; } /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */ int get ( int index ) { if ( index >= _size ) { return -1 ; } else { Node * idx = _head -> next ; while ( index -- ) { idx = idx -> next ; } return idx -> val ; } } /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */ void addAtHead ( int val ) { if ( _size == 0 ) { Node * newNode = new Node (); newNode -> val = val ; newNode -> prev = _head ; _head -> next = newNode ; _size ++ ; } else { Node * newNode = new Node (); newNode -> val = val ; newNode -> prev = _head ; newNode -> next = _head -> next ; _head -> next -> prev = newNode ; _head -> next = newNode ; _size ++ ; } } /** Append a node of value val to the last element of the linked list. */ void addAtTail ( int val ) { Node * idx = _head ; while ( idx -> next != nullptr ) { idx = idx -> next ; } Node * newNode = new Node (); newNode -> val = val ; idx -> next = newNode ; newNode -> prev = idx ; _size ++ ; } /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */ void addAtIndex ( int index , int val ) { if ( index == 0 ) { addAtHead ( val ); } else if ( index < _size ) { Node * newNode = new Node (); newNode -> val = val ; Node * idx = _head -> next ; while ( index -- ) { idx = idx -> next ; } idx -> prev -> next = newNode ; newNode -> prev = idx -> prev ; newNode -> next = idx ; idx -> prev = newNode ; _size ++ ; } else if ( index == _size ) { addAtTail ( val ); } else { } } /** Delete the index-th node in the linked list, if the index is valid. */ void deleteAtIndex ( int index ) { if ( index == 0 ) { Node * idx = _head -> next ; if ( _size > 1 ) { idx -> next -> prev = _head ; } _head -> next = idx -> next ; delete idx ; _size -- ; } else if ( index == _size - 1 ) { Node * idx = _head -> next ; while ( index -- ) { idx = idx -> next ; } idx -> prev -> next = nullptr ; delete idx ; _size -- ; } else if (( index > 0 ) && ( index < _size )) { Node * idx = _head -> next ; while ( index -- ) { idx = idx -> next ; } idx -> prev -> next = idx -> next ; idx -> next -> prev = idx -> prev ; delete idx ; _size -- ; } else { } } private : Node * _head ; int _size ; }; int main () { MyLinkedList * obj = new MyLinkedList (); obj -> addAtTail ( 1 ); std :: cout << \"null\" ; std :: cout << obj -> get ( 0 ); return 0 ; }","title":"leet code linked-list"},{"location":"daily/2021-04-18/","text":"leet code: design linked list \uc624\ub298\uc758 \ucf54\ub4dc(44ms) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 struct Node { int val ; Node * next ; }; class MyLinkedList { public : /** Initialize your data structure here. */ MyLinkedList () { memset ( mData , 0 , sizeof ( Node ) * 3000 ); mHead = new Node (); mSize = 0 ; mCurIdx = 0 ; } /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */ int get ( int index ) { // terminal condition: fail if ( index < 0 || index >= mSize ) { return -1 ; } // get function core Node * p = mHead -> next ; while ( index -- ) { p = p -> next ; } return p -> val ; } /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */ void addAtHead ( int val ) { Node * newNode = & mData [ mCurIdx ]; newNode -> val = val ; newNode -> next = mHead -> next ; mHead -> next = newNode ; mSize ++ ; mCurIdx ++ ; } /** Append a node of value val to the last element of the linked list. */ void addAtTail ( int val ) { Node * newNode = & mData [ mCurIdx ]; newNode -> val = val ; Node * p = mHead ; while ( p -> next != nullptr ) { p = p -> next ; } p -> next = newNode ; mSize ++ ; mCurIdx ++ ; } /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */ void addAtIndex ( int index , int val ) { // terminal condition: fail if ( index < 0 || index > mSize ) { return ; } // function core if ( index == 0 ) { addAtHead ( val ); } else if ( index == mSize ) { addAtTail ( val ); } else { Node * newNode = & mData [ mCurIdx ]; newNode -> val = val ; Node * p = mHead ; while ( index -- ) { p = p -> next ; } newNode -> next = p -> next ; p -> next = newNode ; mSize ++ ; mCurIdx ++ ; } } /** Delete the index-th node in the linked list, if the index is valid. */ void deleteAtIndex ( int index ) { // terminal condition: fail if ( index < 0 || index >= mSize ) { return ; } // function core Node * p = mHead ; while ( index -- ) { p = p -> next ; } p -> next = p -> next -> next ; mSize -- ; } private : Node * mHead ; int mSize ; Node mData [ 3000 ]; int mCurIdx ; }; \uc5b4\uc81c\uc758 \ucf54\ub4dc(60ms)\uc5d0 \ube44\ud574\uc11c 16ms \uac00 \uc904\uc5c8\uc73c\ub098, \uc5ec\uc804\ud788 \uc131\ub2a5\uc774 \uc544\uc27d\uc2b5\ub2c8\ub2e4.","title":"2021-04-18"},{"location":"daily/2021-04-18/#leet-code-design-linked-list","text":"\uc624\ub298\uc758 \ucf54\ub4dc(44ms) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 struct Node { int val ; Node * next ; }; class MyLinkedList { public : /** Initialize your data structure here. */ MyLinkedList () { memset ( mData , 0 , sizeof ( Node ) * 3000 ); mHead = new Node (); mSize = 0 ; mCurIdx = 0 ; } /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */ int get ( int index ) { // terminal condition: fail if ( index < 0 || index >= mSize ) { return -1 ; } // get function core Node * p = mHead -> next ; while ( index -- ) { p = p -> next ; } return p -> val ; } /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */ void addAtHead ( int val ) { Node * newNode = & mData [ mCurIdx ]; newNode -> val = val ; newNode -> next = mHead -> next ; mHead -> next = newNode ; mSize ++ ; mCurIdx ++ ; } /** Append a node of value val to the last element of the linked list. */ void addAtTail ( int val ) { Node * newNode = & mData [ mCurIdx ]; newNode -> val = val ; Node * p = mHead ; while ( p -> next != nullptr ) { p = p -> next ; } p -> next = newNode ; mSize ++ ; mCurIdx ++ ; } /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */ void addAtIndex ( int index , int val ) { // terminal condition: fail if ( index < 0 || index > mSize ) { return ; } // function core if ( index == 0 ) { addAtHead ( val ); } else if ( index == mSize ) { addAtTail ( val ); } else { Node * newNode = & mData [ mCurIdx ]; newNode -> val = val ; Node * p = mHead ; while ( index -- ) { p = p -> next ; } newNode -> next = p -> next ; p -> next = newNode ; mSize ++ ; mCurIdx ++ ; } } /** Delete the index-th node in the linked list, if the index is valid. */ void deleteAtIndex ( int index ) { // terminal condition: fail if ( index < 0 || index >= mSize ) { return ; } // function core Node * p = mHead ; while ( index -- ) { p = p -> next ; } p -> next = p -> next -> next ; mSize -- ; } private : Node * mHead ; int mSize ; Node mData [ 3000 ]; int mCurIdx ; }; \uc5b4\uc81c\uc758 \ucf54\ub4dc(60ms)\uc5d0 \ube44\ud574\uc11c 16ms \uac00 \uc904\uc5c8\uc73c\ub098, \uc5ec\uc804\ud788 \uc131\ub2a5\uc774 \uc544\uc27d\uc2b5\ub2c8\ub2e4.","title":"leet code: design linked list"},{"location":"daily/2021-04-19/","text":"leet code: design linked list \uc774\ud2c0 \uc804: 60ms \uc5b4\uc81c: 44ms \uc624\ub298: 36ms code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 struct Node { Node ( int _val , Node * _next ) : val ( _val ), next ( _next ) {}; int val ; Node * next ; }; class MyLinkedList { public : /** Initialize your data structure here. */ MyLinkedList () { mHead = new Node ( 0 , nullptr ); mSize = 0 ; } /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */ int get ( int index ) { // terminal condition: fail if ( index < 0 || index >= mSize ) { return -1 ; } // get function core Node * p = mHead -> next ; while ( index -- ) { p = p -> next ; } return p -> val ; } /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */ void addAtHead ( int val ) { addAtIndex ( 0 , val ); } /** Append a node of value val to the last element of the linked list. */ void addAtTail ( int val ) { addAtIndex ( mSize , val ); } /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */ void addAtIndex ( int index , int val ) { // terminal condition: fail if ( index < 0 || index > mSize ) { return ; } Node * p = mHead ; while ( index -- ) { p = p -> next ; } Node * newNode = new Node ( val , p -> next ); p -> next = newNode ; mSize ++ ; } /** Delete the index-th node in the linked list, if the index is valid. */ void deleteAtIndex ( int index ) { // terminal condition: fail if ( index < 0 || index >= mSize ) { return ; } // function core Node * p = mHead ; while ( index -- ) { p = p -> next ; } p -> next = p -> next -> next ; mSize -- ; } private : Node * mHead ; int mSize ; };","title":"2021-04-19"},{"location":"daily/2021-04-19/#leet-code-design-linked-list","text":"\uc774\ud2c0 \uc804: 60ms \uc5b4\uc81c: 44ms \uc624\ub298: 36ms code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 struct Node { Node ( int _val , Node * _next ) : val ( _val ), next ( _next ) {}; int val ; Node * next ; }; class MyLinkedList { public : /** Initialize your data structure here. */ MyLinkedList () { mHead = new Node ( 0 , nullptr ); mSize = 0 ; } /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */ int get ( int index ) { // terminal condition: fail if ( index < 0 || index >= mSize ) { return -1 ; } // get function core Node * p = mHead -> next ; while ( index -- ) { p = p -> next ; } return p -> val ; } /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */ void addAtHead ( int val ) { addAtIndex ( 0 , val ); } /** Append a node of value val to the last element of the linked list. */ void addAtTail ( int val ) { addAtIndex ( mSize , val ); } /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */ void addAtIndex ( int index , int val ) { // terminal condition: fail if ( index < 0 || index > mSize ) { return ; } Node * p = mHead ; while ( index -- ) { p = p -> next ; } Node * newNode = new Node ( val , p -> next ); p -> next = newNode ; mSize ++ ; } /** Delete the index-th node in the linked list, if the index is valid. */ void deleteAtIndex ( int index ) { // terminal condition: fail if ( index < 0 || index >= mSize ) { return ; } // function core Node * p = mHead ; while ( index -- ) { p = p -> next ; } p -> next = p -> next -> next ; mSize -- ; } private : Node * mHead ; int mSize ; };","title":"leet code: design linked list"},{"location":"daily/2021-04-23/","text":"joel test \uc870\uc5d8 \ud14c\uc2a4\ud2b8\ub294 \ud68c\uc0ac\uc5d0\uc11c sw \uac1c\ubc1c\uc774 \uc798 \uad74\ub7ec\uac00\ub294\uc9c0 \ud14c\uc2a4\ud2b8\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc870\uc5d8 \ud14c\uc2a4\ud2b8\ub294 \uc870\uc5d8\uc774\ub77c\ub294 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c\uc790\uac00 \ube14\ub85c\uadf8\uc5d0 \uae00\uc744 \uc62c\ub9ac\uba74\uc11c \uc720\uba85\ud574\uc84c\uc2b5\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8\ub294 \ucd1d 12\uac1c\uc758 step\uc73c\ub85c \ub418\uc5b4\uc788\uc73c\uba70, \uc77c\ubc18\uc801\uc778 \ud68c\uc0ac\ub294 3\uc810 \uc774\ud558\uc778 \uacbd\uc6b0\uac00 \ub9ce\ub2e4\uace0 \ud569\ub2c8\ub514. \ube14\ub85c\uadf8 \ub9c1\ud06c https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/ The Joel Test Do you use source control? Can you make a build in one step? Do you make daily builds? Do you have a bug database? Do you fix bugs before writing new code? Do you have an up-to-date schedule? Do you have a spec? Do programmers have quiet working conditions? Do you use the best tools money can buy? Do you have testers? Do new candidates write code during their interview? Do you do hallway usability testing?","title":"2021-04-23"},{"location":"daily/2021-04-23/#joel-test","text":"\uc870\uc5d8 \ud14c\uc2a4\ud2b8\ub294 \ud68c\uc0ac\uc5d0\uc11c sw \uac1c\ubc1c\uc774 \uc798 \uad74\ub7ec\uac00\ub294\uc9c0 \ud14c\uc2a4\ud2b8\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc870\uc5d8 \ud14c\uc2a4\ud2b8\ub294 \uc870\uc5d8\uc774\ub77c\ub294 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c\uc790\uac00 \ube14\ub85c\uadf8\uc5d0 \uae00\uc744 \uc62c\ub9ac\uba74\uc11c \uc720\uba85\ud574\uc84c\uc2b5\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8\ub294 \ucd1d 12\uac1c\uc758 step\uc73c\ub85c \ub418\uc5b4\uc788\uc73c\uba70, \uc77c\ubc18\uc801\uc778 \ud68c\uc0ac\ub294 3\uc810 \uc774\ud558\uc778 \uacbd\uc6b0\uac00 \ub9ce\ub2e4\uace0 \ud569\ub2c8\ub514. \ube14\ub85c\uadf8 \ub9c1\ud06c https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/ The Joel Test Do you use source control? Can you make a build in one step? Do you make daily builds? Do you have a bug database? Do you fix bugs before writing new code? Do you have an up-to-date schedule? Do you have a spec? Do programmers have quiet working conditions? Do you use the best tools money can buy? Do you have testers? Do new candidates write code during their interview? Do you do hallway usability testing?","title":"joel test"},{"location":"daily/2021-04-24/","text":"codejam \uacfc\uac70 \ubb38\uc81c \ub2e4\uc2dc \ud478\ub294 \uc911...","title":"2021-04-24"},{"location":"daily/2021-04-24/#codejam","text":"","title":"codejam \uacfc\uac70 \ubb38\uc81c \ub2e4\uc2dc \ud478\ub294 \uc911..."},{"location":"daily/2021-04-27/","text":"google codejam 2020 1B \ubb38\uc81c\ub4e4 expogo: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef2/00000000002d5b62 blindfolded Bullseye: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef2/00000000002d5b63 Join the Ranks: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef2/00000000002d5b64 3\uc77c \ub0b4\uc5d0 \ud480\uc5b4\ubcf4\uae30","title":"2021-04-27"},{"location":"daily/2021-04-27/#google-codejam-2020-1b","text":"expogo: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef2/00000000002d5b62 blindfolded Bullseye: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef2/00000000002d5b63 Join the Ranks: https://codingcompetitions.withgoogle.com/codejam/round/000000000019fef2/00000000002d5b64 3\uc77c \ub0b4\uc5d0 \ud480\uc5b4\ubcf4\uae30","title":"google codejam 2020 1B \ubb38\uc81c\ub4e4"},{"location":"daily/2021-04-28/","text":"leet code algorithm \ubb38\uc81c \ud480\uc774\uc758 \ud575\uc2ec\uc740 \ud3ec\uc778\ud130\ub97c \ub450 \uac1c\ub97c \uc4f0\ub294 \uac83. \ud558\ub098\ub294 \ub290\ub9ac\uac8c \uc6c0\uc9c1\uc774\uace0, \ud558\ub098\ub294 \ube60\ub974\uac8c \uc6c0\uc9c1\uc774\ub294 \ud3ec\uc778\ud130\ub97c \ub46c\uc11c \ube60\ub974\uac8c \uc6c0\uc9c1\uc774\ub294 \ud3ec\uc778\ud130\uac00 \ub290\ub9ac\uac8c \uc6c0\uc9c1\uc774\ub294 \ud3ec\uc778\ud130\ub97c \ub9cc\ub0a0 \uc218 \uc788\uc73c\uba74 \ub8e8\ud504\uac00 \uc788\ub294 \uac83\uc785\ub2c8\ub2e4. https://leetcode.com/explore/learn/card/linked-list/214/two-pointer-technique/1212/ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public : bool hasCycle ( ListNode * head ) { if ( head == nullptr ) { return false ; } if ( head -> next == nullptr ) { return false ; } int cnt = 2 ; ListNode * ptr1 = head -> next ; ListNode * ptr2 = ptr1 ; while ( ptr1 != nullptr ) { if ( ptr1 -> next == nullptr ) return false ; ptr2 = ptr1 -> next ; for ( int i = 0 ; i < 4000 ; i ++ ) { if ( ptr1 == ptr2 ) { return true ; } if ( ptr2 -> next == nullptr ) { return false ; } ptr2 = ptr2 -> next ; } ptr1 = ptr1 -> next ; } return false ; } }; update(240ms => 8ms) \uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c\ub294 i\uac00 4000\ubc88\uae4c\uc9c0 \ubb34\uc870\uac74 \ub3cc\uc544\uc57c \ud558\ub294\ub370, \uc5ec\uae30\uc5d0\uc11c\ub294 \ube60\ub978 \ud3ec\uc778\ud130\uac00 \ub290\ub9b0 \ud3ec\uc778\ud130\ub97c \ub530\ub77c \uc7a1\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public : bool hasCycle ( ListNode * head ) { if ( head == nullptr ) return false ; if ( head -> next == nullptr ) return false ; if ( head -> next -> next == nullptr ) return false ; ListNode * slow = head ; ListNode * fast = head -> next ; while ( 1 ) { if ( fast == nullptr || fast -> next == nullptr || fast -> next == nullptr ) return false ; if ( slow == fast ) return true ; slow = slow -> next ; fast = fast -> next -> next ; } return false ; } };","title":"2021-04-28"},{"location":"daily/2021-04-28/#leet-code-algorithm","text":"\ubb38\uc81c \ud480\uc774\uc758 \ud575\uc2ec\uc740 \ud3ec\uc778\ud130\ub97c \ub450 \uac1c\ub97c \uc4f0\ub294 \uac83. \ud558\ub098\ub294 \ub290\ub9ac\uac8c \uc6c0\uc9c1\uc774\uace0, \ud558\ub098\ub294 \ube60\ub974\uac8c \uc6c0\uc9c1\uc774\ub294 \ud3ec\uc778\ud130\ub97c \ub46c\uc11c \ube60\ub974\uac8c \uc6c0\uc9c1\uc774\ub294 \ud3ec\uc778\ud130\uac00 \ub290\ub9ac\uac8c \uc6c0\uc9c1\uc774\ub294 \ud3ec\uc778\ud130\ub97c \ub9cc\ub0a0 \uc218 \uc788\uc73c\uba74 \ub8e8\ud504\uac00 \uc788\ub294 \uac83\uc785\ub2c8\ub2e4. https://leetcode.com/explore/learn/card/linked-list/214/two-pointer-technique/1212/ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public : bool hasCycle ( ListNode * head ) { if ( head == nullptr ) { return false ; } if ( head -> next == nullptr ) { return false ; } int cnt = 2 ; ListNode * ptr1 = head -> next ; ListNode * ptr2 = ptr1 ; while ( ptr1 != nullptr ) { if ( ptr1 -> next == nullptr ) return false ; ptr2 = ptr1 -> next ; for ( int i = 0 ; i < 4000 ; i ++ ) { if ( ptr1 == ptr2 ) { return true ; } if ( ptr2 -> next == nullptr ) { return false ; } ptr2 = ptr2 -> next ; } ptr1 = ptr1 -> next ; } return false ; } };","title":"leet code algorithm"},{"location":"daily/2021-04-28/#update240ms-8ms","text":"\uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c\ub294 i\uac00 4000\ubc88\uae4c\uc9c0 \ubb34\uc870\uac74 \ub3cc\uc544\uc57c \ud558\ub294\ub370, \uc5ec\uae30\uc5d0\uc11c\ub294 \ube60\ub978 \ud3ec\uc778\ud130\uac00 \ub290\ub9b0 \ud3ec\uc778\ud130\ub97c \ub530\ub77c \uc7a1\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public : bool hasCycle ( ListNode * head ) { if ( head == nullptr ) return false ; if ( head -> next == nullptr ) return false ; if ( head -> next -> next == nullptr ) return false ; ListNode * slow = head ; ListNode * fast = head -> next ; while ( 1 ) { if ( fast == nullptr || fast -> next == nullptr || fast -> next == nullptr ) return false ; if ( slow == fast ) return true ; slow = slow -> next ; fast = fast -> next -> next ; } return false ; } };","title":"update(240ms =&gt; 8ms)"},{"location":"daily/2021-04-29/","text":"\ub2e8\uc21c\ud55c \uc124\uacc4\ub97c \uc704\ud55c \ub124 \uac00\uc9c0 \uc6d0\uce59 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc7a5\uc778\uc5d0\uc11c.. \ucf04\ud2b8 \ubca1\uc774 \ub9d0\ud55c '\ub2e8\uc21c\ud55c \uc124\uacc4\ub97c \uc704\ud55c \ub124 \uac00\uc9c0 \uc6d0\uce59' \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8\ub97c \ud1b5\uacfc\ud574\uc57c \ud55c\ub2e4. \uba85\ub8cc\ud558\uace0, \ucda9\ubd84\ud788 \ud45c\ud604\ub418\uace0, \uc77c\uad00\ub418\uc5b4\uc57c \ud55c\ub2e4. \ub3d9\uc791\uc774\ub098 \uc124\uc815\uc5d0 \uc911\ubcf5\uc774 \uc788\uc5b4\uc11c\ub294 \uc548 \ub41c\ub2e4. \uba54\uc11c\ub4dc, \ud074\ub798\uc2a4, \ubaa8\ub4c8\uc758 \uc218\ub294 \uac00\ub2a5\ud55c \uc801\uc5b4\uc57c \ud55c\ub2e4. J. B. \ub808\uc778\uc2a4 \ubc84\uac70\uc758 \uac19\uc740 \ud45c\ud604 \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8\uc758 \ud1b5\uacfc \uc911\ubcf5\uc758 \ucd5c\uc18c\ud654 \uba85\ub8cc\uc131\uc758 \ucd5c\ub300\ud654 \uad6c\uc131\uc694\uc18c\uc758 \ucd5c\uc18c\ud654","title":"2021-04-29"},{"location":"daily/2021-04-29/#_1","text":"\uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc7a5\uc778\uc5d0\uc11c.. \ucf04\ud2b8 \ubca1\uc774 \ub9d0\ud55c '\ub2e8\uc21c\ud55c \uc124\uacc4\ub97c \uc704\ud55c \ub124 \uac00\uc9c0 \uc6d0\uce59' \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8\ub97c \ud1b5\uacfc\ud574\uc57c \ud55c\ub2e4. \uba85\ub8cc\ud558\uace0, \ucda9\ubd84\ud788 \ud45c\ud604\ub418\uace0, \uc77c\uad00\ub418\uc5b4\uc57c \ud55c\ub2e4. \ub3d9\uc791\uc774\ub098 \uc124\uc815\uc5d0 \uc911\ubcf5\uc774 \uc788\uc5b4\uc11c\ub294 \uc548 \ub41c\ub2e4. \uba54\uc11c\ub4dc, \ud074\ub798\uc2a4, \ubaa8\ub4c8\uc758 \uc218\ub294 \uac00\ub2a5\ud55c \uc801\uc5b4\uc57c \ud55c\ub2e4. J. B. \ub808\uc778\uc2a4 \ubc84\uac70\uc758 \uac19\uc740 \ud45c\ud604 \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8\uc758 \ud1b5\uacfc \uc911\ubcf5\uc758 \ucd5c\uc18c\ud654 \uba85\ub8cc\uc131\uc758 \ucd5c\ub300\ud654 \uad6c\uc131\uc694\uc18c\uc758 \ucd5c\uc18c\ud654","title":"\ub2e8\uc21c\ud55c \uc124\uacc4\ub97c \uc704\ud55c \ub124 \uac00\uc9c0 \uc6d0\uce59"},{"location":"daily/2021-04-30/","text":"Leet code - 1214 two-pointer-technique Floyd's Tortoise and Hare cycle\uc758 \uc720\ubb34\uc640 cycle\uc774 \uc2dc\uc791\ub418\ub294 \uc9c0\uc810\uc744 \ucc3e\ub294 \uc54c\uace0\ub9ac\uc998 \ud2b9\uc9d5\uc73c\ub85c\ub294 memory\ub97c O(1)\ub9cc\uc5d0 \uc5b4\ub5a4 \uc9c0\uc810\uc5d0\uc11c cycle\uc774 \uc2dc\uc791\ub418\ub294\uc9c0 \ucc3e\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. hare: \uc18d\ub3c4\uac00 \ube60\ub978 runner tortoise: \uc18d\ub3c4\uac00 \ub290\ub9b0 \uac70\ubd81\uc774 hare\ub294 \uac70\ubd81\uc774\ubcf4\ub2e4 2\ubc30 \ube60\ub978 \uc18d\ub3c4\ub85c \uc6c0\uc9c1\uc778\ub2e4\uace0 \ud558\uace0, haere\uc640 \uac70\ubd81\uc774\uac00 \ub9cc\ub098\uac8c \ub41c\ub2e4\uba74 cycle\uc774 \uc788\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8 \ub9cc\ub09c \uc9c0\uc810\uc5d0\uc11c \uac70\ubd81\uc774\ub9cc \uc6d0\uc810\uc73c\ub85c \ub2e4\uc2dc \ub418\ub3cc\ub9ac\uace0, hare\uac00 \uac70\ubd81\uc774\uc640 \uac19\uc740 \uc18d\ub3c4\ub85c \uc6c0\uc9c1\uc774\ub3c4\ub85d \ud588\uc744 \ub54c, \ub2e4\uc2dc \ub9cc\ub09c \uc9c0\uc810\uc774 cycle\uc758 \uc2dc\uc791 \uc704\uce58\uc785\ub2c8\ub2e4. (\uc194\uc9c1\ud788 \uc774\ud574\ub294 \uc798 \uc548 \ub428) my code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public : ListNode * detectCycle ( ListNode * head ) { if ( head == nullptr ) return nullptr ; if ( head -> next == nullptr || head -> next -> next == nullptr ) return nullptr ; // find isCycle int isFirst = true ; ListNode * ptrFast = head ; ListNode * ptrSlow = head ; while ( 1 ) { if ( ptrFast -> next == nullptr || ptrFast -> next -> next == nullptr ) return nullptr ; if ( ptrSlow == ptrFast && ! isFirst ) break ; ptrSlow = ptrSlow -> next ; ptrFast = ptrFast -> next -> next ; isFirst = false ; } printf ( \"here \\n \" ); ptrSlow = head ; while ( 1 ) { if ( ptrFast == ptrSlow ) return ptrSlow ; ptrSlow = ptrSlow -> next ; ptrFast = ptrFast -> next ; } } };","title":"2021-04-30"},{"location":"daily/2021-04-30/#leet-code-1214-two-pointer-technique","text":"","title":"Leet code - 1214 two-pointer-technique"},{"location":"daily/2021-04-30/#floyds-tortoise-and-hare","text":"cycle\uc758 \uc720\ubb34\uc640 cycle\uc774 \uc2dc\uc791\ub418\ub294 \uc9c0\uc810\uc744 \ucc3e\ub294 \uc54c\uace0\ub9ac\uc998 \ud2b9\uc9d5\uc73c\ub85c\ub294 memory\ub97c O(1)\ub9cc\uc5d0 \uc5b4\ub5a4 \uc9c0\uc810\uc5d0\uc11c cycle\uc774 \uc2dc\uc791\ub418\ub294\uc9c0 \ucc3e\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. hare: \uc18d\ub3c4\uac00 \ube60\ub978 runner tortoise: \uc18d\ub3c4\uac00 \ub290\ub9b0 \uac70\ubd81\uc774 hare\ub294 \uac70\ubd81\uc774\ubcf4\ub2e4 2\ubc30 \ube60\ub978 \uc18d\ub3c4\ub85c \uc6c0\uc9c1\uc778\ub2e4\uace0 \ud558\uace0, haere\uc640 \uac70\ubd81\uc774\uac00 \ub9cc\ub098\uac8c \ub41c\ub2e4\uba74 cycle\uc774 \uc788\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8 \ub9cc\ub09c \uc9c0\uc810\uc5d0\uc11c \uac70\ubd81\uc774\ub9cc \uc6d0\uc810\uc73c\ub85c \ub2e4\uc2dc \ub418\ub3cc\ub9ac\uace0, hare\uac00 \uac70\ubd81\uc774\uc640 \uac19\uc740 \uc18d\ub3c4\ub85c \uc6c0\uc9c1\uc774\ub3c4\ub85d \ud588\uc744 \ub54c, \ub2e4\uc2dc \ub9cc\ub09c \uc9c0\uc810\uc774 cycle\uc758 \uc2dc\uc791 \uc704\uce58\uc785\ub2c8\ub2e4. (\uc194\uc9c1\ud788 \uc774\ud574\ub294 \uc798 \uc548 \ub428) my code 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode(int x) : val(x), next(NULL) {} * }; */ class Solution { public : ListNode * detectCycle ( ListNode * head ) { if ( head == nullptr ) return nullptr ; if ( head -> next == nullptr || head -> next -> next == nullptr ) return nullptr ; // find isCycle int isFirst = true ; ListNode * ptrFast = head ; ListNode * ptrSlow = head ; while ( 1 ) { if ( ptrFast -> next == nullptr || ptrFast -> next -> next == nullptr ) return nullptr ; if ( ptrSlow == ptrFast && ! isFirst ) break ; ptrSlow = ptrSlow -> next ; ptrFast = ptrFast -> next -> next ; isFirst = false ; } printf ( \"here \\n \" ); ptrSlow = head ; while ( 1 ) { if ( ptrFast == ptrSlow ) return ptrSlow ; ptrSlow = ptrSlow -> next ; ptrFast = ptrFast -> next ; } } };","title":"Floyd's Tortoise and Hare"},{"location":"daily/2021-05-01/","text":"leet code - 1215 inter section of two linked list \ub0b4 \ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 // 1215 // intersection of two linked list // easy solution // starting time // PM 11:10 // idea - to start at two points simultaneously // 1. check lengths // 2. in the short branch, start late // end time // PM 11:28 // duration: 18 minutes #include <stdio.h> // Definition for singly-linked list. struct ListNode { int val ; ListNode * next ; ListNode ( int x ) : val ( x ), next ( NULL ) {} }; class Solution { public : ListNode * getIntersectionNode ( ListNode * headA , ListNode * headB ) { // check each length int cnt1 = 0 ; int cnt2 = 0 ; ListNode * ptrA = headA ; while ( ptrA != nullptr ) { ptrA = ptrA -> next ; cnt1 ++ ; } ListNode * ptrB = headB ; while ( ptrB != nullptr ) { ptrB = ptrB -> next ; cnt2 ++ ; } ptrA = headA ; ptrB = headB ; printf ( \"%d \\n \" , cnt1 ); printf ( \"%d \\n \" , cnt2 ); if ( cnt1 > cnt2 ) { int diff = cnt1 - cnt2 ; for ( int i = 0 ; i < diff ; ++ i ) { ptrA = ptrA -> next ; } for ( int i = 0 ; i < cnt2 ; ++ i ) { if ( ptrA == ptrB ) { return ptrA ; } ptrA = ptrA -> next ; ptrB = ptrB -> next ; } } else if ( cnt1 < cnt2 ) { int diff = cnt2 - cnt1 ; for ( int i = 0 ; i < diff ; ++ i ) { ptrB = ptrB -> next ; } for ( int i = 0 ; i < cnt1 ; ++ i ) { printf ( \"A: %d \\n \" , ptrA -> val ); printf ( \"B: %d \\n \" , ptrB -> val ); if ( ptrA == ptrB ) { return ptrA ; } ptrA = ptrA -> next ; ptrB = ptrB -> next ; } } else { for ( int i = 0 ; i < cnt1 ; ++ i ) { if ( ptrA == ptrB ) { return ptrA ; } ptrA = ptrA -> next ; ptrB = ptrB -> next ; } } return nullptr ; } }; \ub354 \uc9e7\uc740(\ud6a8\uc728\uc801\uc778) \uc194\ub8e8\uc158 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // \ub354 \uc9e7\uc740 \uc194\ub8e8\uc158 // \ub450 \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\ub97c \uac01\uac01 A, B\ub77c\uace0 \ud588\uc744 \ub54c, 2A+2B = (A+B) + (A+B) class Solution { public : ListNode * getIntersectionNode ( ListNode * headA , ListNode * headB ) { ListNode * p1 = headA ; ListNode * p2 = headB ; while ( p1 != p2 ){ p1 = p1 == nullptr ? headB : p1 -> next ; p2 = p2 == nullptr ? headA : p2 -> next ; } return p1 ; } };","title":"2021-05-01"},{"location":"daily/2021-05-01/#leet-code-1215-inter-section-of-two-linked-list","text":"\ub0b4 \ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 // 1215 // intersection of two linked list // easy solution // starting time // PM 11:10 // idea - to start at two points simultaneously // 1. check lengths // 2. in the short branch, start late // end time // PM 11:28 // duration: 18 minutes #include <stdio.h> // Definition for singly-linked list. struct ListNode { int val ; ListNode * next ; ListNode ( int x ) : val ( x ), next ( NULL ) {} }; class Solution { public : ListNode * getIntersectionNode ( ListNode * headA , ListNode * headB ) { // check each length int cnt1 = 0 ; int cnt2 = 0 ; ListNode * ptrA = headA ; while ( ptrA != nullptr ) { ptrA = ptrA -> next ; cnt1 ++ ; } ListNode * ptrB = headB ; while ( ptrB != nullptr ) { ptrB = ptrB -> next ; cnt2 ++ ; } ptrA = headA ; ptrB = headB ; printf ( \"%d \\n \" , cnt1 ); printf ( \"%d \\n \" , cnt2 ); if ( cnt1 > cnt2 ) { int diff = cnt1 - cnt2 ; for ( int i = 0 ; i < diff ; ++ i ) { ptrA = ptrA -> next ; } for ( int i = 0 ; i < cnt2 ; ++ i ) { if ( ptrA == ptrB ) { return ptrA ; } ptrA = ptrA -> next ; ptrB = ptrB -> next ; } } else if ( cnt1 < cnt2 ) { int diff = cnt2 - cnt1 ; for ( int i = 0 ; i < diff ; ++ i ) { ptrB = ptrB -> next ; } for ( int i = 0 ; i < cnt1 ; ++ i ) { printf ( \"A: %d \\n \" , ptrA -> val ); printf ( \"B: %d \\n \" , ptrB -> val ); if ( ptrA == ptrB ) { return ptrA ; } ptrA = ptrA -> next ; ptrB = ptrB -> next ; } } else { for ( int i = 0 ; i < cnt1 ; ++ i ) { if ( ptrA == ptrB ) { return ptrA ; } ptrA = ptrA -> next ; ptrB = ptrB -> next ; } } return nullptr ; } }; \ub354 \uc9e7\uc740(\ud6a8\uc728\uc801\uc778) \uc194\ub8e8\uc158 1 2 3 4 5 6 7 8 9 10 11 12 13 14 // \ub354 \uc9e7\uc740 \uc194\ub8e8\uc158 // \ub450 \ub9ac\uc2a4\ud2b8\uc758 \uae38\uc774\ub97c \uac01\uac01 A, B\ub77c\uace0 \ud588\uc744 \ub54c, 2A+2B = (A+B) + (A+B) class Solution { public : ListNode * getIntersectionNode ( ListNode * headA , ListNode * headB ) { ListNode * p1 = headA ; ListNode * p2 = headB ; while ( p1 != p2 ){ p1 = p1 == nullptr ? headB : p1 -> next ; p2 = p2 == nullptr ? headA : p2 -> next ; } return p1 ; } };","title":"leet code - 1215 inter section of two linked list"},{"location":"daily/2021-05-02/","text":"algorithm and \ub514\ubc84\uae45\uc744 \ud1b5\ud574 \ubc30\uc6b0\ub294 \ub9ac\ub205\uc2a4 \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac leetcode - 1296(Remove Nth Node From End of List) \ub0b4 \ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // Remove Nth Node From End of List // time duration: about 30 minutes // \ud575\uc2ec\uc740 n \uac1c \uc804\uc758 item\uc744 \uc9c0\uc6b0\ub294 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 dealy\ub97c \uc8fc\uace0 \uc9c0\uc6b0\ub294 \uac83 #include <stdio.h> // Definition for singly-linked list. struct ListNode { int val ; ListNode * next ; ListNode () : val ( 0 ), next ( nullptr ) {} ListNode ( int x ) : val ( x ), next ( nullptr ) {} ListNode ( int x , ListNode * next ) : val ( x ), next ( next ) {} }; class Solution { public : ListNode * removeNthFromEnd ( ListNode * head , int n ) { ListNode * ptr1 = head ; ListNode * ptr2 = head ; for ( int i = 0 ; i < n ; ++ i ) { ptr1 = ptr1 -> next ; } if ( ptr1 != nullptr ) { while ( ptr1 -> next != nullptr ) { ptr1 = ptr1 -> next ; ptr2 = ptr2 -> next ; } if ( ptr2 -> next == nullptr ) { head = head -> next ; return head ; } else { ptr2 -> next = ptr2 -> next -> next ; return head ; } } else { head = head -> next ; return head ; } } }; \ub514\ubc84\uae45\uc744 \ud1b5\ud574 \ubc30\uc6b0\ub294 \ub9ac\ub205\uc2a4 \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac 2\uc7a5 \ucee4\ub110 \ube4c\ub4dc(\ub9ac\ub205\uc2a4\uc5d0\uc11c \uc18c\uc2a4\ucf54\ub4dc \ubc1b\uc544\uc11c \ube4c\ub4dc \ud558\uba74 \ub428) \ub9ac\ub205\uc2a4 \ucee4\ub110\uc758 \uc18c\uc2a4 \uad6c\uc870 arch arm: 32\ube44\ud2b8 \uacc4\uc5f4 ARM \uc544\ud0a4\ud14d\ucc98 \ucf54\ub4dc\uac00 \uc788\uc73c\uba70, \ub77c\uc988\ube44\uc548\ub3c4 \uc774 \ud558\ubd80 \ub514\ub809\ud130\ub9ac \ucf54\ub4dc\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. arm64: 64\ube44\ud2b8 \uacc4\uc5f4 ARM \uc544\ud0a4\ud14d\ucc98 \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. x86: \ud3f4\ub354 \uc774\ub984\uacfc \uac19\uc774 \uc778\ud154 x86 \uc544\ud0a4\ud14d\ucc98 \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. include Documentation: \ucee4\ub110 \uae30\uc220 \ubb38\uc11c\uac00 \uc788\ub294 \ud3f4\ub354. \ucee4\ub110 \uac1c\ubc1c\uc790\ub97c \ub300\uc0c1\uc73c\ub85c \uc791\uc131\ub41c \ubb38\uc11c\uc774\uae30\uc5d0 \uaf64 \uc5b4\ub824\uc6c0 kernel irq: \uc778\ud130\ub7fd\ud2b8 \uad00\ub828 \ucf54\ub4dc sched: \uc2a4\ucf00\uc904\ub9c1 \ucf54\ub4dc power: \ucee4\ub110 \ud30c\uc6cc \ub9e4\ub2c8\uc9c0\uba3c\ud2b8 \ucf54\ub4dc locking: \ucee4\ub110 \ub3d9\uae30\ud654 \uad00\ub828 \ucf54\ub4dc printk: \ucee4\ub110 \ucf58\uc194 \uad00\ub828 \ucf54\ub4dc trace: trace\uad00\ub828 \ucf54\ub4dc \uc704 \ub514\ub809\ud130\ub9ac\ub4e4\uc5d0\ub294 \uc544\ud0a4\ud14d\ucc98\uc640 \ubb34\uad00\ud55c \ucee4\ub110 \uacf5\ud1b5 \ucf54\ub4dc\uac00 \uc788\uc73c\uba70, \uc544\ud0a4\ud14d\ucc98\ubcc4\ub85c \ub3d9\uc791\ud558\ub294 \ucee4\ub110 \ucf54\ub4dc\ub294 arch/*kernel/\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. mm: memory management\uc758 \uc57d\uc790\ub85c \uac00\uc0c1 \uba54\ubaa8\ub9ac \ubc0f \ud398\uc774\uc9d5 \uad00\ub828 \ucf54\ub4dc\uac00 \ub4e4\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ud0a4\ud14d\ucc98\ubcc4\ub85c \ub3d9\uc791\ud558\ub294 \uba54\ub85c\ub9ac \uad00\ub9ac \ucf54\ub4dc\ub294 arch/*/mm \uc544\ub798\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. drivers: \ubaa8\ub4e0 \uc2dc\uc2a4\ud15c\uc758 \ub514\ubc14\uc774\uc2a4 \ub4dc\ub77c\uc774\ubc84 \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud558\ubd80 \ub514\ub809\ud130\ub9ac\uc5d0 \ub4dc\ub77c\uc774\ubc84 \uc885\ub958\ubcc4 \uc18c\uc2a4\uac00 \ub4e4\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. fs: \ubaa8\ub4e0 \ud30c\uc77c \uc2dc\uc2a4\ud15c \ucf54\ub4dc\uac00 \ub2f4\uae34 \ud3f4\ub354\uc785\ub2c8\ub2e4. lib: lib \ub514\ub809\ud130\ub9ac\uc5d0\ub294 \ucee4\ub110\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ud0a4\ud14d\ucc98\uc5d0 \uc885\uc18d\uc801\uc778 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucf54\ub4dc\ub294 arch/*/lib/\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \uc8fc\uc694 \ubc14\uc774\ub108\ub9ac \uc720\ud2f8\ub9ac\ud2f0 objdump: \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 ELF \ud615\uc2dd\uc758 \ud30c\uc77c\uc744 \uc5b4\uc148\ube14\ub9ac\uc5b4\ub85c \ucd9c\ub825 \ud5e4\ub354\uc815\ubcf4 \ud655\uc778: objectdump -x vmlinux \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\ub97c \ucd9c\ub825: objectdump -d vmlinux map\ud30c\uc77c\uc744 \uc5f4\uc5b4\ubcf4\uba74, \uc2ec\ubc8c\ubcc4 \uc8fc\uc18c\ub97c \ud655\uc778 \uac00\ub2a5. objdump --start-address=[\uc2dc\uc791\uc8fc\uc18c] --stop-address=[\ub05d\uc8fc\uc18c] -d vmlinux as: \uc5b4\uc148\ube14\ub7ec ld: \ub9c1\ucee4 addr2line: \uc8fc\uc18c\ub97c \ud30c\uc77c\uacfc \ub77c\uc778\uc73c\ub85c \ucd9c\ub825 nm: \uc624\ube0c\ud14d\ud2b8 \ud30c\uc77c\uc758 \uc2ec\ubc8c\uc744 \ucd9c\ub825 readelf: ELF \ud30c\uc77c\uc758 \ub0b4\uc6a9\uc744 \ucd9c\ub825","title":"2021-05-02"},{"location":"daily/2021-05-02/#algorithm-and","text":"","title":"algorithm and \ub514\ubc84\uae45\uc744 \ud1b5\ud574 \ubc30\uc6b0\ub294 \ub9ac\ub205\uc2a4 \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac"},{"location":"daily/2021-05-02/#leetcode-1296remove-nth-node-from-end-of-list","text":"\ub0b4 \ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 // Remove Nth Node From End of List // time duration: about 30 minutes // \ud575\uc2ec\uc740 n \uac1c \uc804\uc758 item\uc744 \uc9c0\uc6b0\ub294 \uac83\uc774\uae30 \ub54c\ubb38\uc5d0 dealy\ub97c \uc8fc\uace0 \uc9c0\uc6b0\ub294 \uac83 #include <stdio.h> // Definition for singly-linked list. struct ListNode { int val ; ListNode * next ; ListNode () : val ( 0 ), next ( nullptr ) {} ListNode ( int x ) : val ( x ), next ( nullptr ) {} ListNode ( int x , ListNode * next ) : val ( x ), next ( next ) {} }; class Solution { public : ListNode * removeNthFromEnd ( ListNode * head , int n ) { ListNode * ptr1 = head ; ListNode * ptr2 = head ; for ( int i = 0 ; i < n ; ++ i ) { ptr1 = ptr1 -> next ; } if ( ptr1 != nullptr ) { while ( ptr1 -> next != nullptr ) { ptr1 = ptr1 -> next ; ptr2 = ptr2 -> next ; } if ( ptr2 -> next == nullptr ) { head = head -> next ; return head ; } else { ptr2 -> next = ptr2 -> next -> next ; return head ; } } else { head = head -> next ; return head ; } } };","title":"leetcode - 1296(Remove Nth Node From End of List)"},{"location":"daily/2021-05-02/#_1","text":"2\uc7a5 \ucee4\ub110 \ube4c\ub4dc(\ub9ac\ub205\uc2a4\uc5d0\uc11c \uc18c\uc2a4\ucf54\ub4dc \ubc1b\uc544\uc11c \ube4c\ub4dc \ud558\uba74 \ub428) \ub9ac\ub205\uc2a4 \ucee4\ub110\uc758 \uc18c\uc2a4 \uad6c\uc870 arch arm: 32\ube44\ud2b8 \uacc4\uc5f4 ARM \uc544\ud0a4\ud14d\ucc98 \ucf54\ub4dc\uac00 \uc788\uc73c\uba70, \ub77c\uc988\ube44\uc548\ub3c4 \uc774 \ud558\ubd80 \ub514\ub809\ud130\ub9ac \ucf54\ub4dc\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. arm64: 64\ube44\ud2b8 \uacc4\uc5f4 ARM \uc544\ud0a4\ud14d\ucc98 \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. x86: \ud3f4\ub354 \uc774\ub984\uacfc \uac19\uc774 \uc778\ud154 x86 \uc544\ud0a4\ud14d\ucc98 \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. include Documentation: \ucee4\ub110 \uae30\uc220 \ubb38\uc11c\uac00 \uc788\ub294 \ud3f4\ub354. \ucee4\ub110 \uac1c\ubc1c\uc790\ub97c \ub300\uc0c1\uc73c\ub85c \uc791\uc131\ub41c \ubb38\uc11c\uc774\uae30\uc5d0 \uaf64 \uc5b4\ub824\uc6c0 kernel irq: \uc778\ud130\ub7fd\ud2b8 \uad00\ub828 \ucf54\ub4dc sched: \uc2a4\ucf00\uc904\ub9c1 \ucf54\ub4dc power: \ucee4\ub110 \ud30c\uc6cc \ub9e4\ub2c8\uc9c0\uba3c\ud2b8 \ucf54\ub4dc locking: \ucee4\ub110 \ub3d9\uae30\ud654 \uad00\ub828 \ucf54\ub4dc printk: \ucee4\ub110 \ucf58\uc194 \uad00\ub828 \ucf54\ub4dc trace: trace\uad00\ub828 \ucf54\ub4dc \uc704 \ub514\ub809\ud130\ub9ac\ub4e4\uc5d0\ub294 \uc544\ud0a4\ud14d\ucc98\uc640 \ubb34\uad00\ud55c \ucee4\ub110 \uacf5\ud1b5 \ucf54\ub4dc\uac00 \uc788\uc73c\uba70, \uc544\ud0a4\ud14d\ucc98\ubcc4\ub85c \ub3d9\uc791\ud558\ub294 \ucee4\ub110 \ucf54\ub4dc\ub294 arch/*kernel/\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. mm: memory management\uc758 \uc57d\uc790\ub85c \uac00\uc0c1 \uba54\ubaa8\ub9ac \ubc0f \ud398\uc774\uc9d5 \uad00\ub828 \ucf54\ub4dc\uac00 \ub4e4\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ud0a4\ud14d\ucc98\ubcc4\ub85c \ub3d9\uc791\ud558\ub294 \uba54\ub85c\ub9ac \uad00\ub9ac \ucf54\ub4dc\ub294 arch/*/mm \uc544\ub798\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. drivers: \ubaa8\ub4e0 \uc2dc\uc2a4\ud15c\uc758 \ub514\ubc14\uc774\uc2a4 \ub4dc\ub77c\uc774\ubc84 \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud558\ubd80 \ub514\ub809\ud130\ub9ac\uc5d0 \ub4dc\ub77c\uc774\ubc84 \uc885\ub958\ubcc4 \uc18c\uc2a4\uac00 \ub4e4\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. fs: \ubaa8\ub4e0 \ud30c\uc77c \uc2dc\uc2a4\ud15c \ucf54\ub4dc\uac00 \ub2f4\uae34 \ud3f4\ub354\uc785\ub2c8\ub2e4. lib: lib \ub514\ub809\ud130\ub9ac\uc5d0\ub294 \ucee4\ub110\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ud0a4\ud14d\ucc98\uc5d0 \uc885\uc18d\uc801\uc778 \ub77c\uc774\ube0c\ub7ec\ub9ac \ucf54\ub4dc\ub294 arch/*/lib/\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \uc8fc\uc694 \ubc14\uc774\ub108\ub9ac \uc720\ud2f8\ub9ac\ud2f0 objdump: \ub77c\uc774\ube0c\ub7ec\ub9ac\ub098 ELF \ud615\uc2dd\uc758 \ud30c\uc77c\uc744 \uc5b4\uc148\ube14\ub9ac\uc5b4\ub85c \ucd9c\ub825 \ud5e4\ub354\uc815\ubcf4 \ud655\uc778: objectdump -x vmlinux \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\ub97c \ucd9c\ub825: objectdump -d vmlinux map\ud30c\uc77c\uc744 \uc5f4\uc5b4\ubcf4\uba74, \uc2ec\ubc8c\ubcc4 \uc8fc\uc18c\ub97c \ud655\uc778 \uac00\ub2a5. objdump --start-address=[\uc2dc\uc791\uc8fc\uc18c] --stop-address=[\ub05d\uc8fc\uc18c] -d vmlinux as: \uc5b4\uc148\ube14\ub7ec ld: \ub9c1\ucee4 addr2line: \uc8fc\uc18c\ub97c \ud30c\uc77c\uacfc \ub77c\uc778\uc73c\ub85c \ucd9c\ub825 nm: \uc624\ube0c\ud14d\ud2b8 \ud30c\uc77c\uc758 \uc2ec\ubc8c\uc744 \ucd9c\ub825 readelf: ELF \ud30c\uc77c\uc758 \ub0b4\uc6a9\uc744 \ucd9c\ub825","title":"\ub514\ubc84\uae45\uc744 \ud1b5\ud574 \ubc30\uc6b0\ub294 \ub9ac\ub205\uc2a4 \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac"},{"location":"daily/2021-05-03/","text":"\uc624\ub298\uc740 leet code\ub97c \ub450 \ubb38\uc81c \ud480\uc5c8\uc2b5\ub2c8\ub2e4 leet code: 1207 - Remove Linked List Elements \uc2e4\ud589\uc2dc\uac04(\uc0c1\uc704 59.52%), \uba54\ubaa8\ub9ac(\uc0c1\uc704 26.07%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * removeElements ( ListNode * head , int val ) { ListNode * newHead = new ListNode (); newHead -> next = head ; ListNode * n1 = newHead ; ListNode * n2 = newHead -> next ; while ( n2 != nullptr ) { if ( n2 -> val == val ) { n1 -> next = n2 -> next ; n2 = n1 -> next ; } else { n1 = n1 -> next ; if ( n1 != nullptr ) n2 = n1 -> next ; } } return newHead -> next ; } }; leet code: 1208 - Odd Even Linked List runtime \uc0c1\uc704 0%, memory \uc0c1\uc704 100% 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * oddEvenList ( ListNode * head ) { ListNode * head1 = new ListNode (); ListNode * head2 = new ListNode (); ListNode * ptr1 = head1 ; ListNode * ptr2 = head2 ; int cnt = 0 ; while ( head != nullptr ) { if ( cnt % 2 == 0 ) { ptr1 -> next = new ListNode ( head -> val ); ptr1 = ptr1 -> next ; } else { ptr2 -> next = new ListNode ( head -> val ); ptr2 = ptr2 -> next ; } head = head -> next ; cnt ++ ; } ptr1 -> next = head2 -> next ; return head1 -> next ; } };","title":"2021-05-03"},{"location":"daily/2021-05-03/#leet-code","text":"","title":"\uc624\ub298\uc740 leet code\ub97c \ub450 \ubb38\uc81c \ud480\uc5c8\uc2b5\ub2c8\ub2e4"},{"location":"daily/2021-05-03/#leet-code-1207-remove-linked-list-elements","text":"\uc2e4\ud589\uc2dc\uac04(\uc0c1\uc704 59.52%), \uba54\ubaa8\ub9ac(\uc0c1\uc704 26.07%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * removeElements ( ListNode * head , int val ) { ListNode * newHead = new ListNode (); newHead -> next = head ; ListNode * n1 = newHead ; ListNode * n2 = newHead -> next ; while ( n2 != nullptr ) { if ( n2 -> val == val ) { n1 -> next = n2 -> next ; n2 = n1 -> next ; } else { n1 = n1 -> next ; if ( n1 != nullptr ) n2 = n1 -> next ; } } return newHead -> next ; } };","title":"leet code: 1207 - Remove Linked List Elements"},{"location":"daily/2021-05-03/#leet-code-1208-odd-even-linked-list","text":"runtime \uc0c1\uc704 0%, memory \uc0c1\uc704 100% 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * oddEvenList ( ListNode * head ) { ListNode * head1 = new ListNode (); ListNode * head2 = new ListNode (); ListNode * ptr1 = head1 ; ListNode * ptr2 = head2 ; int cnt = 0 ; while ( head != nullptr ) { if ( cnt % 2 == 0 ) { ptr1 -> next = new ListNode ( head -> val ); ptr1 = ptr1 -> next ; } else { ptr2 -> next = new ListNode ( head -> val ); ptr2 = ptr2 -> next ; } head = head -> next ; cnt ++ ; } ptr1 -> next = head2 -> next ; return head1 -> next ; } };","title":"leet code: 1208 - Odd Even Linked List"},{"location":"daily/2021-05-04/","text":"leet code: 1209 - Palindrome Linked List time(beats 73.52%), space(beats 63.02%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : bool isPalindrome ( ListNode * head ) { ListNode * newHead = new ListNode (); int nodeLen = getLength ( head ); int halfLen = ( nodeLen + 1 ) / 2 ; int halfLen1 = nodeLen / 2 ; ListNode * fakeHead1 = new ListNode (); ListNode * fakeHead2 = new ListNode (); fakeHead1 -> next = fakeHead2 ; fakeHead2 -> next = head ; ListNode * ptr = head ; ListNode * ptr2 = fakeHead1 ; // reverse sort by halfLen for ( int i = 0 ; i < halfLen ; ++ i ) { fakeHead2 -> next = ptr -> next ; ptr -> next = fakeHead1 -> next ; fakeHead1 -> next = ptr ; ptr = fakeHead2 -> next ; ptr2 = ptr2 -> next ; } // compare along fakeHead1, fakeHead2 fakeHead1 = fakeHead1 -> next ; if ( nodeLen % 2 == 1 ) fakeHead1 = fakeHead1 -> next ; fakeHead2 = fakeHead2 -> next ; for ( int i = 0 ; i < halfLen1 ; ++ i ) { if ( fakeHead1 -> val != fakeHead2 -> val ) { return false ; } fakeHead1 = fakeHead1 -> next ; fakeHead2 = fakeHead2 -> next ; } return true ; } private : int getLength ( ListNode * head ) { int len = 0 ; while ( head != nullptr ) { head = head -> next ; len ++ ; } return len ; } };","title":"2021-05-04"},{"location":"daily/2021-05-04/#leet-code-1209-palindrome-linked-list","text":"time(beats 73.52%), space(beats 63.02%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : bool isPalindrome ( ListNode * head ) { ListNode * newHead = new ListNode (); int nodeLen = getLength ( head ); int halfLen = ( nodeLen + 1 ) / 2 ; int halfLen1 = nodeLen / 2 ; ListNode * fakeHead1 = new ListNode (); ListNode * fakeHead2 = new ListNode (); fakeHead1 -> next = fakeHead2 ; fakeHead2 -> next = head ; ListNode * ptr = head ; ListNode * ptr2 = fakeHead1 ; // reverse sort by halfLen for ( int i = 0 ; i < halfLen ; ++ i ) { fakeHead2 -> next = ptr -> next ; ptr -> next = fakeHead1 -> next ; fakeHead1 -> next = ptr ; ptr = fakeHead2 -> next ; ptr2 = ptr2 -> next ; } // compare along fakeHead1, fakeHead2 fakeHead1 = fakeHead1 -> next ; if ( nodeLen % 2 == 1 ) fakeHead1 = fakeHead1 -> next ; fakeHead2 = fakeHead2 -> next ; for ( int i = 0 ; i < halfLen1 ; ++ i ) { if ( fakeHead1 -> val != fakeHead2 -> val ) { return false ; } fakeHead1 = fakeHead1 -> next ; fakeHead2 = fakeHead2 -> next ; } return true ; } private : int getLength ( ListNode * head ) { int len = 0 ; while ( head != nullptr ) { head = head -> next ; len ++ ; } return len ; } };","title":"leet code: 1209 - Palindrome Linked List"},{"location":"daily/2021-05-06/","text":"leet code \ubb38\uc81c \ud480\uc774 1294 - Design Linked List C++ time(beats 81.95%) space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 struct Node { Node * prev ; Node * next ; int val ; }; class MyLinkedList { public : /** Initialize your data structure here. */ MyLinkedList () { _head = new Node (); _tail = new Node (); _head -> next = _tail ; _tail -> prev = _head ; _len = 0 ; } /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */ int get ( int index ) { if ( index >= _len ) return -1 ; Node * ptr = _head -> next ; for ( int i = 0 ; i < index ; ++ i ) { ptr = ptr -> next ; } return ptr -> val ; } /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */ void addAtHead ( int val ) { Node * ptr = new Node (); ptr -> val = val ; ptr -> prev = _head ; ptr -> next = _head -> next ; _head -> next -> prev = ptr ; _head -> next = ptr ; _len ++ ; } /** Append a node of value val to the last element of the linked list. */ void addAtTail ( int val ) { Node * ptr = new Node (); ptr -> val = val ; ptr -> prev = _tail -> prev ; ptr -> next = _tail ; _tail -> prev -> next = ptr ; _tail -> prev = ptr ; _len ++ ; } /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */ void addAtIndex ( int index , int val ) { Node * ptr = _head ; Node * newItem = new Node (); if ( index > _len ) return ; for ( int i = 0 ; i < index ; ++ i ) ptr = ptr -> next ; newItem -> val = val ; newItem -> prev = ptr ; newItem -> next = ptr -> next ; ptr -> next -> prev = newItem ; ptr -> next = newItem ; _len ++ ; return ; } /** Delete the index-th node in the linked list, if the index is valid. */ void deleteAtIndex ( int index ) { if ( index >= _len ) return ; Node * ptr = _head -> next ; for ( int i = 0 ; i < index ; ++ i ) ptr = ptr -> next ; ptr -> prev -> next = ptr -> next ; ptr -> next -> prev = ptr -> prev ; _len -- ; } private : Node * _head ; Node * _tail ; int _len ; }; /** * Your MyLinkedList object will be instantiated and called as such: * MyLinkedList* obj = new MyLinkedList(); * int param_1 = obj->get(index); * obj->addAtHead(val); * obj->addAtTail(val); * obj->addAtIndex(index,val); * obj->deleteAtIndex(index); */ 1227 Merge Two Sorted Lists C++ time(beats 24.92%), memory(beats 35.16%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * mergeTwoLists ( ListNode * l1 , ListNode * l2 ) { ListNode * head = new ListNode (); ListNode * prev = head ; ListNode * ptr1 = l1 ; ListNode * ptr2 = l2 ; while ( ptr1 != nullptr || ptr2 != nullptr ) { if ( ptr1 != nullptr && ptr2 != nullptr ) { if ( ptr1 -> val <= ptr2 -> val ) { prev -> next = ptr1 ; ptr1 = ptr1 -> next ; prev = prev -> next ; } else { prev -> next = ptr2 ; ptr2 = ptr2 -> next ; prev = prev -> next ; } } else if ( ptr1 == nullptr && ptr2 != nullptr ) { prev -> next = ptr2 ; ptr2 = ptr2 -> next ; prev = prev -> next ; } else if ( ptr1 != nullptr && ptr2 == nullptr ) { prev -> next = ptr1 ; ptr1 = ptr1 -> next ; prev = prev -> next ; } } return head -> next ; } }; 1228 - Add Two Numbers C++ time(beats 80.35%), space(beats 28.41%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * addTwoNumbers ( ListNode * l1 , ListNode * l2 ) { ListNode * head = new ListNode (); ListNode * ptr = head ; int carry = 0 ; int val = 0 ; while ( l1 || l2 ) { if ( l1 && l2 ) { val = l1 -> val + l2 -> val ; l1 = l1 -> next ; l2 = l2 -> next ; } else if ( l1 && ! l2 ) { val = l1 -> val ; l1 = l1 -> next ; } else if ( ! l1 && l2 ) { val = l2 -> val ; l2 = l2 -> next ; } ptr -> next = new ListNode (( val + carry ) % 10 ); carry = ( val + carry ) / 10 ; ptr = ptr -> next ; } if ( carry ) { ptr -> next = new ListNode ( carry ); } return head -> next ; } }; 1226 - Insert into a Sorted Circular Linked List C++ time(beats 97.78%), memory(beats 64.95%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 /* // Definition for a Node. class Node { public: int val; Node* next; Node() {} Node(int _val) { val = _val; next = NULL; } Node(int _val, Node* _next) { val = _val; next = _next; } }; */ class Solution { public : Node * insert ( Node * head , int insertVal ) { if ( head ) { // find minimum value int minVal = head -> val ; Node * minPtr = head ; Node * ptr = head -> next ; while ( ptr != head ) { if ( ptr -> val < minVal ) { minPtr = ptr ; minVal = ptr -> val ; } ptr = ptr -> next ; } ptr = minPtr ; while ( ptr -> next != minPtr ) { if ( insertVal >= ptr -> val && insertVal <= ptr -> next -> val ) { Node * newNode = new Node ( insertVal , ptr -> next ); ptr -> next = newNode ; return head ; } ptr = ptr -> next ; } Node * newNode = new Node ( insertVal , ptr -> next ); ptr -> next = newNode ; return head ; } else { // head is null Node * newNode = new Node ( insertVal ); newNode -> next = newNode ; return newNode ; } } }; 1295 - Rotate List C++ time(beats 98.83%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * rotateRight ( ListNode * head , int k ) { if ( ! head ) return head ; ListNode * ptr = head ; ListNode * tail = head ; ListNode * tmp = nullptr ; int nodeLen = 0 ; while ( ptr ) { nodeLen ++ ; if ( ptr -> next == nullptr ) tail = ptr ; ptr = ptr -> next ; } printf ( \"%d \\n \" , tail -> val ); k = k % nodeLen ; if ( k == 0 ) return head ; ptr = head ; for ( int i = 0 ; i < ( nodeLen - k -1 ); ++ i ) { ptr = ptr -> next ; } tail -> next = head ; head = ptr -> next ; ptr -> next = nullptr ; return head ; } }; 3238 - Max Consecutive Ones C++ time(beats 45.39%) space(57.29%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public : int findMaxConsecutiveOnes ( vector < int >& nums ) { int rslt = 0 ; int maxVal = 0 ; for ( int i = 0 ; i < nums . size (); ++ i ) { if ( nums [ i ]) { rslt ++ ; if ( rslt > maxVal ) maxVal = rslt ; } else { rslt = 0 ; } } return maxVal ; } };","title":"2021-05-06"},{"location":"daily/2021-05-06/#leet-code","text":"","title":"leet code \ubb38\uc81c \ud480\uc774"},{"location":"daily/2021-05-06/#1294-design-linked-list","text":"C++ time(beats 81.95%) space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 struct Node { Node * prev ; Node * next ; int val ; }; class MyLinkedList { public : /** Initialize your data structure here. */ MyLinkedList () { _head = new Node (); _tail = new Node (); _head -> next = _tail ; _tail -> prev = _head ; _len = 0 ; } /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */ int get ( int index ) { if ( index >= _len ) return -1 ; Node * ptr = _head -> next ; for ( int i = 0 ; i < index ; ++ i ) { ptr = ptr -> next ; } return ptr -> val ; } /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */ void addAtHead ( int val ) { Node * ptr = new Node (); ptr -> val = val ; ptr -> prev = _head ; ptr -> next = _head -> next ; _head -> next -> prev = ptr ; _head -> next = ptr ; _len ++ ; } /** Append a node of value val to the last element of the linked list. */ void addAtTail ( int val ) { Node * ptr = new Node (); ptr -> val = val ; ptr -> prev = _tail -> prev ; ptr -> next = _tail ; _tail -> prev -> next = ptr ; _tail -> prev = ptr ; _len ++ ; } /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */ void addAtIndex ( int index , int val ) { Node * ptr = _head ; Node * newItem = new Node (); if ( index > _len ) return ; for ( int i = 0 ; i < index ; ++ i ) ptr = ptr -> next ; newItem -> val = val ; newItem -> prev = ptr ; newItem -> next = ptr -> next ; ptr -> next -> prev = newItem ; ptr -> next = newItem ; _len ++ ; return ; } /** Delete the index-th node in the linked list, if the index is valid. */ void deleteAtIndex ( int index ) { if ( index >= _len ) return ; Node * ptr = _head -> next ; for ( int i = 0 ; i < index ; ++ i ) ptr = ptr -> next ; ptr -> prev -> next = ptr -> next ; ptr -> next -> prev = ptr -> prev ; _len -- ; } private : Node * _head ; Node * _tail ; int _len ; }; /** * Your MyLinkedList object will be instantiated and called as such: * MyLinkedList* obj = new MyLinkedList(); * int param_1 = obj->get(index); * obj->addAtHead(val); * obj->addAtTail(val); * obj->addAtIndex(index,val); * obj->deleteAtIndex(index); */","title":"1294 - Design Linked List"},{"location":"daily/2021-05-06/#1227-merge-two-sorted-lists","text":"C++ time(beats 24.92%), memory(beats 35.16%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * mergeTwoLists ( ListNode * l1 , ListNode * l2 ) { ListNode * head = new ListNode (); ListNode * prev = head ; ListNode * ptr1 = l1 ; ListNode * ptr2 = l2 ; while ( ptr1 != nullptr || ptr2 != nullptr ) { if ( ptr1 != nullptr && ptr2 != nullptr ) { if ( ptr1 -> val <= ptr2 -> val ) { prev -> next = ptr1 ; ptr1 = ptr1 -> next ; prev = prev -> next ; } else { prev -> next = ptr2 ; ptr2 = ptr2 -> next ; prev = prev -> next ; } } else if ( ptr1 == nullptr && ptr2 != nullptr ) { prev -> next = ptr2 ; ptr2 = ptr2 -> next ; prev = prev -> next ; } else if ( ptr1 != nullptr && ptr2 == nullptr ) { prev -> next = ptr1 ; ptr1 = ptr1 -> next ; prev = prev -> next ; } } return head -> next ; } };","title":"1227 Merge Two Sorted Lists"},{"location":"daily/2021-05-06/#1228-add-two-numbers","text":"C++ time(beats 80.35%), space(beats 28.41%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * addTwoNumbers ( ListNode * l1 , ListNode * l2 ) { ListNode * head = new ListNode (); ListNode * ptr = head ; int carry = 0 ; int val = 0 ; while ( l1 || l2 ) { if ( l1 && l2 ) { val = l1 -> val + l2 -> val ; l1 = l1 -> next ; l2 = l2 -> next ; } else if ( l1 && ! l2 ) { val = l1 -> val ; l1 = l1 -> next ; } else if ( ! l1 && l2 ) { val = l2 -> val ; l2 = l2 -> next ; } ptr -> next = new ListNode (( val + carry ) % 10 ); carry = ( val + carry ) / 10 ; ptr = ptr -> next ; } if ( carry ) { ptr -> next = new ListNode ( carry ); } return head -> next ; } };","title":"1228 - Add Two Numbers"},{"location":"daily/2021-05-06/#1226-insert-into-a-sorted-circular-linked-list","text":"C++ time(beats 97.78%), memory(beats 64.95%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 /* // Definition for a Node. class Node { public: int val; Node* next; Node() {} Node(int _val) { val = _val; next = NULL; } Node(int _val, Node* _next) { val = _val; next = _next; } }; */ class Solution { public : Node * insert ( Node * head , int insertVal ) { if ( head ) { // find minimum value int minVal = head -> val ; Node * minPtr = head ; Node * ptr = head -> next ; while ( ptr != head ) { if ( ptr -> val < minVal ) { minPtr = ptr ; minVal = ptr -> val ; } ptr = ptr -> next ; } ptr = minPtr ; while ( ptr -> next != minPtr ) { if ( insertVal >= ptr -> val && insertVal <= ptr -> next -> val ) { Node * newNode = new Node ( insertVal , ptr -> next ); ptr -> next = newNode ; return head ; } ptr = ptr -> next ; } Node * newNode = new Node ( insertVal , ptr -> next ); ptr -> next = newNode ; return head ; } else { // head is null Node * newNode = new Node ( insertVal ); newNode -> next = newNode ; return newNode ; } } };","title":"1226 - Insert into a Sorted Circular Linked List"},{"location":"daily/2021-05-06/#1295-rotate-list","text":"C++ time(beats 98.83%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * rotateRight ( ListNode * head , int k ) { if ( ! head ) return head ; ListNode * ptr = head ; ListNode * tail = head ; ListNode * tmp = nullptr ; int nodeLen = 0 ; while ( ptr ) { nodeLen ++ ; if ( ptr -> next == nullptr ) tail = ptr ; ptr = ptr -> next ; } printf ( \"%d \\n \" , tail -> val ); k = k % nodeLen ; if ( k == 0 ) return head ; ptr = head ; for ( int i = 0 ; i < ( nodeLen - k -1 ); ++ i ) { ptr = ptr -> next ; } tail -> next = head ; head = ptr -> next ; ptr -> next = nullptr ; return head ; } };","title":"1295 - Rotate List"},{"location":"daily/2021-05-06/#3238-max-consecutive-ones","text":"C++ time(beats 45.39%) space(57.29%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public : int findMaxConsecutiveOnes ( vector < int >& nums ) { int rslt = 0 ; int maxVal = 0 ; for ( int i = 0 ; i < nums . size (); ++ i ) { if ( nums [ i ]) { rslt ++ ; if ( rslt > maxVal ) maxVal = rslt ; } else { rslt = 0 ; } } return maxVal ; } };","title":"3238 - Max Consecutive Ones"},{"location":"daily/2021-05-09/","text":"leet code \ubb38\uc81c\ud480\uc774 linked list \uc644\ub8cc 1225 - Flatten a Multilevel Doubly Linked List C++ time(beats 79.87%), space(beats 54.09%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 /* // Definition for a Node. class Node { public: int val; Node* prev; Node* next; Node* child; }; */ class Solution { public : Node * flatten ( Node * head ) { if ( ! head ) return head ; Node * last = head ; Node * cur = head ; Node * branchPtrArr [ 1010 ]; int top = 0 ; branchPtrArr [ 0 ] = head ; top ++ ; // \uadf8\ub9ac\uace0 child\uc5d0\uc11c \ud0d0\uc0c9 // child\uc5d0\uc11c nullptr\uae4c\uc9c0 \ub3c4\ub2ec\ud558\uba74, \uc885\ub8cc while ( top ) { while ( cur ) { // \ub9cc\uc57d child\uac00 \uc788\ub294 \ub178\ub4dc\ub97c \ub9cc\ub098\uba74 // branchPtrArr\uc5d0 cur->next \ub178\ub4dc \ucd94\uac00 if ( cur -> child ) { if ( cur -> next ) { branchPtrArr [ top ] = cur -> next ; top ++ ; } cur -> next = cur -> child ; cur -> next -> prev = cur ; cur -> child = nullptr ; } if ( ! ( cur -> next )) { if ( top == 1 ) top -- ; if ( top > 1 ) { last = branchPtrArr [ top - 1 ]; cur -> next = last ; last -> prev = cur ; top -- ; } } // \uc624\ub978\ucabd\uc73c\ub85c \uac00\uae30 cur = cur -> next ; } } return head ; } }; \ub098\ub294 \ucf54\ub4dc\ub97c \uc880 \ub354 \uae38\uac8c \uc37c\ub294\ub370, DFS\uc5d0 \uc758\ud55c inorder \ud0d0\uc0c9\uc73c\ub85c \uc9e7\uac8c \ud480\uc774\uac00 \uac00\ub2a5\ud558\ub2e4\uace0 \ud569\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Node tail = null ; public Node flatten ( Node head ) { if ( head == null ) return null ; head . prev = tail ; tail = head ; Node nextNode = head . next ; head . next = flatten ( head . child ); head . child = null ; tail . next = flatten ( nextNode ); return head ; } 1229 - Copy List with Random Pointer C++ time(beats 73.83%), space(beats 37.11%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 /* // Definition for a Node. class Node { public: int val; Node* next; Node* random; Node(int _val) { val = _val; next = NULL; random = NULL; } }; */ class Solution { public : Node * copyRandomList ( Node * head ) { Node * orgLst [ 10001 ] = { nullptr , }; Node * dstLst [ 10001 ] = { nullptr , }; int orgTop = 0 ; int dstTop = 0 ; Node * ptr = head ; while ( ptr ) { orgLst [ orgTop ] = ptr ; orgTop ++ ; ptr = ptr -> next ; } Node * rsltHead = new Node ( 0 ); ptr = head ; Node * dstPtr = rsltHead ; for ( int i = 0 ; i < orgTop ; ++ i ) { Node * newNode = new Node ( ptr -> val ); dstPtr -> next = newNode ; ptr = ptr -> next ; dstPtr = dstPtr -> next ; dstLst [ dstTop ] = newNode ; dstTop ++ ; } ptr = head ; dstPtr = rsltHead -> next ; int idx = 0 ; for ( int i = 0 ; i < orgTop ; ++ i ) { if ( ptr -> random ) { idx = getIndex ( orgLst , ptr -> random ); dstPtr -> random = dstLst [ idx ]; } ptr = ptr -> next ; dstPtr = dstPtr -> next ; } return rsltHead -> next ; } private : int getIndex ( Node * lst [], Node * address ) { int i = 0 ; for (; i < 10001 ; ++ i ) { if ( address == lst [ i ]) break ; } return i ; } };","title":"2021-05-09"},{"location":"daily/2021-05-09/#leet-code","text":"linked list \uc644\ub8cc","title":"leet code \ubb38\uc81c\ud480\uc774"},{"location":"daily/2021-05-09/#1225-flatten-a-multilevel-doubly-linked-list","text":"C++ time(beats 79.87%), space(beats 54.09%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 /* // Definition for a Node. class Node { public: int val; Node* prev; Node* next; Node* child; }; */ class Solution { public : Node * flatten ( Node * head ) { if ( ! head ) return head ; Node * last = head ; Node * cur = head ; Node * branchPtrArr [ 1010 ]; int top = 0 ; branchPtrArr [ 0 ] = head ; top ++ ; // \uadf8\ub9ac\uace0 child\uc5d0\uc11c \ud0d0\uc0c9 // child\uc5d0\uc11c nullptr\uae4c\uc9c0 \ub3c4\ub2ec\ud558\uba74, \uc885\ub8cc while ( top ) { while ( cur ) { // \ub9cc\uc57d child\uac00 \uc788\ub294 \ub178\ub4dc\ub97c \ub9cc\ub098\uba74 // branchPtrArr\uc5d0 cur->next \ub178\ub4dc \ucd94\uac00 if ( cur -> child ) { if ( cur -> next ) { branchPtrArr [ top ] = cur -> next ; top ++ ; } cur -> next = cur -> child ; cur -> next -> prev = cur ; cur -> child = nullptr ; } if ( ! ( cur -> next )) { if ( top == 1 ) top -- ; if ( top > 1 ) { last = branchPtrArr [ top - 1 ]; cur -> next = last ; last -> prev = cur ; top -- ; } } // \uc624\ub978\ucabd\uc73c\ub85c \uac00\uae30 cur = cur -> next ; } } return head ; } }; \ub098\ub294 \ucf54\ub4dc\ub97c \uc880 \ub354 \uae38\uac8c \uc37c\ub294\ub370, DFS\uc5d0 \uc758\ud55c inorder \ud0d0\uc0c9\uc73c\ub85c \uc9e7\uac8c \ud480\uc774\uac00 \uac00\ub2a5\ud558\ub2e4\uace0 \ud569\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 Node tail = null ; public Node flatten ( Node head ) { if ( head == null ) return null ; head . prev = tail ; tail = head ; Node nextNode = head . next ; head . next = flatten ( head . child ); head . child = null ; tail . next = flatten ( nextNode ); return head ; }","title":"1225 - Flatten a Multilevel Doubly Linked List"},{"location":"daily/2021-05-09/#1229-copy-list-with-random-pointer","text":"C++ time(beats 73.83%), space(beats 37.11%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 /* // Definition for a Node. class Node { public: int val; Node* next; Node* random; Node(int _val) { val = _val; next = NULL; random = NULL; } }; */ class Solution { public : Node * copyRandomList ( Node * head ) { Node * orgLst [ 10001 ] = { nullptr , }; Node * dstLst [ 10001 ] = { nullptr , }; int orgTop = 0 ; int dstTop = 0 ; Node * ptr = head ; while ( ptr ) { orgLst [ orgTop ] = ptr ; orgTop ++ ; ptr = ptr -> next ; } Node * rsltHead = new Node ( 0 ); ptr = head ; Node * dstPtr = rsltHead ; for ( int i = 0 ; i < orgTop ; ++ i ) { Node * newNode = new Node ( ptr -> val ); dstPtr -> next = newNode ; ptr = ptr -> next ; dstPtr = dstPtr -> next ; dstLst [ dstTop ] = newNode ; dstTop ++ ; } ptr = head ; dstPtr = rsltHead -> next ; int idx = 0 ; for ( int i = 0 ; i < orgTop ; ++ i ) { if ( ptr -> random ) { idx = getIndex ( orgLst , ptr -> random ); dstPtr -> random = dstLst [ idx ]; } ptr = ptr -> next ; dstPtr = dstPtr -> next ; } return rsltHead -> next ; } private : int getIndex ( Node * lst [], Node * address ) { int i = 0 ; for (; i < 10001 ; ++ i ) { if ( address == lst [ i ]) break ; } return i ; } };","title":"1229 - Copy List with Random Pointer"},{"location":"daily/2021-05-10/","text":"leet code \uc624\ub298\uc740 \uc26c\uc6b4\ubb38\uc81c 8\ubb38\uc81c\ub97c \ud480\uc5c8\uc2b5\ub2c8\ub2e4. 3237 - Find Numbers with Even Number of Digits C++ time(beats 91.49%), space(39.04%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public: int findNumbers(vector<int>& nums) { int len=nums.size(); int cnt = 0; int rslt = 0; int curNum = 0; for(int i=0; i<len; ++i) { cnt = 0; curNum = nums[i]; while(curNum) { curNum /= 10; cnt++; } if(cnt%2==0) { rslt++; } } return rslt; } }; 3240 - Squares of a Sorted Array \ucc98\uc74c\uc5d0\ub294 bubble sort\ub97c \uc368\uc11c \ud588\ub2e4\uac00, TLE(Time Limit Error)\uac00 \ub5a0\uc11c, counting sort\ub97c \uc37c\uc2b5\ub2c8\ub2e4. C++ times(beats 54.43%), space(beats 36.34%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public : vector < int > sortedSquares ( vector < int >& nums ) { // square and sort int len = nums . size (); int tmp = 0 ; int lut [ 10001 ] = { 0 ,}; for ( int i = 0 ; i < len ; ++ i ) { if ( nums [ i ] < 0 ) { nums [ i ] *= -1 ; } lut [ nums [ i ]] ++ ; } int idx = 0 ; for ( int i = 0 ; i < 10001 ; ++ i ) { while ( lut [ i ]) { nums [ idx ] = i * i ; idx ++ ; lut [ i ] -- ; } } return nums ; } }; 3245 - Duplicate Zeros C++ time(beats 93.89%), space(beats 73.43%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class Solution { public : void duplicateZeros ( vector < int >& arr ) { int len = arr . size (); int zeroCnt = 0 ; for ( int i = 0 ; i < len ; ++ i ) { if ( ! arr [ i ]) zeroCnt ++ ; } int rsltLen = len + zeroCnt ; int idx = rsltLen -1 ; for ( int i = len -1 ; i >= 0 ; -- i ) { if ( arr [ i ]) { if ( idx >= len ) { idx -- ; continue ; } arr [ idx ] = arr [ i ]; idx -- ; } else { if ( idx -1 >= len ) { idx -= 2 ; continue ; } if ( idx < len ) arr [ idx ] = 0 ; arr [ idx -1 ] = 0 ; idx -= 2 ; } } return ; } }; 3253 - Merge Sorted Array C++ time(beats 100%, 0ms), space(beats 85.94%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { public : void merge ( vector < int >& nums1 , int m , vector < int >& nums2 , int n ) { int idx1 = m -1 ; int idx2 = n -1 ; for ( int i = nums1 . size () -1 ; i >= 0 ; -- i ) { if ( idx1 >= 0 && idx2 >= 0 ) { if ( nums1 [ idx1 ] > nums2 [ idx2 ]) { nums1 [ i ] = nums1 [ idx1 ]; idx1 -- ; } else { nums1 [ i ] = nums2 [ idx2 ]; idx2 -- ; } } else if ( idx1 >= 0 && idx2 < 0 ) { nums1 [ i ] = nums1 [ idx1 ]; idx1 -- ; } else { nums1 [ i ] = nums2 [ idx2 ]; idx2 -- ; } } return ; } }; 3247 - Remove Element C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public : int removeElement ( vector < int >& nums , int val ) { int rsltLen = 0 ; int len = nums . size (); int targetIdx = 0 ; for ( int i = 0 ; i < len ; ++ i ) { if ( nums [ i ] != val ) { nums [ targetIdx ] = nums [ i ]; rsltLen ++ ; targetIdx ++ ; } } return rsltLen ; } }; 3248 - Remove Duplicates from Sorted Array C++ time(beats 100%), space(17.70%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <stdio.h> class Solution { public : int removeDuplicates ( vector < int >& nums ) { int lut [ 20002 ] = { 0 ,}; int len = nums . size (); for ( int i = 0 ; i < len ; ++ i ) { lut [ nums [ i ] + 10001 ] ++ ; } int idx = 0 ; int rslt = 0 ; for ( int i = -10001 ; i < 10001 ; ++ i ) { if ( lut [ i + 10001 ]) { nums [ idx ] = i ; idx ++ ; rslt ++ ; } } return rslt ; } }; 3250 - Check If N and Its Double Exist C++ times(beats 94.85%), space(beats 90.82%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public : bool checkIfExist ( vector < int >& arr ) { int lut [ 4001 ] = { 0 , }; int len = arr . size (); for ( int i = 0 ; i < len ; ++ i ) { lut [ arr [ i ] + 2000 ] ++ ; } for ( int i = -1000 ; i < 1001 ; ++ i ) { if ( lut [ i + 2000 ]) { if ( i == 0 ) { if ( lut [ 2000 ] > 1 ) return true ; } else { if ( lut [ 2000 + i * 2 ]) return true ; } } } return false ; } }; 3251 - Valid Mountain Array C++ time(beats 55.02%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public : bool validMountainArray ( vector < int >& arr ) { int left = 0 ; int right = arr . size () -1 ; int len = arr . size (); while ( left < len -1 ) { if ( arr [ left ] < arr [ left + 1 ]) { left ++ ; } else { break ; } } while ( right >= 1 ) { if ( arr [ right ] < arr [ right -1 ]) { right -- ; } else { break ; } } if ( ! left || right == len -1 ) return false ; if ( left != right ) return false ; else return true ; } };","title":"2021-05-10"},{"location":"daily/2021-05-10/#leet-code","text":"\uc624\ub298\uc740 \uc26c\uc6b4\ubb38\uc81c 8\ubb38\uc81c\ub97c \ud480\uc5c8\uc2b5\ub2c8\ub2e4.","title":"leet code"},{"location":"daily/2021-05-10/#3237-find-numbers-with-even-number-of-digits","text":"C++ time(beats 91.49%), space(39.04%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public: int findNumbers(vector<int>& nums) { int len=nums.size(); int cnt = 0; int rslt = 0; int curNum = 0; for(int i=0; i<len; ++i) { cnt = 0; curNum = nums[i]; while(curNum) { curNum /= 10; cnt++; } if(cnt%2==0) { rslt++; } } return rslt; } };","title":"3237 - Find Numbers with Even Number of Digits"},{"location":"daily/2021-05-10/#3240-squares-of-a-sorted-array","text":"\ucc98\uc74c\uc5d0\ub294 bubble sort\ub97c \uc368\uc11c \ud588\ub2e4\uac00, TLE(Time Limit Error)\uac00 \ub5a0\uc11c, counting sort\ub97c \uc37c\uc2b5\ub2c8\ub2e4. C++ times(beats 54.43%), space(beats 36.34%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public : vector < int > sortedSquares ( vector < int >& nums ) { // square and sort int len = nums . size (); int tmp = 0 ; int lut [ 10001 ] = { 0 ,}; for ( int i = 0 ; i < len ; ++ i ) { if ( nums [ i ] < 0 ) { nums [ i ] *= -1 ; } lut [ nums [ i ]] ++ ; } int idx = 0 ; for ( int i = 0 ; i < 10001 ; ++ i ) { while ( lut [ i ]) { nums [ idx ] = i * i ; idx ++ ; lut [ i ] -- ; } } return nums ; } };","title":"3240 - Squares of a Sorted Array"},{"location":"daily/2021-05-10/#3245-duplicate-zeros","text":"C++ time(beats 93.89%), space(beats 73.43%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 class Solution { public : void duplicateZeros ( vector < int >& arr ) { int len = arr . size (); int zeroCnt = 0 ; for ( int i = 0 ; i < len ; ++ i ) { if ( ! arr [ i ]) zeroCnt ++ ; } int rsltLen = len + zeroCnt ; int idx = rsltLen -1 ; for ( int i = len -1 ; i >= 0 ; -- i ) { if ( arr [ i ]) { if ( idx >= len ) { idx -- ; continue ; } arr [ idx ] = arr [ i ]; idx -- ; } else { if ( idx -1 >= len ) { idx -= 2 ; continue ; } if ( idx < len ) arr [ idx ] = 0 ; arr [ idx -1 ] = 0 ; idx -= 2 ; } } return ; } };","title":"3245 - Duplicate Zeros"},{"location":"daily/2021-05-10/#3253-merge-sorted-array","text":"C++ time(beats 100%, 0ms), space(beats 85.94%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { public : void merge ( vector < int >& nums1 , int m , vector < int >& nums2 , int n ) { int idx1 = m -1 ; int idx2 = n -1 ; for ( int i = nums1 . size () -1 ; i >= 0 ; -- i ) { if ( idx1 >= 0 && idx2 >= 0 ) { if ( nums1 [ idx1 ] > nums2 [ idx2 ]) { nums1 [ i ] = nums1 [ idx1 ]; idx1 -- ; } else { nums1 [ i ] = nums2 [ idx2 ]; idx2 -- ; } } else if ( idx1 >= 0 && idx2 < 0 ) { nums1 [ i ] = nums1 [ idx1 ]; idx1 -- ; } else { nums1 [ i ] = nums2 [ idx2 ]; idx2 -- ; } } return ; } };","title":"3253 - Merge Sorted Array"},{"location":"daily/2021-05-10/#3247-remove-element","text":"C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public : int removeElement ( vector < int >& nums , int val ) { int rsltLen = 0 ; int len = nums . size (); int targetIdx = 0 ; for ( int i = 0 ; i < len ; ++ i ) { if ( nums [ i ] != val ) { nums [ targetIdx ] = nums [ i ]; rsltLen ++ ; targetIdx ++ ; } } return rsltLen ; } };","title":"3247 - Remove Element"},{"location":"daily/2021-05-10/#3248-remove-duplicates-from-sorted-array","text":"C++ time(beats 100%), space(17.70%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 #include <stdio.h> class Solution { public : int removeDuplicates ( vector < int >& nums ) { int lut [ 20002 ] = { 0 ,}; int len = nums . size (); for ( int i = 0 ; i < len ; ++ i ) { lut [ nums [ i ] + 10001 ] ++ ; } int idx = 0 ; int rslt = 0 ; for ( int i = -10001 ; i < 10001 ; ++ i ) { if ( lut [ i + 10001 ]) { nums [ idx ] = i ; idx ++ ; rslt ++ ; } } return rslt ; } };","title":"3248 - Remove Duplicates from Sorted Array"},{"location":"daily/2021-05-10/#3250-check-if-n-and-its-double-exist","text":"C++ times(beats 94.85%), space(beats 90.82%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public : bool checkIfExist ( vector < int >& arr ) { int lut [ 4001 ] = { 0 , }; int len = arr . size (); for ( int i = 0 ; i < len ; ++ i ) { lut [ arr [ i ] + 2000 ] ++ ; } for ( int i = -1000 ; i < 1001 ; ++ i ) { if ( lut [ i + 2000 ]) { if ( i == 0 ) { if ( lut [ 2000 ] > 1 ) return true ; } else { if ( lut [ 2000 + i * 2 ]) return true ; } } } return false ; } };","title":"3250 - Check If N and Its Double Exist"},{"location":"daily/2021-05-10/#3251-valid-mountain-array","text":"C++ time(beats 55.02%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 class Solution { public : bool validMountainArray ( vector < int >& arr ) { int left = 0 ; int right = arr . size () -1 ; int len = arr . size (); while ( left < len -1 ) { if ( arr [ left ] < arr [ left + 1 ]) { left ++ ; } else { break ; } } while ( right >= 1 ) { if ( arr [ right ] < arr [ right -1 ]) { right -- ; } else { break ; } } if ( ! left || right == len -1 ) return false ; if ( left != right ) return false ; else return true ; } };","title":"3251 - Valid Mountain Array"},{"location":"daily/2021-05-11/","text":"leet code 3259 - Replace Elements with Greatest Element on Right Side C++ time(beats 87.79%), space(beats 22.06%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public : vector < int > replaceElements ( vector < int >& arr ) { int arrSize = arr . size (); int max = 0 ; int tmp = 0 ; for ( int i = arrSize -1 ; i >= 0 ; -- i ) { if ( i == arrSize -1 ) { max = arr [ i ]; arr [ i ] = -1 ; } else { if ( arr [ i ] <= max ) { arr [ i ] = max ; } else { tmp = arr [ i ]; arr [ i ] = max ; max = tmp ; } } } return arr ; } };","title":"2021-05-11"},{"location":"daily/2021-05-11/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-05-11/#3259-replace-elements-with-greatest-element-on-right-side","text":"C++ time(beats 87.79%), space(beats 22.06%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class Solution { public : vector < int > replaceElements ( vector < int >& arr ) { int arrSize = arr . size (); int max = 0 ; int tmp = 0 ; for ( int i = arrSize -1 ; i >= 0 ; -- i ) { if ( i == arrSize -1 ) { max = arr [ i ]; arr [ i ] = -1 ; } else { if ( arr [ i ] <= max ) { arr [ i ] = max ; } else { tmp = arr [ i ]; arr [ i ] = max ; max = tmp ; } } } return arr ; } };","title":"3259 - Replace Elements with Greatest Element on Right Side"},{"location":"daily/2021-05-12/","text":"leet code 3157 - Move Zeroes 3\ubd84 \uc815\ub3c4 \uc18c\uc694 C++ time(beats 89.67%), space(beats 55.77%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public : void moveZeroes ( vector < int >& nums ) { int size = nums . size (); int idxNotZero = 0 ; int tmp = 0 ; for ( int i = 0 ; i < size ; ++ i ) { if ( nums [ i ] != 0 ) { nums [ idxNotZero ] = nums [ i ]; idxNotZero ++ ; } } for ( int i = idxNotZero ; i < size ; ++ i ) { nums [ i ] = 0 ; } } }; 3260 - Sort Array By Parity C++ times(beats 38.97%), space(beats 79.57%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public : vector < int > sortArrayByParity ( vector < int >& nums ) { int size = nums . size (); int start = 0 ; int end = size -1 ; int tmp = 0 ; while ( start < end ) { if ( nums [ start ] % 2 > nums [ end ] % 2 ) { tmp = nums [ end ]; nums [ end ] = nums [ start ]; nums [ start ] = tmp ; } if ( nums [ start ] % 2 == 0 ) start ++ ; if ( nums [ end ] % 2 == 1 ) end -- ; } return nums ; } }; 3575 - Remove Element ===\"C++ time(beats 100%), space(68.89%)\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ```c++ class Solution { public: int removeElement(vector<int>& nums, int val) { int targetIdx=0; for(int i=0; i<nums.size(); ++i) { if(nums[i]!=val) nums[targetIdx++] = nums[i]; } return targetIdx; } }; ``` 3228 - Height Checker ===\"C++ time(beats 100%), space(59.46%)\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 ```c++ class Solution { public: int heightChecker(vector<int>& heights) { int size = heights.size(); int tmp = 0; int minVal = 101; int minIdx = 0; int cnt = 0; vector<int> newV(heights); for(int i=0; i<size; ++i) { minVal = heights[i]; minIdx = i; for(int j=i+1; j<size;++j) { if(heights[j] < minVal) { minVal = heights[j]; minIdx = j; } } tmp = heights[minIdx]; heights[minIdx] = heights[i]; heights[i] = tmp; } for(int i=0; i<size; ++i) { if(newV[i]!=heights[i]) cnt++; } return cnt; } }; ```","title":"2021-05-12"},{"location":"daily/2021-05-12/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-05-12/#3157-move-zeroes","text":"3\ubd84 \uc815\ub3c4 \uc18c\uc694 C++ time(beats 89.67%), space(beats 55.77%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public : void moveZeroes ( vector < int >& nums ) { int size = nums . size (); int idxNotZero = 0 ; int tmp = 0 ; for ( int i = 0 ; i < size ; ++ i ) { if ( nums [ i ] != 0 ) { nums [ idxNotZero ] = nums [ i ]; idxNotZero ++ ; } } for ( int i = idxNotZero ; i < size ; ++ i ) { nums [ i ] = 0 ; } } };","title":"3157 - Move Zeroes"},{"location":"daily/2021-05-12/#3260-sort-array-by-parity","text":"C++ times(beats 38.97%), space(beats 79.57%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Solution { public : vector < int > sortArrayByParity ( vector < int >& nums ) { int size = nums . size (); int start = 0 ; int end = size -1 ; int tmp = 0 ; while ( start < end ) { if ( nums [ start ] % 2 > nums [ end ] % 2 ) { tmp = nums [ end ]; nums [ end ] = nums [ start ]; nums [ start ] = tmp ; } if ( nums [ start ] % 2 == 0 ) start ++ ; if ( nums [ end ] % 2 == 1 ) end -- ; } return nums ; } };","title":"3260 - Sort Array By Parity"},{"location":"daily/2021-05-12/#3575-remove-element","text":"===\"C++ time(beats 100%), space(68.89%)\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 ```c++ class Solution { public: int removeElement(vector<int>& nums, int val) { int targetIdx=0; for(int i=0; i<nums.size(); ++i) { if(nums[i]!=val) nums[targetIdx++] = nums[i]; } return targetIdx; } }; ```","title":"3575 - Remove Element"},{"location":"daily/2021-05-12/#3228-height-checker","text":"===\"C++ time(beats 100%), space(59.46%)\" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 ```c++ class Solution { public: int heightChecker(vector<int>& heights) { int size = heights.size(); int tmp = 0; int minVal = 101; int minIdx = 0; int cnt = 0; vector<int> newV(heights); for(int i=0; i<size; ++i) { minVal = heights[i]; minIdx = i; for(int j=i+1; j<size;++j) { if(heights[j] < minVal) { minVal = heights[j]; minIdx = j; } } tmp = heights[minIdx]; heights[minIdx] = heights[i]; heights[i] = tmp; } for(int i=0; i<size; ++i) { if(newV[i]!=heights[i]) cnt++; } return cnt; } }; ```","title":"3228 - Height Checker"},{"location":"daily/2021-05-13/","text":"leet code 3270 - Find All Numbers Disappeared in an Array C++ time(beats 67.71%), space(beats48.81%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { public : vector < int > findDisappearedNumbers ( vector < int >& nums ) { vector < int > rslt ; int size = nums . size (); int tmp = 0 ; int idx = 0 ; for ( int i = 0 ; i < size ; ++ i ) nums [ i ] -- ; for ( int i = 0 ; i < size ; ++ i ) { idx = nums [ i ]; while ( idx != nums [ idx ]) { tmp = nums [ idx ]; nums [ idx ] = idx ; idx = tmp ; } } for ( int i = 0 ; i < size ; ++ i ) { printf ( \"%d \\n \" , nums [ i ]); if ( nums [ i ] + 1 != i + 1 ) { rslt . push_back ( i + 1 ); } } return rslt ; } }; 3231 - Third Maximum Number \ucf54\ub4dc\uac00 \uc880 \ub354\ub7ec\uc6b4 \ub4ef(\uc2dc\uac04 \ub098\uba74 \ub2e4\uc2dc \ud480\uc5b4\ubcf4\uae30) C++ time(beats 49.56%), space(beats74.74%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 class Solution { public : int thirdMax ( vector < int >& nums ) { int tmp = 0 ; bool dup = false ; int size = nums . size (); long arr [ 4 ] = { 0 , -2147483649 , -2147483649 , -2147483649 }; for ( int i = 0 ; i < size ; ++ i ) { dup = false ; for ( int j = 1 ; j < 4 ; ++ j ) { if ( nums [ i ] == arr [ j ] && ( arr [ j ] != -2147483649 )) { dup = true ; break ; } } if ( ! dup ) { arr [ 0 ] = nums [ i ]; sort ( arr ); } } if ( arr [ 1 ] != -2147483649 ) { return arr [ 1 ]; } else { return arr [ 3 ]; } } private : void sort ( long * arr ) { long min = 0 ; int idx = 0 ; long tmp = 0 ; for ( int i = 0 ; i < 4 ; ++ i ) { min = arr [ i ]; idx = i ; for ( int j = i + 1 ; j < 4 ; ++ j ) { if ( arr [ j ] < min ) { idx = j ; min = arr [ j ]; } } tmp = arr [ i ]; arr [ i ] = arr [ idx ]; arr [ idx ] = tmp ; } } };","title":"2021-05-13"},{"location":"daily/2021-05-13/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-05-13/#3270-find-all-numbers-disappeared-in-an-array","text":"C++ time(beats 67.71%), space(beats48.81%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 class Solution { public : vector < int > findDisappearedNumbers ( vector < int >& nums ) { vector < int > rslt ; int size = nums . size (); int tmp = 0 ; int idx = 0 ; for ( int i = 0 ; i < size ; ++ i ) nums [ i ] -- ; for ( int i = 0 ; i < size ; ++ i ) { idx = nums [ i ]; while ( idx != nums [ idx ]) { tmp = nums [ idx ]; nums [ idx ] = idx ; idx = tmp ; } } for ( int i = 0 ; i < size ; ++ i ) { printf ( \"%d \\n \" , nums [ i ]); if ( nums [ i ] + 1 != i + 1 ) { rslt . push_back ( i + 1 ); } } return rslt ; } };","title":"3270 - Find All Numbers Disappeared in an Array"},{"location":"daily/2021-05-13/#3231-third-maximum-number","text":"\ucf54\ub4dc\uac00 \uc880 \ub354\ub7ec\uc6b4 \ub4ef(\uc2dc\uac04 \ub098\uba74 \ub2e4\uc2dc \ud480\uc5b4\ubcf4\uae30) C++ time(beats 49.56%), space(beats74.74%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 class Solution { public : int thirdMax ( vector < int >& nums ) { int tmp = 0 ; bool dup = false ; int size = nums . size (); long arr [ 4 ] = { 0 , -2147483649 , -2147483649 , -2147483649 }; for ( int i = 0 ; i < size ; ++ i ) { dup = false ; for ( int j = 1 ; j < 4 ; ++ j ) { if ( nums [ i ] == arr [ j ] && ( arr [ j ] != -2147483649 )) { dup = true ; break ; } } if ( ! dup ) { arr [ 0 ] = nums [ i ]; sort ( arr ); } } if ( arr [ 1 ] != -2147483649 ) { return arr [ 1 ]; } else { return arr [ 3 ]; } } private : void sort ( long * arr ) { long min = 0 ; int idx = 0 ; long tmp = 0 ; for ( int i = 0 ; i < 4 ; ++ i ) { min = arr [ i ]; idx = i ; for ( int j = i + 1 ; j < 4 ; ++ j ) { if ( arr [ j ] < min ) { idx = j ; min = arr [ j ]; } } tmp = arr [ i ]; arr [ i ] = arr [ idx ]; arr [ idx ] = tmp ; } } };","title":"3231 - Third Maximum Number"},{"location":"daily/2021-05-14/","text":"leet code 3230 - Max Consecutive Ones II \ub0b4\uac00 \uc0dd\uac01\ud55c \ub17c\ub9ac \ub300\ub85c \ud558\uba74, if \ubb38\uc774 \ub108\ubb34 \ubcf5\uc7a1\ud558\uac8c \ub4e4\uc5b4\uac00\uc11c \uad6c\ud604\ud558\uae30\uac00 \uc27d\uc9c0 \uc54a\uc544\ubcf4\uc600\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub2f5\uc744 \uba3c\uc800 \ubcf4\uace0, \ub2f5 \ub300\ub85c C++ \uad6c\ud604\uc744 \ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ubb38\uc81c\ub97c \ud480\uc5c8\uc2b5\ub2c8\ub2e4. Left point\uc640 Right point\ub97c \ub450\uace0, 0\uc758 \uac1c\uc218\uac00 2\uac1c\ub97c \ub118\uc9c0 \uc54a\ub3c4\ub85d L\uacfc, R\uc758 \uc704\uce58\ub97c \uc870\uc808\ud558\ub294 \uac83\uc774 \ud575\uc2ec\uc774\uc5c8\uc2b5\ub2c8\ub2e4. 0\uc758 \uac1c\uc218\uac00 2\uac1c\uac00 \ub118\uc9c0 \uc54a\ub294\ub2e4 => R++ 0\uc758 \uac1c\uc218\uac00 2\uac1c\uac00 \ub118\ub294\ub2e4 => L++ C++ time(beats 80.47%), space(beats 65.78%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution { public : int findMaxConsecutiveOnes ( vector < int >& nums ) { int numZeros = 0 ; int longest = 0 ; int L = 0 ; int R = 0 ; int curLong = 1 ; int size = nums . size (); if ( nums [ 0 ] == 0 ) numZeros ++ ; while ( R < size ) { if ( numZeros > 1 ) { // \ube44\uc815\uc0c1 if ( nums [ L ] == 0 ) { numZeros -- ; } L ++ ; } else { if ( R + 1 < size && nums [ R + 1 ] == 0 ) { numZeros ++ ; } R ++ ; } curLong = R - L ; if ( curLong > longest ) { longest = curLong ; } } return longest ; } };","title":"2021-05-14"},{"location":"daily/2021-05-14/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-05-14/#3230-max-consecutive-ones-ii","text":"\ub0b4\uac00 \uc0dd\uac01\ud55c \ub17c\ub9ac \ub300\ub85c \ud558\uba74, if \ubb38\uc774 \ub108\ubb34 \ubcf5\uc7a1\ud558\uac8c \ub4e4\uc5b4\uac00\uc11c \uad6c\ud604\ud558\uae30\uac00 \uc27d\uc9c0 \uc54a\uc544\ubcf4\uc600\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub2f5\uc744 \uba3c\uc800 \ubcf4\uace0, \ub2f5 \ub300\ub85c C++ \uad6c\ud604\uc744 \ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ubb38\uc81c\ub97c \ud480\uc5c8\uc2b5\ub2c8\ub2e4. Left point\uc640 Right point\ub97c \ub450\uace0, 0\uc758 \uac1c\uc218\uac00 2\uac1c\ub97c \ub118\uc9c0 \uc54a\ub3c4\ub85d L\uacfc, R\uc758 \uc704\uce58\ub97c \uc870\uc808\ud558\ub294 \uac83\uc774 \ud575\uc2ec\uc774\uc5c8\uc2b5\ub2c8\ub2e4. 0\uc758 \uac1c\uc218\uac00 2\uac1c\uac00 \ub118\uc9c0 \uc54a\ub294\ub2e4 => R++ 0\uc758 \uac1c\uc218\uac00 2\uac1c\uac00 \ub118\ub294\ub2e4 => L++ C++ time(beats 80.47%), space(beats 65.78%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 class Solution { public : int findMaxConsecutiveOnes ( vector < int >& nums ) { int numZeros = 0 ; int longest = 0 ; int L = 0 ; int R = 0 ; int curLong = 1 ; int size = nums . size (); if ( nums [ 0 ] == 0 ) numZeros ++ ; while ( R < size ) { if ( numZeros > 1 ) { // \ube44\uc815\uc0c1 if ( nums [ L ] == 0 ) { numZeros -- ; } L ++ ; } else { if ( R + 1 < size && nums [ R + 1 ] == 0 ) { numZeros ++ ; } R ++ ; } curLong = R - L ; if ( curLong > longest ) { longest = curLong ; } } return longest ; } };","title":"3230 - Max Consecutive Ones II"},{"location":"daily/2021-05-15/","text":"blockchain \uac1c\ubc1c \uc624\ud508\uc18c\uc2a4 \uc774\ub354\ub9ac\uc6c0 \ubc31\uc11c - https://github.com/ethereum/wiki/wiki/%5BKorean%5D-White-Paper \uc774\ub354\ub9ac\uc6c0 \ubc31\uc11c(\ucd5c\uc2e0\ud654 \ub41c \ubc84\uc804) - https://ethereum.org/ko/ \uc774\ub354\ub9ac\uc6c0 solidity - https://github.com/ethereum/solidity hyperledger fabric - https://github.com/hyperledger/fabric","title":"2021-05-15"},{"location":"daily/2021-05-15/#blockchain","text":"\uc774\ub354\ub9ac\uc6c0 \ubc31\uc11c - https://github.com/ethereum/wiki/wiki/%5BKorean%5D-White-Paper \uc774\ub354\ub9ac\uc6c0 \ubc31\uc11c(\ucd5c\uc2e0\ud654 \ub41c \ubc84\uc804) - https://ethereum.org/ko/ \uc774\ub354\ub9ac\uc6c0 solidity - https://github.com/ethereum/solidity hyperledger fabric - https://github.com/hyperledger/fabric","title":"blockchain \uac1c\ubc1c \uc624\ud508\uc18c\uc2a4"},{"location":"daily/2021-05-16/","text":"block-chain \uad6c\ud604 \uc624\ub298\uc758 \uacb0\uacfc\ubb3c \uc5f0\uacb0\ub41c \uccb4\uc778\uc744 json \ud615\uc2dd\uc73c\ub85c \ud655\uc778\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. chain: block chain\uc758 \ub0b4\uc6a9\uc744 \ud655\uc778 mine: \"0\"(\uc6b4\uc601\uc790)\uac00 \ucc44\uad74\ud558\ub824\ub294 \uc0ac\ub78c\uc5d0\uac8c 1\uac1c\uc758 block\uc744 \ub098\ub220\uc90d\ub2c8\ub2e4. transaction: sender\uc640 recipient \uc0ac\uc774\uc758 \uac70\ub798\ub97c \uae30\ub85d\ud569\ub2c8\ub2e4. \ucc38\uace0\ud55c \uc720\ud29c\ube0c: https://www.youtube.com/watch?v=Gno15LgVbcc \ucc38\uace0\ud55c \uc18c\uc2a4\ucf54\ub4dc: https://github.com/tr0y-kim/ez_blockchain/blob/master/blockchain.py \ubaa9\ucc28 blockchain.py \ubf08\ub300 \ub9cc\ub4e4\uae30 Blockchain \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 new_block \ud568\uc218 new_transaction \ud568\uc218 hash \ud568\uc218 PoW \ud568\uc218 valid_proof \ud568\uc218 server.py /chain endpoint /transaction/new endpoint /mine endpoint test_new_transaction.py \uc2e4\ud589\ubc29\ubc95 1. blockchain.py 1.1. \ubf08\ub300 \ub9cc\ub4e4\uae30 blockchain.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Blockchain ( object ): def __init__ ( self ): self . chain = [] self . current_transactions = [] def new_block ( self ): # Creates a new Block and adds it to the chain pass def new_transaction ( self ): # Adds a new transaction to the list of transaction pass @staticmethod def hash ( block ): # Hashes a Block pass @property def last_block ( self ): # Returns the last Block in the chain pass 1.2. Blockchain class \uc0dd\uc131\uc790 1 2 3 4 5 6 def __init__ ( self ): self . chain = [] # chain\uc5d0 \uc5ec\ub7ec block\ub4e4 \ub4e4\uc5b4\uc634 self . current_transaction = [] # \uc784\uc2dc transaction \ub123\uc5b4\uc90c # genesis block \uc0dd\uc131 self . new_block ( previous_hash = 1 , proof = 100 ) 1.3. new_block \ud568\uc218 1 2 3 4 5 6 7 8 9 10 11 12 def new_block ( self , proof , previous_hash = None ): # Creates a new Block and adds it to the chain block = { 'index' : len ( self . chain ) + 1 , 'timestamp' : time (), # timestamp from 1970 'transactions' : self . current_transaction , 'proof' : proof , 'previous_hash' : previous_hash or self . hash ( self . chain [ - 1 ]), } self . current_transaction = [] self . chain . append ( block ) return block 1.4. new_transaction \ud568\uc218 1 2 3 4 5 6 7 8 9 10 def new_transaction ( self , sender , recipient , amount ): # Adds a new transaction to the list of transaction self . current_transaction . append ( { 'sender' : sender , # \uc1a1\uc2e0\uc790 'recipient' : recipient , # \uc218\uc2e0\uc790 'amount' : amount # \uae08\uc561 } ) return self . last_block [ 'index' ] + 1 1.5. hash \ud568\uc218 1 2 3 4 5 6 7 @staticmethod def hash ( block ): # Hashes a Block block_string = json . dumps ( block , sort_keys = True ) . encode () # hash \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c sha256 \uc0ac\uc6a9 return hashlib . sha256 ( block_string ) . hexdigest () 1.6. pow(proof of work) \ud568\uc218 1 2 3 4 5 6 7 def pow ( self , last_proof ): proof = 0 # valid proof \ud568\uc218\ub97c \ud1b5\ud574 \ub9de\uc744 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\uc801\uc73c\ub85c \uac80\uc99d while self . valid_proof ( last_proof , proof ) is False : proof += 1 return proof 1.7. valid_proof \ud568\uc218 1 2 3 4 5 6 7 8 @staticmethod def valid_proof ( last_proof , proof ): # \uc804 proof\uc640 \uad6c\ud560 proof \ubb38\uc790\uc5f4 \uc5f0\uacb0 guess = str ( last_proof + proof ) . encode () # \uc774 hash \uac12 \uc800\uc7a5 guess_hash = hashlib . sha256 ( guess ) . hexdigest () # \uc55e 4\uc790\ub9ac\uac00 0000 \uc774\uba74 True return guess_hash [: 4 ] == \"0000\" # nonce 2. server.py server.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 # /chain: \ud604\uc7ac \ube14\ub85d\uccb4\uc778 \ubcf4\uc5ec\uc90c # /transaction/new: \uc0c8 \ud2b8\ub79c\uc7ad\uc158 \uc0dd\uc131 # /mine: server\uc5d0\uac8c \uc0c8 \ube14\ub85d \ucc44\uad74 \uc694\uccad from flask import Flask , jsonify , request from blockchain import Blockchain from uuid import uuid4 app = Flask ( __name__ ) # Universial Unique Identifier node_identifider = str ( uuid4 ()) . replace ( \"-\" , \"\" ) blockchain = Blockchain () @app . route ( \"/chain\" , methods = [ \"GET\" ]) def full_chain (): response = { \"chain\" : blockchain . chain , \"length\" : len ( blockchain . chain ), } return jsonify ( response ), 200 @app . route ( \"/mine\" , methods = [ \"GET\" ]) def mine (): last_block = blockchain . last_block last_proof = last_block [ \"proof\" ] proof = blockchain . pow ( last_proof ) blockchain . new_transaction ( sender = \"0\" , recipient = node_identifider , amount = 1 # coinbase transaction ) # forge the new block by adding it to the chain previous_hash = blockchain . hash ( last_block ) block = blockchain . new_block ( proof , previous_hash ) response = { \"message\" : \"new block found\" , \"index\" : block [ \"index\" ], \"transactions\" : block [ \"transactions\" ], \"proof\" : block [ \"proof\" ], \"previous_hash\" : block [ \"previous_hash\" ], } return response , 200 @app . route ( \"/transactions/new\" , methods = [ \"POST\" ]) def new_transactions (): values = request . get_json () required = [ \"sender\" , \"recipient\" , \"amount\" ] if not all ( k in values for k in required ): return \"missing values\" , 400 # Create a new Transaction index = blockchain . new_transaction ( values [ \"sender\" ], values [ \"recipient\" ], values [ \"amount\" ]) response = { \"message\" : \"Transaction will be added to Block { %s }\" % index } return jsonify ( response ), 201 if __name__ == \"__main__\" : app . run ( host = \"0.0.0.0\" , port = 5000 ) 3. test_new_transaction.py test_new_transaction.py 1 2 3 4 5 6 7 8 9 10 import requests import json headers = { 'Content-Type' : 'application/json; charset=utf-8' } data = { \"sender\" : \"1004\" , \"recipient\" : \"0\" , \"amount\" : \"33\" } print ( requests . post ( \"http://localhost:5000/transactions/new\" , headers = headers , data = json . dumps ( data )) . content ) 4. \uc2e4\ud589 1 python server.py 4.1. chain browser\uc5d0\uc11c http://localhost:5000/chain \uc811\uc18d 4.2. mine browser\uc5d0\uc11c http://localhost:5000/mine \uc811\uc18d 4.3. transaction post \ud615\uc2dd\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc785\ub825\ud574\uc57c \ud558\ubbc0\ub85c \uc0c8 terminal\uc5d0\uc11c \uc544\ub798\uc758 \uba85\ub839\uc5b4 \uc2e4\ud589 1 python test_new_transaction.py","title":"2021-05-16"},{"location":"daily/2021-05-16/#block-chain","text":"","title":"block-chain \uad6c\ud604"},{"location":"daily/2021-05-16/#_1","text":"\uc5f0\uacb0\ub41c \uccb4\uc778\uc744 json \ud615\uc2dd\uc73c\ub85c \ud655\uc778\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. chain: block chain\uc758 \ub0b4\uc6a9\uc744 \ud655\uc778 mine: \"0\"(\uc6b4\uc601\uc790)\uac00 \ucc44\uad74\ud558\ub824\ub294 \uc0ac\ub78c\uc5d0\uac8c 1\uac1c\uc758 block\uc744 \ub098\ub220\uc90d\ub2c8\ub2e4. transaction: sender\uc640 recipient \uc0ac\uc774\uc758 \uac70\ub798\ub97c \uae30\ub85d\ud569\ub2c8\ub2e4. \ucc38\uace0\ud55c \uc720\ud29c\ube0c: https://www.youtube.com/watch?v=Gno15LgVbcc \ucc38\uace0\ud55c \uc18c\uc2a4\ucf54\ub4dc: https://github.com/tr0y-kim/ez_blockchain/blob/master/blockchain.py","title":"\uc624\ub298\uc758 \uacb0\uacfc\ubb3c"},{"location":"daily/2021-05-16/#_2","text":"blockchain.py \ubf08\ub300 \ub9cc\ub4e4\uae30 Blockchain \ud074\ub798\uc2a4 \uc0dd\uc131\uc790 new_block \ud568\uc218 new_transaction \ud568\uc218 hash \ud568\uc218 PoW \ud568\uc218 valid_proof \ud568\uc218 server.py /chain endpoint /transaction/new endpoint /mine endpoint test_new_transaction.py \uc2e4\ud589\ubc29\ubc95","title":"\ubaa9\ucc28"},{"location":"daily/2021-05-16/#1-blockchainpy","text":"","title":"1. blockchain.py"},{"location":"daily/2021-05-16/#11","text":"blockchain.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 class Blockchain ( object ): def __init__ ( self ): self . chain = [] self . current_transactions = [] def new_block ( self ): # Creates a new Block and adds it to the chain pass def new_transaction ( self ): # Adds a new transaction to the list of transaction pass @staticmethod def hash ( block ): # Hashes a Block pass @property def last_block ( self ): # Returns the last Block in the chain pass","title":"1.1. \ubf08\ub300 \ub9cc\ub4e4\uae30"},{"location":"daily/2021-05-16/#12-blockchain-class","text":"1 2 3 4 5 6 def __init__ ( self ): self . chain = [] # chain\uc5d0 \uc5ec\ub7ec block\ub4e4 \ub4e4\uc5b4\uc634 self . current_transaction = [] # \uc784\uc2dc transaction \ub123\uc5b4\uc90c # genesis block \uc0dd\uc131 self . new_block ( previous_hash = 1 , proof = 100 )","title":"1.2. Blockchain class \uc0dd\uc131\uc790"},{"location":"daily/2021-05-16/#13-new_block","text":"1 2 3 4 5 6 7 8 9 10 11 12 def new_block ( self , proof , previous_hash = None ): # Creates a new Block and adds it to the chain block = { 'index' : len ( self . chain ) + 1 , 'timestamp' : time (), # timestamp from 1970 'transactions' : self . current_transaction , 'proof' : proof , 'previous_hash' : previous_hash or self . hash ( self . chain [ - 1 ]), } self . current_transaction = [] self . chain . append ( block ) return block","title":"1.3. new_block \ud568\uc218"},{"location":"daily/2021-05-16/#14-new_transaction","text":"1 2 3 4 5 6 7 8 9 10 def new_transaction ( self , sender , recipient , amount ): # Adds a new transaction to the list of transaction self . current_transaction . append ( { 'sender' : sender , # \uc1a1\uc2e0\uc790 'recipient' : recipient , # \uc218\uc2e0\uc790 'amount' : amount # \uae08\uc561 } ) return self . last_block [ 'index' ] + 1","title":"1.4. new_transaction \ud568\uc218"},{"location":"daily/2021-05-16/#15-hash","text":"1 2 3 4 5 6 7 @staticmethod def hash ( block ): # Hashes a Block block_string = json . dumps ( block , sort_keys = True ) . encode () # hash \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c sha256 \uc0ac\uc6a9 return hashlib . sha256 ( block_string ) . hexdigest ()","title":"1.5. hash \ud568\uc218"},{"location":"daily/2021-05-16/#16-powproof-of-work","text":"1 2 3 4 5 6 7 def pow ( self , last_proof ): proof = 0 # valid proof \ud568\uc218\ub97c \ud1b5\ud574 \ub9de\uc744 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\uc801\uc73c\ub85c \uac80\uc99d while self . valid_proof ( last_proof , proof ) is False : proof += 1 return proof","title":"1.6. pow(proof of work) \ud568\uc218"},{"location":"daily/2021-05-16/#17-valid_proof","text":"1 2 3 4 5 6 7 8 @staticmethod def valid_proof ( last_proof , proof ): # \uc804 proof\uc640 \uad6c\ud560 proof \ubb38\uc790\uc5f4 \uc5f0\uacb0 guess = str ( last_proof + proof ) . encode () # \uc774 hash \uac12 \uc800\uc7a5 guess_hash = hashlib . sha256 ( guess ) . hexdigest () # \uc55e 4\uc790\ub9ac\uac00 0000 \uc774\uba74 True return guess_hash [: 4 ] == \"0000\" # nonce","title":"1.7. valid_proof \ud568\uc218"},{"location":"daily/2021-05-16/#2-serverpy","text":"server.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 # /chain: \ud604\uc7ac \ube14\ub85d\uccb4\uc778 \ubcf4\uc5ec\uc90c # /transaction/new: \uc0c8 \ud2b8\ub79c\uc7ad\uc158 \uc0dd\uc131 # /mine: server\uc5d0\uac8c \uc0c8 \ube14\ub85d \ucc44\uad74 \uc694\uccad from flask import Flask , jsonify , request from blockchain import Blockchain from uuid import uuid4 app = Flask ( __name__ ) # Universial Unique Identifier node_identifider = str ( uuid4 ()) . replace ( \"-\" , \"\" ) blockchain = Blockchain () @app . route ( \"/chain\" , methods = [ \"GET\" ]) def full_chain (): response = { \"chain\" : blockchain . chain , \"length\" : len ( blockchain . chain ), } return jsonify ( response ), 200 @app . route ( \"/mine\" , methods = [ \"GET\" ]) def mine (): last_block = blockchain . last_block last_proof = last_block [ \"proof\" ] proof = blockchain . pow ( last_proof ) blockchain . new_transaction ( sender = \"0\" , recipient = node_identifider , amount = 1 # coinbase transaction ) # forge the new block by adding it to the chain previous_hash = blockchain . hash ( last_block ) block = blockchain . new_block ( proof , previous_hash ) response = { \"message\" : \"new block found\" , \"index\" : block [ \"index\" ], \"transactions\" : block [ \"transactions\" ], \"proof\" : block [ \"proof\" ], \"previous_hash\" : block [ \"previous_hash\" ], } return response , 200 @app . route ( \"/transactions/new\" , methods = [ \"POST\" ]) def new_transactions (): values = request . get_json () required = [ \"sender\" , \"recipient\" , \"amount\" ] if not all ( k in values for k in required ): return \"missing values\" , 400 # Create a new Transaction index = blockchain . new_transaction ( values [ \"sender\" ], values [ \"recipient\" ], values [ \"amount\" ]) response = { \"message\" : \"Transaction will be added to Block { %s }\" % index } return jsonify ( response ), 201 if __name__ == \"__main__\" : app . run ( host = \"0.0.0.0\" , port = 5000 )","title":"2. server.py"},{"location":"daily/2021-05-16/#3-test_new_transactionpy","text":"test_new_transaction.py 1 2 3 4 5 6 7 8 9 10 import requests import json headers = { 'Content-Type' : 'application/json; charset=utf-8' } data = { \"sender\" : \"1004\" , \"recipient\" : \"0\" , \"amount\" : \"33\" } print ( requests . post ( \"http://localhost:5000/transactions/new\" , headers = headers , data = json . dumps ( data )) . content )","title":"3. test_new_transaction.py"},{"location":"daily/2021-05-16/#4","text":"1 python server.py","title":"4. \uc2e4\ud589"},{"location":"daily/2021-05-16/#41-chain","text":"browser\uc5d0\uc11c http://localhost:5000/chain \uc811\uc18d","title":"4.1. chain"},{"location":"daily/2021-05-16/#42-mine","text":"browser\uc5d0\uc11c http://localhost:5000/mine \uc811\uc18d","title":"4.2. mine"},{"location":"daily/2021-05-16/#43-transaction","text":"post \ud615\uc2dd\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc785\ub825\ud574\uc57c \ud558\ubbc0\ub85c \uc0c8 terminal\uc5d0\uc11c \uc544\ub798\uc758 \uba85\ub839\uc5b4 \uc2e4\ud589 1 python test_new_transaction.py","title":"4.3. transaction"},{"location":"daily/2021-05-17/","text":"leet code \uc880 \ub300\ucda9 \ud480\uc5c8\ub294\ub370, \ubc14\ub85c \ub2f5\uc774 \ub098\uc640\uc11c \ud328\uc2a4\ud588\uc2b5\ub2c8\ub2e4. C++ time(beats 100%), space(beats 37.64%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < int > preorderTraversal ( TreeNode * root ) { vector < int > retn ; return po ( root , retn ); } vector < int >& po ( TreeNode * root , vector < int >& rslt ) { if ( ! root ) return rslt ; rslt . push_back ( root -> val ); // \uc67c if ( root -> left ) po ( root -> left , rslt ); // \uc624 if ( root -> right ) po ( root -> right , rslt ); return rslt ; } };","title":"2021-05-17"},{"location":"daily/2021-05-17/#leet-code","text":"\uc880 \ub300\ucda9 \ud480\uc5c8\ub294\ub370, \ubc14\ub85c \ub2f5\uc774 \ub098\uc640\uc11c \ud328\uc2a4\ud588\uc2b5\ub2c8\ub2e4. C++ time(beats 100%), space(beats 37.64%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < int > preorderTraversal ( TreeNode * root ) { vector < int > retn ; return po ( root , retn ); } vector < int >& po ( TreeNode * root , vector < int >& rslt ) { if ( ! root ) return rslt ; rslt . push_back ( root -> val ); // \uc67c if ( root -> left ) po ( root -> left , rslt ); // \uc624 if ( root -> right ) po ( root -> right , rslt ); return rslt ; } };","title":"leet code"},{"location":"daily/2021-05-18/","text":"leet code 929 - Binary Tree Inorder Traversal \uc131\ub2a5\uc774 \ub9ce\uc774 \uc548 \uc88b\uac8c \ub098\uc654\ub294\ub370, recursive \ubc29\uc2dd\uc73c\ub85c \uc2dc\ub3c4\ud588\uae30 \ub54c\ubb38\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. while\ub85c \ud55c \ubc88 \ub354 \ud480\uc5b4\ubcf4\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. C++ time(beats 0%), space(beats 10.55%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < int > inorderTraversal ( TreeNode * root ) { vector < int > rslt ; return it ( root , rslt ); } private : vector < int > it ( TreeNode * root , vector < int >& rslt ) { if ( root == nullptr ) return rslt ; // check left if ( root -> left ) { it ( root -> left , rslt ); } // check root rslt . push_back ( root -> val ); // check right if ( root -> right ) { it ( root -> right , rslt ); } return rslt ; } };","title":"2021-05-18"},{"location":"daily/2021-05-18/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-05-18/#929-binary-tree-inorder-traversal","text":"\uc131\ub2a5\uc774 \ub9ce\uc774 \uc548 \uc88b\uac8c \ub098\uc654\ub294\ub370, recursive \ubc29\uc2dd\uc73c\ub85c \uc2dc\ub3c4\ud588\uae30 \ub54c\ubb38\uc778 \uac83 \uac19\uc2b5\ub2c8\ub2e4. while\ub85c \ud55c \ubc88 \ub354 \ud480\uc5b4\ubcf4\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. C++ time(beats 0%), space(beats 10.55%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < int > inorderTraversal ( TreeNode * root ) { vector < int > rslt ; return it ( root , rslt ); } private : vector < int > it ( TreeNode * root , vector < int >& rslt ) { if ( root == nullptr ) return rslt ; // check left if ( root -> left ) { it ( root -> left , rslt ); } // check root rslt . push_back ( root -> val ); // check right if ( root -> right ) { it ( root -> right , rslt ); } return rslt ; } };","title":"929 - Binary Tree Inorder Traversal"},{"location":"daily/2021-05-19/","text":"leet code pre-order, in-order, post-order \ubaa8\ub450 \uac19\uc740 \ud328\ud134\uc73c\ub85c \ud480 \uc218 \uc788\uc5c8\uc9c0\ub9cc, \ubcc4\ub85c \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc774\uc9c0 \ubabb \ud588\ub358 \uac83 \uac19\uc544\uc11c pre-oreder\ubd80\ud130 \ub2e4\uc2dc \ud480\uc5b4\ubd10\uc57c\uaca0\uc2b5\ub2c8\ub2e4. \ud2b9\ud788 iterative\ud55c \ubc29\ubc95\uc73c\ub85c \ud480\uc5b4\ubd10\uc57c\uaca0\uc2b5\ub2c8\ub2e4. 930 - Binary Tree Postorder Traversal C++ time(beats 100%), space(beats 13.32%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < int > postorderTraversal ( TreeNode * root ) { vector < int > rslt ; if ( ! root ) return rslt ; return pt ( root , rslt ); } vector < int >& pt ( TreeNode * root , vector < int >& retn ) { // visit left if ( root -> left ) pt ( root -> left , retn ); // visit right if ( root -> right ) pt ( root -> right , retn ); // visit root retn . push_back ( root -> val ); return retn ; } };","title":"2021-05-19"},{"location":"daily/2021-05-19/#leet-code","text":"pre-order, in-order, post-order \ubaa8\ub450 \uac19\uc740 \ud328\ud134\uc73c\ub85c \ud480 \uc218 \uc788\uc5c8\uc9c0\ub9cc, \ubcc4\ub85c \uba54\ubaa8\ub9ac \ud6a8\uc728\uc801\uc774\uc9c0 \ubabb \ud588\ub358 \uac83 \uac19\uc544\uc11c pre-oreder\ubd80\ud130 \ub2e4\uc2dc \ud480\uc5b4\ubd10\uc57c\uaca0\uc2b5\ub2c8\ub2e4. \ud2b9\ud788 iterative\ud55c \ubc29\ubc95\uc73c\ub85c \ud480\uc5b4\ubd10\uc57c\uaca0\uc2b5\ub2c8\ub2e4.","title":"leet code"},{"location":"daily/2021-05-19/#930-binary-tree-postorder-traversal","text":"C++ time(beats 100%), space(beats 13.32%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < int > postorderTraversal ( TreeNode * root ) { vector < int > rslt ; if ( ! root ) return rslt ; return pt ( root , rslt ); } vector < int >& pt ( TreeNode * root , vector < int >& retn ) { // visit left if ( root -> left ) pt ( root -> left , retn ); // visit right if ( root -> right ) pt ( root -> right , retn ); // visit root retn . push_back ( root -> val ); return retn ; } };","title":"930 - Binary Tree Postorder Traversal"},{"location":"daily/2021-05-21/","text":"leet code 928 - Binary Tree Preorder Traversal \uba70\uce60 \uc804 preoder \uc21c\ud68c\ub97c \ud480\uc5c8\uc744 \ub54c \uc0dd\uac01\ubcf4\ub2e4 \uc131\ub2a5\uc774 \ub098\uc624\uc9c0 \uc54a\uc544\uc11c \ub2e4\ub978 \ud480\uc774\ub85c, \uc5ec\ub7ec \ubc88 \ud480\uc5b4\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4. iterative search \ubc29\ubc95\uc73c\ub85c \ud480\uc5c8\uc744 \ub54c \ud070 \ucc28\uc774\uac00 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. return \uac12\uc744 \ubcc4\ub3c4\ub85c \uc8fc\uc9c0 \uc54a\ub354\ub77c\ub3c4 \uba54\ubaa8\ub9ac\uc5d0\ub294 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4(iterative search\uc640 \ub3d9\uc77c). \uc0dd\uac01\ud574\ubcf4\ub2c8\uae4c \ub2f9\uc5f0\ud558\uad70\uc694. STL\uc778 stack container\ub97c \uc0ac\uc6a9\ud558\uba74, \uc608\uc0c1\ub300\ub85c \uba54\ubaa8\ub9ac\ub97c \ub354 \ub9ce\uc774 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \uc0c1\uc704\uad8c\uc5d0 \uc788\ub294 \ub2f5\uc744 \ubd24\ub294\ub370, \ub3d9\uc77c\ud55c \ucf54\ub4dc\ub85c \uc81c\ucd9c\ud588\uc744 \ub54c \ucc28\uc774\uac00 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uba54\ubaa8\ub9ac \ubb38\uc81c\ub294 \uc9c0\uae08 \uacb0\ub860\uc744 \ub0b4\ub9b4 \uc218 \uc5c6\uc744 \ub4ef \ud569\ub2c8\ub2e4. C++ iterative search. time(beats 100%), space(beats 37.94%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < int > preorderTraversal ( TreeNode * root ) { if ( ! root ) return {}; TreeNode * stack [ 100 ] = { nullptr ,}; vector < int > rslt ; int top = 0 ; TreeNode * cur ; stack [ top ] = root ; top ++ ; while ( top ) { top -- ; cur = stack [ top ]; rslt . push_back ( cur -> val ); if ( cur -> right ) { stack [ top ] = cur -> right ; top ++ ; } if ( cur -> left ) { stack [ top ] = cur -> left ; top ++ ; } } return rslt ; } }; C++ recursive(\ucd5c\uc801\ud6541). time(beats 100%), space(beats 37.94%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < int > preorderTraversal ( TreeNode * root ) { vector < int > rslt ; pt ( root , rslt ); return rslt ; } private : void pt ( TreeNode * root , vector < int >& retn ) { if ( ! root ) return ; retn . push_back ( root -> val ); if ( root -> left ) pt ( root -> left , retn ); if ( root -> right ) pt ( root -> right , retn ); return ; } }; C++ STL(stack container) time(beats 100%), space(14.65%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < int > preorderTraversal ( TreeNode * root ) { if ( ! root ) return {}; stack < TreeNode *> st ; TreeNode * cur ; vector < int > rslt ; st . push ( root ); while ( st . size ()) { cur = st . top (); st . pop (); rslt . push_back ( cur -> val ); if ( cur -> right ) st . push ( cur -> right ); if ( cur -> left ) st . push ( cur -> left ); } return rslt ; } };","title":"2021-05-21"},{"location":"daily/2021-05-21/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-05-21/#928-binary-tree-preorder-traversal","text":"\uba70\uce60 \uc804 preoder \uc21c\ud68c\ub97c \ud480\uc5c8\uc744 \ub54c \uc0dd\uac01\ubcf4\ub2e4 \uc131\ub2a5\uc774 \ub098\uc624\uc9c0 \uc54a\uc544\uc11c \ub2e4\ub978 \ud480\uc774\ub85c, \uc5ec\ub7ec \ubc88 \ud480\uc5b4\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4. iterative search \ubc29\ubc95\uc73c\ub85c \ud480\uc5c8\uc744 \ub54c \ud070 \ucc28\uc774\uac00 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. return \uac12\uc744 \ubcc4\ub3c4\ub85c \uc8fc\uc9c0 \uc54a\ub354\ub77c\ub3c4 \uba54\ubaa8\ub9ac\uc5d0\ub294 \uc601\ud5a5\uc744 \ubbf8\uce58\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4(iterative search\uc640 \ub3d9\uc77c). \uc0dd\uac01\ud574\ubcf4\ub2c8\uae4c \ub2f9\uc5f0\ud558\uad70\uc694. STL\uc778 stack container\ub97c \uc0ac\uc6a9\ud558\uba74, \uc608\uc0c1\ub300\ub85c \uba54\ubaa8\ub9ac\ub97c \ub354 \ub9ce\uc774 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \uc0c1\uc704\uad8c\uc5d0 \uc788\ub294 \ub2f5\uc744 \ubd24\ub294\ub370, \ub3d9\uc77c\ud55c \ucf54\ub4dc\ub85c \uc81c\ucd9c\ud588\uc744 \ub54c \ucc28\uc774\uac00 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \uba54\ubaa8\ub9ac \ubb38\uc81c\ub294 \uc9c0\uae08 \uacb0\ub860\uc744 \ub0b4\ub9b4 \uc218 \uc5c6\uc744 \ub4ef \ud569\ub2c8\ub2e4. C++ iterative search. time(beats 100%), space(beats 37.94%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < int > preorderTraversal ( TreeNode * root ) { if ( ! root ) return {}; TreeNode * stack [ 100 ] = { nullptr ,}; vector < int > rslt ; int top = 0 ; TreeNode * cur ; stack [ top ] = root ; top ++ ; while ( top ) { top -- ; cur = stack [ top ]; rslt . push_back ( cur -> val ); if ( cur -> right ) { stack [ top ] = cur -> right ; top ++ ; } if ( cur -> left ) { stack [ top ] = cur -> left ; top ++ ; } } return rslt ; } }; C++ recursive(\ucd5c\uc801\ud6541). time(beats 100%), space(beats 37.94%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < int > preorderTraversal ( TreeNode * root ) { vector < int > rslt ; pt ( root , rslt ); return rslt ; } private : void pt ( TreeNode * root , vector < int >& retn ) { if ( ! root ) return ; retn . push_back ( root -> val ); if ( root -> left ) pt ( root -> left , retn ); if ( root -> right ) pt ( root -> right , retn ); return ; } }; C++ STL(stack container) time(beats 100%), space(14.65%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < int > preorderTraversal ( TreeNode * root ) { if ( ! root ) return {}; stack < TreeNode *> st ; TreeNode * cur ; vector < int > rslt ; st . push ( root ); while ( st . size ()) { cur = st . top (); st . pop (); rslt . push_back ( cur -> val ); if ( cur -> right ) st . push ( cur -> right ); if ( cur -> left ) st . push ( cur -> left ); } return rslt ; } };","title":"928 - Binary Tree Preorder Traversal"},{"location":"daily/2021-05-24/","text":"leet code 931 - Binary Tree Level Order Traversal \uc2dc\uac04, \uacf5\uac04 \ub458\ub2e4 \ub098\uc058\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. C++ time, space(80.65%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <queue> /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < vector < int >> levelOrder ( TreeNode * root ) { queue < TreeNode *> q ; TreeNode * tmp ; q . push ( root ); vector < vector < int >> rslt ; if ( ! root ) return rslt ; while ( q . size ()) { vector < int > cur_tmp ; int qSize = q . size (); for ( int i = 0 ; i < qSize ; ++ i ) { tmp = q . front (); q . pop (); if ( tmp ) cur_tmp . push_back ( tmp -> val ); if ( tmp -> left ) q . push ( tmp -> left ); if ( tmp -> right ) q . push ( tmp -> right ); } rslt . push_back ( cur_tmp ); } return rslt ; } };","title":"2021-05-24"},{"location":"daily/2021-05-24/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-05-24/#931-binary-tree-level-order-traversal","text":"\uc2dc\uac04, \uacf5\uac04 \ub458\ub2e4 \ub098\uc058\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. C++ time, space(80.65%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 #include <queue> /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : vector < vector < int >> levelOrder ( TreeNode * root ) { queue < TreeNode *> q ; TreeNode * tmp ; q . push ( root ); vector < vector < int >> rslt ; if ( ! root ) return rslt ; while ( q . size ()) { vector < int > cur_tmp ; int qSize = q . size (); for ( int i = 0 ; i < qSize ; ++ i ) { tmp = q . front (); q . pop (); if ( tmp ) cur_tmp . push_back ( tmp -> val ); if ( tmp -> left ) q . push ( tmp -> left ); if ( tmp -> right ) q . push ( tmp -> right ); } rslt . push_back ( cur_tmp ); } return rslt ; } };","title":"931 - Binary Tree Level Order Traversal"},{"location":"daily/2021-05-25/","text":"semantic versioning https://semver.org/lang/ko/","title":"2021-05-25"},{"location":"daily/2021-05-25/#semantic-versioning","text":"https://semver.org/lang/ko/","title":"semantic versioning"},{"location":"daily/2021-05-26/","text":"leet code 535 - Maximum Depth of Binary Tree C++ time(), space() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : int rslt = 0 ; int maxDepth ( TreeNode * root ) { dfs ( root , 0 ); return rslt ; } void dfs ( TreeNode * root , int cnt ) { printf ( \"%d \\n \" , cnt ); if ( ! root ) { if ( cnt > rslt ) rslt = cnt ; return ; } if ( root -> left ) dfs ( root -> left , cnt + 1 ); if ( root -> right ) dfs ( root -> right , cnt + 1 ); return ; } };","title":"2021-05-26"},{"location":"daily/2021-05-26/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-05-26/#535-maximum-depth-of-binary-tree","text":"C++ time(), space() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : int rslt = 0 ; int maxDepth ( TreeNode * root ) { dfs ( root , 0 ); return rslt ; } void dfs ( TreeNode * root , int cnt ) { printf ( \"%d \\n \" , cnt ); if ( ! root ) { if ( cnt > rslt ) rslt = cnt ; return ; } if ( root -> left ) dfs ( root -> left , cnt + 1 ); if ( root -> right ) dfs ( root -> right , cnt + 1 ); return ; } };","title":"535 - Maximum Depth of Binary Tree"},{"location":"daily/2021-05-27/","text":"leet code 539 - Maximum Depth of Binary Tree \uc5b4\uc81c \ud480\uc5c8\ub358 \ubb38\uc81c\uc774\uc9c0\ub9cc, static int \uac12\uc744 \uc4f8 \ub54c\ub294 \uc608\uc0c1\ud558\uc9c0 \ubabb \ud55c \uac12\uc774 \ub098\uc654\uc9c0\ub9cc, int\ub85c return\uac12\uc744 \ubc1b\uc73c\ub2c8\uae4c \uc815\uc0c1\uc801\uc778 \uacb0\uacfc\uac00 \ub098\uc654\uc2b5\ub2c8\ub2e4. C++, time(beats 25.72%), space(beats 51.39%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : int maxDepth ( TreeNode * root ) { int rslt = dfs ( root , 0 ); printf ( \"%d \\n \" , rslt ); return rslt ; } int dfs ( TreeNode * root , int cnt ) { if ( root == nullptr ) { printf ( \"%d \\n \" , cnt ); return cnt ; } int left = dfs ( root -> left , cnt + 1 ); int right = dfs ( root -> right , cnt + 1 ); return left > right ? left : right ; } };","title":"2021-05-27"},{"location":"daily/2021-05-27/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-05-27/#539-maximum-depth-of-binary-tree","text":"\uc5b4\uc81c \ud480\uc5c8\ub358 \ubb38\uc81c\uc774\uc9c0\ub9cc, static int \uac12\uc744 \uc4f8 \ub54c\ub294 \uc608\uc0c1\ud558\uc9c0 \ubabb \ud55c \uac12\uc774 \ub098\uc654\uc9c0\ub9cc, int\ub85c return\uac12\uc744 \ubc1b\uc73c\ub2c8\uae4c \uc815\uc0c1\uc801\uc778 \uacb0\uacfc\uac00 \ub098\uc654\uc2b5\ub2c8\ub2e4. C++, time(beats 25.72%), space(beats 51.39%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : int maxDepth ( TreeNode * root ) { int rslt = dfs ( root , 0 ); printf ( \"%d \\n \" , rslt ); return rslt ; } int dfs ( TreeNode * root , int cnt ) { if ( root == nullptr ) { printf ( \"%d \\n \" , cnt ); return cnt ; } int left = dfs ( root -> left , cnt + 1 ); int right = dfs ( root -> right , cnt + 1 ); return left > right ? left : right ; } };","title":"539 - Maximum Depth of Binary Tree"},{"location":"daily/2021-06-02/","text":"vscode\uc758 \ub0b4\ubd80 editor monaco editor alibaba\uc758 mnn framework\ub97c \ubcf4\ub2e4\uac00 monaco-cursor, monaco-editor \ub4f1 monaco\ub77c\ub294 \ub2e8\uc5b4\uac00 \ub9ce\uc774 \ub208\uc5d0 \ub744\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c monaco editor\ub85c \uac80\uc0c9\ud558\ub2c8, vscode\ub97c \uc774\ub8e8\uace0 \uc788\ub294 \ub0b4\ubd80 editor\ub77c\ub294 \uac83\uc744 \uc54c\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\uac83\uc73c\ub85c \uac04\ub2e8\ud55c \uc5d0\ub514\ud130\ub97c \ub9cc\ub4e4\uc5b4\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4.","title":"2021-06-02"},{"location":"daily/2021-06-02/#vscode-editor-monaco-editor","text":"alibaba\uc758 mnn framework\ub97c \ubcf4\ub2e4\uac00 monaco-cursor, monaco-editor \ub4f1 monaco\ub77c\ub294 \ub2e8\uc5b4\uac00 \ub9ce\uc774 \ub208\uc5d0 \ub744\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c monaco editor\ub85c \uac80\uc0c9\ud558\ub2c8, vscode\ub97c \uc774\ub8e8\uace0 \uc788\ub294 \ub0b4\ubd80 editor\ub77c\ub294 \uac83\uc744 \uc54c\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\uac83\uc73c\ub85c \uac04\ub2e8\ud55c \uc5d0\ub514\ud130\ub97c \ub9cc\ub4e4\uc5b4\ubcf4\uace0\uc790 \ud569\ub2c8\ub2e4.","title":"vscode\uc758 \ub0b4\ubd80 editor monaco editor"},{"location":"daily/2021-06-21/","text":"\uc6f9\uc740 \uace0\ub7ad \ucf54\uc5b4\ub294 rust \uc6f9 \ud504\ub860\ud2b8\uc5d4\ub4dc\ub294 ts","title":"2021-06-21"},{"location":"daily/2021-06-22/","text":"leetcode 536 - Symmetric Tree \ub108\ubb34 \uc624\ub79c\ub9cc\uc5d0 \ud480\uc5b4\ubcf4\ub2c8\uae4c \uac10\uc774 \uc880 \ub5a8\uc5b4\uc9c0\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. C++ time(beats 0%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ #include <queue> #include <vector> class Solution { public : bool isSymmetric ( TreeNode * root ) { queue < TreeNode *> q ; q . push ( root ); while ( ! q . empty ()) { int cur_len = q . size (); vector < TreeNode *> tmp ; for ( int i = 0 ; i < cur_len ; ++ i ) { TreeNode * cur = q . front (); tmp . push_back ( cur ); if ( ! cur ) { q . pop (); continue ; } q . push ( cur -> left ); q . push ( cur -> right ); q . pop (); } if ( ! isSymmetricLine ( tmp )) return false ; } return true ; } private : bool isSymmetricLine ( vector < TreeNode *> lst ) { printf ( \" \\n \" ); bool rslt = true ; int len = lst . size (); for ( int i = 0 ; i < len / 2 ; ++ i ) { if ( lst [ i ] == nullptr && lst [ len - i -1 ] == nullptr ) { continue ; } else if ( lst [ i ] == nullptr && lst [ len - i -1 ] != nullptr ) { rslt = false ; break ; } else if ( lst [ i ] != nullptr && lst [ len - i -1 ] == nullptr ) { rslt = false ; break ; } else { if ( lst [ i ] -> val != lst [ len - i -1 ] -> val ) { printf ( \"%d, %d \\n \" , lst [ i ] -> val , lst [ len - i -1 ] -> val ); rslt = false ; break ; } } } return rslt ; } };","title":"2021-06-22"},{"location":"daily/2021-06-22/#leetcode","text":"536 - Symmetric Tree \ub108\ubb34 \uc624\ub79c\ub9cc\uc5d0 \ud480\uc5b4\ubcf4\ub2c8\uae4c \uac10\uc774 \uc880 \ub5a8\uc5b4\uc9c0\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. C++ time(beats 0%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ #include <queue> #include <vector> class Solution { public : bool isSymmetric ( TreeNode * root ) { queue < TreeNode *> q ; q . push ( root ); while ( ! q . empty ()) { int cur_len = q . size (); vector < TreeNode *> tmp ; for ( int i = 0 ; i < cur_len ; ++ i ) { TreeNode * cur = q . front (); tmp . push_back ( cur ); if ( ! cur ) { q . pop (); continue ; } q . push ( cur -> left ); q . push ( cur -> right ); q . pop (); } if ( ! isSymmetricLine ( tmp )) return false ; } return true ; } private : bool isSymmetricLine ( vector < TreeNode *> lst ) { printf ( \" \\n \" ); bool rslt = true ; int len = lst . size (); for ( int i = 0 ; i < len / 2 ; ++ i ) { if ( lst [ i ] == nullptr && lst [ len - i -1 ] == nullptr ) { continue ; } else if ( lst [ i ] == nullptr && lst [ len - i -1 ] != nullptr ) { rslt = false ; break ; } else if ( lst [ i ] != nullptr && lst [ len - i -1 ] == nullptr ) { rslt = false ; break ; } else { if ( lst [ i ] -> val != lst [ len - i -1 ] -> val ) { printf ( \"%d, %d \\n \" , lst [ i ] -> val , lst [ len - i -1 ] -> val ); rslt = false ; break ; } } } return rslt ; } };","title":"leetcode"},{"location":"daily/2021-06-24/","text":"leet code 538: Count Univalue Subtrees \uba54\ubaa8\ub9ac\ub97c \ub9ce\uc774 \uc7a1\uc544\uba39\uace0, \ucf54\ub4dc\uac00 \uae38\uc5c8\uc74c C++ time(beats 100%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ struct returnVal { int cnt ; bool continued ; }; class Solution { public : int countUnivalSubtrees ( TreeNode * root ) { if ( ! root ) return 0 ; returnVal rv = solve ( root ); return rv . cnt ; } returnVal solve ( TreeNode * node ) { returnVal rv ; rv . cnt = 0 ; rv . continued = true ; if ( ! node -> left && ! node -> right ) { rv . cnt = 1 ; return rv ; } if ( node -> left && node -> right ) { returnVal rv1 , rv2 ; rv1 = solve ( node -> left ); rv2 = solve ( node -> right ); rv . cnt += rv1 . cnt + rv2 . cnt ; rv . continued = rv1 . continued && rv2 . continued ; if ( rv . continued ) { if ( node -> left -> val != node -> val || node -> right -> val != node -> val ) { rv . continued = false ; } else { rv . cnt ++ ; } } } else if ( ! node -> left && node -> right ) { returnVal rv1 ; rv1 = solve ( node -> right ); rv . cnt += rv1 . cnt ; rv . continued = rv1 . continued ; if ( rv . continued ) { if ( node -> right -> val != node -> val ) { rv . continued = false ; } else { rv . cnt ++ ; } } } else if ( node -> left && ! node -> right ) { returnVal rv1 ; rv1 = solve ( node -> left ); rv . cnt += rv1 . cnt ; rv . continued = rv1 . continued ; if ( rv . continued ) { if ( node -> left -> val != node -> val ) { rv . continued = false ; } else { rv . cnt ++ ; } } } return rv ; } }; C++ \ub2e4\ub978 \uc194\ub8e8\uc158 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public : int countUnivalSubtrees ( TreeNode * root ) { int count = 0 ; countUnivalSubtreesRecursive ( root , count ); return count ; } bool countUnivalSubtreesRecursive ( TreeNode * root , int & count ) { if ( root == NULL ) return true ; auto isLeftUnival = countUnivalSubtreesRecursive ( root -> left , count ); auto isRightUnival = countUnivalSubtreesRecursive ( root -> right , count ); if ( isLeftUnival && isRightUnival && (( root -> left == NULL ) || root -> left -> val == root -> val ) && (( root -> right == NULL ) || root -> right -> val == root -> val ) ) { ++ count ; return true ; } return false ; } }; \ud568\uc218\uc758 \ubc18\ud658\ud615: \ubd80\ubaa8 \ub178\ub4dc\uc5d0\uc11c \uc790\uc2dd\uc758 \uc815\ubcf4\ub97c \uc54c\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, bool type\uc73c\ub85c \ucda9\ubd84 count\ub294 stack\ubcf4\ub2e4 \uc804\uc5ed \ubcc0\uc218\ub85c \ub450\ub294\uac8c \uc88b\uc74c","title":"2021-06-24"},{"location":"daily/2021-06-24/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-06-24/#538-count-univalue-subtrees","text":"\uba54\ubaa8\ub9ac\ub97c \ub9ce\uc774 \uc7a1\uc544\uba39\uace0, \ucf54\ub4dc\uac00 \uae38\uc5c8\uc74c C++ time(beats 100%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ struct returnVal { int cnt ; bool continued ; }; class Solution { public : int countUnivalSubtrees ( TreeNode * root ) { if ( ! root ) return 0 ; returnVal rv = solve ( root ); return rv . cnt ; } returnVal solve ( TreeNode * node ) { returnVal rv ; rv . cnt = 0 ; rv . continued = true ; if ( ! node -> left && ! node -> right ) { rv . cnt = 1 ; return rv ; } if ( node -> left && node -> right ) { returnVal rv1 , rv2 ; rv1 = solve ( node -> left ); rv2 = solve ( node -> right ); rv . cnt += rv1 . cnt + rv2 . cnt ; rv . continued = rv1 . continued && rv2 . continued ; if ( rv . continued ) { if ( node -> left -> val != node -> val || node -> right -> val != node -> val ) { rv . continued = false ; } else { rv . cnt ++ ; } } } else if ( ! node -> left && node -> right ) { returnVal rv1 ; rv1 = solve ( node -> right ); rv . cnt += rv1 . cnt ; rv . continued = rv1 . continued ; if ( rv . continued ) { if ( node -> right -> val != node -> val ) { rv . continued = false ; } else { rv . cnt ++ ; } } } else if ( node -> left && ! node -> right ) { returnVal rv1 ; rv1 = solve ( node -> left ); rv . cnt += rv1 . cnt ; rv . continued = rv1 . continued ; if ( rv . continued ) { if ( node -> left -> val != node -> val ) { rv . continued = false ; } else { rv . cnt ++ ; } } } return rv ; } }; C++ \ub2e4\ub978 \uc194\ub8e8\uc158 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 class Solution { public : int countUnivalSubtrees ( TreeNode * root ) { int count = 0 ; countUnivalSubtreesRecursive ( root , count ); return count ; } bool countUnivalSubtreesRecursive ( TreeNode * root , int & count ) { if ( root == NULL ) return true ; auto isLeftUnival = countUnivalSubtreesRecursive ( root -> left , count ); auto isRightUnival = countUnivalSubtreesRecursive ( root -> right , count ); if ( isLeftUnival && isRightUnival && (( root -> left == NULL ) || root -> left -> val == root -> val ) && (( root -> right == NULL ) || root -> right -> val == root -> val ) ) { ++ count ; return true ; } return false ; } }; \ud568\uc218\uc758 \ubc18\ud658\ud615: \ubd80\ubaa8 \ub178\ub4dc\uc5d0\uc11c \uc790\uc2dd\uc758 \uc815\ubcf4\ub97c \uc54c\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, bool type\uc73c\ub85c \ucda9\ubd84 count\ub294 stack\ubcf4\ub2e4 \uc804\uc5ed \ubcc0\uc218\ub85c \ub450\ub294\uac8c \uc88b\uc74c","title":"538: Count Univalue Subtrees"},{"location":"daily/2021-06-26/","text":"leet code 942 - Construct Binary Tree from Inorder and Postorder Traversal \uc8fc\uc5b4\uc9c4 traversal \uacb0\uacfc\ub97c \ubcf4\uace0, \uc6d0\ub798\uc758 tree\ub97c \uc54c\uc544\ub0b4\uc57c \ud568 \uc815\ubcf4 inotrder \uc2dc\uc791: left \uc911\uac04: root \ub05d: right postorder \uc2dc\uc791: left \uc911\uac04: right \ub05d: root \ud480\uc774 \uc804\ub7b5 root\ub97c \uba3c\uc800 \ucc3e\uc790(postorder \uc0ac\uc6a9) inorder\uc5d0\uc11c root\uc758 index\ub97c \ucc3e\uc790! inorder\ub294 left, root, right\ub85c \ub098\ub220\uc9c8 \uc218 \uc788\uc74c(postorder\ub294 \ub9c8\ucc2c\uac00\uc9c0\ub85c left, right, root\ub85c \ub098\ub220\uc9c8 \uc218 \uc788\uc74c) left, right\uc758 \uad6c\uac04\uc744 \ub098\ub208 \ub2e4\uc74c\uc5d0 tree\ub97c \ud569\uccd0\uc11c root\uc5d0 \ud569\uce5c \ub2e4\uc74c \ubc18\ud658(\uc7ac\uadc0\uc801 \ud638\ucd9c \uc0ac\uc6a9) C++, time(beats 54.49%), space(beats 57.56%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : TreeNode * buildTree ( vector < int >& inorder , vector < int >& postorder ) { this -> inorder = inorder ; this -> postorder = postorder ; return solve ( 0 , inorder . size (), 0 , postorder . size ()); } private : vector < int > inorder ; vector < int > postorder ; private : TreeNode * findRootVal ( int postorderStart , int postorderEnd ) { if ( postorderEnd - postorderStart <= 0 ) return nullptr ; return new TreeNode ( this -> postorder [ postorderEnd - 1 ]); } int findRootIndexInInorder ( TreeNode * node , int inorderStart , int inorderEnd ) { int val = node -> val ; for ( int i = inorderStart ; i < inorderEnd ; ++ i ) { if ( this -> inorder [ i ] == val ) { return i - inorderStart ; } } return -1 ; } TreeNode * solve ( int inorderStart , int inorderEnd , int postorderStart , int postorderEnd ) { if ( inorderEnd - inorderStart <= 0 ) { return nullptr ; } TreeNode * root = findRootVal ( postorderStart , postorderEnd ); if ( ! root ) return nullptr ; int rootIndexDeltaFromStart = findRootIndexInInorder ( root , inorderStart , inorderEnd ); if ( rootIndexDeltaFromStart == -1 ) return nullptr ; TreeNode * left = solve ( inorderStart , inorderStart + rootIndexDeltaFromStart , postorderStart , postorderStart + rootIndexDeltaFromStart ); if ( left ) root -> left = left ; TreeNode * right = solve ( inorderStart + rootIndexDeltaFromStart + 1 , inorderEnd , postorderStart + rootIndexDeltaFromStart , postorderEnd - 1 ); if ( right ) root -> right = right ; return root ; } };","title":"2021-06-26"},{"location":"daily/2021-06-26/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-06-26/#942-construct-binary-tree-from-inorder-and-postorder-traversal","text":"\uc8fc\uc5b4\uc9c4 traversal \uacb0\uacfc\ub97c \ubcf4\uace0, \uc6d0\ub798\uc758 tree\ub97c \uc54c\uc544\ub0b4\uc57c \ud568 \uc815\ubcf4 inotrder \uc2dc\uc791: left \uc911\uac04: root \ub05d: right postorder \uc2dc\uc791: left \uc911\uac04: right \ub05d: root \ud480\uc774 \uc804\ub7b5 root\ub97c \uba3c\uc800 \ucc3e\uc790(postorder \uc0ac\uc6a9) inorder\uc5d0\uc11c root\uc758 index\ub97c \ucc3e\uc790! inorder\ub294 left, root, right\ub85c \ub098\ub220\uc9c8 \uc218 \uc788\uc74c(postorder\ub294 \ub9c8\ucc2c\uac00\uc9c0\ub85c left, right, root\ub85c \ub098\ub220\uc9c8 \uc218 \uc788\uc74c) left, right\uc758 \uad6c\uac04\uc744 \ub098\ub208 \ub2e4\uc74c\uc5d0 tree\ub97c \ud569\uccd0\uc11c root\uc5d0 \ud569\uce5c \ub2e4\uc74c \ubc18\ud658(\uc7ac\uadc0\uc801 \ud638\ucd9c \uc0ac\uc6a9) C++, time(beats 54.49%), space(beats 57.56%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : TreeNode * buildTree ( vector < int >& inorder , vector < int >& postorder ) { this -> inorder = inorder ; this -> postorder = postorder ; return solve ( 0 , inorder . size (), 0 , postorder . size ()); } private : vector < int > inorder ; vector < int > postorder ; private : TreeNode * findRootVal ( int postorderStart , int postorderEnd ) { if ( postorderEnd - postorderStart <= 0 ) return nullptr ; return new TreeNode ( this -> postorder [ postorderEnd - 1 ]); } int findRootIndexInInorder ( TreeNode * node , int inorderStart , int inorderEnd ) { int val = node -> val ; for ( int i = inorderStart ; i < inorderEnd ; ++ i ) { if ( this -> inorder [ i ] == val ) { return i - inorderStart ; } } return -1 ; } TreeNode * solve ( int inorderStart , int inorderEnd , int postorderStart , int postorderEnd ) { if ( inorderEnd - inorderStart <= 0 ) { return nullptr ; } TreeNode * root = findRootVal ( postorderStart , postorderEnd ); if ( ! root ) return nullptr ; int rootIndexDeltaFromStart = findRootIndexInInorder ( root , inorderStart , inorderEnd ); if ( rootIndexDeltaFromStart == -1 ) return nullptr ; TreeNode * left = solve ( inorderStart , inorderStart + rootIndexDeltaFromStart , postorderStart , postorderStart + rootIndexDeltaFromStart ); if ( left ) root -> left = left ; TreeNode * right = solve ( inorderStart + rootIndexDeltaFromStart + 1 , inorderEnd , postorderStart + rootIndexDeltaFromStart , postorderEnd - 1 ); if ( right ) root -> right = right ; return root ; } };","title":"942 - Construct Binary Tree from Inorder and Postorder Traversal"},{"location":"daily/2021-06-29/","text":"leet code 943 - Construct Binary Tree from Preorder and Inorder Traversal \uc800\ubc88 \ubb38\uc81c\ub294 inorder\uc640 postorder\ub97c \uc774\uc6a9\ud574\uc11c \uc6d0\ub798 tree\ub97c \uc54c\uc544\ub0b4\ub294 \uac83\uc774\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 postorder \ub300\uc2e0 preorder traversal\uc774 \uc788\uc2b5\ub2c8\ub2e4. inorder left -> root -> right preorder root->left->right \uc774\ubc88\uc5d0\ub3c4 \uac19\uc740 \uc804\ub7b5\uc73c\ub85c inorder\ub97c \uc774\uc6a9\ud574\uc11c left\uc640 right\ub97c \uc790\ub974\uace0 \ubd99\uc774\ub294 \uc804\ub7b5\uc774 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. \ud568\uc218 \uc815\uc758 1 2 TreeNode * solve ( TreeNode * root , int inorder_start , int inorder_end , int preorder_start , int preorder_end ); // root\uc758 left node\uc640 right node\ub97c \uc5f0\uacb0\ud574\uc11c \ub0b4 \ubcf4\ub0c4 \ub2f5\uc744 \ud478\ub294 \ubc29\ubc95\uc740 \ud655\uc2e4\ud558\uac8c \uc54c\uc558\uc9c0\ub9cc, \uc880 \ub354 \ud6a8\uc728\uc801\uc73c\ub85c \uad6c\ud604\ud558\ub294 \uac83\uc744 \uc5f0\uc2b5\ud574\uc57c\uaca0\uc2b5\ub2c8\ub2e4. C++ time(beats 65.21%), space(beats 54.30%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : TreeNode * buildTree ( vector < int >& preorder , vector < int >& inorder ) { this -> preorder = preorder ; this -> inorder = inorder ; return solve ( 0 , inorder . size (), 0 , preorder . size ()); } TreeNode * solve ( int inorderStart , int inorderEnd , int preorderStart , int preorderEnd ) { if ( preorderEnd - preorderStart == 1 ) { return new TreeNode ( this -> preorder [ preorderStart ]); } if ( preorderEnd - preorderStart <= 0 ) { return nullptr ; } // 1. get root value int rootVal = this -> preorder [ preorderStart ]; // 2. find index from root in inorder int rootIndex ; for ( int i = inorderStart ; i < inorderEnd ; ++ i ) { if ( this -> inorder [ i ] == rootVal ) { rootIndex = i - inorderStart ; break ; } } TreeNode * root = new TreeNode ( rootVal ); TreeNode * left = solve ( inorderStart , inorderStart + rootIndex , preorderStart + 1 , preorderStart + rootIndex + 1 ); if ( left ) { root -> left = left ; } TreeNode * right = solve ( inorderStart + rootIndex + 1 , inorderEnd , preorderStart + rootIndex + 1 , preorderEnd ); if ( right ) { root -> right = right ; } return root ; } private : vector < int > inorder ; vector < int > preorder ; };","title":"2021-06-29"},{"location":"daily/2021-06-29/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-06-29/#943-construct-binary-tree-from-preorder-and-inorder-traversal","text":"\uc800\ubc88 \ubb38\uc81c\ub294 inorder\uc640 postorder\ub97c \uc774\uc6a9\ud574\uc11c \uc6d0\ub798 tree\ub97c \uc54c\uc544\ub0b4\ub294 \uac83\uc774\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ubc88\uc5d0\ub294 postorder \ub300\uc2e0 preorder traversal\uc774 \uc788\uc2b5\ub2c8\ub2e4. inorder left -> root -> right preorder root->left->right \uc774\ubc88\uc5d0\ub3c4 \uac19\uc740 \uc804\ub7b5\uc73c\ub85c inorder\ub97c \uc774\uc6a9\ud574\uc11c left\uc640 right\ub97c \uc790\ub974\uace0 \ubd99\uc774\ub294 \uc804\ub7b5\uc774 \uc88b\uaca0\uc2b5\ub2c8\ub2e4.","title":"943 - Construct Binary Tree from Preorder and Inorder Traversal"},{"location":"daily/2021-06-29/#_1","text":"1 2 TreeNode * solve ( TreeNode * root , int inorder_start , int inorder_end , int preorder_start , int preorder_end ); // root\uc758 left node\uc640 right node\ub97c \uc5f0\uacb0\ud574\uc11c \ub0b4 \ubcf4\ub0c4 \ub2f5\uc744 \ud478\ub294 \ubc29\ubc95\uc740 \ud655\uc2e4\ud558\uac8c \uc54c\uc558\uc9c0\ub9cc, \uc880 \ub354 \ud6a8\uc728\uc801\uc73c\ub85c \uad6c\ud604\ud558\ub294 \uac83\uc744 \uc5f0\uc2b5\ud574\uc57c\uaca0\uc2b5\ub2c8\ub2e4. C++ time(beats 65.21%), space(beats 54.30%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : TreeNode * buildTree ( vector < int >& preorder , vector < int >& inorder ) { this -> preorder = preorder ; this -> inorder = inorder ; return solve ( 0 , inorder . size (), 0 , preorder . size ()); } TreeNode * solve ( int inorderStart , int inorderEnd , int preorderStart , int preorderEnd ) { if ( preorderEnd - preorderStart == 1 ) { return new TreeNode ( this -> preorder [ preorderStart ]); } if ( preorderEnd - preorderStart <= 0 ) { return nullptr ; } // 1. get root value int rootVal = this -> preorder [ preorderStart ]; // 2. find index from root in inorder int rootIndex ; for ( int i = inorderStart ; i < inorderEnd ; ++ i ) { if ( this -> inorder [ i ] == rootVal ) { rootIndex = i - inorderStart ; break ; } } TreeNode * root = new TreeNode ( rootVal ); TreeNode * left = solve ( inorderStart , inorderStart + rootIndex , preorderStart + 1 , preorderStart + rootIndex + 1 ); if ( left ) { root -> left = left ; } TreeNode * right = solve ( inorderStart + rootIndex + 1 , inorderEnd , preorderStart + rootIndex + 1 , preorderEnd ); if ( right ) { root -> right = right ; } return root ; } private : vector < int > inorder ; vector < int > preorder ; };","title":"\ud568\uc218 \uc815\uc758"},{"location":"daily/2021-06-30/","text":"leet code 994 - Populating Next Right Pointers in Each Node \ubb38\uc81c\uc5d0\uc11c\ub294 \ucd94\uac00\uc801\uc778 \uacf5\uac04\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\ub77c\uace0 \ud588\ub294\ub370, \uadf8\uac83\uae4c\uc9c0\ub294 \uace0\ub824\ud558\uc9c0 \ubabb \ud574\uc11c \uc544\uc27d\uc2b5\ub2c8\ub2e4. C++ time(beats 59.82%), space(beats 45.82%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 /* // Definition for a Node. class Node { public: int val; Node* left; Node* right; Node* next; Node() : val(0), left(NULL), right(NULL), next(NULL) {} Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {} Node(int _val, Node* _left, Node* _right, Node* _next) : val(_val), left(_left), right(_right), next(_next) {} }; */ #include <queue> class Solution { public : Node * connect ( Node * root ) { if ( ! root ) return nullptr ; queue < Node *> q ; q . push ( root ); while ( ! q . empty ()) { int len_q = q . size (); for ( int i = 0 ; i < len_q ; ++ i ) { Node * cur = q . front (); q . pop (); if ( i + 1 < len_q ){ cur -> next = q . front (); } else { cur -> next = nullptr ; } if ( cur -> left ) q . push ( cur -> left ); if ( cur -> right ) q . push ( cur -> right ); } } return root ; } };","title":"2021-06-30"},{"location":"daily/2021-06-30/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-06-30/#994-populating-next-right-pointers-in-each-node","text":"\ubb38\uc81c\uc5d0\uc11c\ub294 \ucd94\uac00\uc801\uc778 \uacf5\uac04\uc744 \uc0ac\uc6a9\ud558\uc9c0 \ub9d0\ub77c\uace0 \ud588\ub294\ub370, \uadf8\uac83\uae4c\uc9c0\ub294 \uace0\ub824\ud558\uc9c0 \ubabb \ud574\uc11c \uc544\uc27d\uc2b5\ub2c8\ub2e4. C++ time(beats 59.82%), space(beats 45.82%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 /* // Definition for a Node. class Node { public: int val; Node* left; Node* right; Node* next; Node() : val(0), left(NULL), right(NULL), next(NULL) {} Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {} Node(int _val, Node* _left, Node* _right, Node* _next) : val(_val), left(_left), right(_right), next(_next) {} }; */ #include <queue> class Solution { public : Node * connect ( Node * root ) { if ( ! root ) return nullptr ; queue < Node *> q ; q . push ( root ); while ( ! q . empty ()) { int len_q = q . size (); for ( int i = 0 ; i < len_q ; ++ i ) { Node * cur = q . front (); q . pop (); if ( i + 1 < len_q ){ cur -> next = q . front (); } else { cur -> next = nullptr ; } if ( cur -> left ) q . push ( cur -> left ); if ( cur -> right ) q . push ( cur -> right ); } } return root ; } };","title":"994 - Populating Next Right Pointers in Each Node"},{"location":"daily/2021-07-01/","text":"leet code 1016 - Populating Next Right Pointers in Each Node II \uc800\ubc88 \ubb38\uc81c(Populating Next Right Pointers in Each Node)\uc640 \ub3d9\uc77c\ud558\uac8c \ud480\uc5c8\uc2b5\ub2c8\ub2e4. \uc0ac\uc2e4 next pointer\ub97c \uc774\uc6a9\ud574\uc11c \ucd5c\uc801\ud654\ub97c \ud558\uba74 \uc880 \ub354 \uc5b4\ub824\uc6b4 \ubb38\uc81c\uc600\uaca0\uc9c0\ub9cc, \uacf5\uac04 \ucd5c\uc801\ud654\ub97c \uadf8\ub807\uac8c \ud558\uc9c0 \uc54a\uc544\uc11c \uc77c\ub2e8 \uac19\uc740 \ucf54\ub4dc\ub85c \uc81c\ucd9c\ud569\ub2c8\ub2e4. C++ time(beats 76.18%), space(beats 51.37%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /* // Definition for a Node. class Node { public: int val; Node* left; Node* right; Node* next; Node() : val(0), left(NULL), right(NULL), next(NULL) {} Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {} Node(int _val, Node* _left, Node* _right, Node* _next) : val(_val), left(_left), right(_right), next(_next) {} }; */ class Solution { public : Node * connect ( Node * root ) { if ( ! root ) return nullptr ; queue < Node *> q ; q . push ( root ); while ( ! q . empty ()) { int len_q = q . size (); for ( int i = 0 ; i < len_q ; ++ i ) { Node * cur = q . front (); q . pop (); if ( i + 1 < len_q ){ cur -> next = q . front (); } else { cur -> next = nullptr ; } if ( cur -> left ) q . push ( cur -> left ); if ( cur -> right ) q . push ( cur -> right ); } } return root ; } };","title":"2021-07-01"},{"location":"daily/2021-07-01/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-01/#1016-populating-next-right-pointers-in-each-node-ii","text":"\uc800\ubc88 \ubb38\uc81c(Populating Next Right Pointers in Each Node)\uc640 \ub3d9\uc77c\ud558\uac8c \ud480\uc5c8\uc2b5\ub2c8\ub2e4. \uc0ac\uc2e4 next pointer\ub97c \uc774\uc6a9\ud574\uc11c \ucd5c\uc801\ud654\ub97c \ud558\uba74 \uc880 \ub354 \uc5b4\ub824\uc6b4 \ubb38\uc81c\uc600\uaca0\uc9c0\ub9cc, \uacf5\uac04 \ucd5c\uc801\ud654\ub97c \uadf8\ub807\uac8c \ud558\uc9c0 \uc54a\uc544\uc11c \uc77c\ub2e8 \uac19\uc740 \ucf54\ub4dc\ub85c \uc81c\ucd9c\ud569\ub2c8\ub2e4. C++ time(beats 76.18%), space(beats 51.37%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 /* // Definition for a Node. class Node { public: int val; Node* left; Node* right; Node* next; Node() : val(0), left(NULL), right(NULL), next(NULL) {} Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {} Node(int _val, Node* _left, Node* _right, Node* _next) : val(_val), left(_left), right(_right), next(_next) {} }; */ class Solution { public : Node * connect ( Node * root ) { if ( ! root ) return nullptr ; queue < Node *> q ; q . push ( root ); while ( ! q . empty ()) { int len_q = q . size (); for ( int i = 0 ; i < len_q ; ++ i ) { Node * cur = q . front (); q . pop (); if ( i + 1 < len_q ){ cur -> next = q . front (); } else { cur -> next = nullptr ; } if ( cur -> left ) q . push ( cur -> left ); if ( cur -> right ) q . push ( cur -> right ); } } return root ; } };","title":"1016 - Populating Next Right Pointers in Each Node II"},{"location":"daily/2021-07-06/","text":"leet code 932 - Lowest Common Ancestor of a Binary Tree \ud480\uc774\uc5d0\uc11c \uba54\ubaa8\ub9ac\uac00 \ub9ce\uc774 \uc0ac\uc6a9\ub41c \uc774\uc720\ub294 \uc7ac\uadc0\ub85c \ud480\uc5b4\uc11c \uadf8\ub7f0\uac8c \uc544\ub2d0\uae4c \uc2f6\uc2b5\ub2c8\ub2e4. C++ time(beats 94.10%), space(beats 19.91%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ #include <vector> class Solution { public : TreeNode * lowestCommonAncestor ( TreeNode * root , TreeNode * p , TreeNode * q ) { // get each path of p, q v . push_back ( root ); getPath ( root , p -> val ); qq = pp ; getPath ( root , q -> val ); // calculate common node return calculate (); } void getPath ( TreeNode * root , int val ) { // preorder if ( ! root ) return ; if ( root -> val == val ) { pp = v ; return ; } if ( root -> left ) { v . push_back ( root -> left ); getPath ( root -> left , val ); v . pop_back (); } if ( root -> right ) { v . push_back ( root -> right ); getPath ( root -> right , val ); v . pop_back (); } return ; } TreeNode * calculate () { int limit = pp . size () < qq . size () ? pp . size () : qq . size (); int i = 0 ; for (; i < limit ; ++ i ) { if ( pp [ i ] -> val != qq [ i ] -> val ) { return pp [ i -1 ]; } } return pp [ i -1 ]; } private : vector < TreeNode *> v ; vector < TreeNode *> pp ; vector < TreeNode *> qq ; };","title":"2021-07-06"},{"location":"daily/2021-07-06/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-06/#932-lowest-common-ancestor-of-a-binary-tree","text":"\ud480\uc774\uc5d0\uc11c \uba54\ubaa8\ub9ac\uac00 \ub9ce\uc774 \uc0ac\uc6a9\ub41c \uc774\uc720\ub294 \uc7ac\uadc0\ub85c \ud480\uc5b4\uc11c \uadf8\ub7f0\uac8c \uc544\ub2d0\uae4c \uc2f6\uc2b5\ub2c8\ub2e4. C++ time(beats 94.10%), space(beats 19.91%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ #include <vector> class Solution { public : TreeNode * lowestCommonAncestor ( TreeNode * root , TreeNode * p , TreeNode * q ) { // get each path of p, q v . push_back ( root ); getPath ( root , p -> val ); qq = pp ; getPath ( root , q -> val ); // calculate common node return calculate (); } void getPath ( TreeNode * root , int val ) { // preorder if ( ! root ) return ; if ( root -> val == val ) { pp = v ; return ; } if ( root -> left ) { v . push_back ( root -> left ); getPath ( root -> left , val ); v . pop_back (); } if ( root -> right ) { v . push_back ( root -> right ); getPath ( root -> right , val ); v . pop_back (); } return ; } TreeNode * calculate () { int limit = pp . size () < qq . size () ? pp . size () : qq . size (); int i = 0 ; for (; i < limit ; ++ i ) { if ( pp [ i ] -> val != qq [ i ] -> val ) { return pp [ i -1 ]; } } return pp [ i -1 ]; } private : vector < TreeNode *> v ; vector < TreeNode *> pp ; vector < TreeNode *> qq ; };","title":"932 - Lowest Common Ancestor of a Binary Tree"},{"location":"daily/2021-07-08/","text":"leet code 995 - Serialize and Deserialize Binary Tree serialize serialize\ub294 DFS(preorder traversal)\ub85c serialize deserialize deserialize\ub294 DFS(preorder traversal)\ub85c deserialize \uc911\ucca9\ud568\uc218\uc758 \ud568\uc218 \uc6d0\ud615 Info deserializeInternal(int idx) idx\ub294 class \ub0b4\ubd80\uc5d0 serialized_string\uc774 \uc788\uace0, \uadf8 string\uc758 index\uc785\ub2c8\ub2e4. Info \uad6c\uc870\uccb4 TreeNode* node int idx input\uc73c\ub85c \ub4e4\uc5b4\uac00\ub294 idx deserialize\ub294 \uc880 \ube44\ud6a8\uc728\uc774 \uc788\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. string\uc744 \ub9e4 \ud568\uc218\ub9c8\ub2e4 \uc804\ub2ec\ud558\uace0 \uc2f6\uc9c0 \uc54a\uc544\uc11c, Info\ub77c\ub294 \uad6c\uc870\uccb4\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. 1\ucc28 \uc218\uc815 \ud6c4\uc5d0 memory \uacf5\uac04\ud6a8\uc728\uc740 \uc88b\uc544\uc84c\uc9c0\ub9cc, \uc18d\ub3c4\ub294 \ub290\ub824\uc84c\uc74c C++ time(beats 46.28%), space(40.82%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ #include <string> #include <iostream> using namespace std ; struct Info { TreeNode * node ; int idx ; }; class Codec { public : // Encodes a tree to a single string. string serialize ( TreeNode * root ) { //preorder traversal string result ; //serialize root if ( root ) { result += to_string ( root -> val ) + \",\" ; } else { result += \"#,\" ; return result ; } //traverse left result += serialize ( root -> left ); //traverse right result += serialize ( root -> right ); return result ; } // Decodes your encoded data to tree. TreeNode * deserialize ( string data ) { _str = data ; if ( data == \"\" ) return nullptr ; // if root is null, then return // if root is not null and left is null, then new node of root // return deserializeInternal ( 0 ). node ; } Info deserializeInternal ( int idx ){ // process root Info rootInfo = getNode ( idx ); if ( ! rootInfo . node ) { return rootInfo ; } printf ( \"node: %d \\n \" , rootInfo . node -> val ); printf ( \"idx: %d \\n \" , rootInfo . idx ); // process left Info leftInfo = deserializeInternal ( rootInfo . idx ); rootInfo . node -> left = leftInfo . node ; // process right Info rightInfo = deserializeInternal ( leftInfo . idx ); rootInfo . node -> right = rightInfo . node ; Info returnInfo ; returnInfo . node = rootInfo . node ; returnInfo . idx = rightInfo . idx ; return returnInfo ; } Info getNode ( int idx ) { char a [ 6 ] = { 0 ,}; int i = 0 ; while ( true ) { if ( _str [ idx + i ] == ',' || _str [ idx + i ] == NULL ) break ; a [ i ] = _str [ idx + i ]; i ++ ; } Info info ; if ( _str [ idx ] == '#' ) { info . node = nullptr ; } else { info . node = new TreeNode ( atoi ( a )); } info . idx = idx + i + 1 ; return info ; } private : string _str ; }; // Your Codec object will be instantiated and called as such: // Codec ser, deser; // TreeNode* ans = deser.deserialize(ser.serialize(root)); C++ 1\ucc28 \uc218\uc815. serializer. time(beats 27.53%) space(beats 62.74%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ #include <string> #include <iostream> using namespace std ; struct Info { TreeNode * node ; int idx ; }; class Codec { public : void serializeHelper ( TreeNode * root ) { //preorder traversal //serialize root if ( root ) { _str += to_string ( root -> val ) + \" \" ; } else { _str += \"# \" ; return ; } //traverse left serializeHelper ( root -> left ); //traverse right serializeHelper ( root -> right ); } // Encodes a tree to a single string. string serialize ( TreeNode * root ) { serializeHelper ( root ); return _str ; } // Decodes your encoded data to tree. TreeNode * deserialize ( string data ) { _str = data ; if ( data == \"\" ) return nullptr ; // if root is null, then return // if root is not null and left is null, then new node of root // return deserializeInternal ( 0 ). node ; } Info deserializeInternal ( int idx ){ // process root Info rootInfo = getNode ( idx ); if ( ! rootInfo . node ) { return rootInfo ; } // process left Info leftInfo = deserializeInternal ( rootInfo . idx ); rootInfo . node -> left = leftInfo . node ; // process right Info rightInfo = deserializeInternal ( leftInfo . idx ); rootInfo . node -> right = rightInfo . node ; Info returnInfo ; returnInfo . node = rootInfo . node ; returnInfo . idx = rightInfo . idx ; return returnInfo ; } Info getNode ( int idx ) { char a [ 6 ] = { 0 ,}; int i = 0 ; while ( true ) { if ( _str [ idx + i ] == ' ' || _str [ idx + i ] == NULL ) break ; a [ i ] = _str [ idx + i ]; i ++ ; } Info info ; if ( _str [ idx ] == '#' ) { info . node = nullptr ; } else { info . node = new TreeNode ( atoi ( a )); } info . idx = idx + i + 1 ; return info ; } private : string _str ; }; // Your Codec object will be instantiated and called as such: // Codec ser, deser; // TreeNode* ans = deser.deserialize(ser.serialize(root)); C++ 2\ucc28\uc218\uc815. deserializer. time(beats 36.14%), space(beats 67.78%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ #include <string> #include <iostream> using namespace std ; struct Info { TreeNode * node ; int idx ; }; class Codec { public : void serializeHelper ( TreeNode * root ) { //preorder traversal //serialize root if ( root ) { _str += to_string ( root -> val ) + \" \" ; } else { _str += \"# \" ; return ; } //traverse left serializeHelper ( root -> left ); //traverse right serializeHelper ( root -> right ); } // Encodes a tree to a single string. string serialize ( TreeNode * root ) { serializeHelper ( root ); return _str ; } // Decodes your encoded data to tree. TreeNode * deserialize ( string data ) { _iss = istringstream ( data ); return deserializeInternal (); } TreeNode * deserializeInternal (){ // process root string w ; _iss >> w ; if ( w == \"#\" ) return nullptr ; TreeNode * root = new TreeNode ( stoi ( w )); // process left root -> left = deserializeInternal (); // process right root -> right = deserializeInternal (); return root ; } private : string _str ; istringstream _iss ; }; // Your Codec object will be instantiated and called as such: // Codec ser, deser; // TreeNode* ans = deser.deserialize(ser.serialize(root)); C++ \ub2e4\ub978 \uc0ac\ub78c\uc758 \ucf54\ub4dc time(64.72%), space(beats 72.47%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Codec { public : // Encodes a tree to a single string. string serialize ( TreeNode * root ) { stringstream ss ; serialize_helper ( root , ss ); return ss . str (); } void serialize_helper ( TreeNode * root , stringstream & ss ){ if ( ! root ) ss << \"# \" ; else { ss << root -> val << \" \" ; serialize_helper ( root -> left , ss ); serialize_helper ( root -> right , ss ); } } // Decodes your encoded data to tree. TreeNode * deserialize ( string data ) { stringstream ss ( data ); return deserialize_helper ( ss ); } TreeNode * deserialize_helper ( stringstream & ss ){ string val = \"\" ; ss >> val ; if ( val == \"#\" ) return nullptr ; TreeNode * root = new TreeNode ( stoi ( val )); root -> left = deserialize_helper ( ss ); root -> right = deserialize_helper ( ss ); return root ; } }; // Your Codec object will be instantiated and called as such: // Codec ser, deser; // TreeNode* ans = deser.deserialize(ser.serialize(root)); \uc774\uac83\ubcf4\ub2e4 \uc880 \ub354 \ucd5c\uc801\ud654 \ud558\ub824\uba74, stringstream\uc744 \uc9c1\uc811 for loop \ub3cc\uac8c \ud558\uba74 \ub429\ub2c8\ub2e4. principle-of-recursion - 1440 \uc218\ud589 \uc2dc\uac04\uc740 \uc0c1\uc704\uad8c\uc5d0 \uc788\ub294 \uc815\ub2f5\uc744 \uc81c\ucd9c\ud574\ub3c4 \uc804\ud600 \uc7ac\ud604\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc5ec\uae30\uc5d0 \ud45c\uc2dc\ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. C++ 1 2 3 4 5 6 7 8 9 10 11 class Solution { public : void reverseString ( vector < char >& s ) { char tmp ; for ( int i = 0 , j = s . size () -1 ; i < j ; ++ i , -- j ) { tmp = s [ i ]; s [ i ] = s [ j ]; s [ j ] = tmp ; } } }; principle-of-recursion - 1681 \uac00\uc7a5 \ube60\ub978 \uad6c\ud604\uc73c\ub85c \ud480\uc5c8\ub294\ub370, \uc774\uc0c1\ud558\ub124\uc694.. C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * swapPairs ( ListNode * head ) { ListNode * cur = head ; int tmp ; while ( cur && cur -> next ) { tmp = cur -> val ; cur -> val = cur -> next -> val ; cur -> next -> val = tmp ; cur = cur -> next -> next ; } return head ; } }; 2378 - Reverse Linked List C++ \uc544\ubb34\uc0dd\uac01 \uc5c6\uc774 \ud47c\uac70 time(beats 97.17%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * reverseList ( ListNode * head ) { ListNode * resultDummyHead = new ListNode ( 0 ); ListNode * cur = head ; while ( cur ) { ListNode * newNode = new ListNode ( cur -> val ); newNode -> next = resultDummyHead -> next ; resultDummyHead -> next = newNode ; cur = cur -> next ; } return resultDummyHead -> next ; } }; C++ memory O(1). time(beats 97.17%), space(beats 40.99%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * reverseList ( ListNode * head ) { if ( ! head ) return head ; if ( ! head -> next ) return head ; ListNode * prev = nullptr ; ListNode * curr = head ; ListNode * next = curr -> next ; while ( curr ) { ListNode * tmpNext = curr -> next ; curr -> next = prev ; prev = curr ; curr = next ; if ( tmpNext ) next = tmpNext -> next ; } return prev ; } }; 3233 - Search in a Binary Search Tree \uc774 \ubb38\uc81c\ub294 \uc26c\uc6e0\uc2b5\ub2c8\ub2e4. C++ time(beats 85.32%), space(beats 62.77%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : TreeNode * searchBST ( TreeNode * root , int val ) { if ( ! root ) return nullptr ; // process root if ( root -> val == val ) return root ; // process left TreeNode * left = searchBST ( root -> left , val ); if ( left ) return left ; // process right TreeNode * right = searchBST ( root -> right , val ); if ( right ) return right ; return nullptr ; } }; 3234 - Pascal's Triangle II C++ time(beats 100%), space(beats 31.49%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public : vector < int > getRow ( int rowIndex ) { vector < int > row { 1 }; while ( rowIndex -- ) { vector < int > row2 { 1 }; for ( int i = 0 ; i < row . size () -1 ; ++ i ) { row2 . push_back ( row [ i ] + row [ i + 1 ]); } row2 . push_back ( 1 ); row = row2 ; } return row ; } }; 1661 - Fibonacci Number C++ time(beats 100%), space(beats 95.86%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public : int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 1 ; if ( n == 2 ) return 1 ; if ( cache [ n ]) return cache [ n ]; int result = fib ( n -1 ) + fib ( n -2 ); if ( ! cache [ n ]) cache [ n ] = result ; return result ; } private : int cache [ 32 ] = { 0 , }; }; 1662 - Climbing Stairs C++ time(beats 100%), space(beats 96.86%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public : int climbStairs ( int n ) { if ( n == 1 ) return 1 ; if ( n == 2 ) return 2 ; if ( n == 3 ) return 3 ; if ( cache [ n ]) return cache [ n ]; int result = climbStairs ( n -1 ) + climbStairs ( n -2 ); cache [ n ] = result ; return result ; } private : int cache [ 47 ] = { 0 , }; }; 2375 - Maximum Depth of Binary Tree C++ time(beats 69.03%), space(beats 52.13%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : int maxDepth ( TreeNode * root ) { if ( ! root ) return 0 ; queue < TreeNode *> q ; q . push ( root ); int rslt = 0 ; while ( ! q . empty ()) { int qLen = q . size (); for ( int i = 0 ; i < qLen ; ++ i ) { TreeNode * cur = q . front (); q . pop (); if ( cur -> left ) q . push ( cur -> left ); if ( cur -> right ) q . push ( cur -> right ); } rslt ++ ; } return rslt ; } }; 1144 - Find Pivot Index C++ time(beats 58.03%), space(beats 64.42%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public : int pivotIndex ( vector < int >& nums ) { int total = 0 ; int left = 0 ; for ( int i = 0 ; i < nums . size (); ++ i ) total += nums [ i ]; for ( int i = 0 ; i < nums . size (); ++ i ) { if ( left == total - nums [ i ]) return i ; left += nums [ i ]; total -= nums [ i ]; } return -1 ; } }; 1147 - Largest Number At Least Twice of Others C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public : int dominantIndex ( vector < int >& nums ) { int max = 0 ; int maxIdx = 0 ; for ( int i = 0 ; i < nums . size (); ++ i ) if ( nums [ i ] > max ) { max = nums [ i ]; maxIdx = i ; } int half = max / 2 ; printf ( \"%d \\n \" , half ); for ( int i = 0 ; i < nums . size (); ++ i ) if ( i != maxIdx && nums [ i ] > half ) return -1 ; return maxIdx ; } };","title":"2021-07-08"},{"location":"daily/2021-07-08/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-08/#995-serialize-and-deserialize-binary-tree","text":"","title":"995 - Serialize and Deserialize Binary Tree"},{"location":"daily/2021-07-08/#serialize","text":"serialize\ub294 DFS(preorder traversal)\ub85c serialize","title":"serialize"},{"location":"daily/2021-07-08/#deserialize","text":"deserialize\ub294 DFS(preorder traversal)\ub85c deserialize \uc911\ucca9\ud568\uc218\uc758 \ud568\uc218 \uc6d0\ud615 Info deserializeInternal(int idx) idx\ub294 class \ub0b4\ubd80\uc5d0 serialized_string\uc774 \uc788\uace0, \uadf8 string\uc758 index\uc785\ub2c8\ub2e4. Info \uad6c\uc870\uccb4 TreeNode* node int idx input\uc73c\ub85c \ub4e4\uc5b4\uac00\ub294 idx deserialize\ub294 \uc880 \ube44\ud6a8\uc728\uc774 \uc788\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. string\uc744 \ub9e4 \ud568\uc218\ub9c8\ub2e4 \uc804\ub2ec\ud558\uace0 \uc2f6\uc9c0 \uc54a\uc544\uc11c, Info\ub77c\ub294 \uad6c\uc870\uccb4\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. 1\ucc28 \uc218\uc815 \ud6c4\uc5d0 memory \uacf5\uac04\ud6a8\uc728\uc740 \uc88b\uc544\uc84c\uc9c0\ub9cc, \uc18d\ub3c4\ub294 \ub290\ub824\uc84c\uc74c C++ time(beats 46.28%), space(40.82%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ #include <string> #include <iostream> using namespace std ; struct Info { TreeNode * node ; int idx ; }; class Codec { public : // Encodes a tree to a single string. string serialize ( TreeNode * root ) { //preorder traversal string result ; //serialize root if ( root ) { result += to_string ( root -> val ) + \",\" ; } else { result += \"#,\" ; return result ; } //traverse left result += serialize ( root -> left ); //traverse right result += serialize ( root -> right ); return result ; } // Decodes your encoded data to tree. TreeNode * deserialize ( string data ) { _str = data ; if ( data == \"\" ) return nullptr ; // if root is null, then return // if root is not null and left is null, then new node of root // return deserializeInternal ( 0 ). node ; } Info deserializeInternal ( int idx ){ // process root Info rootInfo = getNode ( idx ); if ( ! rootInfo . node ) { return rootInfo ; } printf ( \"node: %d \\n \" , rootInfo . node -> val ); printf ( \"idx: %d \\n \" , rootInfo . idx ); // process left Info leftInfo = deserializeInternal ( rootInfo . idx ); rootInfo . node -> left = leftInfo . node ; // process right Info rightInfo = deserializeInternal ( leftInfo . idx ); rootInfo . node -> right = rightInfo . node ; Info returnInfo ; returnInfo . node = rootInfo . node ; returnInfo . idx = rightInfo . idx ; return returnInfo ; } Info getNode ( int idx ) { char a [ 6 ] = { 0 ,}; int i = 0 ; while ( true ) { if ( _str [ idx + i ] == ',' || _str [ idx + i ] == NULL ) break ; a [ i ] = _str [ idx + i ]; i ++ ; } Info info ; if ( _str [ idx ] == '#' ) { info . node = nullptr ; } else { info . node = new TreeNode ( atoi ( a )); } info . idx = idx + i + 1 ; return info ; } private : string _str ; }; // Your Codec object will be instantiated and called as such: // Codec ser, deser; // TreeNode* ans = deser.deserialize(ser.serialize(root)); C++ 1\ucc28 \uc218\uc815. serializer. time(beats 27.53%) space(beats 62.74%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ #include <string> #include <iostream> using namespace std ; struct Info { TreeNode * node ; int idx ; }; class Codec { public : void serializeHelper ( TreeNode * root ) { //preorder traversal //serialize root if ( root ) { _str += to_string ( root -> val ) + \" \" ; } else { _str += \"# \" ; return ; } //traverse left serializeHelper ( root -> left ); //traverse right serializeHelper ( root -> right ); } // Encodes a tree to a single string. string serialize ( TreeNode * root ) { serializeHelper ( root ); return _str ; } // Decodes your encoded data to tree. TreeNode * deserialize ( string data ) { _str = data ; if ( data == \"\" ) return nullptr ; // if root is null, then return // if root is not null and left is null, then new node of root // return deserializeInternal ( 0 ). node ; } Info deserializeInternal ( int idx ){ // process root Info rootInfo = getNode ( idx ); if ( ! rootInfo . node ) { return rootInfo ; } // process left Info leftInfo = deserializeInternal ( rootInfo . idx ); rootInfo . node -> left = leftInfo . node ; // process right Info rightInfo = deserializeInternal ( leftInfo . idx ); rootInfo . node -> right = rightInfo . node ; Info returnInfo ; returnInfo . node = rootInfo . node ; returnInfo . idx = rightInfo . idx ; return returnInfo ; } Info getNode ( int idx ) { char a [ 6 ] = { 0 ,}; int i = 0 ; while ( true ) { if ( _str [ idx + i ] == ' ' || _str [ idx + i ] == NULL ) break ; a [ i ] = _str [ idx + i ]; i ++ ; } Info info ; if ( _str [ idx ] == '#' ) { info . node = nullptr ; } else { info . node = new TreeNode ( atoi ( a )); } info . idx = idx + i + 1 ; return info ; } private : string _str ; }; // Your Codec object will be instantiated and called as such: // Codec ser, deser; // TreeNode* ans = deser.deserialize(ser.serialize(root)); C++ 2\ucc28\uc218\uc815. deserializer. time(beats 36.14%), space(beats 67.78%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ #include <string> #include <iostream> using namespace std ; struct Info { TreeNode * node ; int idx ; }; class Codec { public : void serializeHelper ( TreeNode * root ) { //preorder traversal //serialize root if ( root ) { _str += to_string ( root -> val ) + \" \" ; } else { _str += \"# \" ; return ; } //traverse left serializeHelper ( root -> left ); //traverse right serializeHelper ( root -> right ); } // Encodes a tree to a single string. string serialize ( TreeNode * root ) { serializeHelper ( root ); return _str ; } // Decodes your encoded data to tree. TreeNode * deserialize ( string data ) { _iss = istringstream ( data ); return deserializeInternal (); } TreeNode * deserializeInternal (){ // process root string w ; _iss >> w ; if ( w == \"#\" ) return nullptr ; TreeNode * root = new TreeNode ( stoi ( w )); // process left root -> left = deserializeInternal (); // process right root -> right = deserializeInternal (); return root ; } private : string _str ; istringstream _iss ; }; // Your Codec object will be instantiated and called as such: // Codec ser, deser; // TreeNode* ans = deser.deserialize(ser.serialize(root)); C++ \ub2e4\ub978 \uc0ac\ub78c\uc758 \ucf54\ub4dc time(64.72%), space(beats 72.47%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode(int x) : val(x), left(NULL), right(NULL) {} * }; */ class Codec { public : // Encodes a tree to a single string. string serialize ( TreeNode * root ) { stringstream ss ; serialize_helper ( root , ss ); return ss . str (); } void serialize_helper ( TreeNode * root , stringstream & ss ){ if ( ! root ) ss << \"# \" ; else { ss << root -> val << \" \" ; serialize_helper ( root -> left , ss ); serialize_helper ( root -> right , ss ); } } // Decodes your encoded data to tree. TreeNode * deserialize ( string data ) { stringstream ss ( data ); return deserialize_helper ( ss ); } TreeNode * deserialize_helper ( stringstream & ss ){ string val = \"\" ; ss >> val ; if ( val == \"#\" ) return nullptr ; TreeNode * root = new TreeNode ( stoi ( val )); root -> left = deserialize_helper ( ss ); root -> right = deserialize_helper ( ss ); return root ; } }; // Your Codec object will be instantiated and called as such: // Codec ser, deser; // TreeNode* ans = deser.deserialize(ser.serialize(root)); \uc774\uac83\ubcf4\ub2e4 \uc880 \ub354 \ucd5c\uc801\ud654 \ud558\ub824\uba74, stringstream\uc744 \uc9c1\uc811 for loop \ub3cc\uac8c \ud558\uba74 \ub429\ub2c8\ub2e4.","title":"deserialize"},{"location":"daily/2021-07-08/#principle-of-recursion-1440","text":"\uc218\ud589 \uc2dc\uac04\uc740 \uc0c1\uc704\uad8c\uc5d0 \uc788\ub294 \uc815\ub2f5\uc744 \uc81c\ucd9c\ud574\ub3c4 \uc804\ud600 \uc7ac\ud604\ub418\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc5ec\uae30\uc5d0 \ud45c\uc2dc\ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. C++ 1 2 3 4 5 6 7 8 9 10 11 class Solution { public : void reverseString ( vector < char >& s ) { char tmp ; for ( int i = 0 , j = s . size () -1 ; i < j ; ++ i , -- j ) { tmp = s [ i ]; s [ i ] = s [ j ]; s [ j ] = tmp ; } } };","title":"principle-of-recursion - 1440"},{"location":"daily/2021-07-08/#principle-of-recursion-1681","text":"\uac00\uc7a5 \ube60\ub978 \uad6c\ud604\uc73c\ub85c \ud480\uc5c8\ub294\ub370, \uc774\uc0c1\ud558\ub124\uc694.. C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * swapPairs ( ListNode * head ) { ListNode * cur = head ; int tmp ; while ( cur && cur -> next ) { tmp = cur -> val ; cur -> val = cur -> next -> val ; cur -> next -> val = tmp ; cur = cur -> next -> next ; } return head ; } };","title":"principle-of-recursion - 1681"},{"location":"daily/2021-07-08/#2378-reverse-linked-list","text":"C++ \uc544\ubb34\uc0dd\uac01 \uc5c6\uc774 \ud47c\uac70 time(beats 97.17%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * reverseList ( ListNode * head ) { ListNode * resultDummyHead = new ListNode ( 0 ); ListNode * cur = head ; while ( cur ) { ListNode * newNode = new ListNode ( cur -> val ); newNode -> next = resultDummyHead -> next ; resultDummyHead -> next = newNode ; cur = cur -> next ; } return resultDummyHead -> next ; } }; C++ memory O(1). time(beats 97.17%), space(beats 40.99%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 /** * Definition for singly-linked list. * struct ListNode { * int val; * ListNode *next; * ListNode() : val(0), next(nullptr) {} * ListNode(int x) : val(x), next(nullptr) {} * ListNode(int x, ListNode *next) : val(x), next(next) {} * }; */ class Solution { public : ListNode * reverseList ( ListNode * head ) { if ( ! head ) return head ; if ( ! head -> next ) return head ; ListNode * prev = nullptr ; ListNode * curr = head ; ListNode * next = curr -> next ; while ( curr ) { ListNode * tmpNext = curr -> next ; curr -> next = prev ; prev = curr ; curr = next ; if ( tmpNext ) next = tmpNext -> next ; } return prev ; } };","title":"2378 - Reverse Linked List"},{"location":"daily/2021-07-08/#3233-search-in-a-binary-search-tree","text":"\uc774 \ubb38\uc81c\ub294 \uc26c\uc6e0\uc2b5\ub2c8\ub2e4. C++ time(beats 85.32%), space(beats 62.77%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : TreeNode * searchBST ( TreeNode * root , int val ) { if ( ! root ) return nullptr ; // process root if ( root -> val == val ) return root ; // process left TreeNode * left = searchBST ( root -> left , val ); if ( left ) return left ; // process right TreeNode * right = searchBST ( root -> right , val ); if ( right ) return right ; return nullptr ; } };","title":"3233 - Search in a Binary Search Tree"},{"location":"daily/2021-07-08/#3234-pascals-triangle-ii","text":"C++ time(beats 100%), space(beats 31.49%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public : vector < int > getRow ( int rowIndex ) { vector < int > row { 1 }; while ( rowIndex -- ) { vector < int > row2 { 1 }; for ( int i = 0 ; i < row . size () -1 ; ++ i ) { row2 . push_back ( row [ i ] + row [ i + 1 ]); } row2 . push_back ( 1 ); row = row2 ; } return row ; } };","title":"3234 - Pascal's Triangle II"},{"location":"daily/2021-07-08/#1661-fibonacci-number","text":"C++ time(beats 100%), space(beats 95.86%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 class Solution { public : int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 1 ; if ( n == 2 ) return 1 ; if ( cache [ n ]) return cache [ n ]; int result = fib ( n -1 ) + fib ( n -2 ); if ( ! cache [ n ]) cache [ n ] = result ; return result ; } private : int cache [ 32 ] = { 0 , }; };","title":"1661 - Fibonacci Number"},{"location":"daily/2021-07-08/#1662-climbing-stairs","text":"C++ time(beats 100%), space(beats 96.86%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public : int climbStairs ( int n ) { if ( n == 1 ) return 1 ; if ( n == 2 ) return 2 ; if ( n == 3 ) return 3 ; if ( cache [ n ]) return cache [ n ]; int result = climbStairs ( n -1 ) + climbStairs ( n -2 ); cache [ n ] = result ; return result ; } private : int cache [ 47 ] = { 0 , }; };","title":"1662 - Climbing Stairs"},{"location":"daily/2021-07-08/#2375-maximum-depth-of-binary-tree","text":"C++ time(beats 69.03%), space(beats 52.13%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : int maxDepth ( TreeNode * root ) { if ( ! root ) return 0 ; queue < TreeNode *> q ; q . push ( root ); int rslt = 0 ; while ( ! q . empty ()) { int qLen = q . size (); for ( int i = 0 ; i < qLen ; ++ i ) { TreeNode * cur = q . front (); q . pop (); if ( cur -> left ) q . push ( cur -> left ); if ( cur -> right ) q . push ( cur -> right ); } rslt ++ ; } return rslt ; } };","title":"2375 - Maximum Depth of Binary Tree"},{"location":"daily/2021-07-08/#1144-find-pivot-index","text":"C++ time(beats 58.03%), space(beats 64.42%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public : int pivotIndex ( vector < int >& nums ) { int total = 0 ; int left = 0 ; for ( int i = 0 ; i < nums . size (); ++ i ) total += nums [ i ]; for ( int i = 0 ; i < nums . size (); ++ i ) { if ( left == total - nums [ i ]) return i ; left += nums [ i ]; total -= nums [ i ]; } return -1 ; } };","title":"1144 - Find Pivot Index"},{"location":"daily/2021-07-08/#1147-largest-number-at-least-twice-of-others","text":"C++ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 class Solution { public : int dominantIndex ( vector < int >& nums ) { int max = 0 ; int maxIdx = 0 ; for ( int i = 0 ; i < nums . size (); ++ i ) if ( nums [ i ] > max ) { max = nums [ i ]; maxIdx = i ; } int half = max / 2 ; printf ( \"%d \\n \" , half ); for ( int i = 0 ; i < nums . size (); ++ i ) if ( i != maxIdx && nums [ i ] > half ) return -1 ; return maxIdx ; } };","title":"1147 - Largest Number At Least Twice of Others"},{"location":"daily/2021-07-10/","text":"database \ud29c\ub2dd explain \uc2dc\uc5d0 \ub098\uc624\ub294 \ud0c0\uc785 system \ud0c0\uc785 1 2 3 4 5 6 7 CREATE TABLE myisam_\ud14c\uc774\ube14 ( col1 INT(11) NULL DEFAULT NULL ); INSERT INTO myisam_\ud14c\uc774\ube14 VALUES(1); EXPLAIN SELECT * FROM myisam_\ud14c\uc774\ube14; \uac00\uc7a5 \uc88b\uc740 type(\ud14c\uc774\ube14\uc5d0 \ub370\uc774\ud130\uac00 \uc5c6\uac70\ub098 \ud55c \uac1c\ub9cc \uc788\ub294 \uacbd\uc6b0) const \ud0c0\uc785 1 2 3 4 EXPLAIN SELECT * FROM \uc0ac\uc6d0 WHERE \uc0ac\uc6d0\ubc88\ud638 = 10001; \uc870\ud68c\ub418\ub294 \ub370\uc774\ud130\uac00 \ub2e8 1\uac74\uc77c \ub54c \ucd9c\ub825\ub418\ub294 \uc720\ud615\uc73c\ub85c, \uc131\ub2a5\uc0c1 \ub9e4\uc6b0 \uc720\ub9ac\ud55c \ubc29\uc2dd\uc785\ub2c8\ub2e4. \uace0\uc720 \uc778\ub371\uc2a4\ub098 \uae30\ubcf8 \ud0a4\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e8 1\uac74\uc758 \ub370\uc774\ud130\uc5d0\ub9cc \ub418\ubbc0\ub85c \uc18d\ub3c4\ub098 \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9 \uce21\uba74\uc5d0\uc11c \uc9c0\ud5a5\ud574\uc57c \ud560 \ud0c0\uc785\uc785\ub2c8\ub2e4. eq_ref \ud0c0\uc785 1 2 3 4 5 6 EXPLAIN SELECT \ub9e4\ud551.\uc0ac\uc6d0\ubc88\ud638, \ubd80\uc11c.\ubd80\uc11c\ubc88\ud638, \ubd80\uc11c.\ubd80\uc11c\uba85 FROM \ubd80\uc11c\uc0ac\uc6d0_\ub9e4\ud551 as \ub9e4\ud551, \ubd80\uc11c WHERE \ub9e4\ud551.\ubd80\uc11c\ubc88\ud638 = \ubd80\uc11c.\ubd80\uc11c\ubc88\ud638 AND \ub9e4\ud551.\uc0ac\uc6d0\ubc88\ud638 BETWEEN 100001 AND 100010; \uc870\uc778\uc774 \uc218\ud589\ub420 \ub54c \ub4dc\ub9ac\ube10 \ud14c\uc774\ube14\uc758 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud558\uba70 \uace0\uc720 \uc778\ub371\uc2a4 \ub610\ub294 \uae30\ubcf8 \ud0a4\ub85c \ub2e8 1\uac74\uc758 \ub370\uc774\ud130\ub97c \uc870\ud68c\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \ub4dc\ub77c\uc774\ube59 \ud14c\uc774\ube14\uacfc\uc758 \uc870\uc778 \ud0a4\uac00 \ub4dc\ub9ac\ube10 \ud14c\uc774\ube14\uc5d0 \uc720\uc77c\ud558\ubbc0\ub85c \uc870\uc778\uc774 \uc218\ud589\ub420 \ub54c \uc131\ub2a5\uc0c1 \uac00\uc7a5 \uc720\ub9ac\ud55c \uacbd\uc6b0\ub77c\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ref\ud0c0\uc785 \uc55e\uc5d0\uc11c \uc124\uba85\ud55c eq_ref \uc720\ud615\uacfc \uc720\uc0ac\ud55c \ubc29\uc2dd\uc73c\ub85c, \uc870\uc778\uc744 \uc218\ud589\ud560 \ub54c \ub4dc\ub9ac\ube10 \ud14c\uc774\ube14\uc758 \ub370\uc774\ud130 \uc811\uadfc \ubc94\uc704\uac00 2\uac1c \uc774\uc0c1\uc77c \uacbd\uc6b0\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc989, \ub4dc\ub77c\uc774\ube59 \ud14c\uc774\ube14\uacfc \ub4dc\ub9ac\ube10 \ud14c\uc774\ube14\uc774 \uc870\uc778\uc744 \uc218\ud589\ud558\uba74 \uc77c\ub300\ub2e4 \uad00\uacc4\uac00 \ub418\ubbc0\ub85c, \ub4dc\ub77c\uc774\ube59 \ud14c\uc774\ube14\uc758 1\uac1c \uac12\uc774 \ub4dc\ub9ac\ube10 \ud14c\uc774\ube14\uc5d0\uc11c\ub294 2\uac1c \uc774\uc0c1\uc758 \ub370\uc774\ud130\ub85c \uc874\uc7ac\ud569\ub2c8\ub2e4.","title":"2021-07-10"},{"location":"daily/2021-07-10/#database","text":"explain \uc2dc\uc5d0 \ub098\uc624\ub294 \ud0c0\uc785 system \ud0c0\uc785 1 2 3 4 5 6 7 CREATE TABLE myisam_\ud14c\uc774\ube14 ( col1 INT(11) NULL DEFAULT NULL ); INSERT INTO myisam_\ud14c\uc774\ube14 VALUES(1); EXPLAIN SELECT * FROM myisam_\ud14c\uc774\ube14; \uac00\uc7a5 \uc88b\uc740 type(\ud14c\uc774\ube14\uc5d0 \ub370\uc774\ud130\uac00 \uc5c6\uac70\ub098 \ud55c \uac1c\ub9cc \uc788\ub294 \uacbd\uc6b0) const \ud0c0\uc785 1 2 3 4 EXPLAIN SELECT * FROM \uc0ac\uc6d0 WHERE \uc0ac\uc6d0\ubc88\ud638 = 10001; \uc870\ud68c\ub418\ub294 \ub370\uc774\ud130\uac00 \ub2e8 1\uac74\uc77c \ub54c \ucd9c\ub825\ub418\ub294 \uc720\ud615\uc73c\ub85c, \uc131\ub2a5\uc0c1 \ub9e4\uc6b0 \uc720\ub9ac\ud55c \ubc29\uc2dd\uc785\ub2c8\ub2e4. \uace0\uc720 \uc778\ub371\uc2a4\ub098 \uae30\ubcf8 \ud0a4\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub2e8 1\uac74\uc758 \ub370\uc774\ud130\uc5d0\ub9cc \ub418\ubbc0\ub85c \uc18d\ub3c4\ub098 \ub9ac\uc18c\uc2a4 \uc0ac\uc6a9 \uce21\uba74\uc5d0\uc11c \uc9c0\ud5a5\ud574\uc57c \ud560 \ud0c0\uc785\uc785\ub2c8\ub2e4. eq_ref \ud0c0\uc785 1 2 3 4 5 6 EXPLAIN SELECT \ub9e4\ud551.\uc0ac\uc6d0\ubc88\ud638, \ubd80\uc11c.\ubd80\uc11c\ubc88\ud638, \ubd80\uc11c.\ubd80\uc11c\uba85 FROM \ubd80\uc11c\uc0ac\uc6d0_\ub9e4\ud551 as \ub9e4\ud551, \ubd80\uc11c WHERE \ub9e4\ud551.\ubd80\uc11c\ubc88\ud638 = \ubd80\uc11c.\ubd80\uc11c\ubc88\ud638 AND \ub9e4\ud551.\uc0ac\uc6d0\ubc88\ud638 BETWEEN 100001 AND 100010; \uc870\uc778\uc774 \uc218\ud589\ub420 \ub54c \ub4dc\ub9ac\ube10 \ud14c\uc774\ube14\uc758 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\ud558\uba70 \uace0\uc720 \uc778\ub371\uc2a4 \ub610\ub294 \uae30\ubcf8 \ud0a4\ub85c \ub2e8 1\uac74\uc758 \ub370\uc774\ud130\ub97c \uc870\ud68c\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \ub4dc\ub77c\uc774\ube59 \ud14c\uc774\ube14\uacfc\uc758 \uc870\uc778 \ud0a4\uac00 \ub4dc\ub9ac\ube10 \ud14c\uc774\ube14\uc5d0 \uc720\uc77c\ud558\ubbc0\ub85c \uc870\uc778\uc774 \uc218\ud589\ub420 \ub54c \uc131\ub2a5\uc0c1 \uac00\uc7a5 \uc720\ub9ac\ud55c \uacbd\uc6b0\ub77c\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. ref\ud0c0\uc785 \uc55e\uc5d0\uc11c \uc124\uba85\ud55c eq_ref \uc720\ud615\uacfc \uc720\uc0ac\ud55c \ubc29\uc2dd\uc73c\ub85c, \uc870\uc778\uc744 \uc218\ud589\ud560 \ub54c \ub4dc\ub9ac\ube10 \ud14c\uc774\ube14\uc758 \ub370\uc774\ud130 \uc811\uadfc \ubc94\uc704\uac00 2\uac1c \uc774\uc0c1\uc77c \uacbd\uc6b0\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc989, \ub4dc\ub77c\uc774\ube59 \ud14c\uc774\ube14\uacfc \ub4dc\ub9ac\ube10 \ud14c\uc774\ube14\uc774 \uc870\uc778\uc744 \uc218\ud589\ud558\uba74 \uc77c\ub300\ub2e4 \uad00\uacc4\uac00 \ub418\ubbc0\ub85c, \ub4dc\ub77c\uc774\ube59 \ud14c\uc774\ube14\uc758 1\uac1c \uac12\uc774 \ub4dc\ub9ac\ube10 \ud14c\uc774\ube14\uc5d0\uc11c\ub294 2\uac1c \uc774\uc0c1\uc758 \ub370\uc774\ud130\ub85c \uc874\uc7ac\ud569\ub2c8\ub2e4.","title":"database \ud29c\ub2dd"},{"location":"daily/2021-07-14/","text":"leet code 1675 - K-th Symbol in Grammar","title":"2021-07-14"},{"location":"daily/2021-07-14/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-14/#1675-k-th-symbol-in-grammar","text":"","title":"1675 - K-th Symbol in Grammar"},{"location":"daily/2021-07-16/","text":"new environment code in macbook","title":"2021-07-16"},{"location":"daily/2021-07-16/#new-environment","text":"code in macbook","title":"new environment"},{"location":"daily/2021-07-17/","text":"leet code 1675 - K-th Symbol in Grammar \uac00\uc7a5 \uc27d\uace0 \uac04\ub2e8\ud55c \ubc29\ubc95\uc73c\ub85c \ud480\ub824\uace0 \uc2dc\ub3c4 \ud588\uc73c\ub098 TLE \uc5d0\ub7ec\uac00 \ub0ac\uc2b5\ub2c8\ub2e4. \uc57d 10\ubd84 \uc815\ub3c4 \uc18c\uc694 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public : int kthGrammar ( int n , int k ) { return int ( genString ( \"0\" , n ). at ( k -1 ) - 0x30 ); } string genString ( string s , int n ) { if ( n == 1 ) return s ; string rslt = \"\" ; for ( int i = 0 ; i < s . size (); ++ i ) { if ( s [ i ] == '0' ) rslt += \"01\" ; else rslt += \"10\" ; } return genString ( rslt , n -1 ); } }; \ub2e4\uc74c \uc2dc\ub3c4 bit \uc870\uc791\uc73c\ub85c \ube60\ub974\uac8c \uacc4\uc0b0. (\uc57d\uac04 \uc218\uc2dd\uc774 \ud2c0\ub838\uc74c. \uc218\uc815 \uc608\uc815) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public : int kthGrammar ( int n , int k ) { if ( k == 1 ) return 0 ; max_cnt = n ; printf ( \"aaaa: %d \\n \" , (( int ) pow ( 2 , n -1 ) - k )); return genString ( 0 , 1 ) & (( int ) pow ( 2 , n -1 ) - k + 1 ) && 1 ; } uint genString ( uint a , uint n ) { printf ( \"a: %d, n: %d \\n \" , a , n ); if ( max_cnt == n ) return a ; printf ( \"current: %d, next: %d + %d = %d \\n \" , a , ( a * ( uint ) pow ( 2 , n )), (( ~ a ) & ( 1 << ( n -1 ))), ( a * ( uint ) pow ( 2 , n )) + (( ~ a ) & ( 1 << ( n -1 )))); return genString (( a * ( uint ) pow ( 2 , n + 1 )) + (( ~ a ) & ( 1 << ( n -1 ))), n + 1 ); } private : int max_cnt = 0 ; }; \ucd5c\uc885 \uc81c\ucd9c. time beats 100%, space beats 78.90% string\uc744 \uc804\ubd80 \uc0dd\uc131\ud55c \ud6c4\uc5d0 index\ub97c \ucc3e\uc544\ub4e4\uc5b4\uac00\ub294 \uac83\uc740 \ud6a8\uc728\uc774 \uc88b\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. string\uc744 \uc0dd\uc131\ud558\uc9c0 \uc54a\ub294 \ubc29\ud5a5\uc73c\ub85c \ucf54\ub4dc\ub97c \uc218\uc815\ud588\uace0, \ud1b5\uacfc\ud588\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public : int kthGrammar ( int n , int k ) { if ( k == 1 ) return 0 ; return solve ( n , k -1 ); } int solve ( int n , int k ) { if ( n == 2 ) // \uc885\ub8cc \uc870\uac74 { if ( k % 2 ) return 1 ; else return 0 ; } if ( k >= pow2 ( n -2 )) { return ! solve ( n -1 , k % pow2 ( n -2 )); } else { return solve ( n -1 , k ); } } int pow2 ( int n ) { int result = 1 ; while ( n -- ) { result *= 2 ; } return result ; } };","title":"2021-07-17"},{"location":"daily/2021-07-17/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-17/#1675-k-th-symbol-in-grammar","text":"\uac00\uc7a5 \uc27d\uace0 \uac04\ub2e8\ud55c \ubc29\ubc95\uc73c\ub85c \ud480\ub824\uace0 \uc2dc\ub3c4 \ud588\uc73c\ub098 TLE \uc5d0\ub7ec\uac00 \ub0ac\uc2b5\ub2c8\ub2e4. \uc57d 10\ubd84 \uc815\ub3c4 \uc18c\uc694 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class Solution { public : int kthGrammar ( int n , int k ) { return int ( genString ( \"0\" , n ). at ( k -1 ) - 0x30 ); } string genString ( string s , int n ) { if ( n == 1 ) return s ; string rslt = \"\" ; for ( int i = 0 ; i < s . size (); ++ i ) { if ( s [ i ] == '0' ) rslt += \"01\" ; else rslt += \"10\" ; } return genString ( rslt , n -1 ); } }; \ub2e4\uc74c \uc2dc\ub3c4 bit \uc870\uc791\uc73c\ub85c \ube60\ub974\uac8c \uacc4\uc0b0. (\uc57d\uac04 \uc218\uc2dd\uc774 \ud2c0\ub838\uc74c. \uc218\uc815 \uc608\uc815) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class Solution { public : int kthGrammar ( int n , int k ) { if ( k == 1 ) return 0 ; max_cnt = n ; printf ( \"aaaa: %d \\n \" , (( int ) pow ( 2 , n -1 ) - k )); return genString ( 0 , 1 ) & (( int ) pow ( 2 , n -1 ) - k + 1 ) && 1 ; } uint genString ( uint a , uint n ) { printf ( \"a: %d, n: %d \\n \" , a , n ); if ( max_cnt == n ) return a ; printf ( \"current: %d, next: %d + %d = %d \\n \" , a , ( a * ( uint ) pow ( 2 , n )), (( ~ a ) & ( 1 << ( n -1 ))), ( a * ( uint ) pow ( 2 , n )) + (( ~ a ) & ( 1 << ( n -1 )))); return genString (( a * ( uint ) pow ( 2 , n + 1 )) + (( ~ a ) & ( 1 << ( n -1 ))), n + 1 ); } private : int max_cnt = 0 ; }; \ucd5c\uc885 \uc81c\ucd9c. time beats 100%, space beats 78.90% string\uc744 \uc804\ubd80 \uc0dd\uc131\ud55c \ud6c4\uc5d0 index\ub97c \ucc3e\uc544\ub4e4\uc5b4\uac00\ub294 \uac83\uc740 \ud6a8\uc728\uc774 \uc88b\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. string\uc744 \uc0dd\uc131\ud558\uc9c0 \uc54a\ub294 \ubc29\ud5a5\uc73c\ub85c \ucf54\ub4dc\ub97c \uc218\uc815\ud588\uace0, \ud1b5\uacfc\ud588\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public : int kthGrammar ( int n , int k ) { if ( k == 1 ) return 0 ; return solve ( n , k -1 ); } int solve ( int n , int k ) { if ( n == 2 ) // \uc885\ub8cc \uc870\uac74 { if ( k % 2 ) return 1 ; else return 0 ; } if ( k >= pow2 ( n -2 )) { return ! solve ( n -1 , k % pow2 ( n -2 )); } else { return solve ( n -1 , k ); } } int pow2 ( int n ) { int result = 1 ; while ( n -- ) { result *= 2 ; } return result ; } };","title":"1675 - K-th Symbol in Grammar"},{"location":"daily/2021-07-19/","text":"leet code 2384 - Unique Binary Search Tree II recursion 1\uc758 \ub9c8\uc9c0\ub9c9 \ubb38\uc81c\uc785\ub2c8\ub2e4. \ubb38\uc81c\uac00 \uc798 \uc774\ud574\uac00 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \u3160\u3160","title":"2021-07-19"},{"location":"daily/2021-07-19/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-19/#2384-unique-binary-search-tree-ii","text":"recursion 1\uc758 \ub9c8\uc9c0\ub9c9 \ubb38\uc81c\uc785\ub2c8\ub2e4. \ubb38\uc81c\uac00 \uc798 \uc774\ud574\uac00 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \u3160\u3160","title":"2384 - Unique Binary Search Tree II"},{"location":"daily/2021-07-20/","text":"leet code 2944 - Sort an Array bubble sort(TLE) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // bubble sort class Solution { public : vector < int > sortArray ( vector < int >& nums ) { int tmp = 0 ; int size = nums . size (); for ( int i = 0 ; i < size -1 ; ++ i ) { for ( int j = 0 ; j < size -1 - i ; ++ j ) { if ( nums [ j ] > nums [ j + 1 ]) { tmp = nums [ j ]; nums [ j ] = nums [ j + 1 ]; nums [ j + 1 ] = tmp ; } } } return nums ; } }; selection sort(TLE) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // selection sort class Solution { public : vector < int > sortArray ( vector < int >& nums ) { int size = nums . size (); int tmp = 0 ; for ( int i = 0 ; i < size ; ++ i ) { int maxVal = nums [ 0 ]; int maxIdx = i ; for ( int j = i ; j < size ; ++ j ) { if ( nums [ j ] < maxVal ) { maxVal = nums [ j ]; maxIdx = j ; } } tmp = nums [ maxIdx ]; nums [ maxIdx ] = nums [ i ]; nums [ i ] = tmp ; } return nums ; } }; insertion sort(TLE) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // insertion sort class Solution { public : vector < int > sortArray ( vector < int >& nums ) { int tmp = 0 ; int size = nums . size (); for ( int i = 1 ; i < size ; ++ i ) { int idx = i ; while ( idx > 0 ) { if ( nums [ idx ] < nums [ idx -1 ]) { tmp = nums [ idx ]; nums [ idx ] = nums [ idx -1 ]; nums [ idx -1 ] = tmp ; } else { break ; } idx -- ; } } return nums ; } }; \uc2dc\ub3c4\ud574 \ubcfc \ub9ac\uc2a4\ud2b8 merge sort(bottom up) merge sort(top down) quick sort(random pivot) tim sort\ub3c4 \ud574\ubcf4\uace0 \uc2f6\uc9c0\ub9cc \uc0dd\ub7b5","title":"2021-07-20"},{"location":"daily/2021-07-20/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-20/#2944-sort-an-array","text":"bubble sort(TLE) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 // bubble sort class Solution { public : vector < int > sortArray ( vector < int >& nums ) { int tmp = 0 ; int size = nums . size (); for ( int i = 0 ; i < size -1 ; ++ i ) { for ( int j = 0 ; j < size -1 - i ; ++ j ) { if ( nums [ j ] > nums [ j + 1 ]) { tmp = nums [ j ]; nums [ j ] = nums [ j + 1 ]; nums [ j + 1 ] = tmp ; } } } return nums ; } }; selection sort(TLE) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 // selection sort class Solution { public : vector < int > sortArray ( vector < int >& nums ) { int size = nums . size (); int tmp = 0 ; for ( int i = 0 ; i < size ; ++ i ) { int maxVal = nums [ 0 ]; int maxIdx = i ; for ( int j = i ; j < size ; ++ j ) { if ( nums [ j ] < maxVal ) { maxVal = nums [ j ]; maxIdx = j ; } } tmp = nums [ maxIdx ]; nums [ maxIdx ] = nums [ i ]; nums [ i ] = tmp ; } return nums ; } }; insertion sort(TLE) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 // insertion sort class Solution { public : vector < int > sortArray ( vector < int >& nums ) { int tmp = 0 ; int size = nums . size (); for ( int i = 1 ; i < size ; ++ i ) { int idx = i ; while ( idx > 0 ) { if ( nums [ idx ] < nums [ idx -1 ]) { tmp = nums [ idx ]; nums [ idx ] = nums [ idx -1 ]; nums [ idx -1 ] = tmp ; } else { break ; } idx -- ; } } return nums ; } }; \uc2dc\ub3c4\ud574 \ubcfc \ub9ac\uc2a4\ud2b8 merge sort(bottom up) merge sort(top down) quick sort(random pivot) tim sort\ub3c4 \ud574\ubcf4\uace0 \uc2f6\uc9c0\ub9cc \uc0dd\ub7b5","title":"2944 -  Sort an Array"},{"location":"daily/2021-07-21/","text":"\uc758\ubbf8\uc5c6\ub294 \ucee4\ubc0b \uc2dc\uac04\uc774 \ubcc4\ub85c \uc5c6\uc744 \ub54c\ub294 leet code\ub97c \ud480\uace0 \uc2dc\uac04\uc774 \ucda9\ubd84\ud55c \uacbd\uc6b0 os\ub97c \ub9cc\ub4e4\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub178\ud2b8\ubd81\uc774 \uc5c6\ub294 \uacbd\uc6b0\uc5d0 \uc27d\uac8c \ucc0d\uc744\ub9cc\ud55c \ucee8\ud150\uce20\uac00 \uc788\uc73c\uba74 \uc88b\uc744 \ub4ef \ud569\ub2c8\ub2e4","title":"\uc758\ubbf8\uc5c6\ub294 \ucee4\ubc0b"},{"location":"daily/2021-07-21/#_1","text":"\uc2dc\uac04\uc774 \ubcc4\ub85c \uc5c6\uc744 \ub54c\ub294 leet code\ub97c \ud480\uace0 \uc2dc\uac04\uc774 \ucda9\ubd84\ud55c \uacbd\uc6b0 os\ub97c \ub9cc\ub4e4\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub178\ud2b8\ubd81\uc774 \uc5c6\ub294 \uacbd\uc6b0\uc5d0 \uc27d\uac8c \ucc0d\uc744\ub9cc\ud55c \ucee8\ud150\uce20\uac00 \uc788\uc73c\uba74 \uc88b\uc744 \ub4ef \ud569\ub2c8\ub2e4","title":"\uc758\ubbf8\uc5c6\ub294 \ucee4\ubc0b"},{"location":"daily/2021-07-22/","text":"leet code 2944 - Sort an Array merge sort\ub85c \ud480\uc5c8\uc2b5\ub2c8\ub2e4. merge \ud568\uc218\ub97c \uc9dc\ub294 \ubd80\ubd84\uc5d0\uc11c index \ud3ec\ud568\uad00\uacc4 \ub54c\ubb38\uc5d0 \uad49\uc7a5\ud788 \uc5ec\ub7ec \ubc88 \ud2c0\ub838\uc2b5\ub2c8\ub2e4. middle \ubd80\ubd84\uc744 middle+1\ub85c \ud574\uc918\uc57c \ub450 \ubc88\uc9f8 \ub4e4\uc5b4\uac00\ub294 \uc18c\ud2b8 \ud568\uc218\uc5d0\uc11c \ubb34\ud55c\ub8e8\ud504\ub97c \ub3cc\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 class \ub0b4\ubd80\uc5d0\uc11c\ub294 \ucc38\uc870\ud560 \uc218 \uc788\ub294 \ud074\ub798\uc2a4 \uba64\ubc84 array\uac00 \ub450 \uac1c \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4(\uc815\ub82c \uc804, \uc815\ub82c \ud6c4). C++ merge sort. time(beats 57.39%), space(beats 34.23%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Solution { public : vector < int > sortArray ( vector < int >& nums ) { sorted = nums ; this -> nums = nums ; sort ( 0 , nums . size () -1 ); return sorted ; } private : void sort ( int idx_start , int idx_end ) { if ( idx_end - idx_start <= 0 ) { return ; } int idx_middle = ( idx_end + idx_start ) / 2 ; sort ( idx_start , idx_middle ); sort ( idx_middle + 1 , idx_end ); merge ( idx_start , idx_middle , idx_end ); } void merge ( int idx_start , int idx_middle , int idx_end ) { int idx_s = idx_start ; int idx_m = idx_middle + 1 ; int idx_sorted = idx_start ; while ( idx_s <= idx_middle && idx_m <= idx_end ) { if ( nums [ idx_s ] < nums [ idx_m ]) { sorted [ idx_sorted ] = nums [ idx_s ++ ]; } else { sorted [ idx_sorted ] = nums [ idx_m ++ ]; } idx_sorted ++ ; } // append idx_start part while ( idx_s <= idx_middle ) { sorted [ idx_sorted ++ ] = nums [ idx_s ++ ]; } // append idx_middle part while ( idx_m <= idx_end ) { sorted [ idx_sorted ++ ] = nums [ idx_m ++ ]; } for ( int i = idx_start ; i <= idx_end ; ++ i ) { nums [ i ] = sorted [ i ]; } return ; } vector < int > sorted ; vector < int > nums ; };","title":"2021-07-22"},{"location":"daily/2021-07-22/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-22/#2944-sort-an-array","text":"merge sort\ub85c \ud480\uc5c8\uc2b5\ub2c8\ub2e4. merge \ud568\uc218\ub97c \uc9dc\ub294 \ubd80\ubd84\uc5d0\uc11c index \ud3ec\ud568\uad00\uacc4 \ub54c\ubb38\uc5d0 \uad49\uc7a5\ud788 \uc5ec\ub7ec \ubc88 \ud2c0\ub838\uc2b5\ub2c8\ub2e4. middle \ubd80\ubd84\uc744 middle+1\ub85c \ud574\uc918\uc57c \ub450 \ubc88\uc9f8 \ub4e4\uc5b4\uac00\ub294 \uc18c\ud2b8 \ud568\uc218\uc5d0\uc11c \ubb34\ud55c\ub8e8\ud504\ub97c \ub3cc\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 class \ub0b4\ubd80\uc5d0\uc11c\ub294 \ucc38\uc870\ud560 \uc218 \uc788\ub294 \ud074\ub798\uc2a4 \uba64\ubc84 array\uac00 \ub450 \uac1c \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4(\uc815\ub82c \uc804, \uc815\ub82c \ud6c4). C++ merge sort. time(beats 57.39%), space(beats 34.23%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 class Solution { public : vector < int > sortArray ( vector < int >& nums ) { sorted = nums ; this -> nums = nums ; sort ( 0 , nums . size () -1 ); return sorted ; } private : void sort ( int idx_start , int idx_end ) { if ( idx_end - idx_start <= 0 ) { return ; } int idx_middle = ( idx_end + idx_start ) / 2 ; sort ( idx_start , idx_middle ); sort ( idx_middle + 1 , idx_end ); merge ( idx_start , idx_middle , idx_end ); } void merge ( int idx_start , int idx_middle , int idx_end ) { int idx_s = idx_start ; int idx_m = idx_middle + 1 ; int idx_sorted = idx_start ; while ( idx_s <= idx_middle && idx_m <= idx_end ) { if ( nums [ idx_s ] < nums [ idx_m ]) { sorted [ idx_sorted ] = nums [ idx_s ++ ]; } else { sorted [ idx_sorted ] = nums [ idx_m ++ ]; } idx_sorted ++ ; } // append idx_start part while ( idx_s <= idx_middle ) { sorted [ idx_sorted ++ ] = nums [ idx_s ++ ]; } // append idx_middle part while ( idx_m <= idx_end ) { sorted [ idx_sorted ++ ] = nums [ idx_m ++ ]; } for ( int i = idx_start ; i <= idx_end ; ++ i ) { nums [ i ] = sorted [ i ]; } return ; } vector < int > sorted ; vector < int > nums ; };","title":"2944 - Sort an Array"},{"location":"daily/2021-07-23/","text":"leet code 2874 - Validate Binary Search Tree \uc81c\uac00 \ub2e8\uc21c\ud788 \uc0dd\uac01\ud588\ub358 \uac83\uc740 BST\ub97c \uc21c\ud68c\ud558\uba74\uc11c divide and conquer \ubc29\ubc95\uc73c\ub85c \ud480\ub824\uace0 \ud588\uc2b5\ub2c8\ub2e4. preorder search\ub97c \ud558\ub294 \ubc29\uc2dd\uc73c\ub85c..!! \uadf8\ub7f0\ub370 \ub354 \uc88b\uc740 \ubc29\uc2dd\uc774 \uc788\ub2e4\ub294 \uac83\uc744 \ub2e4\ub978 \uc194\ub8e8\uc158\uc744 \ubcf4\uace0 \uc54c\uc558\uc2b5\ub2c8\ub2e4. 1) inorder search\ub97c \ud558\uba74\uc11c \ubc14\ub85c \uc9c1\uc804\uc758 \uac12\uc744 \uc800\uc7a5\ud574 \ub450\uace0, \uadf8 \uac12\ubcf4\ub2e4 \ubc14\ub85c \ub2e4\uc74c \ub178\ub4dc\uc758 \uac12\uc774 \uc791\uc73c\uba74 invalid\ub85c \ud310\ub2e8\ud558\uace0, 2) \uac01 \ub178\ub4dc\uc5d0\uc11c\ub294 \uc67c\ucabd, \uc624\ub978\ucabd\uc744 \ubcf4\uba74\uc11c \ud55c \ubc88 \ub354 validation\uc744 \uccb4\ud06c\ud558\uba74 \ud6e8\uc52c \ub354 \uc54c\uace0\ub9ac\uc998\uc744 \ub2e8\uc21c\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. C++. \uc6d0\ub798 \ub0b4 \ud480\uc774. time(beats 35.53%), space(beats 68.11%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : bool isValidBST ( TreeNode * root ) { long leftLimit = - (( long ) 1 << 32 ); long rightLimit = (( long ) 1 << 32 ); if ( ! root -> left && ! root -> right ) return true ; return _isValidBST ( root , leftLimit , rightLimit ); } bool _isValidBST ( TreeNode * root , long leftLimit , long rightLimit ) { if ( root == nullptr ) return true ; // printf(\"leftLimit: %d\\n\", leftLimit); // printf(\"value: %d\\n\", root->val); // printf(\"rightLimit: %d\\n\", rightLimit); bool left = true ; bool right = true ; if ( root -> val < leftLimit ) return false ; if ( root -> val > rightLimit ) return false ; if ( root -> left ) { if ( root -> left -> val <= leftLimit ) return false ; if ( root -> val <= root -> left -> val ) return false ; left = _isValidBST ( root -> left , leftLimit , root -> val ); } if ( root -> right ) { if ( root -> right -> val >= rightLimit ) return false ; if ( root -> val >= root -> right -> val ) return false ; right = _isValidBST ( root -> right , root -> val , rightLimit ); } return left && right ; } }; C++. \uc0c1\uc704\uad8c\uc758 \ud480\uc774. time(beats 89.14 %), space(68.11%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public : TreeNode * prev = NULL ; bool isValidBST ( TreeNode * root ) { if ( ! root ) return true ; if ( ! isValidBST ( root -> left )) return false ; if ( prev && root -> val <= prev -> val ) return false ; prev = root ; return isValidBST ( root -> right ); } };","title":"2021-07-23"},{"location":"daily/2021-07-23/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-23/#2874-validate-binary-search-tree","text":"\uc81c\uac00 \ub2e8\uc21c\ud788 \uc0dd\uac01\ud588\ub358 \uac83\uc740 BST\ub97c \uc21c\ud68c\ud558\uba74\uc11c divide and conquer \ubc29\ubc95\uc73c\ub85c \ud480\ub824\uace0 \ud588\uc2b5\ub2c8\ub2e4. preorder search\ub97c \ud558\ub294 \ubc29\uc2dd\uc73c\ub85c..!! \uadf8\ub7f0\ub370 \ub354 \uc88b\uc740 \ubc29\uc2dd\uc774 \uc788\ub2e4\ub294 \uac83\uc744 \ub2e4\ub978 \uc194\ub8e8\uc158\uc744 \ubcf4\uace0 \uc54c\uc558\uc2b5\ub2c8\ub2e4. 1) inorder search\ub97c \ud558\uba74\uc11c \ubc14\ub85c \uc9c1\uc804\uc758 \uac12\uc744 \uc800\uc7a5\ud574 \ub450\uace0, \uadf8 \uac12\ubcf4\ub2e4 \ubc14\ub85c \ub2e4\uc74c \ub178\ub4dc\uc758 \uac12\uc774 \uc791\uc73c\uba74 invalid\ub85c \ud310\ub2e8\ud558\uace0, 2) \uac01 \ub178\ub4dc\uc5d0\uc11c\ub294 \uc67c\ucabd, \uc624\ub978\ucabd\uc744 \ubcf4\uba74\uc11c \ud55c \ubc88 \ub354 validation\uc744 \uccb4\ud06c\ud558\uba74 \ud6e8\uc52c \ub354 \uc54c\uace0\ub9ac\uc998\uc744 \ub2e8\uc21c\ud558\uac8c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. C++. \uc6d0\ub798 \ub0b4 \ud480\uc774. time(beats 35.53%), space(beats 68.11%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 /** * Definition for a binary tree node. * struct TreeNode { * int val; * TreeNode *left; * TreeNode *right; * TreeNode() : val(0), left(nullptr), right(nullptr) {} * TreeNode(int x) : val(x), left(nullptr), right(nullptr) {} * TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} * }; */ class Solution { public : bool isValidBST ( TreeNode * root ) { long leftLimit = - (( long ) 1 << 32 ); long rightLimit = (( long ) 1 << 32 ); if ( ! root -> left && ! root -> right ) return true ; return _isValidBST ( root , leftLimit , rightLimit ); } bool _isValidBST ( TreeNode * root , long leftLimit , long rightLimit ) { if ( root == nullptr ) return true ; // printf(\"leftLimit: %d\\n\", leftLimit); // printf(\"value: %d\\n\", root->val); // printf(\"rightLimit: %d\\n\", rightLimit); bool left = true ; bool right = true ; if ( root -> val < leftLimit ) return false ; if ( root -> val > rightLimit ) return false ; if ( root -> left ) { if ( root -> left -> val <= leftLimit ) return false ; if ( root -> val <= root -> left -> val ) return false ; left = _isValidBST ( root -> left , leftLimit , root -> val ); } if ( root -> right ) { if ( root -> right -> val >= rightLimit ) return false ; if ( root -> val >= root -> right -> val ) return false ; right = _isValidBST ( root -> right , root -> val , rightLimit ); } return left && right ; } }; C++. \uc0c1\uc704\uad8c\uc758 \ud480\uc774. time(beats 89.14 %), space(68.11%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 class Solution { public : TreeNode * prev = NULL ; bool isValidBST ( TreeNode * root ) { if ( ! root ) return true ; if ( ! isValidBST ( root -> left )) return false ; if ( prev && root -> val <= prev -> val ) return false ; prev = root ; return isValidBST ( root -> right ); } };","title":"2874 - Validate Binary Search Tree"},{"location":"daily/2021-07-24/","text":"leet code 1337 - Design Circular Queue C++ STL\uc5d0\uc11c \ubcfc \uc218 \uc788\ub294 capacity \uac1c\ub150\uacfc size \uac1c\ub150\uc744 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc0ac\ub78c\ub4e4 runtime\uc744 \ubcf4\ub2c8 \uc774\uac83\ubcf4\ub2e4 \uc880 \ub354 \uc88b\uc740 \uad6c\ud604\uc774 \uc788\ub098\ubd05\ub2c8\ub2e4. C++ time(beats 37.63%), space(beats 36.39%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 class MyCircularQueue { public : MyCircularQueue ( int k ) { _q = new int [ k ]; _front = 0 ; _rear = 0 ; _size = 0 ; _capacity = k ; } ~ MyCircularQueue (){ delete [] _q ; _front = 0 ; _rear = 0 ; _size = 0 ; _capacity = 0 ; } bool enQueue ( int value ) { if ( isFull ()) return false ; _q [ _rear ] = value ; _rear = ( _rear + 1 ) % _capacity ; _size ++ ; printf ( \"rear: %d \\n \" , _rear ); return true ; } bool deQueue () { if ( isEmpty ()) return false ; _q [ _front ] = -1 ; _front = ( _front + 1 ) % _capacity ; _size -- ; return true ; } int Front () { if ( isEmpty ()) return -1 ; return _q [ _front ]; } int Rear () { if ( isEmpty ()) return -1 ; if ( _rear == 0 ) return _q [ _capacity -1 ]; else return _q [ _rear - 1 ]; } bool isEmpty () { if ( _size == 0 ) return true ; else return false ; } bool isFull () { if ( _size == _capacity ) return true ; else return false ; } private : int * _q ; int _front ; int _rear ; int _capacity ; int _size ; }; /** * Your MyCircularQueue object will be instantiated and called as such: * MyCircularQueue* obj = new MyCircularQueue(k); * bool param_1 = obj->enQueue(value); * bool param_2 = obj->deQueue(); * int param_3 = obj->Front(); * int param_4 = obj->Rear(); * bool param_5 = obj->isEmpty(); * bool param_6 = obj->isFull(); */","title":"2021-07-24"},{"location":"daily/2021-07-24/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-24/#1337-design-circular-queue","text":"C++ STL\uc5d0\uc11c \ubcfc \uc218 \uc788\ub294 capacity \uac1c\ub150\uacfc size \uac1c\ub150\uc744 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc0ac\ub78c\ub4e4 runtime\uc744 \ubcf4\ub2c8 \uc774\uac83\ubcf4\ub2e4 \uc880 \ub354 \uc88b\uc740 \uad6c\ud604\uc774 \uc788\ub098\ubd05\ub2c8\ub2e4. C++ time(beats 37.63%), space(beats 36.39%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 class MyCircularQueue { public : MyCircularQueue ( int k ) { _q = new int [ k ]; _front = 0 ; _rear = 0 ; _size = 0 ; _capacity = k ; } ~ MyCircularQueue (){ delete [] _q ; _front = 0 ; _rear = 0 ; _size = 0 ; _capacity = 0 ; } bool enQueue ( int value ) { if ( isFull ()) return false ; _q [ _rear ] = value ; _rear = ( _rear + 1 ) % _capacity ; _size ++ ; printf ( \"rear: %d \\n \" , _rear ); return true ; } bool deQueue () { if ( isEmpty ()) return false ; _q [ _front ] = -1 ; _front = ( _front + 1 ) % _capacity ; _size -- ; return true ; } int Front () { if ( isEmpty ()) return -1 ; return _q [ _front ]; } int Rear () { if ( isEmpty ()) return -1 ; if ( _rear == 0 ) return _q [ _capacity -1 ]; else return _q [ _rear - 1 ]; } bool isEmpty () { if ( _size == 0 ) return true ; else return false ; } bool isFull () { if ( _size == _capacity ) return true ; else return false ; } private : int * _q ; int _front ; int _rear ; int _capacity ; int _size ; }; /** * Your MyCircularQueue object will be instantiated and called as such: * MyCircularQueue* obj = new MyCircularQueue(k); * bool param_1 = obj->enQueue(value); * bool param_2 = obj->deQueue(); * int param_3 = obj->Front(); * int param_4 = obj->Rear(); * bool param_5 = obj->isEmpty(); * bool param_6 = obj->isFull(); */","title":"1337 - Design Circular Queue"},{"location":"daily/2021-07-25/","text":"leet code 2084 - N-Queens II \ucc98\uc74c n==6\uc5d0\uc11c TLE\uc5d0 \uac78\ub838\uc2b5\ub2c8\ub2e4. \uc774\ud6c4 n==8\uc5d0\uc11c TLE\uc5d0 \uac78\ub838\uc2b5\ub2c8\ub2e4. \ud574\uacb0 \ubc29\ubc95\uc740 rows, columns, \uc774\ubbf8 \ucd94\uac00\ub41c queens\ub97c \ubaa8\ub450 \uc21c\ud68c\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c rows, columns \ub458 \uc911 \ud558\ub098\ub97c \uc0dd\ub7b5\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. C++ TLE 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include<algorithm> class Solution { public: int totalNQueens(int n) { _boardSize = n; return _totalnq(n); } int _totalnq(int n){ if(n==0) { vector<vector<int>> a(_queens); sort(a.begin(), a.end()); for(int i=0; i<_answers.size(); ++i) { if(_answers[i] == a) return 0; } _answers.push_back(a); return 1; // \uc131\uacf5\uc870\uac74 } int cnt = 0; for(int i=0; i<_boardSize; ++i) { if(n==_boardSize && i>_boardSize/2) break; for(int j=0; j<_boardSize; ++j) { if(n==_boardSize && j>_boardSize/2) break; bool isValid = true; for(int k=0; k< _queens.size(); ++k) { int x1 = _queens[k][0]; int y1 = _queens[k][1]; if(x1 == j || y1 == i || (x1-y1) == (j-i) || (x1+y1) == i+j) { isValid = false; break; }; } if(!isValid) continue; vector<int> a{j, i}; _queens.push_back(a); cnt += _totalnq(n-1); _queens.pop_back(); } } return cnt; } private: int _board[10][10] = {0, }; vector<vector<int>> _queens; int _boardSize; vector<vector<vector<int>>> _answers; }; C++ \ucd5c\uc801\ud654\ub41c \ubc84\uc804. time(beats 23.87%), space(beats 17.75%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <algorithm> class Solution { public : int totalNQueens ( int n ) { _boardSize = n ; return _totalnq ( n ); } int _totalnq ( int n ){ if ( n == 0 ) { vector < vector < int >> a ( _queens ); sort ( a . begin (), a . end ()); for ( int i = 0 ; i < _answers . size (); ++ i ) { if ( _answers [ i ] == a ) return 0 ; } _answers . push_back ( a ); return 1 ; // \uc131\uacf5\uc870\uac74 } int cnt = 0 ; int j = n -1 ; for ( int i = 0 ; i < _boardSize ; ++ i ) { bool isValid = true ; for ( int k = 0 ; k < _queens . size (); ++ k ) { int x1 = _queens [ k ][ 0 ]; int y1 = _queens [ k ][ 1 ]; if ( x1 == j || y1 == i || ( x1 - y1 ) == ( j - i ) || ( x1 + y1 ) == i + j ) { isValid = false ; break ; }; } if ( ! isValid ) continue ; vector < int > a { j , i }; _queens . push_back ( a ); cnt += _totalnq ( n -1 ); _queens . pop_back (); } return cnt ; } private : int _board [ 10 ][ 10 ] = { 0 , }; vector < vector < int >> _queens ; int _boardSize ; vector < vector < vector < int >>> _answers ; };","title":"2021-07-25"},{"location":"daily/2021-07-25/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-25/#2084-n-queens-ii","text":"\ucc98\uc74c n==6\uc5d0\uc11c TLE\uc5d0 \uac78\ub838\uc2b5\ub2c8\ub2e4. \uc774\ud6c4 n==8\uc5d0\uc11c TLE\uc5d0 \uac78\ub838\uc2b5\ub2c8\ub2e4. \ud574\uacb0 \ubc29\ubc95\uc740 rows, columns, \uc774\ubbf8 \ucd94\uac00\ub41c queens\ub97c \ubaa8\ub450 \uc21c\ud68c\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub77c rows, columns \ub458 \uc911 \ud558\ub098\ub97c \uc0dd\ub7b5\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. C++ TLE 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 #include<algorithm> class Solution { public: int totalNQueens(int n) { _boardSize = n; return _totalnq(n); } int _totalnq(int n){ if(n==0) { vector<vector<int>> a(_queens); sort(a.begin(), a.end()); for(int i=0; i<_answers.size(); ++i) { if(_answers[i] == a) return 0; } _answers.push_back(a); return 1; // \uc131\uacf5\uc870\uac74 } int cnt = 0; for(int i=0; i<_boardSize; ++i) { if(n==_boardSize && i>_boardSize/2) break; for(int j=0; j<_boardSize; ++j) { if(n==_boardSize && j>_boardSize/2) break; bool isValid = true; for(int k=0; k< _queens.size(); ++k) { int x1 = _queens[k][0]; int y1 = _queens[k][1]; if(x1 == j || y1 == i || (x1-y1) == (j-i) || (x1+y1) == i+j) { isValid = false; break; }; } if(!isValid) continue; vector<int> a{j, i}; _queens.push_back(a); cnt += _totalnq(n-1); _queens.pop_back(); } } return cnt; } private: int _board[10][10] = {0, }; vector<vector<int>> _queens; int _boardSize; vector<vector<vector<int>>> _answers; }; C++ \ucd5c\uc801\ud654\ub41c \ubc84\uc804. time(beats 23.87%), space(beats 17.75%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 #include <algorithm> class Solution { public : int totalNQueens ( int n ) { _boardSize = n ; return _totalnq ( n ); } int _totalnq ( int n ){ if ( n == 0 ) { vector < vector < int >> a ( _queens ); sort ( a . begin (), a . end ()); for ( int i = 0 ; i < _answers . size (); ++ i ) { if ( _answers [ i ] == a ) return 0 ; } _answers . push_back ( a ); return 1 ; // \uc131\uacf5\uc870\uac74 } int cnt = 0 ; int j = n -1 ; for ( int i = 0 ; i < _boardSize ; ++ i ) { bool isValid = true ; for ( int k = 0 ; k < _queens . size (); ++ k ) { int x1 = _queens [ k ][ 0 ]; int y1 = _queens [ k ][ 1 ]; if ( x1 == j || y1 == i || ( x1 - y1 ) == ( j - i ) || ( x1 + y1 ) == i + j ) { isValid = false ; break ; }; } if ( ! isValid ) continue ; vector < int > a { j , i }; _queens . push_back ( a ); cnt += _totalnq ( n -1 ); _queens . pop_back (); } return cnt ; } private : int _board [ 10 ][ 10 ] = { 0 , }; vector < vector < int >> _queens ; int _boardSize ; vector < vector < vector < int >>> _answers ; };","title":"2084 - N-Queens II"},{"location":"daily/2021-07-27/","text":"leet code 1368 - Moving Average from Data Stream C++ time(beats 60.17%), space(beats 54.04%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class MovingAverage { public : /** Initialize your data structure here. */ MovingAverage ( int size ) { _size = size ; _sum = 0.0 ; } double next ( int val ) { if ( _q . size () >= _size ) { _sum += val ; _q . push ( val ); _sum -= _q . front (); _q . pop (); } else { _sum += val ; _q . push ( val ); } return _sum / _q . size (); } private : queue < int > _q ; int _size ; double _sum ; }; /** * Your MovingAverage object will be instantiated and called as such: * MovingAverage* obj = new MovingAverage(size); * double param_1 = obj->next(val); */","title":"2021-07-27"},{"location":"daily/2021-07-27/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-27/#1368-moving-average-from-data-stream","text":"C++ time(beats 60.17%), space(beats 54.04%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class MovingAverage { public : /** Initialize your data structure here. */ MovingAverage ( int size ) { _size = size ; _sum = 0.0 ; } double next ( int val ) { if ( _q . size () >= _size ) { _sum += val ; _q . push ( val ); _sum -= _q . front (); _q . pop (); } else { _sum += val ; _q . push ( val ); } return _sum / _q . size (); } private : queue < int > _q ; int _size ; double _sum ; }; /** * Your MovingAverage object will be instantiated and called as such: * MovingAverage* obj = new MovingAverage(size); * double param_1 = obj->next(val); */","title":"1368 - Moving Average from Data Stream"},{"location":"daily/2021-07-28/","text":"leet code 1148 - plus one \uc54c\uace0\ub9ac\uc998 reverse array plus one with while loop reverse array C++ time(beats 100%), space(beats 58.44%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Solution { public : vector < int > plusOne ( vector < int >& digits ) { // reverse int tmp = 0 ; int size = digits . size (); for ( int i = 0 ; i < size / 2 ; ++ i ) { tmp = digits [ i ]; digits [ i ] = digits [ size -1 - i ]; digits [ size -1 - i ] = tmp ; } int i = 0 ; int flag = 0 ; digits [ 0 ] ++ ; while ( i < size ) { digits [ i ] += flag ; if ( digits [ i ] >= 10 ) { flag = 1 ; digits [ i ] = 0 ; } else { flag = 0 ; } i ++ ; } if ( flag ) { digits [ size -1 ] = 0 ; digits . push_back ( 1 ); } size = digits . size (); for ( int i = 0 ; i < size / 2 ; ++ i ) { tmp = digits [ i ]; digits [ i ] = digits [ size -1 - i ]; digits [ size -1 - i ] = tmp ; } return digits ; } };","title":"2021-07-28"},{"location":"daily/2021-07-28/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-28/#1148-plus-one","text":"\uc54c\uace0\ub9ac\uc998 reverse array plus one with while loop reverse array C++ time(beats 100%), space(beats 58.44%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Solution { public : vector < int > plusOne ( vector < int >& digits ) { // reverse int tmp = 0 ; int size = digits . size (); for ( int i = 0 ; i < size / 2 ; ++ i ) { tmp = digits [ i ]; digits [ i ] = digits [ size -1 - i ]; digits [ size -1 - i ] = tmp ; } int i = 0 ; int flag = 0 ; digits [ 0 ] ++ ; while ( i < size ) { digits [ i ] += flag ; if ( digits [ i ] >= 10 ) { flag = 1 ; digits [ i ] = 0 ; } else { flag = 0 ; } i ++ ; } if ( flag ) { digits [ size -1 ] = 0 ; digits . push_back ( 1 ); } size = digits . size (); for ( int i = 0 ; i < size / 2 ; ++ i ) { tmp = digits [ i ]; digits [ i ] = digits [ size -1 - i ]; digits [ size -1 - i ] = tmp ; } return digits ; } };","title":"1148 - plus one"},{"location":"daily/2021-07-30/","text":"leet code 1167 - Digonal Traverse \uac04\ub2e8\ud55c \ubb38\uc81c\ucc98\ub7fc \ubcf4\uc600\uc9c0\ub9cc, \uc800\ub294 \uc775\uc219\ud558\uc9c0 \uc54a\uc740 \ud0d3\uc5d0 \uc27d\uac8c \ud480 \uc218 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. \uccab \uc2dc\ub3c4\ub294 \uac04\ub2e8\ud55c \uc218\ud559 + \uc608\uc678\ub4e4\uc740 \ud504\ub85c\uadf8\ub798\ubc0d\uc73c\ub85c \ucc98\ub9ac\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uc0dd\uac01\ud588\uc2b5\ub2c8\ub2e4. \ub450 \ubc88\uc9f8 \uc2dc\ub3c4\ub294 \uc218\ud559\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0, \ub2e8\uc21c\ud788 \ud504\ub85c\uadf8\ub798\ubc0d\uc801\uc73c\ub85c \ud574\uacb0\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \uc18d\ub3c4\uac00 488ms => 48ms \ub85c 10\ubc30 \uc815\ub3c4 \ube68\ub77c\uc84c\uc2b5\ub2c8\ub2e4. C++. \ucd08\uae30\ubc84\uc804. time(beats 0%), space(beats 96.80%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public : vector < int > findDiagonalOrder ( vector < vector < int >>& mat ) { int y_size = mat . size (); int x_size = mat [ 0 ]. size (); vector < int > result ( x_size * y_size ); int idx = 0 ; int x = 0 ; int y = 0 ; for ( int i = 0 ; i < y_size + x_size -1 ; ++ i ) { for ( int j = 0 ; j <= i ; ++ j ) { if ( i % 2 == 0 ) { x = j ; y = i - j ; } else { x = i - j ; y = j ; } if ( x < 0 ) continue ; if ( x >= x_size ) continue ; if ( y < 0 ) continue ; if ( y >= y_size ) continue ; result [ idx ++ ] = mat [ y ][ x ]; } } return result ; } }; C++. solution. time(beats 40.31%), space(beats 96.80%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public : vector < int > findDiagonalOrder ( vector < vector < int >>& mat ) { int rows = mat . size (), cols = mat . front (). size (); int row = 0 , col = 0 ; vector < int > result ( rows * cols , 0 ); for ( int i = 0 ; i < result . size (); ++ i ) { result [ i ] = mat [ row ][ col ]; if (( row + col ) % 2 == 0 ) { if ( col == cols - 1 ) { ++ row ; } else if ( row == 0 ) { ++ col ; } else { -- row ; ++ col ; } } else { if ( row == rows - 1 ) { ++ col ; } else if ( col == 0 ) { ++ row ; } else { ++ row ; -- col ; } } } return result ; } };","title":"2021-07-30"},{"location":"daily/2021-07-30/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-07-30/#1167-digonal-traverse","text":"\uac04\ub2e8\ud55c \ubb38\uc81c\ucc98\ub7fc \ubcf4\uc600\uc9c0\ub9cc, \uc800\ub294 \uc775\uc219\ud558\uc9c0 \uc54a\uc740 \ud0d3\uc5d0 \uc27d\uac8c \ud480 \uc218 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. \uccab \uc2dc\ub3c4\ub294 \uac04\ub2e8\ud55c \uc218\ud559 + \uc608\uc678\ub4e4\uc740 \ud504\ub85c\uadf8\ub798\ubc0d\uc73c\ub85c \ucc98\ub9ac\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uc0dd\uac01\ud588\uc2b5\ub2c8\ub2e4. \ub450 \ubc88\uc9f8 \uc2dc\ub3c4\ub294 \uc218\ud559\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0, \ub2e8\uc21c\ud788 \ud504\ub85c\uadf8\ub798\ubc0d\uc801\uc73c\ub85c \ud574\uacb0\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \uc18d\ub3c4\uac00 488ms => 48ms \ub85c 10\ubc30 \uc815\ub3c4 \ube68\ub77c\uc84c\uc2b5\ub2c8\ub2e4. C++. \ucd08\uae30\ubc84\uc804. time(beats 0%), space(beats 96.80%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 class Solution { public : vector < int > findDiagonalOrder ( vector < vector < int >>& mat ) { int y_size = mat . size (); int x_size = mat [ 0 ]. size (); vector < int > result ( x_size * y_size ); int idx = 0 ; int x = 0 ; int y = 0 ; for ( int i = 0 ; i < y_size + x_size -1 ; ++ i ) { for ( int j = 0 ; j <= i ; ++ j ) { if ( i % 2 == 0 ) { x = j ; y = i - j ; } else { x = i - j ; y = j ; } if ( x < 0 ) continue ; if ( x >= x_size ) continue ; if ( y < 0 ) continue ; if ( y >= y_size ) continue ; result [ idx ++ ] = mat [ y ][ x ]; } } return result ; } }; C++. solution. time(beats 40.31%), space(beats 96.80%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Solution { public : vector < int > findDiagonalOrder ( vector < vector < int >>& mat ) { int rows = mat . size (), cols = mat . front (). size (); int row = 0 , col = 0 ; vector < int > result ( rows * cols , 0 ); for ( int i = 0 ; i < result . size (); ++ i ) { result [ i ] = mat [ row ][ col ]; if (( row + col ) % 2 == 0 ) { if ( col == cols - 1 ) { ++ row ; } else if ( row == 0 ) { ++ col ; } else { -- row ; ++ col ; } } else { if ( row == rows - 1 ) { ++ col ; } else if ( col == 0 ) { ++ row ; } else { ++ row ; -- col ; } } } return result ; } };","title":"1167 - Digonal Traverse"},{"location":"daily/2021-08-01/","text":"leet code 1160 - Add Binary C++ time(beats 100%), space(beats 85.05%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #include <algorithm> using namespace std ; class Solution { public : string addBinary ( string a , string b ) { reverse ( a . begin (), a . end ()); reverse ( b . begin (), b . end ()); string result ; int is_a_longer = a . size () > b . size (); int min_len = is_a_longer ? b . size () : a . size (); int max_len = is_a_longer ? a . size () : b . size (); int flag = 0 ; for ( int i = 0 ; i < min_len ; ++ i ) { int next_val = a [ i ] + b [ i ] - 0x60 + flag ; if ( next_val > 1 ) { result += '0' + next_val - 2 ; flag = 1 ; } else { result += '0' + next_val ; flag = 0 ; } } if ( is_a_longer ) { for ( int i = min_len ; i < max_len ; ++ i ) { int next_val = a [ i ] - 0x30 + flag ; if ( next_val > 1 ) { result += '0' + next_val - 2 ; flag = 1 ; } else { result += '0' + next_val ; flag = 0 ; } } } else { for ( int i = min_len ; i < max_len ; ++ i ) { int next_val = b [ i ] - 0x30 + flag ; if ( next_val > 1 ) { result += '0' + next_val - 2 ; flag = 1 ; } else { result += '0' + next_val ; flag = 0 ; } } } if ( flag ) result += \"1\" ; reverse ( result . begin (), result . end ()); return result ; } }; 1161 - Implement Strstr() brute force \ubc29\ubc95\uc73c\ub85c \ud478\ub2c8\uae4c \ud480\ub9ac\uae34 \ud588\ub294\ub370, \ud0d0\uc0c9 \uc2dc\uac04\uc774 \uaf64 \uae38\uc5c8\uc2b5\ub2c8\ub2e4. \uac04\ub2e8\ud55c \ub77c\ube48\uce74\ud504 \uad6c\ud604\uc73c\ub85c \ub2e4\uc2dc \ud480\uc5c8\uc2b5\ub2c8\ub2e4. 948ms => 4ms \uc57d 200\ubc30 \ube68\ub77c\uc84c\uc2b5\ub2c8\ub2e4. \ub77c\ube48\uce74\ud504 \uc54c\uace0\ub9ac\uc998\uc740 haystack\uc5d0\uc11c needle\uc744 \ucc3e\uc744 \ub54c haystack[i:i+needle]\ub9cc\ud07c\uc758 \uad6c\uac04\uc744 hash\ud654 \ud558\uba74\uc11c \ub05d\uae4c\uc9c0 \uc774\ub3d9\ud569\ub2c8\ub2e4. hash\ub97c \ub9cc\ub4e4\uba74\uc11c \uc774\ub3d9\ud558\uae30 \ub54c\ubb38\uc5d0 O(1)\ub9cc\uc5d0 \ubb38\uc790\uc5f4 \ube44\uad50\ub97c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\ub9cc, hash collision\uc774 \uc77c\uc5b4\ub0a0 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \uadf8 \uacbd\uc6b0\uc5d0\ub294 \ud655\uc778\uc744 \ud574\uc918\uc57c \ud569\ub2c8\ub2e4. \uac00\uc7a5 \ub2e8\uc21c\ud558\uac8c \ubb38\uc790\uc5f4\ub4e4\uc744 \ub354\ud55c \ud615\ud0dc\ub97c hash\ub85c \uc368\ub3c4 \ucda9\ubd84\ud788 \ube60\ub974\uace0 \uc131\ub2a5\uc774 \uc88b\uc558\uc2b5\ub2c8\ub2e4. C++ time(beats 20.19%), space(beats 20.30%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public : int strStr ( string haystack , string needle ) { int idx = -1 ; int haySize = haystack . size (); int needleSize = needle . size (); for ( int i = 0 ; i < haySize - needleSize + 1 ; ++ i ) { bool isFound = true ; for ( int j = i ; j < i + needleSize ; ++ j ) { if ( haystack [ j ] != needle [ j - i ]) { isFound = false ; break ; } } if ( isFound ) { idx = i ; return idx ; } } return idx ; } }; C++ \ub77c\ube48\uce74\ud504 \uc54c\uace0\ub9ac\uc998. time(beats 86.39%), space(beats 20.30%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class Solution { public : int strStr ( string haystack , string needle ) { int hayLen = haystack . size (); int needleLen = needle . size (); int mod = needleLen > 12 ? 4096 : ( 1 << needleLen ); if ( needle == \"\" ) return 0 ; if ( needleLen == 0 ) return -1 ; // base condition 1 if ( needleLen > hayLen ) return -1 ; // base condition 2 // calculate needleHash int needleHash = 0 ; for ( int i = 0 ; i < needleLen ; ++ i ) { needleHash = ( needleHash * 2 + needle [ i ]) % mod ; } //printf(\"needlehash: %d\\n\", needleHash); // search int hayHash = 0 ; for ( int i = 0 ; i < needleLen ; ++ i ) { hayHash = ( hayHash * 2 + haystack [ i ]) % mod ; } //printf(\"hayhash: %d\\n\", hayHash); if ( hayHash == needleHash ) { if ( check ( haystack , needle , 0 )) return 0 ; } for ( int i = 1 ; i < hayLen - needleLen + 1 ; ++ i ) { hayHash = ( hayHash * 2 + haystack [ i + needleLen -1 ]) % mod ; //printf(\"hayhash: %d\\n\", hayHash); if ( hayHash == needleHash ) { if ( check ( haystack , needle , i )) return i ; } } return -1 ; } bool check ( string & hay , string & needle , int hayIdx ) { for ( int i = 0 ; i < needle . size (); ++ i ) { if ( hay [ hayIdx + i ] != needle [ i ]) return false ; } return true ; } }; C++. solution. \uc880 \ub354 \ub2e8\uc21c\ud654\ub41c \ub77c\ube48\uce74\ud504 \ubc84\uc804. time(beats 100%), space(beats 23.30%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public : bool cmp ( string a , string b , int i ){ for ( int j = 0 ; j < b . size (); j ++ ){ if ( a [ i + j ] != b [ j ]){ return false ;} } return true ; } int strStr ( string haystack , string needle ) { int h_size = haystack . size (), n_size = needle . size (), h = 0 , n = 0 ; if ( h_size < n_size ){ return -1 ;} for ( int i = 0 ; i < n_size ; i ++ ){ h += haystack [ i ]; n += needle [ i ];} for ( int i = 0 ; i < h_size - n_size + 1 ; i ++ ){ if ( h == n and cmp ( haystack , needle , i )){ return i ;} if ( i < h_size - n_size ){ h += haystack [ i + n_size ] - haystack [ i ];} } return -1 ; } };","title":"2021-08-01"},{"location":"daily/2021-08-01/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-08-01/#1160-add-binary","text":"C++ time(beats 100%), space(beats 85.05%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 #include <algorithm> using namespace std ; class Solution { public : string addBinary ( string a , string b ) { reverse ( a . begin (), a . end ()); reverse ( b . begin (), b . end ()); string result ; int is_a_longer = a . size () > b . size (); int min_len = is_a_longer ? b . size () : a . size (); int max_len = is_a_longer ? a . size () : b . size (); int flag = 0 ; for ( int i = 0 ; i < min_len ; ++ i ) { int next_val = a [ i ] + b [ i ] - 0x60 + flag ; if ( next_val > 1 ) { result += '0' + next_val - 2 ; flag = 1 ; } else { result += '0' + next_val ; flag = 0 ; } } if ( is_a_longer ) { for ( int i = min_len ; i < max_len ; ++ i ) { int next_val = a [ i ] - 0x30 + flag ; if ( next_val > 1 ) { result += '0' + next_val - 2 ; flag = 1 ; } else { result += '0' + next_val ; flag = 0 ; } } } else { for ( int i = min_len ; i < max_len ; ++ i ) { int next_val = b [ i ] - 0x30 + flag ; if ( next_val > 1 ) { result += '0' + next_val - 2 ; flag = 1 ; } else { result += '0' + next_val ; flag = 0 ; } } } if ( flag ) result += \"1\" ; reverse ( result . begin (), result . end ()); return result ; } };","title":"1160 - Add Binary"},{"location":"daily/2021-08-01/#1161-implement-strstr","text":"brute force \ubc29\ubc95\uc73c\ub85c \ud478\ub2c8\uae4c \ud480\ub9ac\uae34 \ud588\ub294\ub370, \ud0d0\uc0c9 \uc2dc\uac04\uc774 \uaf64 \uae38\uc5c8\uc2b5\ub2c8\ub2e4. \uac04\ub2e8\ud55c \ub77c\ube48\uce74\ud504 \uad6c\ud604\uc73c\ub85c \ub2e4\uc2dc \ud480\uc5c8\uc2b5\ub2c8\ub2e4. 948ms => 4ms \uc57d 200\ubc30 \ube68\ub77c\uc84c\uc2b5\ub2c8\ub2e4. \ub77c\ube48\uce74\ud504 \uc54c\uace0\ub9ac\uc998\uc740 haystack\uc5d0\uc11c needle\uc744 \ucc3e\uc744 \ub54c haystack[i:i+needle]\ub9cc\ud07c\uc758 \uad6c\uac04\uc744 hash\ud654 \ud558\uba74\uc11c \ub05d\uae4c\uc9c0 \uc774\ub3d9\ud569\ub2c8\ub2e4. hash\ub97c \ub9cc\ub4e4\uba74\uc11c \uc774\ub3d9\ud558\uae30 \ub54c\ubb38\uc5d0 O(1)\ub9cc\uc5d0 \ubb38\uc790\uc5f4 \ube44\uad50\ub97c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\ub9cc, hash collision\uc774 \uc77c\uc5b4\ub0a0 \uc218 \uc788\uae30 \ub54c\ubb38\uc5d0 \uadf8 \uacbd\uc6b0\uc5d0\ub294 \ud655\uc778\uc744 \ud574\uc918\uc57c \ud569\ub2c8\ub2e4. \uac00\uc7a5 \ub2e8\uc21c\ud558\uac8c \ubb38\uc790\uc5f4\ub4e4\uc744 \ub354\ud55c \ud615\ud0dc\ub97c hash\ub85c \uc368\ub3c4 \ucda9\ubd84\ud788 \ube60\ub974\uace0 \uc131\ub2a5\uc774 \uc88b\uc558\uc2b5\ub2c8\ub2e4. C++ time(beats 20.19%), space(beats 20.30%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 class Solution { public : int strStr ( string haystack , string needle ) { int idx = -1 ; int haySize = haystack . size (); int needleSize = needle . size (); for ( int i = 0 ; i < haySize - needleSize + 1 ; ++ i ) { bool isFound = true ; for ( int j = i ; j < i + needleSize ; ++ j ) { if ( haystack [ j ] != needle [ j - i ]) { isFound = false ; break ; } } if ( isFound ) { idx = i ; return idx ; } } return idx ; } }; C++ \ub77c\ube48\uce74\ud504 \uc54c\uace0\ub9ac\uc998. time(beats 86.39%), space(beats 20.30%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class Solution { public : int strStr ( string haystack , string needle ) { int hayLen = haystack . size (); int needleLen = needle . size (); int mod = needleLen > 12 ? 4096 : ( 1 << needleLen ); if ( needle == \"\" ) return 0 ; if ( needleLen == 0 ) return -1 ; // base condition 1 if ( needleLen > hayLen ) return -1 ; // base condition 2 // calculate needleHash int needleHash = 0 ; for ( int i = 0 ; i < needleLen ; ++ i ) { needleHash = ( needleHash * 2 + needle [ i ]) % mod ; } //printf(\"needlehash: %d\\n\", needleHash); // search int hayHash = 0 ; for ( int i = 0 ; i < needleLen ; ++ i ) { hayHash = ( hayHash * 2 + haystack [ i ]) % mod ; } //printf(\"hayhash: %d\\n\", hayHash); if ( hayHash == needleHash ) { if ( check ( haystack , needle , 0 )) return 0 ; } for ( int i = 1 ; i < hayLen - needleLen + 1 ; ++ i ) { hayHash = ( hayHash * 2 + haystack [ i + needleLen -1 ]) % mod ; //printf(\"hayhash: %d\\n\", hayHash); if ( hayHash == needleHash ) { if ( check ( haystack , needle , i )) return i ; } } return -1 ; } bool check ( string & hay , string & needle , int hayIdx ) { for ( int i = 0 ; i < needle . size (); ++ i ) { if ( hay [ hayIdx + i ] != needle [ i ]) return false ; } return true ; } }; C++. solution. \uc880 \ub354 \ub2e8\uc21c\ud654\ub41c \ub77c\ube48\uce74\ud504 \ubc84\uc804. time(beats 100%), space(beats 23.30%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Solution { public : bool cmp ( string a , string b , int i ){ for ( int j = 0 ; j < b . size (); j ++ ){ if ( a [ i + j ] != b [ j ]){ return false ;} } return true ; } int strStr ( string haystack , string needle ) { int h_size = haystack . size (), n_size = needle . size (), h = 0 , n = 0 ; if ( h_size < n_size ){ return -1 ;} for ( int i = 0 ; i < n_size ; i ++ ){ h += haystack [ i ]; n += needle [ i ];} for ( int i = 0 ; i < h_size - n_size + 1 ; i ++ ){ if ( h == n and cmp ( haystack , needle , i )){ return i ;} if ( i < h_size - n_size ){ h += haystack [ i + n_size ] - haystack [ i ];} } return -1 ; } };","title":"1161 - Implement Strstr()"},{"location":"daily/2021-08-02/","text":"leet code 950 - sqrt C++. time(beats 100%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public : int mySqrt ( int x ) { if ( x <= 1 ) return x ; long left = 1 ; long right = x / 2 ; long target = 0 ; long mid = 0 ; while ( left <= right ) { mid = left + ( right - left ) / 2 ; target = mid * mid ; if ( target == x ) { return mid ; } else if ( target > x ) { right = mid -1 ; } else { left = mid + 1 ; } } return right ; } }; 951 - Guess Number Higher Or Lower C++. time(beats 100%), space(beats 68.42%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 /** * Forward declaration of guess API. * @param num your guess * @return -1 if num is lower than the guess number * 1 if num is higher than the guess number * otherwise return 0 * int guess(int num); */ class Solution { public : int guessNumber ( int n ) { if ( guess ( n ) == 0 ) return n ; int left = 1 ; int right = n ; int mid = 0 ; int g = 0 ; while ( left <= right ) { mid = left + ( right - left ) / 2 ; printf ( \"mid: %d \\n \" , mid ); g = guess ( mid ); if ( g == 0 ) return mid ; else if ( g < 0 ) { right = mid -1 ; } else { left = mid + 1 ; } } return left ; } };","title":"2021-08-02"},{"location":"daily/2021-08-02/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-08-02/#950-sqrt","text":"C++. time(beats 100%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Solution { public : int mySqrt ( int x ) { if ( x <= 1 ) return x ; long left = 1 ; long right = x / 2 ; long target = 0 ; long mid = 0 ; while ( left <= right ) { mid = left + ( right - left ) / 2 ; target = mid * mid ; if ( target == x ) { return mid ; } else if ( target > x ) { right = mid -1 ; } else { left = mid + 1 ; } } return right ; } };","title":"950 - sqrt"},{"location":"daily/2021-08-02/#951-guess-number-higher-or-lower","text":"C++. time(beats 100%), space(beats 68.42%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 /** * Forward declaration of guess API. * @param num your guess * @return -1 if num is lower than the guess number * 1 if num is higher than the guess number * otherwise return 0 * int guess(int num); */ class Solution { public : int guessNumber ( int n ) { if ( guess ( n ) == 0 ) return n ; int left = 1 ; int right = n ; int mid = 0 ; int g = 0 ; while ( left <= right ) { mid = left + ( right - left ) / 2 ; printf ( \"mid: %d \\n \" , mid ); g = guess ( mid ); if ( g == 0 ) return mid ; else if ( g < 0 ) { right = mid -1 ; } else { left = mid + 1 ; } } return left ; } };","title":"951 - Guess Number Higher Or Lower"},{"location":"daily/2021-08-03/","text":"leet code 1153 - Two Sum II - Input array is sorted binary search\ub97c \uc801\uc6a9\ud588\uc2b5\ub2c8\ub2e4. Two-pointer\ub97c \uc801\uc6a9\ud574\uc11c, \uc67c\ucabd\uc5d0\uc11c \uc2dc\uc791\ud558\ub294 \ud558\ub098, \uc624\ub978\ucabd\uc5d0\uc11c \uc2dc\uc791\ud558\ub294 \ud558\ub098\ub97c \ub450\uace0 \ub450 \uac1c\uac00 \uad50\ucc28\ud560 \ub54c \uae4c\uc9c0 \ud558\ub294 \uac8c \ub354 \uc88b\uc740 \uc54c\uace0\ub9ac\uc998\uc778 \ub4ef \ud569\ub2c8\ub2e4. C++. time(beats 89.48%), space(beats 43.74%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Solution { public : vector < int > twoSum ( vector < int >& numbers , int target ) { for ( int i = 0 ; i < numbers . size (); ++ i ) { int remained = target - numbers [ i ]; int left = i + 1 ; int right = numbers . size () -1 ; int mid = 0 ; while ( left + 1 < right ) { mid = left + ( right - left ) / 2 ; if ( numbers [ mid ] == remained ) { vector < int > result ; result . push_back ( i + 1 ); result . push_back ( mid + 1 ); return result ; } else if ( numbers [ mid ] > remained ) { right = mid ; } else { left = mid ; } } if ( remained == numbers [ right ]) { vector < int > result ; result . push_back ( i + 1 ); result . push_back ( right + 1 ); return result ; } if ( remained == numbers [ left ]) { vector < int > result ; result . push_back ( i + 1 ); result . push_back ( left + 1 ); return result ; } } vector < int > result ; result . push_back ( -1 ); result . push_back ( -1 ); return result ; } };","title":"2021-08-03"},{"location":"daily/2021-08-03/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-08-03/#1153-two-sum-ii-input-array-is-sorted","text":"binary search\ub97c \uc801\uc6a9\ud588\uc2b5\ub2c8\ub2e4. Two-pointer\ub97c \uc801\uc6a9\ud574\uc11c, \uc67c\ucabd\uc5d0\uc11c \uc2dc\uc791\ud558\ub294 \ud558\ub098, \uc624\ub978\ucabd\uc5d0\uc11c \uc2dc\uc791\ud558\ub294 \ud558\ub098\ub97c \ub450\uace0 \ub450 \uac1c\uac00 \uad50\ucc28\ud560 \ub54c \uae4c\uc9c0 \ud558\ub294 \uac8c \ub354 \uc88b\uc740 \uc54c\uace0\ub9ac\uc998\uc778 \ub4ef \ud569\ub2c8\ub2e4. C++. time(beats 89.48%), space(beats 43.74%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class Solution { public : vector < int > twoSum ( vector < int >& numbers , int target ) { for ( int i = 0 ; i < numbers . size (); ++ i ) { int remained = target - numbers [ i ]; int left = i + 1 ; int right = numbers . size () -1 ; int mid = 0 ; while ( left + 1 < right ) { mid = left + ( right - left ) / 2 ; if ( numbers [ mid ] == remained ) { vector < int > result ; result . push_back ( i + 1 ); result . push_back ( mid + 1 ); return result ; } else if ( numbers [ mid ] > remained ) { right = mid ; } else { left = mid ; } } if ( remained == numbers [ right ]) { vector < int > result ; result . push_back ( i + 1 ); result . push_back ( right + 1 ); return result ; } if ( remained == numbers [ left ]) { vector < int > result ; result . push_back ( i + 1 ); result . push_back ( left + 1 ); return result ; } } vector < int > result ; result . push_back ( -1 ); result . push_back ( -1 ); return result ; } };","title":"1153 - Two Sum II - Input array is sorted"},{"location":"daily/2021-08-05/","text":"leet code 1131 - Happy Number C++. time beats 0%, space beats 24.85% 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { public : bool isHappy ( int n ) { vector < int > a [ 10000 ]; while ( true ) { int nextN = calcHappy ( n ); if ( nextN == 1 ) return true ; if ( a [ nextN % 10000 ]. size ()) { bool result = true ; for ( int i = 0 ; i < a [ nextN % 10000 ]. size (); ++ i ) { if ( a [ nextN % 10000 ][ i ] == nextN ) { return false ; } } } a [ nextN % 10000 ]. push_back ( nextN ); n = nextN ; } } int calcHappy ( int n ) { int result = 0 ; while ( n ) { result += ( n % 10 ) * ( n % 10 ); n /= 10 ; } return result ; } };","title":"2021-08-05"},{"location":"daily/2021-08-05/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-08-05/#1131-happy-number","text":"C++. time beats 0%, space beats 24.85% 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 class Solution { public : bool isHappy ( int n ) { vector < int > a [ 10000 ]; while ( true ) { int nextN = calcHappy ( n ); if ( nextN == 1 ) return true ; if ( a [ nextN % 10000 ]. size ()) { bool result = true ; for ( int i = 0 ; i < a [ nextN % 10000 ]. size (); ++ i ) { if ( a [ nextN % 10000 ][ i ] == nextN ) { return false ; } } } a [ nextN % 10000 ]. push_back ( nextN ); n = nextN ; } } int calcHappy ( int n ) { int result = 0 ; while ( n ) { result += ( n % 10 ) * ( n % 10 ); n /= 10 ; } return result ; } };","title":"1131 - Happy Number"},{"location":"daily/2021-08-09/","text":"leet code 1117 - Isomorphic Strings string \uc548\uc5d0 \ub4e4\uc5b4\uc788\ub294 character\ub4e4\uc5d0 \uac01\uac01 \ucc98\uc74c \ub9cc\ub09c \uc21c\uc11c\ub300\ub85c 1, 2, 3 \uc22b\uc790\ub97c \ubd80\uc5ec\ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 vector array \ub97c \ud558\ub098 \ub9cc\ub4e4\uc5b4\uc11c, vector array\uc5d0 \ud574\ub2f9 \ubb38\uc790\ub4e4\uc774 \ubc1c\uc0dd\ud55c \uc778\ub371\uc2a4\ub4e4\uc744 \uae30\ub85d\ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub450 \uac1c\uc758 vector array\uac00 \uac19\uc73c\uba74 \uac19\uc740 \uac83\uc73c\ub85c \ud310\ub2e8\ud588\uc2b5\ub2c8\ub2e4. \uba54\ubaa8\ub9ac\ub97c \uc880 \ub9ce\uc774 \uc7a1\uc544\uba39\uc5c8\ub124\uc694 C++. time(beats 96.79%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Solution { public : bool isIsomorphic ( string s , string t ) { unordered_map < char , int > map1 ; unordered_map < char , int > map2 ; vector < int > varr1 [ 500 ]; vector < int > varr2 [ 500 ]; int cnt = 1 ; for ( int i = 0 ; i < s . size (); ++ i ) { int val1 = map1 [ s [ i ]]; if ( val1 == 0 ) { map1 [ s [ i ]] = cnt ++ ; } varr1 [ val1 ]. push_back ( i ); } cnt = 1 ; for ( int i = 0 ; i < t . size (); ++ i ) { int val2 = map2 [ t [ i ]]; if ( val2 == 0 ) { map2 [ t [ i ]] = cnt ++ ; } varr2 [ val2 ]. push_back ( i ); } bool result = true ; for ( int i = 0 ; i < 500 ; ++ i ) { if ( varr1 [ i ]. size () != varr2 [ i ]. size ()) return false ; for ( int j = 0 ; j < varr1 [ i ]. size (); ++ j ) { if ( varr1 [ i ][ j ] != varr2 [ i ][ j ]) { result = false ; break ; } } if ( ! result ) break ; } return result ; } };","title":"2021-08-09"},{"location":"daily/2021-08-09/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-08-09/#1117-isomorphic-strings","text":"string \uc548\uc5d0 \ub4e4\uc5b4\uc788\ub294 character\ub4e4\uc5d0 \uac01\uac01 \ucc98\uc74c \ub9cc\ub09c \uc21c\uc11c\ub300\ub85c 1, 2, 3 \uc22b\uc790\ub97c \ubd80\uc5ec\ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 vector array \ub97c \ud558\ub098 \ub9cc\ub4e4\uc5b4\uc11c, vector array\uc5d0 \ud574\ub2f9 \ubb38\uc790\ub4e4\uc774 \ubc1c\uc0dd\ud55c \uc778\ub371\uc2a4\ub4e4\uc744 \uae30\ub85d\ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub450 \uac1c\uc758 vector array\uac00 \uac19\uc73c\uba74 \uac19\uc740 \uac83\uc73c\ub85c \ud310\ub2e8\ud588\uc2b5\ub2c8\ub2e4. \uba54\ubaa8\ub9ac\ub97c \uc880 \ub9ce\uc774 \uc7a1\uc544\uba39\uc5c8\ub124\uc694 C++. time(beats 96.79%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 class Solution { public : bool isIsomorphic ( string s , string t ) { unordered_map < char , int > map1 ; unordered_map < char , int > map2 ; vector < int > varr1 [ 500 ]; vector < int > varr2 [ 500 ]; int cnt = 1 ; for ( int i = 0 ; i < s . size (); ++ i ) { int val1 = map1 [ s [ i ]]; if ( val1 == 0 ) { map1 [ s [ i ]] = cnt ++ ; } varr1 [ val1 ]. push_back ( i ); } cnt = 1 ; for ( int i = 0 ; i < t . size (); ++ i ) { int val2 = map2 [ t [ i ]]; if ( val2 == 0 ) { map2 [ t [ i ]] = cnt ++ ; } varr2 [ val2 ]. push_back ( i ); } bool result = true ; for ( int i = 0 ; i < 500 ; ++ i ) { if ( varr1 [ i ]. size () != varr2 [ i ]. size ()) return false ; for ( int j = 0 ; j < varr1 [ i ]. size (); ++ j ) { if ( varr1 [ i ][ j ] != varr2 [ i ][ j ]) { result = false ; break ; } } if ( ! result ) break ; } return result ; } };","title":"1117 - Isomorphic Strings"},{"location":"daily/2021-08-11/","text":"leet code 1168 - Spiral Matrix \uc798 \uc548\ud480\ub824\uc11c \uc194\ub8e8\uc158\uc744 \ubcf4\uace0 \ud480\uc5c8\uc2b5\ub2c8\ub2e4. \ub2e4\uc2dc \ud480\uc5b4\ubcf4\uae30..!! C++. time(beats 100%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public : vector < int > spiralOrder ( vector < vector < int >>& matrix ) { vector < int > result ; if ( matrix . size () == 0 ) return result ; int R = matrix . size (); int C = matrix [ 0 ]. size (); vector < vector < bool >> seen ( R , vector < bool > ( C )); int dr [] = { 0 , 1 , 0 , -1 }; int dc [] = { 1 , 0 , -1 , 0 }; int r = 0 , c = 0 , di = 0 ; for ( int i = 0 ; i < R * C ; i ++ ) { result . push_back ( matrix [ r ][ c ]); seen [ r ][ c ] = true ; int cr = r + dr [ di ]; int cc = c + dc [ di ]; if ( 0 <= cr && cr < R && 0 <= cc && cc < C && ! seen [ cr ][ cc ]){ r = cr ; c = cc ; } else { di = ( di + 1 ) % 4 ; r += dr [ di ]; c += dc [ di ]; } } return result ; } };","title":"2021-08-11"},{"location":"daily/2021-08-11/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-08-11/#1168-spiral-matrix","text":"\uc798 \uc548\ud480\ub824\uc11c \uc194\ub8e8\uc158\uc744 \ubcf4\uace0 \ud480\uc5c8\uc2b5\ub2c8\ub2e4. \ub2e4\uc2dc \ud480\uc5b4\ubcf4\uae30..!! C++. time(beats 100%), space(beats 0%) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 class Solution { public : vector < int > spiralOrder ( vector < vector < int >>& matrix ) { vector < int > result ; if ( matrix . size () == 0 ) return result ; int R = matrix . size (); int C = matrix [ 0 ]. size (); vector < vector < bool >> seen ( R , vector < bool > ( C )); int dr [] = { 0 , 1 , 0 , -1 }; int dc [] = { 1 , 0 , -1 , 0 }; int r = 0 , c = 0 , di = 0 ; for ( int i = 0 ; i < R * C ; i ++ ) { result . push_back ( matrix [ r ][ c ]); seen [ r ][ c ] = true ; int cr = r + dr [ di ]; int cc = c + dc [ di ]; if ( 0 <= cr && cr < R && 0 <= cc && cc < C && ! seen [ cr ][ cc ]){ r = cr ; c = cc ; } else { di = ( di + 1 ) % 4 ; r += dr [ di ]; c += dc [ di ]; } } return result ; } };","title":"1168 - Spiral Matrix"},{"location":"daily/2021-08-25/","text":"","title":"2021-08-25"},{"location":"daily/2021-09-04/","text":"Algorithm challenges After work, I recently solved some computer algorithm problems I passed facebook hackercup qualification round and Google foobar challenge level3. I think that fast and dirty solving method is good starting point. And writing something down to the paper makes the problem more clear.","title":"2021-09-04"},{"location":"daily/2021-09-04/#algorithm-challenges","text":"After work, I recently solved some computer algorithm problems I passed facebook hackercup qualification round and Google foobar challenge level3. I think that fast and dirty solving method is good starting point. And writing something down to the paper makes the problem more clear.","title":"Algorithm challenges"},{"location":"daily/2021-10-03/","text":"leet code palindrome-numbers very easy.. ===\"c++(time faster than 40.63%, memory less than 8.38%)\" ```c++ class Solution { public: bool isPalindrome(int x) { if(x<0) return false; vector aa; while(x) { aa.push_back(x%10); x /= 10; } 1 2 3 4 5 6 7 8 9 10 11 int lenAa = aa.size(); for(int i=0; i<lenAa/2; ++i) { if(aa[i]!=aa[lenAa-1-i]) { return false; } } return true; } }; ```","title":"2021-10-03"},{"location":"daily/2021-10-03/#leet-code-palindrome-numbers","text":"very easy.. ===\"c++(time faster than 40.63%, memory less than 8.38%)\" ```c++ class Solution { public: bool isPalindrome(int x) { if(x<0) return false; vector aa; while(x) { aa.push_back(x%10); x /= 10; } 1 2 3 4 5 6 7 8 9 10 11 int lenAa = aa.size(); for(int i=0; i<lenAa/2; ++i) { if(aa[i]!=aa[lenAa-1-i]) { return false; } } return true; } }; ```","title":"leet code palindrome-numbers"},{"location":"daily/2021-10-04/","text":"\ubc31\uc900 1067 - \uc774\ub3d9 FFT\ub97c \uc4f0\ub294 \uc54c\uace0\ub9ac\uc998\uc774\ub77c\uc11c \uc2dc\ub3c4\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. Fourier series => Fourier Transform => DFT => FFT \uc21c\uc73c\ub85c \uc774\ud574 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import sys import math sys . stdin = open ( \"1067_input.txt\" , \"rt\" ) N = int ( input ()) As = list ( map ( int , input () . split ())) Bs = list ( map ( int , input () . split ())) def DFT ( N , arr ): ret = [ 0 ] * N for k in range ( N ): for n in range ( N ): tmp_val = - 2 * math . pi * k * n / N ret [ k ] += arr [ n ] * ( math . cos ( tmp_val ) + 1 j * math . sin ( tmp_val )) return ret def IDFT ( N , arr ): ret = [ 0 ] * N for k in range ( N ): for n in range ( N ): tmp_val = 2 * math . pi * k * n / N ret [ k ] += arr [ n ] * ( math . cos ( tmp_val ) + 1 j * math . sin ( tmp_val )) ret [ k ] /= N return ret def magnitude ( arr ): return list ( map ( lambda x : ( x . real ** 2 + x . imag ** 2 ) ** 0.5 , arr )) As = DFT ( N , As ) Bs = DFT ( N , Bs ) Cs = [] for i in range ( N ): Cs . append ( As [ i ] * Bs [ i ]) Cs = IDFT ( N , Cs ) list ( map ( lambda x : x . real , Cs ))","title":"2021-10-04"},{"location":"daily/2021-10-04/#1067-","text":"FFT\ub97c \uc4f0\ub294 \uc54c\uace0\ub9ac\uc998\uc774\ub77c\uc11c \uc2dc\ub3c4\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. Fourier series => Fourier Transform => DFT => FFT \uc21c\uc73c\ub85c \uc774\ud574 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 import sys import math sys . stdin = open ( \"1067_input.txt\" , \"rt\" ) N = int ( input ()) As = list ( map ( int , input () . split ())) Bs = list ( map ( int , input () . split ())) def DFT ( N , arr ): ret = [ 0 ] * N for k in range ( N ): for n in range ( N ): tmp_val = - 2 * math . pi * k * n / N ret [ k ] += arr [ n ] * ( math . cos ( tmp_val ) + 1 j * math . sin ( tmp_val )) return ret def IDFT ( N , arr ): ret = [ 0 ] * N for k in range ( N ): for n in range ( N ): tmp_val = 2 * math . pi * k * n / N ret [ k ] += arr [ n ] * ( math . cos ( tmp_val ) + 1 j * math . sin ( tmp_val )) ret [ k ] /= N return ret def magnitude ( arr ): return list ( map ( lambda x : ( x . real ** 2 + x . imag ** 2 ) ** 0.5 , arr )) As = DFT ( N , As ) Bs = DFT ( N , Bs ) Cs = [] for i in range ( N ): Cs . append ( As [ i ] * Bs [ i ]) Cs = IDFT ( N , Cs ) list ( map ( lambda x : x . real , Cs ))","title":"\ubc31\uc900 1067 - \uc774\ub3d9"},{"location":"daily/2021-10-10/","text":"atcoder atcoder beginner contest 222\uac00 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. atcoder\uac00 \ubb38\uc81c \ub09c\uc774\ub3c4\uac00 \uaf64 \ucd08\ubcf4\uc778 \uc800\uc5d0\uac8c \uc801\ud569\ud588\uae30 \ub54c\ubb38\uc5d0, atcoder\ub97c \ud480\uba74\uc11c codeforce ranking\uc744 \uc62c\ub9ac\ub824\uace0 \ud569\ub2c8\ub2e4. D\ubc88 DP\ubb38\uc81c\uc5d0\uc11c\ub294 python\uc73c\ub85c \ube44\uc2b7\ud558\uac8c \ud480\ub354\ub77c\ub3c4 \uc18d\ub3c4\uac00 \ub098\uc9c0 \uc54a\uc544\uc11c \uc54c\uace0\ub9ac\uc998\uc6a9\uc73c\ub85c\ub294 python\uc774 \uc88b\uc740 \uc5b8\uc5b4\uac00 \uc544\ub2c8\ub77c\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4. \ubb38\uc81c A \ubb38\uc81c B \ubb38\uc81c C \ubb38\uc81c D","title":"2021-10-10"},{"location":"daily/2021-10-10/#atcoder","text":"atcoder beginner contest 222\uac00 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. atcoder\uac00 \ubb38\uc81c \ub09c\uc774\ub3c4\uac00 \uaf64 \ucd08\ubcf4\uc778 \uc800\uc5d0\uac8c \uc801\ud569\ud588\uae30 \ub54c\ubb38\uc5d0, atcoder\ub97c \ud480\uba74\uc11c codeforce ranking\uc744 \uc62c\ub9ac\ub824\uace0 \ud569\ub2c8\ub2e4. D\ubc88 DP\ubb38\uc81c\uc5d0\uc11c\ub294 python\uc73c\ub85c \ube44\uc2b7\ud558\uac8c \ud480\ub354\ub77c\ub3c4 \uc18d\ub3c4\uac00 \ub098\uc9c0 \uc54a\uc544\uc11c \uc54c\uace0\ub9ac\uc998\uc6a9\uc73c\ub85c\ub294 python\uc774 \uc88b\uc740 \uc5b8\uc5b4\uac00 \uc544\ub2c8\ub77c\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4. \ubb38\uc81c A \ubb38\uc81c B \ubb38\uc81c C \ubb38\uc81c D","title":"atcoder"},{"location":"daily/2021-10-15/","text":"leet code 3868 - Course Schedule II khan topological sort overall poor implementation C++ time beats 12.93%, space beats 15.04% 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 #include <algorithm> #include <vector> using namespace std ; class Solution { public : vector < int > findOrder ( int numCourses , vector < vector < int >>& prerequisites ) { // construct graph vector < vector < int >> graph ; vector < vector < int >> graphInv ; for ( int i = 0 ; i < numCourses ; ++ i ) { graph . push_back ( vector < int > {}); graphInv . push_back ( vector < int > {}); } for ( int i = 0 ; i < prerequisites . size (); ++ i ) { vector < int > curRelation = prerequisites [ i ]; graph [ curRelation [ 1 ]]. push_back ( curRelation [ 0 ]); graphInv [ curRelation [ 0 ]]. push_back ( curRelation [ 1 ]); } queue < int > q ; vector < int > result ; // find the first nodes for ( int i = 0 ; i < numCourses ; ++ i ) { if ( graphInv [ i ]. size () == 0 ) { q . push ( i ); } } // loop while ( ! q . empty ()) { int curIdx = q . front (); q . pop (); int isVisited = false ; for ( int i = 0 ; i < result . size (); ++ i ) { if ( result [ i ] == curIdx ) { isVisited = true ; break ; } } if ( graphInv [ curIdx ]. size () == 0 && ! isVisited ) // indegree == 0 { // break the connections for ( int i = 0 ; i < graph [ curIdx ]. size (); ++ i ) { int deletedIdx = graph [ curIdx ][ i ]; graphInv [ deletedIdx ]. erase ( remove ( graphInv [ deletedIdx ]. begin (), graphInv [ deletedIdx ]. end (), curIdx ), graphInv [ deletedIdx ]. end ()); q . push ( deletedIdx ); } graph [ curIdx ]. clear (); // insert into result result . push_back ( curIdx ); } } if ( result . size () == numCourses ) { return result ; } else { return vector < int > {}; } } };","title":"2021-10-15"},{"location":"daily/2021-10-15/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-10-15/#3868-course-schedule-ii","text":"khan topological sort overall poor implementation C++ time beats 12.93%, space beats 15.04% 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 #include <algorithm> #include <vector> using namespace std ; class Solution { public : vector < int > findOrder ( int numCourses , vector < vector < int >>& prerequisites ) { // construct graph vector < vector < int >> graph ; vector < vector < int >> graphInv ; for ( int i = 0 ; i < numCourses ; ++ i ) { graph . push_back ( vector < int > {}); graphInv . push_back ( vector < int > {}); } for ( int i = 0 ; i < prerequisites . size (); ++ i ) { vector < int > curRelation = prerequisites [ i ]; graph [ curRelation [ 1 ]]. push_back ( curRelation [ 0 ]); graphInv [ curRelation [ 0 ]]. push_back ( curRelation [ 1 ]); } queue < int > q ; vector < int > result ; // find the first nodes for ( int i = 0 ; i < numCourses ; ++ i ) { if ( graphInv [ i ]. size () == 0 ) { q . push ( i ); } } // loop while ( ! q . empty ()) { int curIdx = q . front (); q . pop (); int isVisited = false ; for ( int i = 0 ; i < result . size (); ++ i ) { if ( result [ i ] == curIdx ) { isVisited = true ; break ; } } if ( graphInv [ curIdx ]. size () == 0 && ! isVisited ) // indegree == 0 { // break the connections for ( int i = 0 ; i < graph [ curIdx ]. size (); ++ i ) { int deletedIdx = graph [ curIdx ][ i ]; graphInv [ deletedIdx ]. erase ( remove ( graphInv [ deletedIdx ]. begin (), graphInv [ deletedIdx ]. end (), curIdx ), graphInv [ deletedIdx ]. end ()); q . push ( deletedIdx ); } graph [ curIdx ]. clear (); // insert into result result . push_back ( curIdx ); } } if ( result . size () == numCourses ) { return result ; } else { return vector < int > {}; } } };","title":"3868 - Course Schedule II"},{"location":"daily/2021-10-16/","text":"leet code 3868 - Course Schedule II topological sorting using khan's method Improved implementation C++. time beats78.82%, space beats 30.03% 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 #include <algorithm> #include <vector> using namespace std ; class Solution { public : vector < int > findOrder ( int numCourses , vector < vector < int >>& prerequisites ) { // construct graph vector < vector < int >> graph ; vector < int > numIndegree ( numCourses , 0 ); for ( int i = 0 ; i < numCourses ; ++ i ) { graph . push_back ( vector < int > {}); } for ( int i = 0 ; i < prerequisites . size (); ++ i ) { vector < int > curRelation = prerequisites [ i ]; graph [ curRelation [ 1 ]]. push_back ( curRelation [ 0 ]); numIndegree [ curRelation [ 0 ]] ++ ; } queue < int > q ; vector < int > result ; unordered_map < int , bool > map ; // find the first nodes for ( int i = 0 ; i < numCourses ; ++ i ) { if ( ! numIndegree [ i ]) { q . push ( i ); } } // loop while ( ! q . empty ()) { int curIdx = q . front (); q . pop (); if ( map . find ( curIdx ) != map . end ()) continue ; if ( numIndegree [ curIdx ] == 0 ) // indegree == 0 { // break the connections for ( int i = 0 ; i < graph [ curIdx ]. size (); ++ i ) { int deletedIdx = graph [ curIdx ][ i ]; numIndegree [ deletedIdx ] -- ; q . push ( deletedIdx ); } graph [ curIdx ]. clear (); // insert into result result . push_back ( curIdx ); map . insert ( make_pair ( curIdx , true )); } } if ( result . size () == numCourses ) { return result ; } else { return vector < int > {}; } } };","title":"leet code"},{"location":"daily/2021-10-16/#leet-code","text":"","title":"leet code"},{"location":"daily/2021-10-16/#3868-course-schedule-ii","text":"topological sorting using khan's method Improved implementation C++. time beats78.82%, space beats 30.03% 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 #include <algorithm> #include <vector> using namespace std ; class Solution { public : vector < int > findOrder ( int numCourses , vector < vector < int >>& prerequisites ) { // construct graph vector < vector < int >> graph ; vector < int > numIndegree ( numCourses , 0 ); for ( int i = 0 ; i < numCourses ; ++ i ) { graph . push_back ( vector < int > {}); } for ( int i = 0 ; i < prerequisites . size (); ++ i ) { vector < int > curRelation = prerequisites [ i ]; graph [ curRelation [ 1 ]]. push_back ( curRelation [ 0 ]); numIndegree [ curRelation [ 0 ]] ++ ; } queue < int > q ; vector < int > result ; unordered_map < int , bool > map ; // find the first nodes for ( int i = 0 ; i < numCourses ; ++ i ) { if ( ! numIndegree [ i ]) { q . push ( i ); } } // loop while ( ! q . empty ()) { int curIdx = q . front (); q . pop (); if ( map . find ( curIdx ) != map . end ()) continue ; if ( numIndegree [ curIdx ] == 0 ) // indegree == 0 { // break the connections for ( int i = 0 ; i < graph [ curIdx ]. size (); ++ i ) { int deletedIdx = graph [ curIdx ][ i ]; numIndegree [ deletedIdx ] -- ; q . push ( deletedIdx ); } graph [ curIdx ]. clear (); // insert into result result . push_back ( curIdx ); map . insert ( make_pair ( curIdx , true )); } } if ( result . size () == numCourses ) { return result ; } else { return vector < int > {}; } } };","title":"3868 - Course Schedule II"},{"location":"daily/2021-10-31/","text":"atcoder abc224 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 # 5 # 1 2 # 1 3 # 1 9 # 2 9 # 3 9 # 3 9 2 4 5 6 7 8 from collections import defaultdict # 1. struct graph # 2. find empty space # 3. do dp graph = defaultdict ( list ) visited = defaultdict ( int ) cnt = 1 N = int ( input ()) # struct graph for i in range ( N ): a , b = map ( int , input () . split ()) graph [ a ] . append ( b ) graph [ b ] . append ( a ) pieces = list ( map ( int , input () . split ())) # find empty space cur = list ( set ( range ( 1 , 10 )) - set ( pieces ))[ 0 ] pieces . append ( cur ) pieces = list ( map ( str , pieces )) if pieces == sorted ( pieces ): print ( 0 ) exit () # do dp q = [ \"\" . join ( pieces )] while q : len_q = len ( q ) is_finished = False for j in range ( len_q ): cur = q . pop ( 0 ) if visited . get ( cur ): continue visited [ cur ] = cnt for i in graph [ cur [ 0 ]]: next_pieces = list ( cur [ 1 ][:]) next_cur = i next_pieces [ next_pieces . index ( i )] = cur [ 0 ] if next_pieces == sorted ( next_pieces ): print ( cnt ) is_finished = True break q . append (( next_cur , tuple ( next_pieces ))) if is_finished : break if is_finished : break cnt += 1 if not is_finished : print ( - 1 )","title":"2021-10-31"},{"location":"daily/2021-10-31/#atcoder-abc224","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 # 5 # 1 2 # 1 3 # 1 9 # 2 9 # 3 9 # 3 9 2 4 5 6 7 8 from collections import defaultdict # 1. struct graph # 2. find empty space # 3. do dp graph = defaultdict ( list ) visited = defaultdict ( int ) cnt = 1 N = int ( input ()) # struct graph for i in range ( N ): a , b = map ( int , input () . split ()) graph [ a ] . append ( b ) graph [ b ] . append ( a ) pieces = list ( map ( int , input () . split ())) # find empty space cur = list ( set ( range ( 1 , 10 )) - set ( pieces ))[ 0 ] pieces . append ( cur ) pieces = list ( map ( str , pieces )) if pieces == sorted ( pieces ): print ( 0 ) exit () # do dp q = [ \"\" . join ( pieces )] while q : len_q = len ( q ) is_finished = False for j in range ( len_q ): cur = q . pop ( 0 ) if visited . get ( cur ): continue visited [ cur ] = cnt for i in graph [ cur [ 0 ]]: next_pieces = list ( cur [ 1 ][:]) next_cur = i next_pieces [ next_pieces . index ( i )] = cur [ 0 ] if next_pieces == sorted ( next_pieces ): print ( cnt ) is_finished = True break q . append (( next_cur , tuple ( next_pieces ))) if is_finished : break if is_finished : break cnt += 1 if not is_finished : print ( - 1 )","title":"atcoder abc224"},{"location":"honeytip/donaricano/","text":"\ube14\ub85c\uadf8\uc5d0 \ud6c4\uc6d0 \ubc84\ud2bc \ub2ec\uae30(\ub3c4\ub124\ub9ac\uce74\ub178) \uc678\uad6d \uac1c\ubc1c\uc790\ub4e4 \uc0ac\uc774\ud2b8\ub4e4\uc744 \uac04\ud639 \ub3cc\uc544\ub2e4\ub2c8\ub2e4 \ubcf4\uba74, \uc774\ub7f0 \ubc84\ud2bc\uc744 \ubcf4\uc2e4 \uc218\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ubb54\uac00 \ud799\uc2a4\ud130 \uac19\uc544\uc11c \uc800\ub3c4 \ub2ec\uc544\ubcf4\ub824\uace0 \ud588\uc9c0\ub9cc, \uc870\uae08 \ucc3e\uc544\ubcf4\ub2c8 \uad6d\ub0b4\uc5d0\ub294 \uacc4\uc88c \uc5f0\ub3d9\uc774 \uc548 \ub41c\ub2e4\uace0 \ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \ucc3e\uc740 \uac83\uc774 \uc6b0\ub9ac\ub098\ub77c\uc5d0\ub294 \ub3c4\ub124\ub9ac\uce74\ub178 \ub77c\ub294 \uac83\uc774 \uc788\ub2e4\uace0 \ud569\ub2c8\ub2e4. \uce74\uce74\uc624 \ud398\uc774\ub97c \uc774\uc6a9\ud574\uc11c \uc27d\uac8c 5\ubd84 \uc815\ub3c4\ub9cc\uc5d0 \uc5f0\ub3d9\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \ub3c4\ub124\ub9ac\uce74\ub178 \uc0ac\uc774\ud2b8 \ub9c1\ud06c https://donaricano.com/","title":"\ud6c4\uc6d0 \ubc1b\uae30(\ub3c4\ub124\ub9ac\uce74\ub178)"},{"location":"honeytip/donaricano/#_1","text":"\uc678\uad6d \uac1c\ubc1c\uc790\ub4e4 \uc0ac\uc774\ud2b8\ub4e4\uc744 \uac04\ud639 \ub3cc\uc544\ub2e4\ub2c8\ub2e4 \ubcf4\uba74, \uc774\ub7f0 \ubc84\ud2bc\uc744 \ubcf4\uc2e4 \uc218\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ubb54\uac00 \ud799\uc2a4\ud130 \uac19\uc544\uc11c \uc800\ub3c4 \ub2ec\uc544\ubcf4\ub824\uace0 \ud588\uc9c0\ub9cc, \uc870\uae08 \ucc3e\uc544\ubcf4\ub2c8 \uad6d\ub0b4\uc5d0\ub294 \uacc4\uc88c \uc5f0\ub3d9\uc774 \uc548 \ub41c\ub2e4\uace0 \ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \ucc3e\uc740 \uac83\uc774 \uc6b0\ub9ac\ub098\ub77c\uc5d0\ub294 \ub3c4\ub124\ub9ac\uce74\ub178 \ub77c\ub294 \uac83\uc774 \uc788\ub2e4\uace0 \ud569\ub2c8\ub2e4. \uce74\uce74\uc624 \ud398\uc774\ub97c \uc774\uc6a9\ud574\uc11c \uc27d\uac8c 5\ubd84 \uc815\ub3c4\ub9cc\uc5d0 \uc5f0\ub3d9\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \ub3c4\ub124\ub9ac\uce74\ub178 \uc0ac\uc774\ud2b8 \ub9c1\ud06c https://donaricano.com/","title":"\ube14\ub85c\uadf8\uc5d0 \ud6c4\uc6d0 \ubc84\ud2bc \ub2ec\uae30(\ub3c4\ub124\ub9ac\uce74\ub178)"},{"location":"honeytip/fira-font/","text":"fira font fira font\ub294 \uc544\ub798\uc640 \uac19\uc740 \ud2b9\uc218 \uae30\ud638\ub4e4\uc744 \uc801\uc6a9\ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4. \uac1c\uc778\uc801\uc73c\ub85c vscode\uc758 \uae30\ubcf8 \ud3f0\ud2b8\uac00 \uc870\uae08 \ub354 \uc774\uc05c \uac83 \uac19\uae34 \ud55c\ub370, \ud2b9\uc218 \uae30\ud638\ub4e4\uc774 \uc608\uc05c \uac83 \uac19\uae34 \ud55c\ub370, \ud2b9\uc218 \uae30\ud638\uac00 \uae54\ub054\ud558\uac8c \ubcf4\uc774\ub294 \uac8c \uc88b\uc544\uc11c \uc801\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \ub9c1\ud06c: https://github.com/tonsky/FiraCode \uc124\uce58 \uc21c\uc11c\ub294 OS\uc5d0 \ud3f0\ud2b8\ub97c \uba3c\uc800 \uc124\uce58\ud55c \ud6c4, vscode\uc5d0\uc11c ctrl + , \uc744 \ub20c\ub7ec\uc11c preference\uc5d0 \ub4e4\uc5b4\uac00\uc11c settings.json\uc5d0 \uc544\ub798\uc758 \ucf54\ub4dc \ub450 \uc904\uc744 \uc801\uc5b4 \ub193\uc73c\uba74 \ub429\ub2c8\ub2e4. \uc800\ub294 \"editor.fontLigatures\": null \uc774 \uc788\uc5b4\uc11c \uc8fc\uc11d\ucc98\ub9ac \ud588\uc2b5\ub2c8\ub2e4. 1 2 \"editor.fontFamily\" : \"Fira Code\" , \"editor.fontLigatures\" : true ,","title":"vscode\uc5d0 fira font \uc801\uc6a9"},{"location":"honeytip/fira-font/#fira-font","text":"fira font\ub294 \uc544\ub798\uc640 \uac19\uc740 \ud2b9\uc218 \uae30\ud638\ub4e4\uc744 \uc801\uc6a9\ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4. \uac1c\uc778\uc801\uc73c\ub85c vscode\uc758 \uae30\ubcf8 \ud3f0\ud2b8\uac00 \uc870\uae08 \ub354 \uc774\uc05c \uac83 \uac19\uae34 \ud55c\ub370, \ud2b9\uc218 \uae30\ud638\ub4e4\uc774 \uc608\uc05c \uac83 \uac19\uae34 \ud55c\ub370, \ud2b9\uc218 \uae30\ud638\uac00 \uae54\ub054\ud558\uac8c \ubcf4\uc774\ub294 \uac8c \uc88b\uc544\uc11c \uc801\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \ub9c1\ud06c: https://github.com/tonsky/FiraCode \uc124\uce58 \uc21c\uc11c\ub294 OS\uc5d0 \ud3f0\ud2b8\ub97c \uba3c\uc800 \uc124\uce58\ud55c \ud6c4, vscode\uc5d0\uc11c ctrl + , \uc744 \ub20c\ub7ec\uc11c preference\uc5d0 \ub4e4\uc5b4\uac00\uc11c settings.json\uc5d0 \uc544\ub798\uc758 \ucf54\ub4dc \ub450 \uc904\uc744 \uc801\uc5b4 \ub193\uc73c\uba74 \ub429\ub2c8\ub2e4. \uc800\ub294 \"editor.fontLigatures\": null \uc774 \uc788\uc5b4\uc11c \uc8fc\uc11d\ucc98\ub9ac \ud588\uc2b5\ub2c8\ub2e4. 1 2 \"editor.fontFamily\" : \"Fira Code\" , \"editor.fontLigatures\" : true ,","title":"fira font"},{"location":"honeytip/github-multiuser-one-pc/","text":"\ud55c \ucef4\ud4e8\ud130\uc5d0\uc11c \uc5ec\ub7ec \uac1c\uc758 github \uacc4\uc815\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95 1. github \uacc4\uc815 \uc811\uadfc \uad8c\ud55c \ud68c\uc0ac\ub97c \ub2e4\ub2c8\uc2dc\ub294 \ubd84\ub4e4\uc740 \uac1c\uc778 \uacc4\uc815\uacfc \ud68c\uc0ac \uacc4\uc815\uc744 \ud63c\ud569\ud574\uc11c \uc0ac\uc6a9\ud558\uace0 \uacc4\uc2e0 \ubd84\ub4e4\uc774 \ub9ce\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc81c\uac00 \ucc3e\uc740 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. ssh-keygen \uba85\ub839\uc5b4\ub85c \uac1c\uc778 \ud0a4 \uc0dd\uc131(\uc774 \ub54c comment \ub85c github\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 email \uc8fc\uc18c\uac00 \uc788\uc5b4\uc57c \ud568) github\uc5d0\uc11c \uacc4\uc815\uc758 settings -> ssh and gpg -> ssh \uacf5\uac1c \ud0a4 \ub4f1\ub85d ~/.ssh \ud3f4\ub354\uc5d0\uc11c config \ud30c\uc77c \uc0dd\uc131 \ud68c\uc0ac \ubc0f \uac1c\uc778 \uacc4\uc815\uc5d0 \ub300\ud574\uc11c \ub2e4\ub978 hostname \uc9c0\uc815 \uac01 local\uc758 git \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c .git \ud3f4\ub354\ub85c \uc9c4\uc785. remote \ubd80\ubd84\uc5d0\uc11c git@github.com \uc774 \ubd80\ubd84\uc744 git@<4\ubc88\uc5d0\uc11c \uc124\uc815\ud55c hostname> \uc774\ub7f0 \uc2dd\uc73c\ub85c \ubcc0\uacbd https://zzpanqing.github.io/2017/02/28/github-push-without-username-and-password.html https://mygumi.tistory.com/96 2. local\uc758 github \uacc4\uc815 \uc815\ubcf4 \ubcc0\uacbd \uc704\uc758 \uc815\ubcf4\ub4e4\ub85c \ubcc0\uacbd\ud558\uba74 github\uc5d0 \uc5c5\ub85c\ub4dc\ub294 \ub418\uc9c0\ub9cc, \ub2e4\ub978 \uacc4\uc815 \uc774\ub984\uc73c\ub85c \uc62c\ub77c\uac00\uac8c \ub418\uba74 github\uc5d0 \uc794\ub514\uac00 \uc548 \ucc0d\ud799\ub2c8\ub2e4... 1 2 3 4 5 6 git config --unset-all user.name git config --unset-all user.email # global git config --unset-all --global user.name git config --unset-all --global user.email","title":"github multi-user"},{"location":"honeytip/github-multiuser-one-pc/#github","text":"","title":"\ud55c \ucef4\ud4e8\ud130\uc5d0\uc11c \uc5ec\ub7ec \uac1c\uc758 github \uacc4\uc815\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95"},{"location":"honeytip/github-multiuser-one-pc/#1-github","text":"\ud68c\uc0ac\ub97c \ub2e4\ub2c8\uc2dc\ub294 \ubd84\ub4e4\uc740 \uac1c\uc778 \uacc4\uc815\uacfc \ud68c\uc0ac \uacc4\uc815\uc744 \ud63c\ud569\ud574\uc11c \uc0ac\uc6a9\ud558\uace0 \uacc4\uc2e0 \ubd84\ub4e4\uc774 \ub9ce\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc81c\uac00 \ucc3e\uc740 \ubc29\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. ssh-keygen \uba85\ub839\uc5b4\ub85c \uac1c\uc778 \ud0a4 \uc0dd\uc131(\uc774 \ub54c comment \ub85c github\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 email \uc8fc\uc18c\uac00 \uc788\uc5b4\uc57c \ud568) github\uc5d0\uc11c \uacc4\uc815\uc758 settings -> ssh and gpg -> ssh \uacf5\uac1c \ud0a4 \ub4f1\ub85d ~/.ssh \ud3f4\ub354\uc5d0\uc11c config \ud30c\uc77c \uc0dd\uc131 \ud68c\uc0ac \ubc0f \uac1c\uc778 \uacc4\uc815\uc5d0 \ub300\ud574\uc11c \ub2e4\ub978 hostname \uc9c0\uc815 \uac01 local\uc758 git \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c .git \ud3f4\ub354\ub85c \uc9c4\uc785. remote \ubd80\ubd84\uc5d0\uc11c git@github.com \uc774 \ubd80\ubd84\uc744 git@<4\ubc88\uc5d0\uc11c \uc124\uc815\ud55c hostname> \uc774\ub7f0 \uc2dd\uc73c\ub85c \ubcc0\uacbd https://zzpanqing.github.io/2017/02/28/github-push-without-username-and-password.html https://mygumi.tistory.com/96","title":"1. github \uacc4\uc815 \uc811\uadfc \uad8c\ud55c"},{"location":"honeytip/github-multiuser-one-pc/#2-local-github","text":"\uc704\uc758 \uc815\ubcf4\ub4e4\ub85c \ubcc0\uacbd\ud558\uba74 github\uc5d0 \uc5c5\ub85c\ub4dc\ub294 \ub418\uc9c0\ub9cc, \ub2e4\ub978 \uacc4\uc815 \uc774\ub984\uc73c\ub85c \uc62c\ub77c\uac00\uac8c \ub418\uba74 github\uc5d0 \uc794\ub514\uac00 \uc548 \ucc0d\ud799\ub2c8\ub2e4... 1 2 3 4 5 6 git config --unset-all user.name git config --unset-all user.email # global git config --unset-all --global user.name git config --unset-all --global user.email","title":"2. local\uc758 github \uacc4\uc815 \uc815\ubcf4 \ubcc0\uacbd"},{"location":"honeytip/github-remove-added-file/","text":"github\uc5d0\uc11c \uc774\ubbf8 push\ub41c \ud30c\uc77c \uc81c\uc678\ud558\uae30 1 2 3 4 git rm -r --cached . git add . git commit -m \"Apply .gitignore\" git push","title":"github\uc5d0 \uc774\ubbf8 push\ub41c \ud30c\uc77c \uc81c\uc678"},{"location":"honeytip/github-remove-added-file/#github-push","text":"1 2 3 4 git rm -r --cached . git add . git commit -m \"Apply .gitignore\" git push","title":"github\uc5d0\uc11c \uc774\ubbf8 push\ub41c \ud30c\uc77c \uc81c\uc678\ud558\uae30"},{"location":"honeytip/kernel-contribution-guide/","text":"\ub9ac\ub205\uc2a4 kernel \uae30\uc5ec \uac00\uc774\ub4dc https://opensource.com/article/18/8/first-linux-kernel-patch","title":"linux kernel contribution guide"},{"location":"honeytip/kernel-contribution-guide/#kernel","text":"https://opensource.com/article/18/8/first-linux-kernel-patch","title":"\ub9ac\ub205\uc2a4 kernel \uae30\uc5ec \uac00\uc774\ub4dc"},{"location":"honeytip/books/","text":"\uac1c\ubc1c \uad00\ub828 \uc77d\uace0 \uc2f6\uc740 \ucc45\ub4e4 DOING \ubc11\ubc14\ub2e5\ubd80\ud130 \uc2dc\uc791\ud558\ub294 \ub525\ub7ec\ub2dd \ub9cc\ub4e4\uba74\uc11c \ubc30\uc6b0\ub294 OS \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac TODO \uc544\ud0a4\ud14d\ucc98 \ub300\uaddc\ubaa8 \uc6f9 \uc11c\ube44\uc2a4\ub97c \uc9c0\ud0f1\ud558\ub294 \uae30\uc220(\uc808\ud310\ub428) \uadf8\ub9bc\uc73c\ub85c \uacf5\ubd80\ud558\ub294 IT\uc778\ud504\ub77c \uad6c\uc870 \ub124\ud2b8\uc6cc\ud06c \uadf8\ub9bc\uc73c\ub85c \ubc30\uc6b0\ub294 http network HTTP \uc644\ubcbd\uac00\uc774\ub4dc(\uc5b4\ub824\uc6b4 \ucc45: reference\ub85c \ubd10\uc57c\ud560 \uc218 \uc788\uc74c) \uc131\uacf5\uacfc \uc2e4\ud328\ub97c \uacb0\uc815\ud558\ub294 1%\uc758 \ub124\ud2b8\uc6cc\ud06c \uc6d0\ub9ac \ucfe0\ubc84\ub124\ud2f0\uc2a4 \ucfe0\ubc84\ub124\ud2f0\uc2a4 \uc778 \uc561\uc158 \ucfe0\ubc84\ub124\ud2f0\uc2a4 \ud328\ud134 \ucf54\ud2c0\ub9b0 \ucf54\ud2c0\ub9b0 \uc778 \uc561\uc158 The Art of Computer Programming 1 2 3 4- \ucf54\ud2c0\ub9b0\uc744 \ub2e4\ub8e8\ub294 \uae30\uc220(Joy of kotlin) \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ubaa8\ub358 \uc790\ubc14\uc2a4\ud2b8\ub9bd\ud2b8 \ud504\ub860\ud2b8\uc5d4\ub4dc \uac1c\ubc1c\uc790\ub97c \uc704\ud55c \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ud504\ub85c\uadf8\ub798\ubc0d \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ud575\uc2ec \uac00\uc774\ub4dc You don't know JS- Advanced C Programming in Unix Environment \uc18d\uae4a\uc740 Javascript \ucf54\uc5b4 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 Secrets of the JavaScript Ninja, Second Edition (\uc624\ub77c\uc77c\ub9ac \uc0ac\ud30c\ub9ac \ub4f1\uc5d0 \uc788\uc74c)\ub9ac\uc561\ud2b8 \ub9ac\uc561\ud2b8\ub97c \ub2e4\ub8e8\ub294 \uae30\uc220 \uc790\ubc14 \uc774\ud399\ud2f0\ube0c \uc790\ubc14 \ubaa8\ub358 \uc790\ubc14 \uc778 \uc561\uc158 \uc774\uac83\uc774 \uc790\ubc14\ub2e4 \uc790\ubc14 \ubcd1\ub82c \ud504\ub85c\uadf8\ub798\ubc0d (\uae30\ucc28\ucc45) \uc2a4\ud504\ub9c1 \ud1a0\ube44\uc758 \uc2a4\ud53c\ub9c1 \uc2a4\ud504\ub9c1 \uc785\ubb38\uc744 \uc704\ud55c \uac1d\uccb4\uc9c0\ud5a5\uc758 \uc6d0\ub9ac\uc640 \uc774\ud574 spring in action DB SQL \uccab\uac78\uc74c Real MySQL \uac1d\uccb4\uc9c0\ud5a5 \uc624\ube0c\uc81d\ud2b8 \uac1d\uccb4\uc9c0\ud5a5\uc758 \uc0ac\uc2e4\uacfc \uc624\ud574 \ud14c\uc2a4\ud2b8 \uc8fc\ub3c4 \uac1c\ubc1c\ub85c \ubc30\uc6b0\ub294 \uac1d\uccb4 \uc9c0\ud5a5 \uc124\uacc4\uc640 \uc2e4\ucc9c \ub514\uc790\uc778\ud328\ud134 \ud5e4\ub4dc\ud37c\uc2a4\ud2b8 \ub514\uc790\uc778\ud328\ud134 GoF java\uc5b8\uc5b4\ub85c \ubc30\uc6b0\ub294 \ub514\uc790\uc778\ud328\ud134 \uc785\ubb38 1, 2 POSA (pattern oriented software architecture) \ub9ac\ud329\ud1a0\ub9c1 \ub9ac\ud329\ud1a0\ub9c1 1\ud310 \ub9ac\ud329\ud1a0\ub9c1 2\ud310 \uc560\uc790\uc77c Effective Unit Testing \uc775\uc2a4\ud2b8\ub9bc \ud504\ub85c\uadf8\ub798\ubc0d \ud568\uaed8 \uc790\ub77c\uae30 \uc560\uc790\uc77c\ub85c \uac00\ub294 \uae38 \ud074\ub9b0 \uc560\uc790\uc77c DDD(\ub3c4\uba54\uc778 \uc8fc\ub3c4 \uc124\uacc4) DDD Start! \ub3c4\uba54\uc778 \uc8fc\ub3c4 \uc124\uacc4 \ud575\uc2ec \ub3c4\uba54\uc778\uc8fc\ub3c4\uc124\uacc4 \ub370\uc774\ud130 \uc911\uc2ec \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uacc4(Designing data-intensive applications) \uc6b4\uc601\uccb4\uc81c 64\ube44\ud2b8 \uba40\ud2f0\ucf54\uc5b4 OS \uc6d0\ub9ac\uc640 \uad6c\uc870 1\uad8c 2\uad8c devops\uc640 se\ub97c \uc704\ud55c \ub9ac\ub205\uc2a4 \ucee4\ub110 \uc774\uc57c\uae30 \uc6b4\uc601\uccb4\uc81c \uc544\uc8fc \uc26c\uc6b4 \uc138 \uac00\uc9c0 \uc774\uc57c\uae30(ostep) \uc2e4\uc2b5\uacfc \uadf8\ub9bc\uc73c\ub85c \ubc30\uc6b0\ub294 \ub9ac\ub205\uc2a4 \uad6c\uc870 SRE \uc0ac\uc774\ud2b8 \uc2e0\ub8b0\uc131 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \uc6cc\ud06c\ubd81(\uc774\uac74 \ubc88\uc5ed\uc740 \uc5c6\ub294\ub370 \uc0ac\uc774\ud2b8 \uc2e0\ub8b0\uc131 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \uacf5\uac1c\ub41c \uc0ac\uc774\ud2b8\uc5d0 PDF \uacf5\uac1c\ub428) \uc0ac\uc774\ud2b8 \uc2e0\ub8b0\uc131 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \ud568\uc218\ud615 \uc5b8\uc5b4 \ud568\uc218\ud615 \uc0ac\uace0 Functional Programming in C++ Functional Programming in Scala DEVOPS \ub370\ube0c\uc635\uc2a4 \ud578\ub4dc\ubd81 \uae30\ud0c0 \ub808\uac70\uc2dc \ucf54\ub4dc \ud65c\uc6a9 \uc804\ub7b5 UML \uc2e4\uc804\uc5d0\uc11c\ub294 \uc774\uac83\ub9cc \uc4f4\ub2e4 \uc2e4\uc6a9\uc8fc\uc758 \ud504\ub85c\uadf8\ub798\uba38 \ud14c\uc2a4\ud2b8 \uc8fc\ub3c4 \uac1c\ubc1c \ub9e8\uba3c\uc2a4 \ubbf8\uc2e0 \ud53c\ud50c\uc6e8\uc5b4 \uc0dd\uac01\ud558\ub294 \ud504\ub85c\uadf8\ub798\ubc0d \uc870\uc5d8 \uc628 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \ucef4\ud4e8\ud130 \ud504\ub85c\uadf8\ub7a8\uc758 \uad6c\uc870\uc640 \ud574\uc11d \ud074\ub9b0 \ucf54\ub4dc \ud074\ub9b0 \ucf54\ub354 \ud074\ub9b0 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \ud074\ub9b0 \uc544\ud0a4\ud14d\uccd0 \ucf54\ub4dc CSAPP \uac1c\ubc1c\uc790\uc758 \uae00\uc4f0\uae30 GROWTH DEVELOPER \uadf8\ub85c\uc2a4 \ub514\ubca8\ub85c\ud37c \u3147\u3147\u3147\uc744 \uc9c0\ud0f1\ud558\ub294 \uae30\uc220 \uc2dc\ub9ac\uc988 \ub370\ub4dc\ub77c\uc778 \uc8fd\uc74c\uc758\ud589\uc9c4 \ud504\ub85c\uc81d\ud2b8\uac00 \uc11c\ucabd\uc73c\ub85c \uac04 \uae4c\ub2ed\uc740 \uc6b0\ub9ac\uac00\ubbf8\ucc98\uc54c\uc9c0\ubabb\ud55c \uc18c\ud504\ud2b8\uc6e8\uc5b4\uacf5\ud559\uc758 \uc0ac\uc2e4\uacfc \uc624\ud574 \ubb3c\ub9ac\uae30\ubc18 \ub80c\ub354\ub9c1 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc7a5\uc778 Done \ud504\ub7f0\ud2b8\uc5d4\ub4dc \uac1c\ubc1c \uc2dc\uc791\ud558\uae30 - \uc9c4\uc9dc \ubcc4\ub85c \ud30c\uc774\uc36c \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d - \uc9c4\uc9dc \ubcc4\ub85c","title":"index"},{"location":"honeytip/books/#_1","text":"","title":"\uac1c\ubc1c \uad00\ub828 \uc77d\uace0 \uc2f6\uc740 \ucc45\ub4e4"},{"location":"honeytip/books/#doing","text":"\ubc11\ubc14\ub2e5\ubd80\ud130 \uc2dc\uc791\ud558\ub294 \ub525\ub7ec\ub2dd \ub9cc\ub4e4\uba74\uc11c \ubc30\uc6b0\ub294 OS \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac","title":"DOING"},{"location":"honeytip/books/#todo","text":"","title":"TODO"},{"location":"honeytip/books/#_2","text":"\ub300\uaddc\ubaa8 \uc6f9 \uc11c\ube44\uc2a4\ub97c \uc9c0\ud0f1\ud558\ub294 \uae30\uc220(\uc808\ud310\ub428) \uadf8\ub9bc\uc73c\ub85c \uacf5\ubd80\ud558\ub294 IT\uc778\ud504\ub77c \uad6c\uc870","title":"\uc544\ud0a4\ud14d\ucc98"},{"location":"honeytip/books/#_3","text":"\uadf8\ub9bc\uc73c\ub85c \ubc30\uc6b0\ub294 http network HTTP \uc644\ubcbd\uac00\uc774\ub4dc(\uc5b4\ub824\uc6b4 \ucc45: reference\ub85c \ubd10\uc57c\ud560 \uc218 \uc788\uc74c) \uc131\uacf5\uacfc \uc2e4\ud328\ub97c \uacb0\uc815\ud558\ub294 1%\uc758 \ub124\ud2b8\uc6cc\ud06c \uc6d0\ub9ac","title":"\ub124\ud2b8\uc6cc\ud06c"},{"location":"honeytip/books/#_4","text":"\ucfe0\ubc84\ub124\ud2f0\uc2a4 \uc778 \uc561\uc158 \ucfe0\ubc84\ub124\ud2f0\uc2a4 \ud328\ud134","title":"\ucfe0\ubc84\ub124\ud2f0\uc2a4"},{"location":"honeytip/books/#_5","text":"\ucf54\ud2c0\ub9b0 \uc778 \uc561\uc158 The Art of Computer Programming 1 2 3 4- \ucf54\ud2c0\ub9b0\uc744 \ub2e4\ub8e8\ub294 \uae30\uc220(Joy of kotlin)","title":"\ucf54\ud2c0\ub9b0"},{"location":"honeytip/books/#_6","text":"\ubaa8\ub358 \uc790\ubc14\uc2a4\ud2b8\ub9bd\ud2b8 \ud504\ub860\ud2b8\uc5d4\ub4dc \uac1c\ubc1c\uc790\ub97c \uc704\ud55c \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ud504\ub85c\uadf8\ub798\ubc0d \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 \ud575\uc2ec \uac00\uc774\ub4dc You don't know JS- Advanced C Programming in Unix Environment \uc18d\uae4a\uc740 Javascript \ucf54\uc5b4 \uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8 Secrets of the JavaScript Ninja, Second Edition (\uc624\ub77c\uc77c\ub9ac \uc0ac\ud30c\ub9ac \ub4f1\uc5d0 \uc788\uc74c)\ub9ac\uc561\ud2b8 \ub9ac\uc561\ud2b8\ub97c \ub2e4\ub8e8\ub294 \uae30\uc220","title":"\uc790\ubc14\uc2a4\ud06c\ub9bd\ud2b8"},{"location":"honeytip/books/#_7","text":"\uc774\ud399\ud2f0\ube0c \uc790\ubc14 \ubaa8\ub358 \uc790\ubc14 \uc778 \uc561\uc158 \uc774\uac83\uc774 \uc790\ubc14\ub2e4 \uc790\ubc14 \ubcd1\ub82c \ud504\ub85c\uadf8\ub798\ubc0d (\uae30\ucc28\ucc45)","title":"\uc790\ubc14"},{"location":"honeytip/books/#_8","text":"\ud1a0\ube44\uc758 \uc2a4\ud53c\ub9c1 \uc2a4\ud504\ub9c1 \uc785\ubb38\uc744 \uc704\ud55c \uac1d\uccb4\uc9c0\ud5a5\uc758 \uc6d0\ub9ac\uc640 \uc774\ud574 spring in action","title":"\uc2a4\ud504\ub9c1"},{"location":"honeytip/books/#db","text":"SQL \uccab\uac78\uc74c Real MySQL","title":"DB"},{"location":"honeytip/books/#_9","text":"\uc624\ube0c\uc81d\ud2b8 \uac1d\uccb4\uc9c0\ud5a5\uc758 \uc0ac\uc2e4\uacfc \uc624\ud574 \ud14c\uc2a4\ud2b8 \uc8fc\ub3c4 \uac1c\ubc1c\ub85c \ubc30\uc6b0\ub294 \uac1d\uccb4 \uc9c0\ud5a5 \uc124\uacc4\uc640 \uc2e4\ucc9c","title":"\uac1d\uccb4\uc9c0\ud5a5"},{"location":"honeytip/books/#_10","text":"\ud5e4\ub4dc\ud37c\uc2a4\ud2b8 \ub514\uc790\uc778\ud328\ud134 GoF java\uc5b8\uc5b4\ub85c \ubc30\uc6b0\ub294 \ub514\uc790\uc778\ud328\ud134 \uc785\ubb38 1, 2 POSA (pattern oriented software architecture)","title":"\ub514\uc790\uc778\ud328\ud134"},{"location":"honeytip/books/#_11","text":"\ub9ac\ud329\ud1a0\ub9c1 1\ud310 \ub9ac\ud329\ud1a0\ub9c1 2\ud310","title":"\ub9ac\ud329\ud1a0\ub9c1"},{"location":"honeytip/books/#_12","text":"Effective Unit Testing \uc775\uc2a4\ud2b8\ub9bc \ud504\ub85c\uadf8\ub798\ubc0d \ud568\uaed8 \uc790\ub77c\uae30 \uc560\uc790\uc77c\ub85c \uac00\ub294 \uae38 \ud074\ub9b0 \uc560\uc790\uc77c","title":"\uc560\uc790\uc77c"},{"location":"honeytip/books/#ddd","text":"DDD Start! \ub3c4\uba54\uc778 \uc8fc\ub3c4 \uc124\uacc4 \ud575\uc2ec \ub3c4\uba54\uc778\uc8fc\ub3c4\uc124\uacc4 \ub370\uc774\ud130 \uc911\uc2ec \uc560\ud50c\ub9ac\ucf00\uc774\uc158 \uc124\uacc4(Designing data-intensive applications)","title":"DDD(\ub3c4\uba54\uc778 \uc8fc\ub3c4 \uc124\uacc4)"},{"location":"honeytip/books/#_13","text":"64\ube44\ud2b8 \uba40\ud2f0\ucf54\uc5b4 OS \uc6d0\ub9ac\uc640 \uad6c\uc870 1\uad8c 2\uad8c devops\uc640 se\ub97c \uc704\ud55c \ub9ac\ub205\uc2a4 \ucee4\ub110 \uc774\uc57c\uae30 \uc6b4\uc601\uccb4\uc81c \uc544\uc8fc \uc26c\uc6b4 \uc138 \uac00\uc9c0 \uc774\uc57c\uae30(ostep) \uc2e4\uc2b5\uacfc \uadf8\ub9bc\uc73c\ub85c \ubc30\uc6b0\ub294 \ub9ac\ub205\uc2a4 \uad6c\uc870","title":"\uc6b4\uc601\uccb4\uc81c"},{"location":"honeytip/books/#sre","text":"\uc0ac\uc774\ud2b8 \uc2e0\ub8b0\uc131 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \uc6cc\ud06c\ubd81(\uc774\uac74 \ubc88\uc5ed\uc740 \uc5c6\ub294\ub370 \uc0ac\uc774\ud2b8 \uc2e0\ub8b0\uc131 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1 \uacf5\uac1c\ub41c \uc0ac\uc774\ud2b8\uc5d0 PDF \uacf5\uac1c\ub428) \uc0ac\uc774\ud2b8 \uc2e0\ub8b0\uc131 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1","title":"SRE"},{"location":"honeytip/books/#_14","text":"\ud568\uc218\ud615 \uc0ac\uace0 Functional Programming in C++ Functional Programming in Scala","title":"\ud568\uc218\ud615 \uc5b8\uc5b4"},{"location":"honeytip/books/#devops","text":"\ub370\ube0c\uc635\uc2a4 \ud578\ub4dc\ubd81","title":"DEVOPS"},{"location":"honeytip/books/#_15","text":"\ub808\uac70\uc2dc \ucf54\ub4dc \ud65c\uc6a9 \uc804\ub7b5 UML \uc2e4\uc804\uc5d0\uc11c\ub294 \uc774\uac83\ub9cc \uc4f4\ub2e4 \uc2e4\uc6a9\uc8fc\uc758 \ud504\ub85c\uadf8\ub798\uba38 \ud14c\uc2a4\ud2b8 \uc8fc\ub3c4 \uac1c\ubc1c \ub9e8\uba3c\uc2a4 \ubbf8\uc2e0 \ud53c\ud50c\uc6e8\uc5b4 \uc0dd\uac01\ud558\ub294 \ud504\ub85c\uadf8\ub798\ubc0d \uc870\uc5d8 \uc628 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \ucef4\ud4e8\ud130 \ud504\ub85c\uadf8\ub7a8\uc758 \uad6c\uc870\uc640 \ud574\uc11d \ud074\ub9b0 \ucf54\ub4dc \ud074\ub9b0 \ucf54\ub354 \ud074\ub9b0 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \ud074\ub9b0 \uc544\ud0a4\ud14d\uccd0 \ucf54\ub4dc CSAPP \uac1c\ubc1c\uc790\uc758 \uae00\uc4f0\uae30 GROWTH DEVELOPER \uadf8\ub85c\uc2a4 \ub514\ubca8\ub85c\ud37c \u3147\u3147\u3147\uc744 \uc9c0\ud0f1\ud558\ub294 \uae30\uc220 \uc2dc\ub9ac\uc988 \ub370\ub4dc\ub77c\uc778 \uc8fd\uc74c\uc758\ud589\uc9c4 \ud504\ub85c\uc81d\ud2b8\uac00 \uc11c\ucabd\uc73c\ub85c \uac04 \uae4c\ub2ed\uc740 \uc6b0\ub9ac\uac00\ubbf8\ucc98\uc54c\uc9c0\ubabb\ud55c \uc18c\ud504\ud2b8\uc6e8\uc5b4\uacf5\ud559\uc758 \uc0ac\uc2e4\uacfc \uc624\ud574 \ubb3c\ub9ac\uae30\ubc18 \ub80c\ub354\ub9c1 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc7a5\uc778","title":"\uae30\ud0c0"},{"location":"honeytip/books/#done","text":"\ud504\ub7f0\ud2b8\uc5d4\ub4dc \uac1c\ubc1c \uc2dc\uc791\ud558\uae30 - \uc9c4\uc9dc \ubcc4\ub85c \ud30c\uc774\uc36c \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d - \uc9c4\uc9dc \ubcc4\ub85c","title":"Done"},{"location":"honeytip/books/1/","text":"\ud504\ub7f0\ud2b8\uc5d4\ub4dc \uac1c\ubc1c \uc2dc\uc791\ud558\uae30(2014) - \uc704\ud0a4\ubd81\uc2a4 \ubcc4\uc810 \u2605\u2606\u2606\u2606\u2606 comment \ud2b9\ubcc4\ud55c \ub0b4\uc6a9\uc774 \uc5c6\uc74c. \ub124\uc774\ubc84\ub294 \uc774\ub807\uac8c \ud55c\ub2e4 \ub77c\ub294 \uba58\ud2b8\uac00 \uc788\uc5b4\uc11c \uc0c0\ub294\ub370, \uc804\ud600 \ub3c4\uc6c0\uc774 \ub418\uc9c0 \uc54a\uc558\uc74c. \ucd08\uc2ec\uc790\ub77c\uace0 \ud558\ub354\ub77c\ub3c4 \ud544\uc694 \uc5c6\uc744 \uc9c0\uc2dd\ub4e4\ub85c \uac00\ub4dd\ucc28 \uc788\uc74c \uc88b\uc740 \uc810 \uadf8\ub9bc\uc774 \ub9ce\uc544\uc11c \ube68\ub9ac \uc77d\uc744 \uc218 \uc788\uc74c \ub098\uc05c \uc810 \ub0b4\uc6a9\uc774 \uc5c6\uc74c. \uad6c\ub9e4\ud574\uc11c \uc77d\uc5c8\ub294\ub370 22000\uc6d0\uc744 \uadf8\ub300\ub85c \ub0a0\ub838\uc74c \ud604\uc7ac\uae4c\uc9c0 \uc77d\uc740 \uacf3 p.194 2\ubd80 \ud504\ub7f0\ud2b8\uc5d4\ub4dc \uac1c\ubc1c \uc2dc\uc791 \uc77d\uc744 \ucc28\ub840","title":"1: \ud504\ub7f0\ud2b8\uc5d4\ub4dc \uac1c\ubc1c\uc790 \uc2dc\uc791\ud558\uae30"},{"location":"honeytip/books/1/#2014-","text":"\ubcc4\uc810 \u2605\u2606\u2606\u2606\u2606 comment \ud2b9\ubcc4\ud55c \ub0b4\uc6a9\uc774 \uc5c6\uc74c. \ub124\uc774\ubc84\ub294 \uc774\ub807\uac8c \ud55c\ub2e4 \ub77c\ub294 \uba58\ud2b8\uac00 \uc788\uc5b4\uc11c \uc0c0\ub294\ub370, \uc804\ud600 \ub3c4\uc6c0\uc774 \ub418\uc9c0 \uc54a\uc558\uc74c. \ucd08\uc2ec\uc790\ub77c\uace0 \ud558\ub354\ub77c\ub3c4 \ud544\uc694 \uc5c6\uc744 \uc9c0\uc2dd\ub4e4\ub85c \uac00\ub4dd\ucc28 \uc788\uc74c \uc88b\uc740 \uc810 \uadf8\ub9bc\uc774 \ub9ce\uc544\uc11c \ube68\ub9ac \uc77d\uc744 \uc218 \uc788\uc74c \ub098\uc05c \uc810 \ub0b4\uc6a9\uc774 \uc5c6\uc74c. \uad6c\ub9e4\ud574\uc11c \uc77d\uc5c8\ub294\ub370 22000\uc6d0\uc744 \uadf8\ub300\ub85c \ub0a0\ub838\uc74c \ud604\uc7ac\uae4c\uc9c0 \uc77d\uc740 \uacf3 p.194 2\ubd80 \ud504\ub7f0\ud2b8\uc5d4\ub4dc \uac1c\ubc1c \uc2dc\uc791 \uc77d\uc744 \ucc28\ub840","title":"\ud504\ub7f0\ud2b8\uc5d4\ub4dc \uac1c\ubc1c \uc2dc\uc791\ud558\uae30(2014) - \uc704\ud0a4\ubd81\uc2a4"},{"location":"honeytip/books/2/","text":"\ubc11\ubc14\ub2e5\ubd80\ud130 \uc2dc\uc791\ud558\ub294 \ub525\ub7ec\ub2dd - \ud55c\ube5b\ubbf8\ub514\uc5b4","title":"2: \ubc11\ubc14\ub2e5\ubd80\ud130 \uc2dc\uc791\ud558\ub294 \ub525\ub7ec\ub2dd "},{"location":"honeytip/books/2/#-","text":"","title":"\ubc11\ubc14\ub2e5\ubd80\ud130 \uc2dc\uc791\ud558\ub294 \ub525\ub7ec\ub2dd - \ud55c\ube5b\ubbf8\ub514\uc5b4"},{"location":"honeytip/books/3/","text":"\ub9cc\ub4e4\uba74\uc11c \ubc30\uc6b0\ub294 OS \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac - \ud55c\ube5b\ubbf8\ub514\uc5b4 \ubcc4\uc810 \u2605\u2605\u2605\u2605\u2605 comment \uaf64 \uc5b4\ub824\uc6b4 \ub0b4\uc6a9\uc774\ub77c\uc11c, \uc9c1\uc811 \ub3c4\uc804\ud574 \ubcf4\uae30\ub294 \uc27d\uc9c0 \uc54a\uc744 \uc218 \uc788\uc9c0\ub9cc, \uc9c1\uc811 OS\ub97c \ub9cc\ub4e4\uba74\uc11c \ub9ce\uc774 \ubc30\uc6b0\uac8c \ub428 \uc88b\uc740 \uc810 \uc9c1\uc811 \ub9cc\ub4e4\uba74\uc11c OS\uc758 \uc6d0\ub9ac\ub97c \ubc30\uc6b8 \uc218 \uc788\uc74c \ub098\uc05c \uc810 \ub098\uc05c \uc810\uc774 \uac70\uc758 \uc5c6\uc9c0\ub9cc, \uc544\uc26c\uc6b4 \ubd80\ubd84\uc740 \uc608\uc804 \ucc45\uc774\ub77c floppy disk\uc5d0 \uc6b4\uc601\uccb4\uc81c\ub97c \ub9cc\ub4e0 \ub2e4\ub294 \uc810","title":"3: \ub9cc\ub4e4\uba74\uc11c \ubc30\uc6b0\ub294 OS \uad6c\uc870\uc640 \uc6d0\ub9ac"},{"location":"honeytip/books/3/#os-","text":"\ubcc4\uc810 \u2605\u2605\u2605\u2605\u2605 comment \uaf64 \uc5b4\ub824\uc6b4 \ub0b4\uc6a9\uc774\ub77c\uc11c, \uc9c1\uc811 \ub3c4\uc804\ud574 \ubcf4\uae30\ub294 \uc27d\uc9c0 \uc54a\uc744 \uc218 \uc788\uc9c0\ub9cc, \uc9c1\uc811 OS\ub97c \ub9cc\ub4e4\uba74\uc11c \ub9ce\uc774 \ubc30\uc6b0\uac8c \ub428 \uc88b\uc740 \uc810 \uc9c1\uc811 \ub9cc\ub4e4\uba74\uc11c OS\uc758 \uc6d0\ub9ac\ub97c \ubc30\uc6b8 \uc218 \uc788\uc74c \ub098\uc05c \uc810 \ub098\uc05c \uc810\uc774 \uac70\uc758 \uc5c6\uc9c0\ub9cc, \uc544\uc26c\uc6b4 \ubd80\ubd84\uc740 \uc608\uc804 \ucc45\uc774\ub77c floppy disk\uc5d0 \uc6b4\uc601\uccb4\uc81c\ub97c \ub9cc\ub4e0 \ub2e4\ub294 \uc810","title":"\ub9cc\ub4e4\uba74\uc11c \ubc30\uc6b0\ub294 OS \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac - \ud55c\ube5b\ubbf8\ub514\uc5b4"},{"location":"honeytip/books/4/","text":"\ud30c\uc774\uc36c \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d - \ud55c\ube5b\ubbf8\ub514\uc5b4 \ubcc4\uc810 \u2605\u2606\u2606\u2606\u2606 comment \uc5b4\ub5a4 \uc0ac\ub78c\uc774 \ub300\uc0c1 \ub3c5\uc790\uc778\uc9c0 \uc798 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4. \ucd08\uae09\uc790 \ub300\uc0c1\uc73c\ub85c \ud558\uae30\uc5d0\ub294, \ubc14\ub85c \uc0ac\uc6a9\ud574 \ubcf4\ub294 \ubc29\uc2dd\uc774 \uc544\ub2c8\uace0 \uc6d0\ub9ac\ubd80\ud130 \uc124\uba85\ud558\uae30 \ub54c\ubb38\uc5d0 \uc880 \ubcf5\uc7a1\ud55c \uac83 \uac19\uace0, django\uac00 \uc544\ub2cc \ub2e4\ub978 \ud504\ub808\uc784\uc6cc\ud06c\uc5d0 \uc775\uc219\ud55c \uc0ac\ub78c\uc774 \ubcf4\uae30\uc5d0\ub294 \ubb54\uac00 \uafc0\ud301\uc774 \uc870\uae08 \ubd80\uc871\ud55c \ub4ef \ud569\ub2c8\ub2e4. \uac1c\uc778\uc801\uc73c\ub85c \uc6d0\ub9ac\ubcf4\ub2e4\ub294 \uc880 \ub354 \ub2e4\uc591\ud55c \uc608\uc2dc \ucf54\ub4dc\uac00 \uc788\uc5c8\uc73c\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. \uc88b\uc740 \uc810 \uc798 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4. \ub098\uc05c \uc810 \ub108\ubb34 \uc774\ub860\uc5d0 \uce58\uc911\ud558\ub294 \ub290\ub08c. \uc2e4\uc9c8\uc801\uc73c\ub85c \ucc45\uc744 \uc27d\uac8c \uc77d\uace0, \uc27d\uac8c \uc7a5\uace0\ub97c \uc5f0\uc2b5\ud574 \ubcfc \uc218 \uc788\uc5c8\uc73c\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4.","title":"4: \ud30c\uc774\uc36c \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d"},{"location":"honeytip/books/4/#-","text":"\ubcc4\uc810 \u2605\u2606\u2606\u2606\u2606 comment \uc5b4\ub5a4 \uc0ac\ub78c\uc774 \ub300\uc0c1 \ub3c5\uc790\uc778\uc9c0 \uc798 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4. \ucd08\uae09\uc790 \ub300\uc0c1\uc73c\ub85c \ud558\uae30\uc5d0\ub294, \ubc14\ub85c \uc0ac\uc6a9\ud574 \ubcf4\ub294 \ubc29\uc2dd\uc774 \uc544\ub2c8\uace0 \uc6d0\ub9ac\ubd80\ud130 \uc124\uba85\ud558\uae30 \ub54c\ubb38\uc5d0 \uc880 \ubcf5\uc7a1\ud55c \uac83 \uac19\uace0, django\uac00 \uc544\ub2cc \ub2e4\ub978 \ud504\ub808\uc784\uc6cc\ud06c\uc5d0 \uc775\uc219\ud55c \uc0ac\ub78c\uc774 \ubcf4\uae30\uc5d0\ub294 \ubb54\uac00 \uafc0\ud301\uc774 \uc870\uae08 \ubd80\uc871\ud55c \ub4ef \ud569\ub2c8\ub2e4. \uac1c\uc778\uc801\uc73c\ub85c \uc6d0\ub9ac\ubcf4\ub2e4\ub294 \uc880 \ub354 \ub2e4\uc591\ud55c \uc608\uc2dc \ucf54\ub4dc\uac00 \uc788\uc5c8\uc73c\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. \uc88b\uc740 \uc810 \uc798 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4. \ub098\uc05c \uc810 \ub108\ubb34 \uc774\ub860\uc5d0 \uce58\uc911\ud558\ub294 \ub290\ub08c. \uc2e4\uc9c8\uc801\uc73c\ub85c \ucc45\uc744 \uc27d\uac8c \uc77d\uace0, \uc27d\uac8c \uc7a5\uace0\ub97c \uc5f0\uc2b5\ud574 \ubcfc \uc218 \uc788\uc5c8\uc73c\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4.","title":"\ud30c\uc774\uc36c \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d - \ud55c\ube5b\ubbf8\ub514\uc5b4"},{"location":"honeytip/books/6/","text":"\ud30c\uc774\uc36c \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d - \ud55c\ube5b\ubbf8\ub514\uc5b4 \ubcc4\uc810 (\uc77d\ub294\uc911) comment \uc88b\uc740 \uc810 \ub098\uc05c \uc810 \uc77d\uc744\ub9cc\ud55c \uad6c\uc808 A4 \ud53c\ub4dc\ubc31 \uc9c0\uce68 \ud53c\ub4dc\ubc31\uc744 \uc904 \ub54c AIM TO ASSIST(\ub3c4\uc6c0\uc744 \uc8fc\uaca0\ub2e4\ub294 \uc0dd\uac01\uc73c\ub85c \ud558\ub77c): \ud53c\ub4dc\ubc31\uc740 \uc120\uc758\uc5d0\uc11c \ube44\ub85d\ub418\uc5b4\uc57c \ud55c\ub2e4. \ubd88\ub9cc\uc744 \ud138\uc5b4\ub193\uac70\ub098 \uc758\ub3c4\uc801\uc73c\ub85c \uc0c1\ucc98\ub97c \uc8fc\uac70\ub098 \uc790\uc2e0\uc758 \uc785\uc9c0\ub97c \uc720\ub9ac\ud558\uac8c \ub9cc\ub4e4\uae30 \uc704\ud55c \ud53c\ub4dc\ubc31\uc740 \uc6a9\ub0a9\ub418\uc9c0 \uc54a\ub294\ub2e4. \uad6c\uccb4\uc801\uc778 \ud589\ub3d9 \ubcc0\ud654\uac00 \uc0c1\ub300\ubc29 \uac1c\uc778\uc774\ub098 \ud68c\uc0ac\uc5d0 \uc5b4\ub5bb\uac8c \ub3c4\uc6c0\uc774 \ub418\ub294\uc9c0 \ubd84\uba85\ud558\uac8c \uc124\uba85\ud574\uc57c \ud55c\ub2e4. \uc790\uc2e0\uc744 \uc704\ud55c \uac83\uc774 \uc544\ub2d8\uc744 \ubd84\uba85\ud788 \ub0a9\ub4dd\uc2dc\ucf1c\uc57c \ud55c\ub2e4. \"\uc678\ubd80 \ud30c\ud2b8\ub108\uc640 \ud68c\uc758\ud560 \ub54c \uc774\ub97c \uc464\uc2dc\ub294 \ubaa8\uc2b5\uc774 \ubb34\ucc99 \uac70\uc2ac\ub9bd\ub2c8\ub2e4\"\ub294 \uc798\ubabb\ub41c \ud53c\ub4dc\ubc31\uc774\ub2e4. \uc62c\ubc14\ub978 \ud53c\ub4dc\ubc31\uc740 \uc774\ub7f0 \uc2dd\uc774\uc5b4\uc57c \ud55c\ub2e4. \"\uc678\ubd80 \ud30c\ud2b8\ub108\uc640 \ud68c\uc758\ud560 \ub54c \uc774\ub97c \uc464\uc2dc\ub294 \uc2b5\uad00\uc744 \uace0\uce58\uc2e0\ub2e4\uba74, \ud30c\ud2b8\ub108\ub4e4\uc774 \ud300\uc7a5\ub2d8\uc744 \uc880 \ub354 \uc804\ubb38\uac00\ub2f5\ub2e4\uace0 \uc5ec\uae38 \uac83\uc774\uace0 \uadf8\ub798\uc11c \ub354\uc6b1 \uae34\ubc00\ud55c \uad00\uacc4\ub97c \uc313\uc744 \uc218 \uc788\uc744 \uac81\ub2c8\ub2e4.\" ACTIONABLE(\uc2e4\uc9c8\uc801\uc778 \uc870\uce58\ub97c \ud3ec\ud568\ud558\ub77c): \ud53c\ub4dc\ubc31\uc740 \ubc1b\ub294 \uc0ac\ub78c\uc758 \ud589\ub3d9\uc774 \ubcc0\ud654\ub418\ub294 \uac83\uc5d0 \ucd08\uc810\uc744 \ub9de\ucdb0\uc57c \ud55c\ub2e4. \ucfe0\ubc14\uc5d0\uc11c \uc5d0\ub9b0\uc5d0\uac8c \uc900 \ud53c\ub4dc\ubc31\uc774 \"\uad50\uc218\ub2d8\uc758 \ud504\ub808\uc820\ud14c\uc774\uc158\uc774 \uba54\uc2dc\uc9c0 \uc790\uccb4\ub97c \ub9dd\uce58\uace0 \uc788\ub2e4\"\ub294 \ucf54\uba58\ud2b8\ub85c \ub05d\ub0ac\ub2e4\uba74 \uc798\ubabb\ub41c \ud53c\ub4dc\ubc31\uc774\uc5c8\uc744 \uac83\uc774\ub2e4. \uc62c\ubc14\ub978 \ud53c\ub4dc\ubc31\uc740 \uc774\ub7f0 \uac83\uc774\ub2e4. \"\uccad\uc911\uc5d0\uac8c \uadf8\ub7f0 \ubc29\uc2dd\uc73c\ub85c \uc758\uacac\uc744 \uad6c\ud558\uac8c \ub418\uba74, \uacb0\uad6d \ubbf8\uad6d\uc778\ub4e4\ub9cc \ucc38\uc5ec\ud558\uac8c \ub429\ub2c8\ub2e4.\" \ub354 \uc88b\uc740 \ubc29\ubc95\ub3c4 \uc788\ub2e4. \"\ud68c\uc758\uc7a5\uc5d0 \uc788\ub294 \ub2e4\ub978 \ub098\ub77c \ucd9c\uc2e0\ub4e4\uc5d0\uac8c \uc758\uacac\uc744 \uad6c\ud558\ub294 \ubc29\ubc95\uc744 \ucc3e\uc744 \uc218 \uc788\ub2e4\uba74, \uad50\uc218\ub2d8\uc758 \uba54\uc2dc\uc9c0\ub294 \ub354\uc6b1 \ubd84\uba85\ud558\uac8c \uc804\ub2ec\ub420 \uac81\ub2c8\ub2e4.\" \ud53c\ub4dc\ubc31\uc744 \ubc1b\uc744 \ub54c APPRECIATE(\uac10\uc0ac\ud558\ub77c): \ube44\ud310\uc744 \ubc1b\uc73c\uba74 \ubcc0\uba85\ubd80\ud130 \ud558\ub824 \ub4dc\ub294 \uac83\uc774 \uc778\uac04\uc758 \uc790\uc5f0\uc2a4\ub7ec\uc6b4 \ubcf8\ub2a5\uc774\ub2e4. \uadf8\ub7f0 \uc0c1\ud669\uc5d0\uc11c\ub294 \ub204\uad6c\ub098 \ubc18\uc0ac\uc801\uc73c\ub85c \uc790\uc874\uc2ec\uc774\ub098 \uccb4\uba74\uc744 \uc9c0\ud0a4\ub824\uace0 \ud55c\ub2e4. \uadf8\ub7ec\ub2c8 \ud53c\ub4dc\ubc31\uc744 \ubc1b\uc73c\uba74 \uc774\ub7f0 \uc790\uc5f0\uc2a4\ub7ec\u3151\uc6b4 \ubc18\uc751\uc744 \uc790\uc81c\ud558\uace0 \uc774\ub807\uac8c \uc790\ubb38\ud574 \ubd10\uc57c \ud55c\ub2e4. \"\uc5b4\ub5bb\uac8c \ud574\uc57c \uc0c1\ub300\ubc29\uc758 \uace0\uc5b8\uc744 \uc2e0\uc911\ud558\uac8c \ub4e3\uace0, \uc5f4\ub9b0 \ub9c8\uc74c\uc73c\ub85c \uadf8 \uc758\ubbf8\ub97c \uc9da\uc5b4\ubcf4\uba70, \uc218\uc138\ub97c \ucde8\ud558\uac70\ub098 \ud654\ub97c \ub0b4\uc9c0 \uc54a\uace0 \uac10\uc0ac\ud55c \ub9c8\uc74c\uc744 \ud45c\ud604\ud560 \uc218 \uc788\uc744\uae4c?\" ACCEPT OR DISCARD(\ubc1b\uc544\ub4e4\uc774\uac70\ub098 \uac70\ubd80\ud558\ub77c): \ub137\ud50c\ub9ad\uc2a4\uc5d0\uc11c \uc77c\ud558\ub2e4 \ubcf4\uba74 \ub9ce\uc740 \uc0ac\ub78c\uc744\ubcf4\ubd80\ud130 \ub9ce\uc740 \ud53c\ub4dc\ubc31\uc744 \ubc1b\uac8c \ub41c\ub2e4. \uc5b4\ub5a4 \ud53c\ub4dc\ubc31\uc774\ub4e0 \uc77c\ub2e8 \ub4e3\uace0 \uc0dd\uac01\ud574 \ubd10\uc57c \ud55c\ub2e4. \ubc18\ub4dc\uc2dc \ub530\ub97c \ud544\uc694\ub294 \uc5c6\ub2e4. \uc9c4\uc2ec\uc744 \ub2f4\uc544 \"\uace0\ub9d9\ub2e4\"\uace0 \ub9d0\ud558\ub418, \ud53c\ub4dc\ubc31\uc758 \uc218\uc6a9 \uc5ec\ubd80\ub294 \uc804\uc801\uc73c\ub85c \ubc1b\ub294 \uc0ac\ub78c\uc5d0\uac8c \ub2ec\ub838\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc591\uce21 \ubaa8\ub450\uac00 \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \ub0b4 \uc0dd\uac01: \uc790\uc2e0\uc758 \uc0dd\uac01\uc5d0 \uc4f8\ubaa8\uc5c6\uc740 \ud53c\ub4dc\ubc31\ub9cc \uc8fc\ub294 \uc0ac\ub78c\ub3c4 \uc788\uc744 \uc218 \uc788\ub294\ub370, \uadf8\ub7f4 \ub54c\ub294 \uc5b4\ub5bb\uac8c \ub300\ucc98\ud558\ub294 \uac83\uc774 \uc88b\uc744\uae4c? 2\uc7a5\uc744 \uc77d\uc73c\uba74\uc11c \ub290\ub080 \uc810: \ub611\ub611\ud55c \uc0ac\ub78c\ub4e4\uc744 \ub9ce\uc774 \ubaa8\uc544\ub193\uc73c\uba74, \ub108\ubb34 \uae30\ubcf8\uc801\uc778 \uaddc\uc815\ub4e4\uc744 \uc815\ud560 \ud544\uc694\uac00 \uc5c6\uace0 \ub354\uc6b1 \uc790\uc720\ub85c\uc6b0\uba70 \uc77c\uc5d0\ub9cc \uc9d1\uc911\ud560 \uc218 \uc788\ub294 \ud658\uacbd\uc744 \ub9cc\ub4e4 \uc218 \uc788\ub2e4. 2\uc7a5\uae4c\uc9c0 \uc77d\uc5c8\uc74c","title":"6: \ub137\ud50c\ub9ad\uc2a4: \uaddc\uce59\uc5c6\uc74c"},{"location":"honeytip/books/6/#-","text":"\ubcc4\uc810 (\uc77d\ub294\uc911) comment \uc88b\uc740 \uc810 \ub098\uc05c \uc810","title":"\ud30c\uc774\uc36c \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d - \ud55c\ube5b\ubbf8\ub514\uc5b4"},{"location":"honeytip/books/6/#_1","text":"","title":"\uc77d\uc744\ub9cc\ud55c \uad6c\uc808"},{"location":"honeytip/books/6/#a4","text":"\ud53c\ub4dc\ubc31\uc744 \uc904 \ub54c AIM TO ASSIST(\ub3c4\uc6c0\uc744 \uc8fc\uaca0\ub2e4\ub294 \uc0dd\uac01\uc73c\ub85c \ud558\ub77c): \ud53c\ub4dc\ubc31\uc740 \uc120\uc758\uc5d0\uc11c \ube44\ub85d\ub418\uc5b4\uc57c \ud55c\ub2e4. \ubd88\ub9cc\uc744 \ud138\uc5b4\ub193\uac70\ub098 \uc758\ub3c4\uc801\uc73c\ub85c \uc0c1\ucc98\ub97c \uc8fc\uac70\ub098 \uc790\uc2e0\uc758 \uc785\uc9c0\ub97c \uc720\ub9ac\ud558\uac8c \ub9cc\ub4e4\uae30 \uc704\ud55c \ud53c\ub4dc\ubc31\uc740 \uc6a9\ub0a9\ub418\uc9c0 \uc54a\ub294\ub2e4. \uad6c\uccb4\uc801\uc778 \ud589\ub3d9 \ubcc0\ud654\uac00 \uc0c1\ub300\ubc29 \uac1c\uc778\uc774\ub098 \ud68c\uc0ac\uc5d0 \uc5b4\ub5bb\uac8c \ub3c4\uc6c0\uc774 \ub418\ub294\uc9c0 \ubd84\uba85\ud558\uac8c \uc124\uba85\ud574\uc57c \ud55c\ub2e4. \uc790\uc2e0\uc744 \uc704\ud55c \uac83\uc774 \uc544\ub2d8\uc744 \ubd84\uba85\ud788 \ub0a9\ub4dd\uc2dc\ucf1c\uc57c \ud55c\ub2e4. \"\uc678\ubd80 \ud30c\ud2b8\ub108\uc640 \ud68c\uc758\ud560 \ub54c \uc774\ub97c \uc464\uc2dc\ub294 \ubaa8\uc2b5\uc774 \ubb34\ucc99 \uac70\uc2ac\ub9bd\ub2c8\ub2e4\"\ub294 \uc798\ubabb\ub41c \ud53c\ub4dc\ubc31\uc774\ub2e4. \uc62c\ubc14\ub978 \ud53c\ub4dc\ubc31\uc740 \uc774\ub7f0 \uc2dd\uc774\uc5b4\uc57c \ud55c\ub2e4. \"\uc678\ubd80 \ud30c\ud2b8\ub108\uc640 \ud68c\uc758\ud560 \ub54c \uc774\ub97c \uc464\uc2dc\ub294 \uc2b5\uad00\uc744 \uace0\uce58\uc2e0\ub2e4\uba74, \ud30c\ud2b8\ub108\ub4e4\uc774 \ud300\uc7a5\ub2d8\uc744 \uc880 \ub354 \uc804\ubb38\uac00\ub2f5\ub2e4\uace0 \uc5ec\uae38 \uac83\uc774\uace0 \uadf8\ub798\uc11c \ub354\uc6b1 \uae34\ubc00\ud55c \uad00\uacc4\ub97c \uc313\uc744 \uc218 \uc788\uc744 \uac81\ub2c8\ub2e4.\" ACTIONABLE(\uc2e4\uc9c8\uc801\uc778 \uc870\uce58\ub97c \ud3ec\ud568\ud558\ub77c): \ud53c\ub4dc\ubc31\uc740 \ubc1b\ub294 \uc0ac\ub78c\uc758 \ud589\ub3d9\uc774 \ubcc0\ud654\ub418\ub294 \uac83\uc5d0 \ucd08\uc810\uc744 \ub9de\ucdb0\uc57c \ud55c\ub2e4. \ucfe0\ubc14\uc5d0\uc11c \uc5d0\ub9b0\uc5d0\uac8c \uc900 \ud53c\ub4dc\ubc31\uc774 \"\uad50\uc218\ub2d8\uc758 \ud504\ub808\uc820\ud14c\uc774\uc158\uc774 \uba54\uc2dc\uc9c0 \uc790\uccb4\ub97c \ub9dd\uce58\uace0 \uc788\ub2e4\"\ub294 \ucf54\uba58\ud2b8\ub85c \ub05d\ub0ac\ub2e4\uba74 \uc798\ubabb\ub41c \ud53c\ub4dc\ubc31\uc774\uc5c8\uc744 \uac83\uc774\ub2e4. \uc62c\ubc14\ub978 \ud53c\ub4dc\ubc31\uc740 \uc774\ub7f0 \uac83\uc774\ub2e4. \"\uccad\uc911\uc5d0\uac8c \uadf8\ub7f0 \ubc29\uc2dd\uc73c\ub85c \uc758\uacac\uc744 \uad6c\ud558\uac8c \ub418\uba74, \uacb0\uad6d \ubbf8\uad6d\uc778\ub4e4\ub9cc \ucc38\uc5ec\ud558\uac8c \ub429\ub2c8\ub2e4.\" \ub354 \uc88b\uc740 \ubc29\ubc95\ub3c4 \uc788\ub2e4. \"\ud68c\uc758\uc7a5\uc5d0 \uc788\ub294 \ub2e4\ub978 \ub098\ub77c \ucd9c\uc2e0\ub4e4\uc5d0\uac8c \uc758\uacac\uc744 \uad6c\ud558\ub294 \ubc29\ubc95\uc744 \ucc3e\uc744 \uc218 \uc788\ub2e4\uba74, \uad50\uc218\ub2d8\uc758 \uba54\uc2dc\uc9c0\ub294 \ub354\uc6b1 \ubd84\uba85\ud558\uac8c \uc804\ub2ec\ub420 \uac81\ub2c8\ub2e4.\" \ud53c\ub4dc\ubc31\uc744 \ubc1b\uc744 \ub54c APPRECIATE(\uac10\uc0ac\ud558\ub77c): \ube44\ud310\uc744 \ubc1b\uc73c\uba74 \ubcc0\uba85\ubd80\ud130 \ud558\ub824 \ub4dc\ub294 \uac83\uc774 \uc778\uac04\uc758 \uc790\uc5f0\uc2a4\ub7ec\uc6b4 \ubcf8\ub2a5\uc774\ub2e4. \uadf8\ub7f0 \uc0c1\ud669\uc5d0\uc11c\ub294 \ub204\uad6c\ub098 \ubc18\uc0ac\uc801\uc73c\ub85c \uc790\uc874\uc2ec\uc774\ub098 \uccb4\uba74\uc744 \uc9c0\ud0a4\ub824\uace0 \ud55c\ub2e4. \uadf8\ub7ec\ub2c8 \ud53c\ub4dc\ubc31\uc744 \ubc1b\uc73c\uba74 \uc774\ub7f0 \uc790\uc5f0\uc2a4\ub7ec\u3151\uc6b4 \ubc18\uc751\uc744 \uc790\uc81c\ud558\uace0 \uc774\ub807\uac8c \uc790\ubb38\ud574 \ubd10\uc57c \ud55c\ub2e4. \"\uc5b4\ub5bb\uac8c \ud574\uc57c \uc0c1\ub300\ubc29\uc758 \uace0\uc5b8\uc744 \uc2e0\uc911\ud558\uac8c \ub4e3\uace0, \uc5f4\ub9b0 \ub9c8\uc74c\uc73c\ub85c \uadf8 \uc758\ubbf8\ub97c \uc9da\uc5b4\ubcf4\uba70, \uc218\uc138\ub97c \ucde8\ud558\uac70\ub098 \ud654\ub97c \ub0b4\uc9c0 \uc54a\uace0 \uac10\uc0ac\ud55c \ub9c8\uc74c\uc744 \ud45c\ud604\ud560 \uc218 \uc788\uc744\uae4c?\" ACCEPT OR DISCARD(\ubc1b\uc544\ub4e4\uc774\uac70\ub098 \uac70\ubd80\ud558\ub77c): \ub137\ud50c\ub9ad\uc2a4\uc5d0\uc11c \uc77c\ud558\ub2e4 \ubcf4\uba74 \ub9ce\uc740 \uc0ac\ub78c\uc744\ubcf4\ubd80\ud130 \ub9ce\uc740 \ud53c\ub4dc\ubc31\uc744 \ubc1b\uac8c \ub41c\ub2e4. \uc5b4\ub5a4 \ud53c\ub4dc\ubc31\uc774\ub4e0 \uc77c\ub2e8 \ub4e3\uace0 \uc0dd\uac01\ud574 \ubd10\uc57c \ud55c\ub2e4. \ubc18\ub4dc\uc2dc \ub530\ub97c \ud544\uc694\ub294 \uc5c6\ub2e4. \uc9c4\uc2ec\uc744 \ub2f4\uc544 \"\uace0\ub9d9\ub2e4\"\uace0 \ub9d0\ud558\ub418, \ud53c\ub4dc\ubc31\uc758 \uc218\uc6a9 \uc5ec\ubd80\ub294 \uc804\uc801\uc73c\ub85c \ubc1b\ub294 \uc0ac\ub78c\uc5d0\uac8c \ub2ec\ub838\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc591\uce21 \ubaa8\ub450\uac00 \uc774\ud574\ud574\uc57c \ud55c\ub2e4. \ub0b4 \uc0dd\uac01: \uc790\uc2e0\uc758 \uc0dd\uac01\uc5d0 \uc4f8\ubaa8\uc5c6\uc740 \ud53c\ub4dc\ubc31\ub9cc \uc8fc\ub294 \uc0ac\ub78c\ub3c4 \uc788\uc744 \uc218 \uc788\ub294\ub370, \uadf8\ub7f4 \ub54c\ub294 \uc5b4\ub5bb\uac8c \ub300\ucc98\ud558\ub294 \uac83\uc774 \uc88b\uc744\uae4c? 2\uc7a5\uc744 \uc77d\uc73c\uba74\uc11c \ub290\ub080 \uc810: \ub611\ub611\ud55c \uc0ac\ub78c\ub4e4\uc744 \ub9ce\uc774 \ubaa8\uc544\ub193\uc73c\uba74, \ub108\ubb34 \uae30\ubcf8\uc801\uc778 \uaddc\uc815\ub4e4\uc744 \uc815\ud560 \ud544\uc694\uac00 \uc5c6\uace0 \ub354\uc6b1 \uc790\uc720\ub85c\uc6b0\uba70 \uc77c\uc5d0\ub9cc \uc9d1\uc911\ud560 \uc218 \uc788\ub294 \ud658\uacbd\uc744 \ub9cc\ub4e4 \uc218 \uc788\ub2e4. 2\uc7a5\uae4c\uc9c0 \uc77d\uc5c8\uc74c","title":"A4 \ud53c\ub4dc\ubc31 \uc9c0\uce68"},{"location":"honeytip/conference_reviews/2020_kakao_if/tech_supporting_kakao/","text":"\uce74\uce74\uc624\ub97c \uc9c0\ud0f1\ud558\ub294 \uae30\uc220 \ub9ac\ubdf0 \uc694\uc57d: \uc774 \uc601\uc0c1\uc740 kakao if\uc5d0\uc11c \uc8fc\ub85c \uc5b4\ub5a4 \ub3d9\uc601\uc0c1\ub4e4\uc774 \uc788\ub294\uc9c0 \uc18c\uac1c\ud558\ub294 \uc601\uc0c1\uc774\uc5c8\uc2b5\ub2c8\ub2e4. https://if.kakao.com/session/11 DB \ub2e4\uc591\ud55c RDBMS\uc640 \ub354\ubd88\uc5b4 \ubabd\uace0 DB\ub97c \ub9ce\uc774 \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. open source\ub97c \ud65c\uc6a9\ud55c hive \ubaa8\ub2c8\ud130\ub9c1 \uad6c\ucd95 \uacbd\ud5d8 \uba5c\ub860 - IDC \uc774\uc804 \ubb34\uc911\ub2e8 CDC \uae30\uc220 \uba38\uc2e0\ub7ec\ub2dd \ub370\uc774\ud130\ub97c \uc774\uc6a9\ud55c \ucd94\ucc9c \uc54c\uace0\ub9ac\uc998 \ub300\ubd80\ubd84\uc758 \uc11c\ube44\uc2a4\uc5d0\uc11c \uc0ac\uc6a9 \uc911 \uce74\uce74\uc624\uc758 \uc138\ubc88 \uc9f8 \ud0ed \ub2e4\uc74c \uba54\uc778 \ud654\uba74\uc758 \ub274\uc2a4 \ucd94\ucc9c \uce74\uce74\uc624\ud1a1\uc5d0\uc11c \uc5b4\ubdf0\uc800\ub4e4\uc744 \ub9c9\uae30 \uce74\uce74\uc624 \ud398\uc774\uc5d0\uc11c \uc774\uc0c1 \uac70\ub798 \ud0d0\uc9c0 \uce74\uce74\uc624 \uc5d0\uc11c \uc790\uccb4 \uba38\uc2e0\ub7ec\ub2dd \ub300\ud68c\ub97c \ud558\uace0 \uc788\ub294\uc9c0 \uce74\uce74\uc624 \uc544\ub808\ub098 \uc62c\ud574\ub294 \uba5c\ub860 \uc0ac\uc6a9\uc790\ub97c \uc704\ud55c \uc74c\uc545 \ucd94\ucc9c \ud074\ub77c\uc6b0\ub4dc \ucfe0\ubc84\ub124\ud2f0\uc2a4\ub97c \ub3c4\uc785\ud560 \ub54c \uc720\uc758 \uc810 9rum\uc774\ub77c\ub294 \ud074\ub77c\uc6b0\ub4dc\ub97c \uac00\uc9c0\uace0 \uc788\uc74c \uc790\uccb4 \ub370\uc774\ud130\uc13c\ud130\ub97c \uc9c0\uc744 \uc608\uc815 \uc544\ub798\uc758 \ud56d\ubaa9 \uace0\ub824 \uc548\uc804\uc131 \ud655\uc7a5\uc131 \ud6a8\uc728\uc131 \ubcf4\uc548\uc131 \uce74\uce74\uc624\uc758 \uac1c\ubc1c \ubb38\ud654 open work \uc138\uc158\uc5d0\uc11c \uc124\uba85 \uac1c\ubc1c \ubc29\ubc95\ub860 BDD TDD \uc8fc\ub2c8\uc5b4 \uac1c\ubc1c\uc790 \uc131\uc7a5 \ud2b8\ub799 5\uac1c\uc758 \uc601\uc0c1 \ud074\ub77c\uc774\uc5b8\ud2b8 \uae30\uc220 \uc138\uc158 \uacac\uace0\ud55c app \uac1c\ubc1c\ub860 \uba5c\ub860 ios \uc624\ub514\uc624 \ud504\ub85c\uadf8\ub798\ubc0d \ud504\ub860\ud2b8\uc5d4\ub4dc \ub2e4\uc591\ud55c \ub514\ubc84\uae45 \ud301&\ud14c\ud06c \uac1c\ubc1c \ud50c\ub7ab\ud3fc & \ud234\ud0b7 \uacf5\uac1c\ud558\uace0 \uc788\ub294 open api \uc18c\uc15c api \ube44\uc988\ub2c8\uc2a4 api \uc778\uacf5\uc9c0\ub2a5 api \uc624\ud508\uc18c\uc2a4 \uad00\ub9ac \uc2dc\uc2a4\ud15c kakao olive \uce74\uce74\uc624\uac00 \ucf54\ub85c\ub098\ub85c \uc778\ud574 \ud798\ub4e4\uc5c8\ub358 \uc810? \ud06c\uac8c \uc5c6\uc5c8\uc74c \uc804\uc0ac\uac00 \ub9ac\ubaa8\ud2b8\ub85c \uc77c \ud558\ub294 \uac83\uc740 \ucc98\uc74c","title":"\uce74\uce74\uc624\ub97c \uc9c0\ud0f1\ud558\ub294 \uae30\uc220"},{"location":"honeytip/conference_reviews/2020_kakao_if/tech_supporting_kakao/#_1","text":"\ub9ac\ubdf0 \uc694\uc57d: \uc774 \uc601\uc0c1\uc740 kakao if\uc5d0\uc11c \uc8fc\ub85c \uc5b4\ub5a4 \ub3d9\uc601\uc0c1\ub4e4\uc774 \uc788\ub294\uc9c0 \uc18c\uac1c\ud558\ub294 \uc601\uc0c1\uc774\uc5c8\uc2b5\ub2c8\ub2e4. https://if.kakao.com/session/11","title":"\uce74\uce74\uc624\ub97c \uc9c0\ud0f1\ud558\ub294 \uae30\uc220"},{"location":"honeytip/conference_reviews/2020_kakao_if/tech_supporting_kakao/#db","text":"\ub2e4\uc591\ud55c RDBMS\uc640 \ub354\ubd88\uc5b4 \ubabd\uace0 DB\ub97c \ub9ce\uc774 \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. open source\ub97c \ud65c\uc6a9\ud55c hive \ubaa8\ub2c8\ud130\ub9c1 \uad6c\ucd95 \uacbd\ud5d8 \uba5c\ub860 - IDC \uc774\uc804 \ubb34\uc911\ub2e8 CDC \uae30\uc220","title":"DB"},{"location":"honeytip/conference_reviews/2020_kakao_if/tech_supporting_kakao/#_2","text":"\ub370\uc774\ud130\ub97c \uc774\uc6a9\ud55c \ucd94\ucc9c \uc54c\uace0\ub9ac\uc998 \ub300\ubd80\ubd84\uc758 \uc11c\ube44\uc2a4\uc5d0\uc11c \uc0ac\uc6a9 \uc911 \uce74\uce74\uc624\uc758 \uc138\ubc88 \uc9f8 \ud0ed \ub2e4\uc74c \uba54\uc778 \ud654\uba74\uc758 \ub274\uc2a4 \ucd94\ucc9c \uce74\uce74\uc624\ud1a1\uc5d0\uc11c \uc5b4\ubdf0\uc800\ub4e4\uc744 \ub9c9\uae30 \uce74\uce74\uc624 \ud398\uc774\uc5d0\uc11c \uc774\uc0c1 \uac70\ub798 \ud0d0\uc9c0 \uce74\uce74\uc624 \uc5d0\uc11c \uc790\uccb4 \uba38\uc2e0\ub7ec\ub2dd \ub300\ud68c\ub97c \ud558\uace0 \uc788\ub294\uc9c0 \uce74\uce74\uc624 \uc544\ub808\ub098 \uc62c\ud574\ub294 \uba5c\ub860 \uc0ac\uc6a9\uc790\ub97c \uc704\ud55c \uc74c\uc545 \ucd94\ucc9c","title":"\uba38\uc2e0\ub7ec\ub2dd"},{"location":"honeytip/conference_reviews/2020_kakao_if/tech_supporting_kakao/#_3","text":"\ucfe0\ubc84\ub124\ud2f0\uc2a4\ub97c \ub3c4\uc785\ud560 \ub54c \uc720\uc758 \uc810 9rum\uc774\ub77c\ub294 \ud074\ub77c\uc6b0\ub4dc\ub97c \uac00\uc9c0\uace0 \uc788\uc74c \uc790\uccb4 \ub370\uc774\ud130\uc13c\ud130\ub97c \uc9c0\uc744 \uc608\uc815 \uc544\ub798\uc758 \ud56d\ubaa9 \uace0\ub824 \uc548\uc804\uc131 \ud655\uc7a5\uc131 \ud6a8\uc728\uc131 \ubcf4\uc548\uc131","title":"\ud074\ub77c\uc6b0\ub4dc"},{"location":"honeytip/conference_reviews/2020_kakao_if/tech_supporting_kakao/#_4","text":"open work \uc138\uc158\uc5d0\uc11c \uc124\uba85 \uac1c\ubc1c \ubc29\ubc95\ub860 BDD TDD \uc8fc\ub2c8\uc5b4 \uac1c\ubc1c\uc790 \uc131\uc7a5 \ud2b8\ub799 5\uac1c\uc758 \uc601\uc0c1","title":"\uce74\uce74\uc624\uc758 \uac1c\ubc1c \ubb38\ud654"},{"location":"honeytip/conference_reviews/2020_kakao_if/tech_supporting_kakao/#_5","text":"\uacac\uace0\ud55c app \uac1c\ubc1c\ub860 \uba5c\ub860 ios \uc624\ub514\uc624 \ud504\ub85c\uadf8\ub798\ubc0d \ud504\ub860\ud2b8\uc5d4\ub4dc \ub2e4\uc591\ud55c \ub514\ubc84\uae45 \ud301&\ud14c\ud06c","title":"\ud074\ub77c\uc774\uc5b8\ud2b8 \uae30\uc220 \uc138\uc158"},{"location":"honeytip/conference_reviews/2020_kakao_if/tech_supporting_kakao/#_6","text":"\uacf5\uac1c\ud558\uace0 \uc788\ub294 open api \uc18c\uc15c api \ube44\uc988\ub2c8\uc2a4 api \uc778\uacf5\uc9c0\ub2a5 api \uc624\ud508\uc18c\uc2a4 \uad00\ub9ac \uc2dc\uc2a4\ud15c kakao olive","title":"\uac1c\ubc1c \ud50c\ub7ab\ud3fc &amp; \ud234\ud0b7"},{"location":"honeytip/conference_reviews/2020_kakao_if/tech_supporting_kakao/#_7","text":"\ud06c\uac8c \uc5c6\uc5c8\uc74c \uc804\uc0ac\uac00 \ub9ac\ubaa8\ud2b8\ub85c \uc77c \ud558\ub294 \uac83\uc740 \ucc98\uc74c","title":"\uce74\uce74\uc624\uac00 \ucf54\ub85c\ub098\ub85c \uc778\ud574 \ud798\ub4e4\uc5c8\ub358 \uc810?"},{"location":"honeytip/jsgame/","text":"javascript\ub85c \uac8c\uc784 \ub9cc\ub4e4\uae30 \ub9c8\uc6b0\uc2a4\uc640 \ud0a4\ubcf4\ub4dc \ub458 \ub2e4 \uac8c\uc784 \uc870\uc791\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uc18c\uc2a4\ucf54\ub4dc\ub294 \uac19\uc740 \ud3f4\ub354\uc5d0 \ucca8\ubd80\ub418\uc5b4 \uc788\uc73c\uba70, \ubd80\ub52a\ud790 \ub54c\ub9c8\ub2e4 \uacf5\uc758 \uc0c9\uae54\uc774 \ubcc0\uacbd\ub429\ub2c8\ub2e4. pure javascript\ub85c \uc791\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4.","title":"javascript game making. using canvas"},{"location":"honeytip/jsgame/#javascript","text":"\ub9c8\uc6b0\uc2a4\uc640 \ud0a4\ubcf4\ub4dc \ub458 \ub2e4 \uac8c\uc784 \uc870\uc791\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uc18c\uc2a4\ucf54\ub4dc\ub294 \uac19\uc740 \ud3f4\ub354\uc5d0 \ucca8\ubd80\ub418\uc5b4 \uc788\uc73c\uba70, \ubd80\ub52a\ud790 \ub54c\ub9c8\ub2e4 \uacf5\uc758 \uc0c9\uae54\uc774 \ubcc0\uacbd\ub429\ub2c8\ub2e4. pure javascript\ub85c \uc791\uc131\ub418\uc5c8\uc2b5\ub2c8\ub2e4.","title":"javascript\ub85c \uac8c\uc784 \ub9cc\ub4e4\uae30"},{"location":"honeytip/reading_matters/","text":"reading matters \ucc45 \uc774\uc678\uc758 \ub2e4\uc591\ud55c \uc77d\uc744 \uac70\ub9ac\ub4e4\uc744 \uc815\ub9ac\ud574 \ub450\ub294 \uc7a5\uc18c\uc785\ub2c8\ub2e4. 1. \uc774\uc0c1\ud55c \ubaa8\uc784 \ucef4\ud30c\uc77c\ub7ec\uc5d0 \ub300\ud574 \uac80\uc0c9\ud558\ub2e4\uac00 python ast\ub85c \uac80\uc0c9\ud574\uc11c \uc54c\uac8c\ub41c \uc0ac\uc774\ud2b8\uc785\ub2c8\ub2e4. \uc7ac\ubbf8\uc788\ub294 \uc8fc\uc81c\ub4e4\uc774 \uaf64 \ub9ce\uc2b5\ub2c8\ub2e4. \ucef4\ub355\ub4e4\uc774 \ub9ce\uc740 \ub4ef \ud569\ub2c8\ub2e4.","title":"index"},{"location":"honeytip/reading_matters/#reading-matters","text":"\ucc45 \uc774\uc678\uc758 \ub2e4\uc591\ud55c \uc77d\uc744 \uac70\ub9ac\ub4e4\uc744 \uc815\ub9ac\ud574 \ub450\ub294 \uc7a5\uc18c\uc785\ub2c8\ub2e4.","title":"reading matters"},{"location":"honeytip/reading_matters/#1","text":"\ucef4\ud30c\uc77c\ub7ec\uc5d0 \ub300\ud574 \uac80\uc0c9\ud558\ub2e4\uac00 python ast\ub85c \uac80\uc0c9\ud574\uc11c \uc54c\uac8c\ub41c \uc0ac\uc774\ud2b8\uc785\ub2c8\ub2e4. \uc7ac\ubbf8\uc788\ub294 \uc8fc\uc81c\ub4e4\uc774 \uaf64 \ub9ce\uc2b5\ub2c8\ub2e4. \ucef4\ub355\ub4e4\uc774 \ub9ce\uc740 \ub4ef \ud569\ub2c8\ub2e4.","title":"1. \uc774\uc0c1\ud55c \ubaa8\uc784"},{"location":"honeytip/reading_matters/1/","text":"1. \uc774\uc0c1\ud55c \ubaa8\uc784 PYTHON AST\ub97c \ubcf4\ub2e4\uac00 \uc54c\uac8c \ub41c \uc0ac\uc774\ud2b8\uc785\ub2c8\ub2e4. https://blog.weirdx.io/ \ud765\ubbf8\ub85c\uc6b4 \uc8fc\uc81c\ub4e4\uc774 \ub9ce\uc544\ubcf4\uc5ec \uc77c\ub2e8 \uc800\uc7a5!","title":"1: \uc774\uc0c1\ud55c \ubaa8\uc784"},{"location":"honeytip/reading_matters/1/#1","text":"PYTHON AST\ub97c \ubcf4\ub2e4\uac00 \uc54c\uac8c \ub41c \uc0ac\uc774\ud2b8\uc785\ub2c8\ub2e4. https://blog.weirdx.io/ \ud765\ubbf8\ub85c\uc6b4 \uc8fc\uc81c\ub4e4\uc774 \ub9ce\uc544\ubcf4\uc5ec \uc77c\ub2e8 \uc800\uc7a5!","title":"1. \uc774\uc0c1\ud55c \ubaa8\uc784"},{"location":"html-canvas/","text":"html canvas 1\ubd84 \ucf54\ub529 \ub2d8\uc758 canvas \uac15\uc758\ub97c \ubcf4\uace0 \uc815\ub9ac\ub97c \ud569\ub2c8\ub2e4. https://www.youtube.com/watch?v=JFQOgt5DMBY&t=360s day1: canvas \uc2dc\uc791","title":"index"},{"location":"html-canvas/#html-canvas","text":"1\ubd84 \ucf54\ub529 \ub2d8\uc758 canvas \uac15\uc758\ub97c \ubcf4\uace0 \uc815\ub9ac\ub97c \ud569\ub2c8\ub2e4. https://www.youtube.com/watch?v=JFQOgt5DMBY&t=360s","title":"html canvas"},{"location":"html-canvas/#day1-canvas","text":"","title":"day1: canvas \uc2dc\uc791"},{"location":"html-canvas/1/","text":"day 1: canvas \uc2dc\uc791 1. canvas \uc9c0\uc6d0 \ud655\uc778 \uc800\ub294 \uac15\uc758\uc640 \ub2e4\ub974\uac8c CDN\uc73c\ub85c modernizr\ub85c \uc2e4\ud589\ud588\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js\" integrity = \"sha512-3n19xznO0ubPpSwYCRRBgHh63DrV+bdZfHK52b1esvId4GsfwStQNPJFjeQos2h3JwCmZl0/LgLxSKMAI55hgw==\" crossorigin = \"anonymous\" referrerpolicy = \"no-referrer\" ></ script > < script > if ( Modernizr . canvas ) { console . log ( \"Canvas\ub97c \uc9c0\uc6d0\ud558\ub294 \ube0c\ub77c\uc6b0\uc800\" ) } </ script > </ body > </ html > 2. \uce94\ubc84\uc2a4 \uc0ac\uc774\uc988 \uc124\uc815 \uce94\ubc84\uc2a4\uc758 \uc0ac\uc774\uc988\ub97c \uc124\uc815\ud558\ub294 \ubd80\ubd84\uc740 \ub450 \ubd80\ubd84\uc774 \uc788\uc74c html\uc758 property\uc5d0\uc11c \uc124\uc815(width, height) css\uc5d0\uc11c \uc124\uc815(width, height) \uace0\ud574\uc0c1\ub3c4 \uc774\ubbf8\uc9c0\ub97c \uc5bb\ub294 \ubc29\ubc95 html\uc758 property\uc5d0\uc11c \uc774\ubbf8\uc9c0 \uc0ac\uc774\uc988 \uc124\uc815 css\uc5d0\uc11c width, height\ub97c \uc904\uc5ec\ubc84\ub9ac\uae30 \ud06c\uac8c \ub9cc\ub4e0 \ub2e4\uc74c\uc5d0 \uc0ac\uc774\uc988\ub97c 1/2\ub85c \uc904\uc5ec\ubc84\ub9ac\uba74 \ud574\uc0c1\ub3c4\uac00 \uc88b\uc74c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < style > * { background : #fff ; } body { margin : 0 ; } . canvas { width : 500 px ; height : 300 px ; background : #eee ; } </ style > </ head > < body > < canvas class = \"canvas\" id = \"canvas\" width = \"500\" height = \"300\" > \uc774 \ube0c\ub77c\uc6b0\uc800\ub294 \uce94\ubc84\uc2a4\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. </ canvas > < canvas class = \"canvas\" id = \"canvas2\" width = \"1000\" height = \"600\" ></ canvas > < script > const canvas1 = document . querySelector ( '#canvas' ); const cnavas2 = document . querySelector ( '#canvas2' ); const context = canvas1 . getContext ( '2d' ); const context2 = canvas2 . getContext ( '2d' ); context . arc ( 100 , 100 , 50 , 0 , Math . PI * 2 , false ); context2 . arc ( 100 , 100 , 50 , 0 , Math . PI * 2 , false ); context . fill (); context2 . fill (); </ script > </ body > </ html > 3. \uc0c9\uce60\ud558\uae30 canvas\ub294 \uadf8\ub0e5 \uadf8\ub9bc\uc73c\ub85c \uc0dd\uac01\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < style > body { margin : 0 ; } . canvas { width : 500 px ; height : 300 px ; background : #eee ; } </ style > </ head > < body > < canvas class = \"canvas\" id = \"canvas\" width = \"500\" height = \"300\" > \uc774 \ube0c\ub77c\uc6b0\uc800\ub294 \uce94\ubc84\uc2a4\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. </ canvas > < script > // fillRect // clearRect // strokeRect const canvas = document . querySelector ( '.canvas' ); const context = canvas . getContext ( '2d' ); context . fillRect ( 50 , 50 , 100 , 100 ); context . fillStyle = 'red' ; context . fillRect ( 0 , 0 , 100 , 100 ); context . clearRect ( 80 , 80 , 50 , 50 ); context . strokeRect ( 150 , 150 , 100 , 100 ); </ script > </ body > </ html > 4. \uc120 \uae0b\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < style > body { margin : 0 ; } . canvas { width : 500 px ; height : 300 px ; background : #eee ; } </ style > </ head > < body > < canvas class = \"canvas\" id = \"canvas\" width = \"500\" height = \"300\" > \uc774 \ube0c\ub77c\uc6b0\uc800\ub294 \uce94\ubc84\uc2a4\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. </ canvas > < script > // fillRect // clearRect // strokeRect const canvas = document . querySelector ( '.canvas' ); const context = canvas . getContext ( '2d' ); context . beginPath (); context . moveTo ( 100 , 100 ); context . lineTo ( 300 , 200 ); context . stroke (); context . fill (); </ script > </ body > </ html > \uc120\uc744 \uadf8\ub9b4 \uac70\uba74, stroke \uc0c9\uc744 \ucc44\uc6b8 \uac70\uba74, fill 5. \uc6d0 \uadf8\ub9ac\uae30 \uc6d0 \uadf8\ub9ac\uae30\ub294 \uc5c6\uace0, \ud638(arc)\ub97c \uc774\uc6a9\ud574\uc11c \uadf8\ub824\uc57c \ud569\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < style > body { margin : 0 ; } . canvas { background : #eee ; } </ style > </ head > < body > < canvas class = \"canvas\" id = \"canvas\" width = \"600\" height = \"400\" > \uc774 \ube0c\ub77c\uc6b0\uc800\ub294 \uce94\ubc84\uc2a4\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. </ canvas > < script > function radian ( degree ){ return degree * Math . PI / 180 ; } // fillRect // clearRect // strokeRect const canvas = document . querySelector ( '.canvas' ); const context = canvas . getContext ( '2d' ); context . beginPath (); context . arc ( 300 , 200 , 50 , 0 , radian ( 360 ), false ); context . stroke (); context . closePath (); context . beginPath (); // \ub9c8\uc9c0\ub9c9 boolean \uc778\uc790\ub294 \uc2dc\uacc4\ubc29\ud5a5\uc73c\ub85c \uadf8\ub9b4\uc9c0, \ubc18 \uc2dc\uacc4\ubc29\ud5a5\uc73c\ub85c \uadf8\ub9b4\uc9c0 context . arc ( 500 , 100 , 20 , 0 , radian ( 360 ), false ); context . stroke (); context . closePath (); </ script > </ body > </ html > \uc704\uc5d0\uc11c beginPath, closePath\ub97c \uc548 \ud574\uc8fc\uace0 stroke()\ub97c \ud574\uc8fc\uba74, \uc120\ub4e4\uc774 \uc5f0\uacb0\ub429\ub2c8\ub2e4. 6. \uc560\ub2c8\uba54\uc774\uc158 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < style > body { margin : 0 ; } . canvas { background : #eee ; } </ style > </ head > < body > < canvas class = \"canvas\" id = \"canvas\" width = \"500\" height = \"300\" > \uc774 \ube0c\ub77c\uc6b0\uc800\ub294 \uce94\ubc84\uc2a4\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. </ canvas > < script > const canvas = document . querySelector ( '.canvas' ); const context = canvas . getContext ( '2d' ); let xPos = 10 ; function draw (){ context . clearRect ( 0 , 0 , canvas . width , canvas . height ); context . beginPath (); context . arc ( xPos , 150 , 10 , 0 , Math . PI * 2 ); context . fill (); context . closePath (); xPos += 1 ; window . requestAnimationFrame ( draw ); // 60\ubd84\uc758 1\ucd08\ub97c \ubaa9\ud45c\ub85c \uacc4\uc18d \uadf8\ub9bc } draw (); </ script > </ body > </ html > \uad81\uae08\ud55c \uc810 vscode\uc5d0\uc11c\ub294 \uc790\ub3d9\uc73c\ub85c js\ub85c \ucf54\ub529\ud560 \ub54c getContext \ub4f1\uc758 \ud568\uc218\uac00 \uc790\ub3d9\uc73c\ub85c \ub098\uc624\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \uc5b4\ub5a4 \ubc29\ubc95\uc744 \uc801\uc6a9\ud574\uc57c intelli sense \uae30\ub2a5\uc774 \ud65c\uc131\ud654 \ub420\uae4c\uc694..?","title":"day1: canvas \uc0ac\uc6a9\ud558\uae30"},{"location":"html-canvas/1/#day-1-canvas","text":"","title":"day 1: canvas \uc2dc\uc791"},{"location":"html-canvas/1/#1-canvas","text":"\uc800\ub294 \uac15\uc758\uc640 \ub2e4\ub974\uac8c CDN\uc73c\ub85c modernizr\ub85c \uc2e4\ud589\ud588\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > </ head > < body > < script src = \"https://cdnjs.cloudflare.com/ajax/libs/modernizr/2.8.3/modernizr.min.js\" integrity = \"sha512-3n19xznO0ubPpSwYCRRBgHh63DrV+bdZfHK52b1esvId4GsfwStQNPJFjeQos2h3JwCmZl0/LgLxSKMAI55hgw==\" crossorigin = \"anonymous\" referrerpolicy = \"no-referrer\" ></ script > < script > if ( Modernizr . canvas ) { console . log ( \"Canvas\ub97c \uc9c0\uc6d0\ud558\ub294 \ube0c\ub77c\uc6b0\uc800\" ) } </ script > </ body > </ html >","title":"1. canvas \uc9c0\uc6d0 \ud655\uc778"},{"location":"html-canvas/1/#2","text":"\uce94\ubc84\uc2a4\uc758 \uc0ac\uc774\uc988\ub97c \uc124\uc815\ud558\ub294 \ubd80\ubd84\uc740 \ub450 \ubd80\ubd84\uc774 \uc788\uc74c html\uc758 property\uc5d0\uc11c \uc124\uc815(width, height) css\uc5d0\uc11c \uc124\uc815(width, height) \uace0\ud574\uc0c1\ub3c4 \uc774\ubbf8\uc9c0\ub97c \uc5bb\ub294 \ubc29\ubc95 html\uc758 property\uc5d0\uc11c \uc774\ubbf8\uc9c0 \uc0ac\uc774\uc988 \uc124\uc815 css\uc5d0\uc11c width, height\ub97c \uc904\uc5ec\ubc84\ub9ac\uae30 \ud06c\uac8c \ub9cc\ub4e0 \ub2e4\uc74c\uc5d0 \uc0ac\uc774\uc988\ub97c 1/2\ub85c \uc904\uc5ec\ubc84\ub9ac\uba74 \ud574\uc0c1\ub3c4\uac00 \uc88b\uc74c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < style > * { background : #fff ; } body { margin : 0 ; } . canvas { width : 500 px ; height : 300 px ; background : #eee ; } </ style > </ head > < body > < canvas class = \"canvas\" id = \"canvas\" width = \"500\" height = \"300\" > \uc774 \ube0c\ub77c\uc6b0\uc800\ub294 \uce94\ubc84\uc2a4\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. </ canvas > < canvas class = \"canvas\" id = \"canvas2\" width = \"1000\" height = \"600\" ></ canvas > < script > const canvas1 = document . querySelector ( '#canvas' ); const cnavas2 = document . querySelector ( '#canvas2' ); const context = canvas1 . getContext ( '2d' ); const context2 = canvas2 . getContext ( '2d' ); context . arc ( 100 , 100 , 50 , 0 , Math . PI * 2 , false ); context2 . arc ( 100 , 100 , 50 , 0 , Math . PI * 2 , false ); context . fill (); context2 . fill (); </ script > </ body > </ html >","title":"2. \uce94\ubc84\uc2a4 \uc0ac\uc774\uc988 \uc124\uc815"},{"location":"html-canvas/1/#3","text":"canvas\ub294 \uadf8\ub0e5 \uadf8\ub9bc\uc73c\ub85c \uc0dd\uac01\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < style > body { margin : 0 ; } . canvas { width : 500 px ; height : 300 px ; background : #eee ; } </ style > </ head > < body > < canvas class = \"canvas\" id = \"canvas\" width = \"500\" height = \"300\" > \uc774 \ube0c\ub77c\uc6b0\uc800\ub294 \uce94\ubc84\uc2a4\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. </ canvas > < script > // fillRect // clearRect // strokeRect const canvas = document . querySelector ( '.canvas' ); const context = canvas . getContext ( '2d' ); context . fillRect ( 50 , 50 , 100 , 100 ); context . fillStyle = 'red' ; context . fillRect ( 0 , 0 , 100 , 100 ); context . clearRect ( 80 , 80 , 50 , 50 ); context . strokeRect ( 150 , 150 , 100 , 100 ); </ script > </ body > </ html >","title":"3. \uc0c9\uce60\ud558\uae30"},{"location":"html-canvas/1/#4","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < style > body { margin : 0 ; } . canvas { width : 500 px ; height : 300 px ; background : #eee ; } </ style > </ head > < body > < canvas class = \"canvas\" id = \"canvas\" width = \"500\" height = \"300\" > \uc774 \ube0c\ub77c\uc6b0\uc800\ub294 \uce94\ubc84\uc2a4\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. </ canvas > < script > // fillRect // clearRect // strokeRect const canvas = document . querySelector ( '.canvas' ); const context = canvas . getContext ( '2d' ); context . beginPath (); context . moveTo ( 100 , 100 ); context . lineTo ( 300 , 200 ); context . stroke (); context . fill (); </ script > </ body > </ html > \uc120\uc744 \uadf8\ub9b4 \uac70\uba74, stroke \uc0c9\uc744 \ucc44\uc6b8 \uac70\uba74, fill","title":"4. \uc120 \uae0b\uae30"},{"location":"html-canvas/1/#5","text":"\uc6d0 \uadf8\ub9ac\uae30\ub294 \uc5c6\uace0, \ud638(arc)\ub97c \uc774\uc6a9\ud574\uc11c \uadf8\ub824\uc57c \ud569\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < style > body { margin : 0 ; } . canvas { background : #eee ; } </ style > </ head > < body > < canvas class = \"canvas\" id = \"canvas\" width = \"600\" height = \"400\" > \uc774 \ube0c\ub77c\uc6b0\uc800\ub294 \uce94\ubc84\uc2a4\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. </ canvas > < script > function radian ( degree ){ return degree * Math . PI / 180 ; } // fillRect // clearRect // strokeRect const canvas = document . querySelector ( '.canvas' ); const context = canvas . getContext ( '2d' ); context . beginPath (); context . arc ( 300 , 200 , 50 , 0 , radian ( 360 ), false ); context . stroke (); context . closePath (); context . beginPath (); // \ub9c8\uc9c0\ub9c9 boolean \uc778\uc790\ub294 \uc2dc\uacc4\ubc29\ud5a5\uc73c\ub85c \uadf8\ub9b4\uc9c0, \ubc18 \uc2dc\uacc4\ubc29\ud5a5\uc73c\ub85c \uadf8\ub9b4\uc9c0 context . arc ( 500 , 100 , 20 , 0 , radian ( 360 ), false ); context . stroke (); context . closePath (); </ script > </ body > </ html > \uc704\uc5d0\uc11c beginPath, closePath\ub97c \uc548 \ud574\uc8fc\uace0 stroke()\ub97c \ud574\uc8fc\uba74, \uc120\ub4e4\uc774 \uc5f0\uacb0\ub429\ub2c8\ub2e4.","title":"5. \uc6d0 \uadf8\ub9ac\uae30"},{"location":"html-canvas/1/#6","text":"","title":"6. \uc560\ub2c8\uba54\uc774\uc158"},{"location":"html-canvas/1/#_1","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta http-equiv = \"X-UA-Compatible\" content = \"IE=edge\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Document </ title > < style > body { margin : 0 ; } . canvas { background : #eee ; } </ style > </ head > < body > < canvas class = \"canvas\" id = \"canvas\" width = \"500\" height = \"300\" > \uc774 \ube0c\ub77c\uc6b0\uc800\ub294 \uce94\ubc84\uc2a4\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. </ canvas > < script > const canvas = document . querySelector ( '.canvas' ); const context = canvas . getContext ( '2d' ); let xPos = 10 ; function draw (){ context . clearRect ( 0 , 0 , canvas . width , canvas . height ); context . beginPath (); context . arc ( xPos , 150 , 10 , 0 , Math . PI * 2 ); context . fill (); context . closePath (); xPos += 1 ; window . requestAnimationFrame ( draw ); // 60\ubd84\uc758 1\ucd08\ub97c \ubaa9\ud45c\ub85c \uacc4\uc18d \uadf8\ub9bc } draw (); </ script > </ body > </ html >","title":""},{"location":"html-canvas/1/#_2","text":"vscode\uc5d0\uc11c\ub294 \uc790\ub3d9\uc73c\ub85c js\ub85c \ucf54\ub529\ud560 \ub54c getContext \ub4f1\uc758 \ud568\uc218\uac00 \uc790\ub3d9\uc73c\ub85c \ub098\uc624\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \uc5b4\ub5a4 \ubc29\ubc95\uc744 \uc801\uc6a9\ud574\uc57c intelli sense \uae30\ub2a5\uc774 \ud65c\uc131\ud654 \ub420\uae4c\uc694..?","title":"\uad81\uae08\ud55c \uc810"},{"location":"interpreter/","text":"interpreter in go day01: lexing reference: \ubc11\ubc14\ub2e5\ubd80\ud130 \ub9cc\ub4dc\ub294 interpreter in go","title":"index"},{"location":"interpreter/#interpreter-in-go","text":"","title":"interpreter in go"},{"location":"interpreter/#day01-lexing","text":"reference: \ubc11\ubc14\ub2e5\ubd80\ud130 \ub9cc\ub4dc\ub294 interpreter in go","title":"day01: lexing"},{"location":"interpreter/01/","text":"day 01: lexing \uc18c\uc2a4\ucf54\ub4dc\ub85c \uc5b4\ub5a4 \uc791\uc5c5\uc744 \ud558\ub824\uba74 \ucf54\ub4dc\ub97c \uc880 \ub354 \ub2e4\ub8e8\uae30 \uc26c\uc6b4 \ud615\ud0dc\ub85c \ubc14\uafb8\uc5b4\uc57c \ud568 \uc18c\uc2a4\ucf54\ub4dc -> token -> \ucd94\uc0c1 \uad6c\ubb38 \ud2b8\ub9ac \uc5b4\ud718 \ubd84\uc11d(lexical analysis): \uc18c\uc2a4\ucf54\ub4dc\ub97c \ud1a0\ud070 \uc5f4\ub85c \ubcc0\ud658\ud558\ub294 \uc791\uc5c5 \uc774 \uc791\uc5c5\uc740 lexer\ub77c\ub294 \uac83\uc774 \uc218\ud589\uc744 \ud569\ub2c8\ub2e4. lexer\ub294 \ub2e4\ub978 \uc774\ub984\uc73c\ub85c tokenizer, scanner \ub4f1\uc73c\ub85c\ub3c4 \ubd88\ub9bd\ub2c8\ub2e4. \ud30c\uc11c: \ud1a0\ud070\uc744 \ud30c\uc11c\uc5d0 \uc785\ub825\ud558\uba74 \ud30c\uc11c\ub294 \ud1a0\ud070 \uc5f4\uc744 \ucd94\uc0c1 \uad6c\ubb38 \ud2b8\ub9ac(Abstract Syntax Tree)\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4. \uc608\uc2dc \uc18c\uc2a4\ucf54\ub4dc \"let x = 5 + 5;\" token [ 1 2 3 4 5 6 7 8 9 10 11 12 13 LET, IDENTIFIER(\"x\"), EQUAL_SIGN, INTEGER(5), PLUS_SIGN, INTEGER(5), SEMICOLON ] \uc0c1\uc6a9 \ub809\uc11c\uc5d0\uc11c\ub294 \ud589 \ubc88\ud638, \uc5f4 \ubc88\ud638, \ud30c\uc77c \uc774\ub984 \ub4f1\uc744 \ud1a0\ud070\uc5d0 \ubd80\ucc29\ud569\ub2c8\ub2e4. \ubd80\ucc29\ud558\ub294 \uc774\uc720\ub294 \ud30c\uc2f1 \ub2e8\uacc4\uc5d0\uc11c \uc880 \ub354 \uc4f8\ub9cc\ud55c \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.","title":"day1: \ub809\uc2f1"},{"location":"interpreter/01/#day-01-lexing","text":"\uc18c\uc2a4\ucf54\ub4dc\ub85c \uc5b4\ub5a4 \uc791\uc5c5\uc744 \ud558\ub824\uba74 \ucf54\ub4dc\ub97c \uc880 \ub354 \ub2e4\ub8e8\uae30 \uc26c\uc6b4 \ud615\ud0dc\ub85c \ubc14\uafb8\uc5b4\uc57c \ud568 \uc18c\uc2a4\ucf54\ub4dc -> token -> \ucd94\uc0c1 \uad6c\ubb38 \ud2b8\ub9ac \uc5b4\ud718 \ubd84\uc11d(lexical analysis): \uc18c\uc2a4\ucf54\ub4dc\ub97c \ud1a0\ud070 \uc5f4\ub85c \ubcc0\ud658\ud558\ub294 \uc791\uc5c5 \uc774 \uc791\uc5c5\uc740 lexer\ub77c\ub294 \uac83\uc774 \uc218\ud589\uc744 \ud569\ub2c8\ub2e4. lexer\ub294 \ub2e4\ub978 \uc774\ub984\uc73c\ub85c tokenizer, scanner \ub4f1\uc73c\ub85c\ub3c4 \ubd88\ub9bd\ub2c8\ub2e4. \ud30c\uc11c: \ud1a0\ud070\uc744 \ud30c\uc11c\uc5d0 \uc785\ub825\ud558\uba74 \ud30c\uc11c\ub294 \ud1a0\ud070 \uc5f4\uc744 \ucd94\uc0c1 \uad6c\ubb38 \ud2b8\ub9ac(Abstract Syntax Tree)\ub85c \ubcc0\ud658\ud569\ub2c8\ub2e4.","title":"day 01: lexing"},{"location":"interpreter/01/#_1","text":"\uc18c\uc2a4\ucf54\ub4dc \"let x = 5 + 5;\" token [ 1 2 3 4 5 6 7 8 9 10 11 12 13 LET, IDENTIFIER(\"x\"), EQUAL_SIGN, INTEGER(5), PLUS_SIGN, INTEGER(5), SEMICOLON ] \uc0c1\uc6a9 \ub809\uc11c\uc5d0\uc11c\ub294 \ud589 \ubc88\ud638, \uc5f4 \ubc88\ud638, \ud30c\uc77c \uc774\ub984 \ub4f1\uc744 \ud1a0\ud070\uc5d0 \ubd80\ucc29\ud569\ub2c8\ub2e4. \ubd80\ucc29\ud558\ub294 \uc774\uc720\ub294 \ud30c\uc2f1 \ub2e8\uacc4\uc5d0\uc11c \uc880 \ub354 \uc4f8\ub9cc\ud55c \uc5d0\ub7ec \uba54\uc2dc\uc9c0\ub97c \ucd9c\ub825\ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.","title":"\uc608\uc2dc"},{"location":"interpreter/02/","text":"day 02: LEXING(2) - REPL (\uc544\uc9c1 parser\uac00 \uc5c6\uc5b4\uc11c \ud574\ub2f9 \uba85\ub839\uc744 \uc2e4\ud589\ud558\uc9c0\ub294 \ubabb \ud569\ub2c8\ub2e4.) REPL\uc740 Read, Eval, Print, Loop\uc758 \uc57d\uc5b4\uc785\ub2c8\ub2e4. \uc624\ub298 \uc791\uc5c5\ud55c \ub0b4\uc6a9 Lexer \ud55c \uae00\uc790 \uc9dc\ub9ac operator(\uc608\ub97c \ub4e4\uc5b4, =, -, + \ub4f1)\ub97c \ucd94\uac00\ud588\uace0, \ub450 \uae00\uc790 \uc9dc\ub9ac operator(!=, == \ub4f1)\uc744 \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec \uae00\uc790 \uc9dc\ub9ac operator\ub97c \uc2dd\ubcc4\ud560 \ub54c\ub294 peekChar()\ub77c\ub294 \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c, \ub2e4\uc74c \ud55c\uae00\uc790\ub97c \uacc4\uc18d \ud655\uc778\ud558\uba74\uc11c \ubc18\ubcf5\ud574\uc11c character\ub97c \uc77d\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \ud1a0\ud070\uc744 \ub9cc\ub4e4 \ub54c\ub294 lexer\uac00 \ud55c\uae00\uc790\ub97c \uc77d\uc5b4\ubcf4\uace0 \ud2b9\uc218\ubb38\uc790\uc774\uba74 \ud574\ub2f9 operator\ub85c \uc5f0\uacb0\uc744 \ud558\uace0, \ud2b9\uc218\ubb38\uc790\uac00 \uc544\ub2c8\uba74 \uc5ec\ub7ec \uae00\uc790\ub97c \uc77d\uc5b4\uc11c \uae00\uc790 \ucc98\ub9ac\ub97c \ud569\ub2c8\ub2e4. keywords map\uc5d0 \ub4e4\uc5b4\uc788\ub294 \ubb38\uc790\uc5f4\uc774\uba74 keyword\ub85c \ucc98\ub9ac\ub418\uace0, \uc5c6\uc73c\uba74 \uc2dd\ubcc4\uc790\ub85c \ucc98\ub9ac\ub429\ub2c8\ub2e4. REPR REPR\uc740 \ud1a0\ud070 \ud558\ub098\uc529\uc744 \uac00\uc838\uc640\uc11c \ud504\ub9b0\ud2b8\ud558\ub294 \uad6c\uc870\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. parser\uac00 \ucd94\uac00\ub418\uba74 AST(Abstract Syntax Tree)\ub85c \uc804\ub2ec\ud574\uc11c \uc2e4\ud589\ud560 \uc608\uc815\uc785\ub2c8\ub2e4. AST\uac00 \ucd94\uc0c1\uad6c\ubb38\ud2b8\ub9ac\uc778 \uc774\uc720\ub294 SEMICOLON, \uad04\ud638 \ub4f1\uc744 \uc81c\uac70\ud558\uace0 \uc2e4\uc9c8\uc801\uc73c\ub85c \ub3d9\uc791\uc5d0 \ud544\uc694\ud55c \uac83\ub4e4\ub9cc \ucd94\uc0c1\ud654 \ud574\uc11c \ub123\uc744 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub809\uc2f1 \ub05d \ub2e4\uc74c : \ud30c\uc11c(Parser)","title":"day2"},{"location":"interpreter/02/#day-02-lexing2-repl","text":"(\uc544\uc9c1 parser\uac00 \uc5c6\uc5b4\uc11c \ud574\ub2f9 \uba85\ub839\uc744 \uc2e4\ud589\ud558\uc9c0\ub294 \ubabb \ud569\ub2c8\ub2e4.) REPL\uc740 Read, Eval, Print, Loop\uc758 \uc57d\uc5b4\uc785\ub2c8\ub2e4. \uc624\ub298 \uc791\uc5c5\ud55c \ub0b4\uc6a9 Lexer \ud55c \uae00\uc790 \uc9dc\ub9ac operator(\uc608\ub97c \ub4e4\uc5b4, =, -, + \ub4f1)\ub97c \ucd94\uac00\ud588\uace0, \ub450 \uae00\uc790 \uc9dc\ub9ac operator(!=, == \ub4f1)\uc744 \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4. \uc5ec\ub7ec \uae00\uc790 \uc9dc\ub9ac operator\ub97c \uc2dd\ubcc4\ud560 \ub54c\ub294 peekChar()\ub77c\ub294 \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c, \ub2e4\uc74c \ud55c\uae00\uc790\ub97c \uacc4\uc18d \ud655\uc778\ud558\uba74\uc11c \ubc18\ubcf5\ud574\uc11c character\ub97c \uc77d\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \ud1a0\ud070\uc744 \ub9cc\ub4e4 \ub54c\ub294 lexer\uac00 \ud55c\uae00\uc790\ub97c \uc77d\uc5b4\ubcf4\uace0 \ud2b9\uc218\ubb38\uc790\uc774\uba74 \ud574\ub2f9 operator\ub85c \uc5f0\uacb0\uc744 \ud558\uace0, \ud2b9\uc218\ubb38\uc790\uac00 \uc544\ub2c8\uba74 \uc5ec\ub7ec \uae00\uc790\ub97c \uc77d\uc5b4\uc11c \uae00\uc790 \ucc98\ub9ac\ub97c \ud569\ub2c8\ub2e4. keywords map\uc5d0 \ub4e4\uc5b4\uc788\ub294 \ubb38\uc790\uc5f4\uc774\uba74 keyword\ub85c \ucc98\ub9ac\ub418\uace0, \uc5c6\uc73c\uba74 \uc2dd\ubcc4\uc790\ub85c \ucc98\ub9ac\ub429\ub2c8\ub2e4. REPR REPR\uc740 \ud1a0\ud070 \ud558\ub098\uc529\uc744 \uac00\uc838\uc640\uc11c \ud504\ub9b0\ud2b8\ud558\ub294 \uad6c\uc870\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. parser\uac00 \ucd94\uac00\ub418\uba74 AST(Abstract Syntax Tree)\ub85c \uc804\ub2ec\ud574\uc11c \uc2e4\ud589\ud560 \uc608\uc815\uc785\ub2c8\ub2e4. AST\uac00 \ucd94\uc0c1\uad6c\ubb38\ud2b8\ub9ac\uc778 \uc774\uc720\ub294 SEMICOLON, \uad04\ud638 \ub4f1\uc744 \uc81c\uac70\ud558\uace0 \uc2e4\uc9c8\uc801\uc73c\ub85c \ub3d9\uc791\uc5d0 \ud544\uc694\ud55c \uac83\ub4e4\ub9cc \ucd94\uc0c1\ud654 \ud574\uc11c \ub123\uc744 \uc218 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub809\uc2f1 \ub05d \ub2e4\uc74c : \ud30c\uc11c(Parser)","title":"day 02: LEXING(2) - REPL"},{"location":"nextjs/","text":"nextjs nextjs\ub294 react\uc5d0 \ub300\ud55c SSR(Server Side Rendering)\uc744 \ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. react\ub294 SPA(Single Page Application)\uc774\ubbc0\ub85c, \uadf8 \ud2b9\uc131\ub3c4 \uadf8\ub300\ub85c nextjs\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, client side rendering, server side rendering\uc744 \ub458 \ub2e4 \ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4. day1: introduction","title":"index"},{"location":"nextjs/#nextjs","text":"nextjs\ub294 react\uc5d0 \ub300\ud55c SSR(Server Side Rendering)\uc744 \ud560 \uc218 \uc788\uac8c \ud574\uc8fc\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. react\ub294 SPA(Single Page Application)\uc774\ubbc0\ub85c, \uadf8 \ud2b9\uc131\ub3c4 \uadf8\ub300\ub85c nextjs\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, client side rendering, server side rendering\uc744 \ub458 \ub2e4 \ud560 \uc218 \uc788\uac8c \ud574\uc90d\ub2c8\ub2e4. day1: introduction","title":"nextjs"},{"location":"nextjs/01/","text":"day1: introduction nextjs\ub97c \uc775\ud788\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\uc720\ub294 \ud68c\uc0ac\uc5d0\uc11c frontend\uac00 \ub354 \ud544\uc694\ud55c \ud504\ub85c\uc81d\ud2b8\ub97c \uc9c4\ud589\ud560 \uc77c\uc815\uc774 \uc7a1\ud614\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c canvas\ub85c \ub3d9\uc801\uc778 UI/UX\ub97c \uad6c\uc131\ud558\ub294 \ubc29\ubc95\uc744 \uacf5\ubd80\ud558\ub2e4\uac00, react\ub85c \ud758\ub7ec\ub4e4\uc5b4\uac00\uc11c \uc6b0\uc5f0\ud788 \ubc30\uc6b0\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uccab \ub290\ub08c\uc740, react\ub97c \uc774\uc6a9\ud574\uc11c server/client\ub97c \ub458 \ub2e4 \ub9cc\ub4dc\ub294\ub370 \ub108\ubb34 \uc27d\ub2e4\ub294 \uac83\uc774\uc5c8\uc2b5\ub2c8\ub2e4. static file\uc5d0 \ub300\ud55c \uc2e0\uacbd\uc744 \uc4f8 \ud544\uc694\ub3c4 \uc804\ud600 \uc5c6\uc5c8\uace0, \uae54\ub054\ud588\uc2b5\ub2c8\ub2e4. \uacf5\uc2dd \uc0ac\uc774\ud2b8\ub97c \ub530\ub77c\uc11c \uacf5\ubd80\ub97c \uc9c4\ud589\ud558\uace0 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. client side\uc5d0\uc11c routing\uc744 \ud560 \ub54c\ub294, <Link href> \ub85c \ub77c\uc6b0\ud305 server side\uc5d0\uc11c routing\uc744 \ud560 \ub54c\ub294, <a href> \ub85c \ub77c\uc6b0\ud305 Assets, Metadata, CSS\uae4c\uc9c0 \ud559\uc2b5\ud588\uc2b5\ub2c8\ub2e4. \ub098\uba38\uc9c0\ub294 \ub2e4\uc74c\uc5d0 \uace7 \ud544\uc694\ud560 \ub54c\uc5d0 \ub2e4\uc2dc \uc9c4\ud589\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"day1: Next.js / navigate between pages / assets, metadata, css"},{"location":"nextjs/01/#day1-introduction","text":"nextjs\ub97c \uc775\ud788\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\uc720\ub294 \ud68c\uc0ac\uc5d0\uc11c frontend\uac00 \ub354 \ud544\uc694\ud55c \ud504\ub85c\uc81d\ud2b8\ub97c \uc9c4\ud589\ud560 \uc77c\uc815\uc774 \uc7a1\ud614\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c canvas\ub85c \ub3d9\uc801\uc778 UI/UX\ub97c \uad6c\uc131\ud558\ub294 \ubc29\ubc95\uc744 \uacf5\ubd80\ud558\ub2e4\uac00, react\ub85c \ud758\ub7ec\ub4e4\uc5b4\uac00\uc11c \uc6b0\uc5f0\ud788 \ubc30\uc6b0\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uccab \ub290\ub08c\uc740, react\ub97c \uc774\uc6a9\ud574\uc11c server/client\ub97c \ub458 \ub2e4 \ub9cc\ub4dc\ub294\ub370 \ub108\ubb34 \uc27d\ub2e4\ub294 \uac83\uc774\uc5c8\uc2b5\ub2c8\ub2e4. static file\uc5d0 \ub300\ud55c \uc2e0\uacbd\uc744 \uc4f8 \ud544\uc694\ub3c4 \uc804\ud600 \uc5c6\uc5c8\uace0, \uae54\ub054\ud588\uc2b5\ub2c8\ub2e4. \uacf5\uc2dd \uc0ac\uc774\ud2b8\ub97c \ub530\ub77c\uc11c \uacf5\ubd80\ub97c \uc9c4\ud589\ud558\uace0 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. client side\uc5d0\uc11c routing\uc744 \ud560 \ub54c\ub294, <Link href> \ub85c \ub77c\uc6b0\ud305 server side\uc5d0\uc11c routing\uc744 \ud560 \ub54c\ub294, <a href> \ub85c \ub77c\uc6b0\ud305 Assets, Metadata, CSS\uae4c\uc9c0 \ud559\uc2b5\ud588\uc2b5\ub2c8\ub2e4. \ub098\uba38\uc9c0\ub294 \ub2e4\uc74c\uc5d0 \uace7 \ud544\uc694\ud560 \ub54c\uc5d0 \ub2e4\uc2dc \uc9c4\ud589\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"day1: introduction"},{"location":"os-making/","text":"os \ub9cc\ub4e4\uae30 index git \ub9c1\ud06c \uc9c4\ud589\uc0c1\ud669 day 01: bootstrap day 02: bootloader day 03: protected mode \uc9c4\uc785 day 04: protected mode \uc9c4\uc785(2) day 05: \uc778\ud130\ub7fd\ud2b8\uc640 \uc608\uc678 day 06: IDT day 07: PIC\uc758 \ucd08\uae30\ud654 day 08: PIC\uc758 \ucd08\uae30\ud654 - \uc124\uba85 day 09: PIC\uc758 \uc124\uba85(2) day10: PIC - \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec day11: \ud0a4\ubcf4\ub4dc \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec day12: Task Switching day13: Task Switching\uacfc TSS day14: Task Switching (3) day15: Task Switching(4) day16: CALL \uba85\ub839\uc5d0 \uc758\ud55c Task Switching day17: \ubcf4\ud638(2) day18: \ubcf4\ud638(3) - \ucf5c\uac8c\uc774\ud2b8 reference linux kernel \ucc38\uace0 \uc790\ub8cc: https://0xax.gitbooks.io/linux-insides/content/Booting/linux-bootstrap-2.html linux kernel git: https://github.com/torvalds/linux linux kernel document: https://www.kernel.org/doc/html/latest/x86/boot.html?highlight=boot linux \ub9cc\ub4e4\uae30(in osdev): http://www.osdever.net/bkerndev/Docs/intro.htm \ubc84\ubc0d\uc5c4 \ub300\ud559 os develop: https://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf os tutorial git: https://github.com/cfenollosa/os-tutorial","title":"index"},{"location":"os-making/#os-index","text":"git \ub9c1\ud06c","title":"os \ub9cc\ub4e4\uae30 index"},{"location":"os-making/#_1","text":"","title":"\uc9c4\ud589\uc0c1\ud669"},{"location":"os-making/#day-01-bootstrap","text":"","title":"day 01: bootstrap"},{"location":"os-making/#day-02-bootloader","text":"","title":"day 02: bootloader"},{"location":"os-making/#day-03-protected-mode","text":"","title":"day 03: protected mode \uc9c4\uc785"},{"location":"os-making/#day-04-protected-mode-2","text":"","title":"day 04: protected mode \uc9c4\uc785(2)"},{"location":"os-making/#day-05","text":"","title":"day 05: \uc778\ud130\ub7fd\ud2b8\uc640 \uc608\uc678"},{"location":"os-making/#day-06-idt","text":"","title":"day 06: IDT"},{"location":"os-making/#day-07-pic","text":"","title":"day 07: PIC\uc758 \ucd08\uae30\ud654"},{"location":"os-making/#day-08-pic-","text":"","title":"day 08: PIC\uc758 \ucd08\uae30\ud654 - \uc124\uba85"},{"location":"os-making/#day-09-pic-2","text":"","title":"day 09: PIC\uc758 \uc124\uba85(2)"},{"location":"os-making/#day10-pic-","text":"","title":"day10: PIC - \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec"},{"location":"os-making/#day11","text":"","title":"day11: \ud0a4\ubcf4\ub4dc \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec"},{"location":"os-making/#day12-task-switching","text":"","title":"day12: Task Switching"},{"location":"os-making/#day13-task-switching-tss","text":"","title":"day13: Task Switching\uacfc TSS"},{"location":"os-making/#day14-task-switching-3","text":"","title":"day14: Task Switching (3)"},{"location":"os-making/#day15-task-switching4","text":"","title":"day15: Task Switching(4)"},{"location":"os-making/#day16-call-task-switching","text":"","title":"day16: CALL \uba85\ub839\uc5d0 \uc758\ud55c Task Switching"},{"location":"os-making/#day17-2","text":"","title":"day17: \ubcf4\ud638(2)"},{"location":"os-making/#day18-3-","text":"","title":"day18: \ubcf4\ud638(3) - \ucf5c\uac8c\uc774\ud2b8"},{"location":"os-making/#reference","text":"linux kernel \ucc38\uace0 \uc790\ub8cc: https://0xax.gitbooks.io/linux-insides/content/Booting/linux-bootstrap-2.html linux kernel git: https://github.com/torvalds/linux linux kernel document: https://www.kernel.org/doc/html/latest/x86/boot.html?highlight=boot linux \ub9cc\ub4e4\uae30(in osdev): http://www.osdever.net/bkerndev/Docs/intro.htm \ubc84\ubc0d\uc5c4 \ub300\ud559 os develop: https://www.cs.bham.ac.uk/~exr/lectures/opsys/10_11/lectures/os-dev.pdf os tutorial git: https://github.com/cfenollosa/os-tutorial","title":"reference"},{"location":"os-making/01/","text":"day 01: bootstrap \uc624\ub298\uc758 \uacb0\uacfc\ubb3c \ud658\uacbd\uc124\uc815 HOST OS: windows 10 vmware workstation player \uc124\uce58 \ucc98\uc74c\uc5d0\ub294 windows\uc5d0 \ub0b4\uc7a5\ub41c hyper-v\ub97c \uc0ac\uc6a9\ud558\ub824\uace0 \ud588\uc9c0\ub9cc, hyper-v\uc5d0\ub294 \ud50c\ub85c\ud53c \ub514\uc2a4\ud06c\ub97c \uc0ac\uc6a9\ud558\ub824\uace0 \ud560 \ub54c VFD\ub77c\ub294 \uac00\uc0c1 \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c\ub97c \ub9cc\ub4e4\uc5b4 \uc918\uc57c \ud588\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ub418\uba74, FAT32 \ud30c\uc77c \uc2dc\uc2a4\ud15c\uae4c\uc9c0 \uad6c\ud604\ud558\uace0 \uadf8 \uc548\uc5d0 bootstrap\uc744 \ub123\uc5b4\uc57c \ud588\uae30 \ub54c\ubb38\uc5d0 hyper-v \ub300\uc2e0\uc5d0 vmware workstation\uc744 \uc120\ud0dd\ud588\uc2b5\ub2c8\ub2e4. \uc5b4\uc148\ube14\ub9ac: nasm \uc124\uce58 masm, tasm\ub3c4 \uc788\uc9c0\ub9cc \uc774\uac83\ub4e4\uc740 windows\uc5d0 \uad6d\ud55c\ub418\ub294 assembly\ub77c\uc11c \uc81c\uc678\ud588\uc2b5\ub2c8\ub2e4 hex editor: hxd \uc124\uce58 010 editor\uc5d0 \ube44\ud574 \ubb34\ub8cc\uc774\uace0 \uac00\ubccd\uae30 \ub54c\ubb38\uc5d0 hxd\ub97c \uc124\uce58\ud588\uc2b5\ub2c8\ub2e4. \uc18c\uc2a4\ucf54\ub4dc(nasm assembly code, IA-32 syntax) \uc544\ub798\uc758 \ud504\ub85c\uadf8\ub7a8\uc740 \ubd80\ud305\uc774 \ub418\uba74\uc11c BIOS\uac00 \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c\uc758 MBR(\uccab 512\ubc14\uc774\ud2b8)\uc5d0 \ub4e4\uc5b4\uc788\ub294 \ubc14\uc774\ub108\ub9ac\ub97c \uc77d\uc5b4\ub4e4\uc5ec\uc11c \ub7a8\uc758 \ubb3c\ub9ac\uc8fc\uc18c 0x7c00\ubc88\uc9c0\uc5d0 \ubcf5\uc0ac\ud55c \ud6c4, 0x7c00 \ubc88\uc9c0\ub85c \uc810\ud504\ud569\ub2c8\ub2e4. \ubc14\uc774\uc624\uc2a4\uac00 \uc810\ud504\ud560 \ub54c 0x0000:7C00 \ubc29\uc2dd\uc73c\ub85c \uc810\ud504\ud588\uae30 \ub54c\ubb38\uc5d0 CPU\uc5d0 \uc758\ud574 \uc790\ub3d9\uc801\uc73c\ub85c CS(\ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8) \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 0x0000\uc774, IP \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 0x7c00\uc774 \ub4e4\uc5b4\uac00 \uc788\ub294 \uc0c1\ud0dc\uc785\ub2c8\ub2e4. CS, DS, ES \ub4f1\uc758 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uc5d0 \uac12\uc744 \ub123\uc744 \ub54c\ub294 \uaf2d AX, BX \ub4f1 \ubc94\uc6a9 \ub808\uc9c0\uc2a4\ud130\ub97c \uac70\uccd0\uc11c \uac12\uc744 \ub123\uc5b4\uc57c \ud569\ub2c8\ub2e4.(\uadf8\ub300\ub85c \ub300\uc785\ud558\uba74 \ucef4\ud30c\uc77c \ub3c4\uc911 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \uc774\uc720\ub294 \ud574\ub2f9 opcode\uac00 \uc5c6\uc5b4\uc11c \uadf8\ub807\uc9c0 \uc54a\uc744\uae4c \uc2f6\uc2b5\ub2c8\ub2e4.) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 ; bootstrap.asm [org 0] ; \uba54\ubaa8\ub9ac \ub0b4 \ucd08\uae30 \ub85c\ub529 \uc704\uce58 [bits 16] ; \ud0c0\uac9f \ud504\ub85c\uc138\uc11c\uc758 \ubaa8\ub4dc\ub97c \uc9c0\uc815 - https://www.nasm.us/xdoc/2.10.09/html/nasmdoc6.html jmp 0x07c0:start ; far jump(CS:IP) ; 0x07c0\uc740 \uac00\uc0c1 \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc778\ub370, \ubb3c\ub9ac \uba54\ubaa8\ub9ac \uc8fc\uc18c\ub294 0x07c00\uc774\uace0, \uc774\uac78 \ubc14\uafd4\uc8fc\ub294 \uc5ed\ud560\uc740 CPU\uc758 MMU\uac00 \ud574\uc90d\ub2c8\ub2e4. ; real mode\uc5d0\uc11c\uc758 \uac00\uc0c1 \uba54\ubaa8\ub9ac \uacc4\uc0b0 \ubc29\uc2dd\uc740 SEGMENT*0x10(left bitshift 4\ubc88) + OFFSET \uc785\ub2c8\ub2e4. ; protected mode\uc5d0\uc11c\ub294 \ub3d9\uc791\ubc29\uc2dd\uc774 \ub2e4\ub985\ub2c8\ub2e4. start: mov ax, cs ; cs\uc5d0\ub294 0x07C0\uc774 \ub4e4\uc5b4\uac00 \uc788\uc2b5\ub2c8\ub2e4. mov ds, ax ; ds\ub97c cs\uc640 \uac19\uac8c \ud574\uc90d\ub2c8\ub2e4. mov ax, 0xB800 ; \ube44\ub514\uc624 \uba54\ubaa8\ub9ac\uc758 \uc138\uadf8\uba3c\ud2b8\ub97c mov es, ax ; es \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub123\uc2b5\ub2c8\ub2e4. mov di, 0 ; \uc81c\uc77c \uc717\uc904\uc758 \ucc98\uc74c\uc5d0 \uc4f8 \uac83\uc774\ub77c\uace0 \uc54c\ub9bc mov ax, word [msgBack] ; \uc368\uc57c \ud560 \ub370\uc774\ud130\uc758 \uc8fc\uc18c \uac12\uc744 \uc9c0\uc815 mov cx, 0x7FF ; \ud654\uba74 \uc804\uccb4\uc5d0 \uc4f0\uae30 \uc704\ud574\uc11c\ub294 ; 0x7FF(10\uc9c4\uc218 2047)\uac1c\uc758 WORD\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. paint: mov word [es:di], ax ; \ube44\ub514\uc624 \uba54\ubaa8\ub9ac\uc5d0 \uc501\ub2c8\ub2e4. add di, 2 ; \ud55c WORD\ub97c \uc37c\uc73c\ubbc0\ub85c 2\ub97c \ub354\ud569\ub2c8\ub2e4. dec cx ; \ud55c WORD\ub97c \uc37c\uc73c\ubbc0\ub85c CX\uc758 \uac12\uc744 \ud558\ub098 \uc904\uc785\ub2c8\ub2e4. jnz paint ; CX\uac00 0\uc774 \uc544\ub2c8\uba74 paint\ub85c \uc810\ud504\ud558\uc5ec \ub098\uba38\uc9c0\ub97c \ub354 \uc501\ub2c8\ub2e4. mov edi, 0 ; \uc81c\uc77c \uc717\uc904\uc758 \ucc98\uc74c\uc5d0 \uc4f8 \uac83\uc774\ub77c\uace0 \uc9c0\uc815 mov byte [es:edi], 'A' ; \ube44\ub514\uc624 \uba54\ubaa8\ub9ac\uc5d0 write inc edi ; \ud55c \uac1c\uc758 BYTE\ub97c \uc37c\uc73c\ubbc0\ub85c 1\uc744 \ub354\ud569\ub2c8\ub2e4. mov byte [es:edi], 0x06 ; \ubc30\uacbd\uc0c9\uc744 write inc edi ; \ud55c \uac1c\uc758 BYTE\ub97c \uc37c\uc73c\ubbc0\ub85c 1\uc744 \ub354\ud569\ub2c8\ub2e4. mov byte [es:edi], 'B' inc edi mov byte [es:edi], 0x06 inc edi mov byte [es:edi], 'C' inc edi mov byte [es:edi], 0x06 inc edi mov byte [es:edi], '1' inc edi mov byte [es:edi], 0x06 inc edi mov byte [es:edi], '2' inc edi mov byte [es:edi], 0x06 inc edi mov byte [es:edi], '3' inc edi mov byte [es:edi], 0x06 jmp $ ; \uc774 \ubc88\uc9c0\uc5d0\uc11c \ubb34\ud55c\ub8e8\ud504\ub97c \ub3d5\ub2c8\ub2e4. msgBack db '.', 0x67 ; \ubc30\uacbd\uc0c9\uc73c\ub85c \uc0ac\uc6a9\ud560 \ub370\uc774\ud130 times 510-($-$$) db 0 ; \uc5ec\uae30\uc5d0\uc11c 509\ubc88\uc9c0\uae4c\uc9c0 0\uc73c\ub85c \ucc44\uc6c1\ub2c8\ub2e4. dw 0xAA55 ; 510\ubc88\uc9c0\uc5d0 0x55\ub97c, 511\ubc88\uc9c0\uc5d0 0xAA\ub97c \ub123\uc5b4\ub461\ub2c8\ub2e4. ; 0xAA55\ub294 \ubd80\ud305 \uac00\ub2a5\ud55c \uac83\uc744 \uc54c\ub9ac\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. ; 0xAA55\ub294 510~511\ubc88\uc9c0\uc5d0 \ub4e4\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc704\uc758 \ucf54\ub4dc\ub97c \uae30\uacc4\uc5b4\ub85c \ubcc0\ud658\ud558\ub294 \uba85\ub839\uc5b4\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. 1 nasm -o bootstrap.img bootstrap.asm \ubc14\uc774\ub108\ub9ac \ub514\uc2a4\uc5b4\uc148\ube14\ub41c \ucf54\ub4dc \uba85\ub839\uc5b4: ndisasm -b16 bootstrap.img 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 ; disassembly 00000000 EA0500C007 jmp 0x7c0:0x5 00000005 8CC8 mov ax,cs 00000007 8ED8 mov ds,ax 00000009 B800B8 mov ax,0xb800 0000000C 8EC0 mov es,ax 0000000E BF0000 mov di,0x0 00000011 A17A00 mov ax,[0x7a] 00000014 B9FF07 mov cx,0x7ff 00000017 268905 mov [es:di],ax 0000001A 83C702 add di,byte +0x2 0000001D 49 dec cx 0000001E 75F7 jnz 0x17 00000020 66BF00000000 mov edi,0x0 00000026 2667C60741 mov byte [es:edi],0x41 0000002B 6647 inc edi 0000002D 2667C60706 mov byte [es:edi],0x6 00000032 6647 inc edi 00000034 2667C60742 mov byte [es:edi],0x42 00000039 6647 inc edi 0000003B 2667C60706 mov byte [es:edi],0x6 00000040 6647 inc edi 00000042 2667C60743 mov byte [es:edi],0x43 00000047 6647 inc edi 00000049 2667C60706 mov byte [es:edi],0x6 0000004E 6647 inc edi 00000050 2667C60731 mov byte [es:edi],0x31 00000055 6647 inc edi 00000057 2667C60706 mov byte [es:edi],0x6 0000005C 6647 inc edi 0000005E 2667C60732 mov byte [es:edi],0x32 00000063 6647 inc edi 00000065 2667C60706 mov byte [es:edi],0x6 0000006A 6647 inc edi 0000006C 2667C60733 mov byte [es:edi],0x33 00000071 6647 inc edi 00000073 2667C60706 mov byte [es:edi],0x6 00000078 EBFE jmp short 0x78 0000007A 2E670000 add [cs:eax],al 0000007E 0000 add [bx+si],al 00000080 0000 add [bx+si],al 00000082 0000 add [bx+si],al 00000084 0000 add [bx+si],al 00000086 0000 add [bx+si],al 00000088 0000 add [bx+si],al ; ... \uc0dd\ub7b5 ... 000001EC 0000 add [bx+si],al 000001EE 0000 add [bx+si],al 000001F0 0000 add [bx+si],al 000001F2 0000 add [bx+si],al 000001F4 0000 add [bx+si],al 000001F6 0000 add [bx+si],al 000001F8 0000 add [bx+si],al 000001FA 0000 add [bx+si],al 000001FC 0000 add [bx+si],al 000001FE 55 push bp 000001FF AA stosb \uae00\uc790\ub97c \ucc0d\uc744 \ub54c, 0xB800 \ub77c\ub294 \uac00\uc0c1 \uba54\ubaa8\ub9ac\uc5d0 \ub370\uc774\ud130\ub97c \ub123\ub294 \uc774\uc720 real mode\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud2b9\uc815\ud55c \uc8fc\uc18c\uac00 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uceec\ub7ec \ud14d\uc2a4\ud2b8 \ubaa8\ub4dc\ub85c \uae00\uc790\ub97c \ucc0d\uc73c\ub824\uace0 \ud558\uba74, B800 \uc601\uc5ed\uc5d0 \ub370\uc774\ud130\ub97c \ub123\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ube44\ub514\uc624 \uba54\ubaa8\ub9ac\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uac12\uc758 \ud615\uc2dd\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ubc30\uacbd\uc0c9\uacfc \uae00\uc790\uc0c9 \ubaa8\ub450 4\ube44\ud2b8\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. done \ub9cc\ub4e4\uba74\uc11c \ubc30\uc6b0\ub294 OS \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac chapter 1 \uc644\ub8cc","title":"day1: bootstrap \ub9cc\ub4e4\uae30"},{"location":"os-making/01/#day-01-bootstrap","text":"","title":"day 01: bootstrap"},{"location":"os-making/01/#_1","text":"","title":"\uc624\ub298\uc758 \uacb0\uacfc\ubb3c"},{"location":"os-making/01/#_2","text":"HOST OS: windows 10 vmware workstation player \uc124\uce58 \ucc98\uc74c\uc5d0\ub294 windows\uc5d0 \ub0b4\uc7a5\ub41c hyper-v\ub97c \uc0ac\uc6a9\ud558\ub824\uace0 \ud588\uc9c0\ub9cc, hyper-v\uc5d0\ub294 \ud50c\ub85c\ud53c \ub514\uc2a4\ud06c\ub97c \uc0ac\uc6a9\ud558\ub824\uace0 \ud560 \ub54c VFD\ub77c\ub294 \uac00\uc0c1 \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c\ub97c \ub9cc\ub4e4\uc5b4 \uc918\uc57c \ud588\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ub418\uba74, FAT32 \ud30c\uc77c \uc2dc\uc2a4\ud15c\uae4c\uc9c0 \uad6c\ud604\ud558\uace0 \uadf8 \uc548\uc5d0 bootstrap\uc744 \ub123\uc5b4\uc57c \ud588\uae30 \ub54c\ubb38\uc5d0 hyper-v \ub300\uc2e0\uc5d0 vmware workstation\uc744 \uc120\ud0dd\ud588\uc2b5\ub2c8\ub2e4. \uc5b4\uc148\ube14\ub9ac: nasm \uc124\uce58 masm, tasm\ub3c4 \uc788\uc9c0\ub9cc \uc774\uac83\ub4e4\uc740 windows\uc5d0 \uad6d\ud55c\ub418\ub294 assembly\ub77c\uc11c \uc81c\uc678\ud588\uc2b5\ub2c8\ub2e4 hex editor: hxd \uc124\uce58 010 editor\uc5d0 \ube44\ud574 \ubb34\ub8cc\uc774\uace0 \uac00\ubccd\uae30 \ub54c\ubb38\uc5d0 hxd\ub97c \uc124\uce58\ud588\uc2b5\ub2c8\ub2e4.","title":"\ud658\uacbd\uc124\uc815"},{"location":"os-making/01/#nasm-assembly-code-ia-32-syntax","text":"\uc544\ub798\uc758 \ud504\ub85c\uadf8\ub7a8\uc740 \ubd80\ud305\uc774 \ub418\uba74\uc11c BIOS\uac00 \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c\uc758 MBR(\uccab 512\ubc14\uc774\ud2b8)\uc5d0 \ub4e4\uc5b4\uc788\ub294 \ubc14\uc774\ub108\ub9ac\ub97c \uc77d\uc5b4\ub4e4\uc5ec\uc11c \ub7a8\uc758 \ubb3c\ub9ac\uc8fc\uc18c 0x7c00\ubc88\uc9c0\uc5d0 \ubcf5\uc0ac\ud55c \ud6c4, 0x7c00 \ubc88\uc9c0\ub85c \uc810\ud504\ud569\ub2c8\ub2e4. \ubc14\uc774\uc624\uc2a4\uac00 \uc810\ud504\ud560 \ub54c 0x0000:7C00 \ubc29\uc2dd\uc73c\ub85c \uc810\ud504\ud588\uae30 \ub54c\ubb38\uc5d0 CPU\uc5d0 \uc758\ud574 \uc790\ub3d9\uc801\uc73c\ub85c CS(\ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8) \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 0x0000\uc774, IP \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 0x7c00\uc774 \ub4e4\uc5b4\uac00 \uc788\ub294 \uc0c1\ud0dc\uc785\ub2c8\ub2e4. CS, DS, ES \ub4f1\uc758 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uc5d0 \uac12\uc744 \ub123\uc744 \ub54c\ub294 \uaf2d AX, BX \ub4f1 \ubc94\uc6a9 \ub808\uc9c0\uc2a4\ud130\ub97c \uac70\uccd0\uc11c \uac12\uc744 \ub123\uc5b4\uc57c \ud569\ub2c8\ub2e4.(\uadf8\ub300\ub85c \ub300\uc785\ud558\uba74 \ucef4\ud30c\uc77c \ub3c4\uc911 \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \uc774\uc720\ub294 \ud574\ub2f9 opcode\uac00 \uc5c6\uc5b4\uc11c \uadf8\ub807\uc9c0 \uc54a\uc744\uae4c \uc2f6\uc2b5\ub2c8\ub2e4.) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 ; bootstrap.asm [org 0] ; \uba54\ubaa8\ub9ac \ub0b4 \ucd08\uae30 \ub85c\ub529 \uc704\uce58 [bits 16] ; \ud0c0\uac9f \ud504\ub85c\uc138\uc11c\uc758 \ubaa8\ub4dc\ub97c \uc9c0\uc815 - https://www.nasm.us/xdoc/2.10.09/html/nasmdoc6.html jmp 0x07c0:start ; far jump(CS:IP) ; 0x07c0\uc740 \uac00\uc0c1 \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc778\ub370, \ubb3c\ub9ac \uba54\ubaa8\ub9ac \uc8fc\uc18c\ub294 0x07c00\uc774\uace0, \uc774\uac78 \ubc14\uafd4\uc8fc\ub294 \uc5ed\ud560\uc740 CPU\uc758 MMU\uac00 \ud574\uc90d\ub2c8\ub2e4. ; real mode\uc5d0\uc11c\uc758 \uac00\uc0c1 \uba54\ubaa8\ub9ac \uacc4\uc0b0 \ubc29\uc2dd\uc740 SEGMENT*0x10(left bitshift 4\ubc88) + OFFSET \uc785\ub2c8\ub2e4. ; protected mode\uc5d0\uc11c\ub294 \ub3d9\uc791\ubc29\uc2dd\uc774 \ub2e4\ub985\ub2c8\ub2e4. start: mov ax, cs ; cs\uc5d0\ub294 0x07C0\uc774 \ub4e4\uc5b4\uac00 \uc788\uc2b5\ub2c8\ub2e4. mov ds, ax ; ds\ub97c cs\uc640 \uac19\uac8c \ud574\uc90d\ub2c8\ub2e4. mov ax, 0xB800 ; \ube44\ub514\uc624 \uba54\ubaa8\ub9ac\uc758 \uc138\uadf8\uba3c\ud2b8\ub97c mov es, ax ; es \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub123\uc2b5\ub2c8\ub2e4. mov di, 0 ; \uc81c\uc77c \uc717\uc904\uc758 \ucc98\uc74c\uc5d0 \uc4f8 \uac83\uc774\ub77c\uace0 \uc54c\ub9bc mov ax, word [msgBack] ; \uc368\uc57c \ud560 \ub370\uc774\ud130\uc758 \uc8fc\uc18c \uac12\uc744 \uc9c0\uc815 mov cx, 0x7FF ; \ud654\uba74 \uc804\uccb4\uc5d0 \uc4f0\uae30 \uc704\ud574\uc11c\ub294 ; 0x7FF(10\uc9c4\uc218 2047)\uac1c\uc758 WORD\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. paint: mov word [es:di], ax ; \ube44\ub514\uc624 \uba54\ubaa8\ub9ac\uc5d0 \uc501\ub2c8\ub2e4. add di, 2 ; \ud55c WORD\ub97c \uc37c\uc73c\ubbc0\ub85c 2\ub97c \ub354\ud569\ub2c8\ub2e4. dec cx ; \ud55c WORD\ub97c \uc37c\uc73c\ubbc0\ub85c CX\uc758 \uac12\uc744 \ud558\ub098 \uc904\uc785\ub2c8\ub2e4. jnz paint ; CX\uac00 0\uc774 \uc544\ub2c8\uba74 paint\ub85c \uc810\ud504\ud558\uc5ec \ub098\uba38\uc9c0\ub97c \ub354 \uc501\ub2c8\ub2e4. mov edi, 0 ; \uc81c\uc77c \uc717\uc904\uc758 \ucc98\uc74c\uc5d0 \uc4f8 \uac83\uc774\ub77c\uace0 \uc9c0\uc815 mov byte [es:edi], 'A' ; \ube44\ub514\uc624 \uba54\ubaa8\ub9ac\uc5d0 write inc edi ; \ud55c \uac1c\uc758 BYTE\ub97c \uc37c\uc73c\ubbc0\ub85c 1\uc744 \ub354\ud569\ub2c8\ub2e4. mov byte [es:edi], 0x06 ; \ubc30\uacbd\uc0c9\uc744 write inc edi ; \ud55c \uac1c\uc758 BYTE\ub97c \uc37c\uc73c\ubbc0\ub85c 1\uc744 \ub354\ud569\ub2c8\ub2e4. mov byte [es:edi], 'B' inc edi mov byte [es:edi], 0x06 inc edi mov byte [es:edi], 'C' inc edi mov byte [es:edi], 0x06 inc edi mov byte [es:edi], '1' inc edi mov byte [es:edi], 0x06 inc edi mov byte [es:edi], '2' inc edi mov byte [es:edi], 0x06 inc edi mov byte [es:edi], '3' inc edi mov byte [es:edi], 0x06 jmp $ ; \uc774 \ubc88\uc9c0\uc5d0\uc11c \ubb34\ud55c\ub8e8\ud504\ub97c \ub3d5\ub2c8\ub2e4. msgBack db '.', 0x67 ; \ubc30\uacbd\uc0c9\uc73c\ub85c \uc0ac\uc6a9\ud560 \ub370\uc774\ud130 times 510-($-$$) db 0 ; \uc5ec\uae30\uc5d0\uc11c 509\ubc88\uc9c0\uae4c\uc9c0 0\uc73c\ub85c \ucc44\uc6c1\ub2c8\ub2e4. dw 0xAA55 ; 510\ubc88\uc9c0\uc5d0 0x55\ub97c, 511\ubc88\uc9c0\uc5d0 0xAA\ub97c \ub123\uc5b4\ub461\ub2c8\ub2e4. ; 0xAA55\ub294 \ubd80\ud305 \uac00\ub2a5\ud55c \uac83\uc744 \uc54c\ub9ac\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. ; 0xAA55\ub294 510~511\ubc88\uc9c0\uc5d0 \ub4e4\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc704\uc758 \ucf54\ub4dc\ub97c \uae30\uacc4\uc5b4\ub85c \ubcc0\ud658\ud558\ub294 \uba85\ub839\uc5b4\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. 1 nasm -o bootstrap.img bootstrap.asm \ubc14\uc774\ub108\ub9ac \ub514\uc2a4\uc5b4\uc148\ube14\ub41c \ucf54\ub4dc \uba85\ub839\uc5b4: ndisasm -b16 bootstrap.img 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 ; disassembly 00000000 EA0500C007 jmp 0x7c0:0x5 00000005 8CC8 mov ax,cs 00000007 8ED8 mov ds,ax 00000009 B800B8 mov ax,0xb800 0000000C 8EC0 mov es,ax 0000000E BF0000 mov di,0x0 00000011 A17A00 mov ax,[0x7a] 00000014 B9FF07 mov cx,0x7ff 00000017 268905 mov [es:di],ax 0000001A 83C702 add di,byte +0x2 0000001D 49 dec cx 0000001E 75F7 jnz 0x17 00000020 66BF00000000 mov edi,0x0 00000026 2667C60741 mov byte [es:edi],0x41 0000002B 6647 inc edi 0000002D 2667C60706 mov byte [es:edi],0x6 00000032 6647 inc edi 00000034 2667C60742 mov byte [es:edi],0x42 00000039 6647 inc edi 0000003B 2667C60706 mov byte [es:edi],0x6 00000040 6647 inc edi 00000042 2667C60743 mov byte [es:edi],0x43 00000047 6647 inc edi 00000049 2667C60706 mov byte [es:edi],0x6 0000004E 6647 inc edi 00000050 2667C60731 mov byte [es:edi],0x31 00000055 6647 inc edi 00000057 2667C60706 mov byte [es:edi],0x6 0000005C 6647 inc edi 0000005E 2667C60732 mov byte [es:edi],0x32 00000063 6647 inc edi 00000065 2667C60706 mov byte [es:edi],0x6 0000006A 6647 inc edi 0000006C 2667C60733 mov byte [es:edi],0x33 00000071 6647 inc edi 00000073 2667C60706 mov byte [es:edi],0x6 00000078 EBFE jmp short 0x78 0000007A 2E670000 add [cs:eax],al 0000007E 0000 add [bx+si],al 00000080 0000 add [bx+si],al 00000082 0000 add [bx+si],al 00000084 0000 add [bx+si],al 00000086 0000 add [bx+si],al 00000088 0000 add [bx+si],al ; ... \uc0dd\ub7b5 ... 000001EC 0000 add [bx+si],al 000001EE 0000 add [bx+si],al 000001F0 0000 add [bx+si],al 000001F2 0000 add [bx+si],al 000001F4 0000 add [bx+si],al 000001F6 0000 add [bx+si],al 000001F8 0000 add [bx+si],al 000001FA 0000 add [bx+si],al 000001FC 0000 add [bx+si],al 000001FE 55 push bp 000001FF AA stosb \uae00\uc790\ub97c \ucc0d\uc744 \ub54c, 0xB800 \ub77c\ub294 \uac00\uc0c1 \uba54\ubaa8\ub9ac\uc5d0 \ub370\uc774\ud130\ub97c \ub123\ub294 \uc774\uc720 real mode\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud2b9\uc815\ud55c \uc8fc\uc18c\uac00 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uceec\ub7ec \ud14d\uc2a4\ud2b8 \ubaa8\ub4dc\ub85c \uae00\uc790\ub97c \ucc0d\uc73c\ub824\uace0 \ud558\uba74, B800 \uc601\uc5ed\uc5d0 \ub370\uc774\ud130\ub97c \ub123\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ube44\ub514\uc624 \uba54\ubaa8\ub9ac\uc5d0 \uc0ac\uc6a9\ub418\ub294 \uac12\uc758 \ud615\uc2dd\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ubc30\uacbd\uc0c9\uacfc \uae00\uc790\uc0c9 \ubaa8\ub450 4\ube44\ud2b8\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","title":"\uc18c\uc2a4\ucf54\ub4dc(nasm assembly code, IA-32 syntax)"},{"location":"os-making/01/#done","text":"\ub9cc\ub4e4\uba74\uc11c \ubc30\uc6b0\ub294 OS \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac chapter 1 \uc644\ub8cc","title":"done"},{"location":"os-making/02/","text":"day 02: bootloader \ub9cc\ub4e4\uae30 \uc624\ub298 \ub9cc\ub4e0 \uacb0\uacfc\ubb3c \uc18c\uc2a4\ucf54\ub4dc \ubd80\ud2b8\ub85c\ub354\ub97c \uc774\uc6a9\ud574\uc11c \ucee4\ub110\ub85c \uc810\ud504\ud55c \ud6c4, \uae00\uc790 \ucd9c\ub825 bootloader.asm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 ; bootloader.asm [org 0] jmp 07C0h:start ; cs, ds, es \uc138\uadf8\uba3c\ud2b8\ub97c \ucd08\uae30\ud654 start: mov ax, cs; BIOS\uc5d0\uc11c cs\ub97c 0, ip\ub97c 07c0\uc73c\ub85c \uc14b\ud305\ud588\uc74c mov ds, ax mov es, ax mov ax, 0xB800 mov es, ax ; es\uc5d0 \ube44\ub514\uc624 \uba54\ubaa8\ub9ac \uc601\uc5ed\uc744 \ub123\uc74c mov di, 0 ; destination index\ub97c 0\uc73c\ub85c \uc138\ud305 mov ax, word [msgBack] mov cx, 0x7FF ;2047 paint: ; \ud654\uba74 \uc804\ubd80\ub97c .\uc73c\ub85c \ucc0d\uc74c mov word [es:di], ax add di, 2 dec cx jnz paint ; int 0x13 \uc5b4\ub290 \uc139\ud130\ub85c \ubd80\ud130 \uba87 \uac1c\uc758 \uc139\ud130\ub97c \uc77d\uc5b4\ub77c ; PARAMETERS ; AH 02h ; AL Sectors To Read Count ; CH Cylinder ; CL Sector ; DH Head ; DL Drive ; ES:BX Buffer Address Pointer ; RESULTS ; CF Set On Error, Clear If No Error ; AH Return Code ; AL Actual Sectors Read Count ; \ub7a8\uc758 0x1000\ubc88\uc9c0\ub85c ax\ub97c \ubcf5\uc0ac\ud558\ub294 \ub8e8\ud2f4 read: mov ax, 0x1000 ; ES:BX = 1000:0000 ; \ubcf5\uc0ac \ubaa9\uc801\uc9c0\uc758 \uc8fc\uc18c\uac12 mov es, ax mov bx, 0 mov ah, 2 ; \ub514\uc2a4\ud06c\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c es:bx\uc758 \uc8fc\uc18c\ub85c mov al, 1 ; 1 \uc139\ud130\ub97c \uc77d\uc744 \uac83\uc774\ub2e4; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c\uc758 \ud55c \uc139\ud130\ub294 512byte mov ch, 0 ; 0\ubc88\uc9f8 \uc2e4\ub9b0\ub354 mov cl, 2 ; 2\ubc88\uc9f8 \uc139\ud130\ubd80\ud130 \uc77d\uae30 \uc2dc\uc791\ud55c\ub2e4. mov dh, 0 ; Head=0 mov dl, 0 ; Drive=0, A: \ub4dc\ub77c\uc774\ube0c int 0x13 ; Read! jc read ; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud568; \uc5d0\ub7ec \ubc1c\uc0dd\uc758 \uacbd\uc6b0 flag \ub808\uc9c0\uc2a4\ud130\uc758 CF \ud50c\ub798\uadf8\uac00 1\ub85c \uc138\ud305\ub428 jmp 0x1000:0000 ; kernel.bin\uc774 \uc704\uce58\ud55c \uacf3\uc73c\ub85c \uc810\ud504\ud55c\ub2e4. msgBack db '.', 0x67 times 510-($-$$) db 0 dw 0AA55h kernel.asm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 [org 0] [bits 16] start: mov ax, cs ; CS\uc5d0\ub294 0x1000\uc774 \ub4e4\uc5b4 \uc788\ub2e4. mov ds, ax xor ax, ax mov ss, ax ; stack segment\ub294 0\uc73c\ub85c \uc138\ud305 lea esi, [msgKernel] ; \ubb38\uc790\uc5f4\uc774 \uc788\ub294 \uacf3\uc758 \uc8fc\uc18c\ub97c \uad6c\ud568 mov ax, 0xB800 mov es, ax ; es\uc5d0 0xB800\uc744 \ub123\ub294\ub2e4 mov edi, 0 ; \ud654\uba74\uc758 \uc81c\uc77c \ucc98\uc74c \ubd80\ubd84\ubd80\ud130 \uc2dc\uc791\ud560 \uac83\uc774\ub2e4. call printf jmp $ printf: push eax ; \uba3c\uc800 \uc788\ub358 eax \uac12\uc744 \uc2a4\ud0dd\uc5d0 \ubcf4\uc874\ud574 \ub193\ub294\ub2e4. printf_loop: mov al, byte [esi] ; esi\uac00 \uac00\ub9ac\ud0a4\ub294 \uc8fc\uc18c\uc5d0\uc11c \ubb38\uc790\ub97c \ud558\ub098 \uac00\uc838\uc628\ub2e4. mov byte [es:edi], al ; \ubb38\uc790\ub97c \ud654\uba74\uc5d0 \ub098\ud0c0\ub0b8\ub2e4. or al, al ; al\uc774 0\uc778\uc9c0\ub97c \uc54c\uc544\ubcf8\ub2e4. jz printf_end ; 0\uc774\ub77c\uba74 print_end\ub85c \uc810\ud504\ud55c\ub2e4. inc edi ; 0\uc774 \uc544\ub2c8\ub77c\uba74 edi\ub97c 1 \uc99d\uac00\uc2dc\ucf1c mov byte [es:edi], 0x06 ; \ubb38\uc790\uc0c9\uacfc \ubc30\uacbd\uc0c9\uc758 \uac12\uc744 \ub123\ub294\ub2e4. inc esi ; \ub2e4\uc74c \ubb38\uc790\ub97c \uaebc\ub0b4\uae30 \uc704\ud574 esi\ub97c \ud558\ub098 \uc99d\uac00\uc2dc\ud0a8\ub2e4. inc edi ; \ud654\uba74\uc5d0 \ub2e4\uc74c \ubb38\uc790\ub97c \ub098\ud0c0\ub0b4\uae30 \uc704\ud574 edi\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4. jmp printf_loop ; \ub8e8\ud504\ub97c \ub3c8\ub2e4. printf_end: pop eax ; \uc2a4\ud0dd\uc5d0 \ubcf4\uc874\ud588\ub358 eax\ub97c \ub2e4\uc2dc \uaebc\ub0b8\ub2e4. ret ; \ud638\ucd9c\ud55c \ubd80\ubd84\uc73c\ub85c \ub3cc\uc544\uac04\ub2e4. msgKernel db \"We are in kernel program\", 0 \uc704\uc758 \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc785\ub825\ud55c \ud6c4, binary\ub97c \ud569\uccd0\uc11c \uc774\ubbf8\uc9c0 \ub9cc\ub4e4\uae30 1 2 3 nasm -f bin -o bootloader.bin src \\b ootloader.asm nasm -f bin -o kernel.bin src \\k ernel.asm copy bootloader.bin + kernel.bin /b kernel.img \ubc14\uc774\ub108\ub9ac \ud655\uc778 \ub9cc\ub4e4\uc5b4\uc9c4 kernel.img \ud30c\uc77c\uc744 \uc0b4\ud3b4\ubcf4\uba74, 512(=0x200)\ubc88\uc9f8 offset\ubd80\ud130 kernel.asm\uc758 \ub0b4\uc6a9\uc774 \ub4e4\uc5b4\uac00 \uc788\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, kernel.img\uc5d0\uc11c \ud558\ub098\uc758 \uc139\ud130 \uc0ac\uc774\uc988\ub294 512byte\uc774\uae30 \ub54c\ubb38\uc5d0 \uc704\uc5d0\uc11c 0x13 \ubc88\uc758 \ubc14\uc774\uc624\uc2a4 \ucf5c\uc744 \ud588\uc744 \ub54c, \ub450 \ubc88\uc9f8 \uc139\ud130\ub97c \uc77d\uc73c\ub77c\uace0 \ud558\uba74 0x0200\ubc88\uc9f8 offset\uc5d0 \uc788\ub294 \uac12\uc744 \uc77d\uc5b4\uc11c \uba54\ubaa8\ub9ac\ub85c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; ... \uc0dd\ub7b5 ... read: mov ax, 0x1000 ; ES:BX = 1000:0000 ; \ubcf5\uc0ac \ubaa9\uc801\uc9c0\uc758 \uc8fc\uc18c\uac12 mov es, ax mov bx, 0 mov ah, 2 ; \ub514\uc2a4\ud06c\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c es:bx\uc758 \uc8fc\uc18c\ub85c mov al, 1 ; 1 \uc139\ud130\ub97c \uc77d\uc744 \uac83\uc774\ub2e4; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c\uc758 \ud55c \uc139\ud130\ub294 512byte mov ch, 0 ; 0\ubc88\uc9f8 \uc2e4\ub9b0\ub354 mov cl, 2 ; 2\ubc88\uc9f8 \uc139\ud130\ubd80\ud130 \uc77d\uae30 \uc2dc\uc791\ud55c\ub2e4. mov dh, 0 ; Head=0 mov dl, 0 ; Drive=0, A: \ub4dc\ub77c\uc774\ube0c int 0x13 ; Read! ; ... \uc0dd\ub7b5 ... \ub2e4\ub978 \ud074\ub7ec\uc2a4\ud130\ub97c \uc77d\ub294 BIOS interrupt call(0x13) int 0x13 \uc5d0 \uc11c\ube44\uc2a4 \ub118\ubc84(02)\ub97c AH\uc5d0 \ub123\uc5b4\uc11c \ud638\ucd9c\ud558\uba74 \uc5b4\ub290 \uc139\ud130\ub85c \ubd80\ud130 \uba87 \uac1c\uc758 \uc139\ud130\ub97c \uc77d\uc5b4\ub77c \ud558\ub294 \uc758\ubbf8\uac00 \ub429\ub2c8\ub2e4. \ucc38\uc870: \uc704\ud0a4\ud53c\ub514\uc544 [PARAMETERS] AH 02h AL Sectors To Read Count CH Cylinder CL Sector - \ud55c \uc139\ud130\uc758 \uc0ac\uc774\uc988\ub294 floppy disk\uc758 \uacbd\uc6b0 512byte\uc785\ub2c8\ub2e4. DH Head DL Drive - \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c\uc778 A \ub4dc\ub77c\uc774\ube0c\ub294 0 ES:BX Buffer Address Pointer [RESULTS] CF Set On Error, Clear If No Error AH Return Code AL Actual Sectors Read Count kernel\uc5d0\uc11c\uc758 \ud568\uc218 \ud638\ucd9c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ; kernel.asm ; ... \uc0dd\ub7b5 ... start: mov ax, cs ; CS\uc5d0\ub294 0x1000\uc774 \ub4e4\uc5b4 \uc788\ub2e4. mov ds, ax xor ax, ax ; ax\ub97c 0\uc73c\ub85c \uc138\ud305 mov ss, ax ; stack segment\ub294 0\uc73c\ub85c \uc138\ud305 lea esi, [msgKernel] ; \ubb38\uc790\uc5f4\uc774 \uc788\ub294 \uacf3\uc758 \uc8fc\uc18c\ub97c \uad6c\ud568 mov ax, 0xB800 mov es, ax ; es\uc5d0 0xB800\uc744 \ub123\ub294\ub2e4 mov edi, 0 ; \ud654\uba74\uc758 \uc81c\uc77c \ucc98\uc74c \ubd80\ubd84\ubd80\ud130 \uc2dc\uc791\ud560 \uac83\uc774\ub2e4. call printf jmp $ ; ... \uc0dd\ub7b5 ... \uc704\uc758 start \ud568\uc218\uc5d0\uc11c stack segment\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654 \ud6c4, printf \ud568\uc218\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. stack\uc744 \uba54\ubaa8\ub9ac \uc8fc\uc18c 0\ubc88\uc5d0\ub2e4 \uc124\uc815\uc744 \ud588\ub294\ub370, \uc57d\uac04 \uc704\ud5d8\ud55c\uac8c \uc544\ub2cc\uac00 \ud558\ub294 \uc0dd\uac01\uc774 \ub4ed\ub2c8\ub2e4. http://staff.ustc.edu.cn/~xyfeng/research/cos/resources/machine/mem.htm \uba54\ubaa8\ub9ac \ub9f5\uc758 \ub808\uc774\uc544\uc6c3\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ubca1\ud130 \ud14c\uc774\ube14\uc744 \ub36e\uc5b4\uc4f8 \uac00\ub2a5\uc131\uc774 \uc788\uc5b4 \ubcf4\uc785\ub2c8\ub2e4. \uc57d\uac04 \uc774 \ubd80\ubd84\uc740 \uc758\uc2ec\uc2a4\ub7fd\uae34 \ud558\uc9c0\ub9cc, \ucc45 \ub0b4\uc6a9\ub300\ub85c \uadf8\ub300\ub85c \ub530\ub77c\uac11\ub2c8\ub2e4. Done \ucc55\ud130 2 - \ucee4\ub110\uc744 \ub85c\ub4dc\ud55c\ub2e4 \ub9c8\ubb34\ub9ac","title":"day2: bootloader \ub9cc\ub4e4\uae30"},{"location":"os-making/02/#day-02-bootloader","text":"","title":"day 02: bootloader \ub9cc\ub4e4\uae30"},{"location":"os-making/02/#_1","text":"","title":"\uc624\ub298 \ub9cc\ub4e0 \uacb0\uacfc\ubb3c"},{"location":"os-making/02/#_2","text":"\ubd80\ud2b8\ub85c\ub354\ub97c \uc774\uc6a9\ud574\uc11c \ucee4\ub110\ub85c \uc810\ud504\ud55c \ud6c4, \uae00\uc790 \ucd9c\ub825 bootloader.asm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 ; bootloader.asm [org 0] jmp 07C0h:start ; cs, ds, es \uc138\uadf8\uba3c\ud2b8\ub97c \ucd08\uae30\ud654 start: mov ax, cs; BIOS\uc5d0\uc11c cs\ub97c 0, ip\ub97c 07c0\uc73c\ub85c \uc14b\ud305\ud588\uc74c mov ds, ax mov es, ax mov ax, 0xB800 mov es, ax ; es\uc5d0 \ube44\ub514\uc624 \uba54\ubaa8\ub9ac \uc601\uc5ed\uc744 \ub123\uc74c mov di, 0 ; destination index\ub97c 0\uc73c\ub85c \uc138\ud305 mov ax, word [msgBack] mov cx, 0x7FF ;2047 paint: ; \ud654\uba74 \uc804\ubd80\ub97c .\uc73c\ub85c \ucc0d\uc74c mov word [es:di], ax add di, 2 dec cx jnz paint ; int 0x13 \uc5b4\ub290 \uc139\ud130\ub85c \ubd80\ud130 \uba87 \uac1c\uc758 \uc139\ud130\ub97c \uc77d\uc5b4\ub77c ; PARAMETERS ; AH 02h ; AL Sectors To Read Count ; CH Cylinder ; CL Sector ; DH Head ; DL Drive ; ES:BX Buffer Address Pointer ; RESULTS ; CF Set On Error, Clear If No Error ; AH Return Code ; AL Actual Sectors Read Count ; \ub7a8\uc758 0x1000\ubc88\uc9c0\ub85c ax\ub97c \ubcf5\uc0ac\ud558\ub294 \ub8e8\ud2f4 read: mov ax, 0x1000 ; ES:BX = 1000:0000 ; \ubcf5\uc0ac \ubaa9\uc801\uc9c0\uc758 \uc8fc\uc18c\uac12 mov es, ax mov bx, 0 mov ah, 2 ; \ub514\uc2a4\ud06c\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c es:bx\uc758 \uc8fc\uc18c\ub85c mov al, 1 ; 1 \uc139\ud130\ub97c \uc77d\uc744 \uac83\uc774\ub2e4; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c\uc758 \ud55c \uc139\ud130\ub294 512byte mov ch, 0 ; 0\ubc88\uc9f8 \uc2e4\ub9b0\ub354 mov cl, 2 ; 2\ubc88\uc9f8 \uc139\ud130\ubd80\ud130 \uc77d\uae30 \uc2dc\uc791\ud55c\ub2e4. mov dh, 0 ; Head=0 mov dl, 0 ; Drive=0, A: \ub4dc\ub77c\uc774\ube0c int 0x13 ; Read! jc read ; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud568; \uc5d0\ub7ec \ubc1c\uc0dd\uc758 \uacbd\uc6b0 flag \ub808\uc9c0\uc2a4\ud130\uc758 CF \ud50c\ub798\uadf8\uac00 1\ub85c \uc138\ud305\ub428 jmp 0x1000:0000 ; kernel.bin\uc774 \uc704\uce58\ud55c \uacf3\uc73c\ub85c \uc810\ud504\ud55c\ub2e4. msgBack db '.', 0x67 times 510-($-$$) db 0 dw 0AA55h kernel.asm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 [org 0] [bits 16] start: mov ax, cs ; CS\uc5d0\ub294 0x1000\uc774 \ub4e4\uc5b4 \uc788\ub2e4. mov ds, ax xor ax, ax mov ss, ax ; stack segment\ub294 0\uc73c\ub85c \uc138\ud305 lea esi, [msgKernel] ; \ubb38\uc790\uc5f4\uc774 \uc788\ub294 \uacf3\uc758 \uc8fc\uc18c\ub97c \uad6c\ud568 mov ax, 0xB800 mov es, ax ; es\uc5d0 0xB800\uc744 \ub123\ub294\ub2e4 mov edi, 0 ; \ud654\uba74\uc758 \uc81c\uc77c \ucc98\uc74c \ubd80\ubd84\ubd80\ud130 \uc2dc\uc791\ud560 \uac83\uc774\ub2e4. call printf jmp $ printf: push eax ; \uba3c\uc800 \uc788\ub358 eax \uac12\uc744 \uc2a4\ud0dd\uc5d0 \ubcf4\uc874\ud574 \ub193\ub294\ub2e4. printf_loop: mov al, byte [esi] ; esi\uac00 \uac00\ub9ac\ud0a4\ub294 \uc8fc\uc18c\uc5d0\uc11c \ubb38\uc790\ub97c \ud558\ub098 \uac00\uc838\uc628\ub2e4. mov byte [es:edi], al ; \ubb38\uc790\ub97c \ud654\uba74\uc5d0 \ub098\ud0c0\ub0b8\ub2e4. or al, al ; al\uc774 0\uc778\uc9c0\ub97c \uc54c\uc544\ubcf8\ub2e4. jz printf_end ; 0\uc774\ub77c\uba74 print_end\ub85c \uc810\ud504\ud55c\ub2e4. inc edi ; 0\uc774 \uc544\ub2c8\ub77c\uba74 edi\ub97c 1 \uc99d\uac00\uc2dc\ucf1c mov byte [es:edi], 0x06 ; \ubb38\uc790\uc0c9\uacfc \ubc30\uacbd\uc0c9\uc758 \uac12\uc744 \ub123\ub294\ub2e4. inc esi ; \ub2e4\uc74c \ubb38\uc790\ub97c \uaebc\ub0b4\uae30 \uc704\ud574 esi\ub97c \ud558\ub098 \uc99d\uac00\uc2dc\ud0a8\ub2e4. inc edi ; \ud654\uba74\uc5d0 \ub2e4\uc74c \ubb38\uc790\ub97c \ub098\ud0c0\ub0b4\uae30 \uc704\ud574 edi\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4. jmp printf_loop ; \ub8e8\ud504\ub97c \ub3c8\ub2e4. printf_end: pop eax ; \uc2a4\ud0dd\uc5d0 \ubcf4\uc874\ud588\ub358 eax\ub97c \ub2e4\uc2dc \uaebc\ub0b8\ub2e4. ret ; \ud638\ucd9c\ud55c \ubd80\ubd84\uc73c\ub85c \ub3cc\uc544\uac04\ub2e4. msgKernel db \"We are in kernel program\", 0","title":"\uc18c\uc2a4\ucf54\ub4dc"},{"location":"os-making/02/#binary","text":"1 2 3 nasm -f bin -o bootloader.bin src \\b ootloader.asm nasm -f bin -o kernel.bin src \\k ernel.asm copy bootloader.bin + kernel.bin /b kernel.img","title":"\uc704\uc758 \uc18c\uc2a4\ucf54\ub4dc\ub97c \uc785\ub825\ud55c \ud6c4, binary\ub97c \ud569\uccd0\uc11c \uc774\ubbf8\uc9c0 \ub9cc\ub4e4\uae30"},{"location":"os-making/02/#_3","text":"\ub9cc\ub4e4\uc5b4\uc9c4 kernel.img \ud30c\uc77c\uc744 \uc0b4\ud3b4\ubcf4\uba74, 512(=0x200)\ubc88\uc9f8 offset\ubd80\ud130 kernel.asm\uc758 \ub0b4\uc6a9\uc774 \ub4e4\uc5b4\uac00 \uc788\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc989, kernel.img\uc5d0\uc11c \ud558\ub098\uc758 \uc139\ud130 \uc0ac\uc774\uc988\ub294 512byte\uc774\uae30 \ub54c\ubb38\uc5d0 \uc704\uc5d0\uc11c 0x13 \ubc88\uc758 \ubc14\uc774\uc624\uc2a4 \ucf5c\uc744 \ud588\uc744 \ub54c, \ub450 \ubc88\uc9f8 \uc139\ud130\ub97c \uc77d\uc73c\ub77c\uace0 \ud558\uba74 0x0200\ubc88\uc9f8 offset\uc5d0 \uc788\ub294 \uac12\uc744 \uc77d\uc5b4\uc11c \uba54\ubaa8\ub9ac\ub85c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 ; ... \uc0dd\ub7b5 ... read: mov ax, 0x1000 ; ES:BX = 1000:0000 ; \ubcf5\uc0ac \ubaa9\uc801\uc9c0\uc758 \uc8fc\uc18c\uac12 mov es, ax mov bx, 0 mov ah, 2 ; \ub514\uc2a4\ud06c\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c es:bx\uc758 \uc8fc\uc18c\ub85c mov al, 1 ; 1 \uc139\ud130\ub97c \uc77d\uc744 \uac83\uc774\ub2e4; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c\uc758 \ud55c \uc139\ud130\ub294 512byte mov ch, 0 ; 0\ubc88\uc9f8 \uc2e4\ub9b0\ub354 mov cl, 2 ; 2\ubc88\uc9f8 \uc139\ud130\ubd80\ud130 \uc77d\uae30 \uc2dc\uc791\ud55c\ub2e4. mov dh, 0 ; Head=0 mov dl, 0 ; Drive=0, A: \ub4dc\ub77c\uc774\ube0c int 0x13 ; Read! ; ... \uc0dd\ub7b5 ...","title":"\ubc14\uc774\ub108\ub9ac \ud655\uc778"},{"location":"os-making/02/#bios-interrupt-call0x13","text":"int 0x13 \uc5d0 \uc11c\ube44\uc2a4 \ub118\ubc84(02)\ub97c AH\uc5d0 \ub123\uc5b4\uc11c \ud638\ucd9c\ud558\uba74 \uc5b4\ub290 \uc139\ud130\ub85c \ubd80\ud130 \uba87 \uac1c\uc758 \uc139\ud130\ub97c \uc77d\uc5b4\ub77c \ud558\ub294 \uc758\ubbf8\uac00 \ub429\ub2c8\ub2e4. \ucc38\uc870: \uc704\ud0a4\ud53c\ub514\uc544 [PARAMETERS] AH 02h AL Sectors To Read Count CH Cylinder CL Sector - \ud55c \uc139\ud130\uc758 \uc0ac\uc774\uc988\ub294 floppy disk\uc758 \uacbd\uc6b0 512byte\uc785\ub2c8\ub2e4. DH Head DL Drive - \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c\uc778 A \ub4dc\ub77c\uc774\ube0c\ub294 0 ES:BX Buffer Address Pointer [RESULTS] CF Set On Error, Clear If No Error AH Return Code AL Actual Sectors Read Count","title":"\ub2e4\ub978 \ud074\ub7ec\uc2a4\ud130\ub97c \uc77d\ub294 BIOS interrupt call(0x13)"},{"location":"os-making/02/#kernel","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 ; kernel.asm ; ... \uc0dd\ub7b5 ... start: mov ax, cs ; CS\uc5d0\ub294 0x1000\uc774 \ub4e4\uc5b4 \uc788\ub2e4. mov ds, ax xor ax, ax ; ax\ub97c 0\uc73c\ub85c \uc138\ud305 mov ss, ax ; stack segment\ub294 0\uc73c\ub85c \uc138\ud305 lea esi, [msgKernel] ; \ubb38\uc790\uc5f4\uc774 \uc788\ub294 \uacf3\uc758 \uc8fc\uc18c\ub97c \uad6c\ud568 mov ax, 0xB800 mov es, ax ; es\uc5d0 0xB800\uc744 \ub123\ub294\ub2e4 mov edi, 0 ; \ud654\uba74\uc758 \uc81c\uc77c \ucc98\uc74c \ubd80\ubd84\ubd80\ud130 \uc2dc\uc791\ud560 \uac83\uc774\ub2e4. call printf jmp $ ; ... \uc0dd\ub7b5 ... \uc704\uc758 start \ud568\uc218\uc5d0\uc11c stack segment\ub97c 0\uc73c\ub85c \ucd08\uae30\ud654 \ud6c4, printf \ud568\uc218\ub97c \ud638\ucd9c\ud569\ub2c8\ub2e4. stack\uc744 \uba54\ubaa8\ub9ac \uc8fc\uc18c 0\ubc88\uc5d0\ub2e4 \uc124\uc815\uc744 \ud588\ub294\ub370, \uc57d\uac04 \uc704\ud5d8\ud55c\uac8c \uc544\ub2cc\uac00 \ud558\ub294 \uc0dd\uac01\uc774 \ub4ed\ub2c8\ub2e4. http://staff.ustc.edu.cn/~xyfeng/research/cos/resources/machine/mem.htm \uba54\ubaa8\ub9ac \ub9f5\uc758 \ub808\uc774\uc544\uc6c3\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ubca1\ud130 \ud14c\uc774\ube14\uc744 \ub36e\uc5b4\uc4f8 \uac00\ub2a5\uc131\uc774 \uc788\uc5b4 \ubcf4\uc785\ub2c8\ub2e4. \uc57d\uac04 \uc774 \ubd80\ubd84\uc740 \uc758\uc2ec\uc2a4\ub7fd\uae34 \ud558\uc9c0\ub9cc, \ucc45 \ub0b4\uc6a9\ub300\ub85c \uadf8\ub300\ub85c \ub530\ub77c\uac11\ub2c8\ub2e4.","title":"kernel\uc5d0\uc11c\uc758 \ud568\uc218 \ud638\ucd9c"},{"location":"os-making/02/#done","text":"\ucc55\ud130 2 - \ucee4\ub110\uc744 \ub85c\ub4dc\ud55c\ub2e4 \ub9c8\ubb34\ub9ac","title":"Done"},{"location":"os-making/03/","text":"day 03: protected mode \uc9c4\uc785\ud558\uae30 \uc624\ub298 \ub9cc\ub4e0 \uacb0\uacfc\ubb3c \uc18c\uc2a4\ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 [org 0] [bits 16] start: mov ax, cs ; CS\uc5d0\ub294 0x1000\uc774 \ub4e4\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. mov ds, ax xor ax, ax mov ss, ax cli ; EFLAGS \ub808\uc9c0\uc2a4\ud130\uc758 IF(interrupt flag)\ub97c 0\uc73c\ub85c clear <=> sti: IF\ube44\ud2b8\ub97c 1\ub85c set. inturrupt \ud65c\uc131\ud654 lgdt[gdtr] ; gdtr \ud3ec\uc778\ud130\uc5d0 \ub530\ub77c\uc11c gdt\ub97c \ub4f1\ub85d\uc2dc\ud0a4\ub294 \uba85\ub839\uc5b4 mov eax, cr0 or eax, 0x00000001 mov cr0, eax jmp $+2 ; \uc65c \uc774\ubd80\ubd84\uc5d0\uc11c jmp $+2 \ub97c \ud558\uc9c0..? nop\uc744 2\uac1c \uc4f0\uace0..? nop nop db 0x66 ; 0x66, 0x67, 0xEA\ub294 \uc798 gdt\uac00 \ub4f1\ub85d \ub418\uc5c8\ub2e4\ub294 \uc758\ubbf8\uc778\uc9c0..? db 0x67 db 0xEA dd PM_Start ; \uc5ec\uae30\ub85c \uc810\ud504..? dw SysCodeSelector ; \uc774 GDT\ub97c \uc0ac\uc6a9\ud574\uc11c....? ;--------------------------------------------; ;********* \uc5ec\uae30\ubd80\ud130 Protected Mode\uc785\ub2c8\ub2e4. ****; ;--------------------------------------------; [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx xor eax, eax mov ax, VideoSelector mov es, ax mov edi, 80*2*10+2*10 ; \ud55c \uc5f4\uc758 \uce78 \uc218 * 2 * \uc368\uc57c\ud560 \uc5f4 \ubc88\ud638 + 2 * \uc368\uc57c\ud560 \uce78 \ubc88\ud638 lea esi, [ds:msgPMode] call printf jmp $ ;--------------------------------------------; ;************** Sub Routines ****************; ;--------------------------------------------; printf: push eax printf_loop: or al, al jz printf_end mov al, byte [esi] mov byte [es:edi], al inc edi mov byte [es:edi], 0x06 inc esi inc edi jmp printf_loop printf_end: pop eax ret msgPMode db \"We are in Protected Mode\", 0 ;-----------------------------------------; ;************** GDT Table ****************; ;-----------------------------------------; gdtr: dw gdt_end - gdt - 1 ; GDT\uc758 limit dd gdt+0x010000 ; GDT\uc758 \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 gdt: dw 0 ; limit 0 ~ 15\ube44\ud2b8 dw 0 ; \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4\uc758 \ud558\uc704 \ub450 \ubc14\uc774\ud2b8 db 0 ; \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 16~32\ube44\ud2b8 db 0 ; \ud0c0\uc785 db 0 ; limit 16~19\ube44\ud2b8, \ud50c\ub798\uadf8 db 0 ; \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 32~24\ube44\ud2b8 ; \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 SysCodeSelector equ 0x08 dw 0xFFFF ; limit:0xFFFF dw 0x0000 ; base 0~15bit db 0x01 ; base 16~32bit db 0x9A ; P:1, DPL:0, Code, non-conforming, readable db 0xCF ; G:1, D:1, limit 16~19 bit:0xF db 0x00 ; base 24~32 bit ; \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 SysDataSelector equ 0x10 dw 0xFFFF ; limit 0xFFFF dw 0x0000 ; base 0~15 bit db 0x01 ; base 16~23 bit db 0x92 ; P:1, DPL: 0, data, expand-up, writable db 0xCF ; G:1, D:1, limit 16~19 bit:0xF db 0x00 ; base 24~32 bit ; \ube44\ub514\uc624 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 VideoSelector equ 0x18 dw 0xFFFF ; limit 0xFFFF dw 0x8000 ; base 0~15 bit db 0x0B ; base 16~23 bit db 0x92 ; P:1, DPL:0, data, expand-up, writable db 0x40 ; G:0, D:1, limit 16~19 bit:0 db 0x00 ; base 24~32 bit gdt_end: GDTR\uc758 \uc815\uc758 GDTR: The Global Descriptor Table (GDT) is a table in memory that defines the processor's memory segments. The GDT sets the behavior of the segment registers and helps to ensure that protected mode operates smoothly. GDTR\uc740 \uba54\ubaa8\ub9ac \uc0c1\uc5d0 \uc874\uc7ac\ud558\uba70, processor\uc758 \uba54\ubaa8\ub9ac \uc138\uadf8\uba3c\ud2b8\ub97c \uc815\uc758\ud558\ub294 \ud14c\uc774\ube14\uc785\ub2c8\ub2e4. GDT\ub294 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uc758 \ub3d9\uc791\uc744 \uc138\ud305\ud558\uace0 protected mode\uac00 \uc798 \ub3d9\uc791\ud558\ub3c4\ub85d \ubcf4\uc7a5\ud569\ub2c8\ub2e4. GDT\ub294 x86 \uce69\uc5d0 \ub4e4\uc5b4\uc788\ub294 GDT Register(=GDTR)\ub77c\ub294 \ud2b9\uc218\ud55c \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc758\ud574 \uc9c0\uc815\ub429\ub2c8\ub2e4(GDT is pointed by ...). GDTR\uc740 48\ube44\ud2b8\ub85c \uad6c\uc131\ub418\uba70 \ud558\uc704 16\ube44\ud2b8\ub294 GDT\uc758 size\uc5d0 \ub300\ud574 \uae30\uc220\ud558\uba70, \uc0c1\uc704 32\ube44\ud2b8\ub294 GDT\uc758 \uba54\ubaa8\ub9ac \uc0c1\uc758 \uc704\uce58\ub97c \uae30\uc220\ud569\ub2c8\ub2e4. GDTR\uc758 layout 1 |LIMIT|----BASE----| LIMIT: GDT\uc758 \uc0ac\uc774\uc988 BASE: GDT\uc758 \uc2dc\uc791 \uc8fc\uc18c LIMIT\uc758 \uc0ac\uc774\uc988\ub294 GDT\uc758 \uc0ac\uc774\uc988\ubcf4\ub2e4 1\uc774 \uc791\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\uc11c GDT\uc758 \uc0ac\uc774\uc988\uac00 16 byte\ub77c\uba74, LIMIT\uc740 15\ub85c \uc9c0\uc815\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. (https://en.wikibooks.org/wiki/X86_Assembly/Global_Descriptor_Table) GDT\uc758 layout \uc704\uc758 Base Address, Limit, \uc18d\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac83\uc744 Descriptor\ub77c\uace0 \ubd80\ub974\uace0, \uadf8\uac83\uc774 \ubaa8\uc5ec\uc788\uae30 \ub54c\ubb38\uc5d0 GDT-\ub514\uc2a4\ud06c\ub9bd\ud130 \ud14c\uc774\ube14 \uc774\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4. GDT\uc758 \uc124\uba85 Limit : \ucd1d 20\ube44\ud2b8\ub85c \uad6c\uc131(0~15, 16~19\ube44\ud2b8\uac00 \ub098\ub258\uc5b4\uc838 \uc788\uc74c). G\ube44\ud2b8\uc640 \ud568\uaed8 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. DPL(Descriptor Priviledge): 2\ube44\ud2b8\ub85c \ub418\uc5b4 \uc788\uc73c\uba70, \ud2b9\uad8c \ub808\ubca8 \uc9c0\uc815\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc778\ud154 x86\uacc4\uc5f4 CPU\uc5d0\uc11c\ub294 0~3\uc758 \uac12\uc73c\ub85c 4\uac00\uc9c0\uc758 \ub808\ubca8\uc774 \uc788\uc73c\ub098, \ubcf4\ud1b5\uc758 \uacbd\uc6b0 \ucee4\ub110\uc744 \uc81c\uc791\ud560 \ub54c\uc5d0\ub294 0\uacfc 3\ub808\ubca8\ub9cc \uc0ac\uc6a9\ud569\ub2c8\ub2e4. DPL\uac12\uc774 0\uc774\uba74 \uc774 \uc138\uadf8\uba3c\ud2b8\uac00 \ucee4\ub110 \ub808\ubca8\uc774\ub77c\ub294 \uac83\uc744 \ub098\ud0c0\ub0b4\uace0, 3\uc774\uba74 \uc774 \uc138\uadf8\uba3c\ud2b8\uac00 \uc720\uc800\ub808\ubca8\uc774\ub77c\ub294 \uac83\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. Type: 4\ube44\ud2b8\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ud574\ub2f9 \uc601\uc5ed\uc774 \ucf54\ub4dc\uc778\uc9c0, \ub370\uc774\ud130 \uc601\uc5ed\uc778\uc9c0 + \uc77d\uae30/\uc4f0\uae30 \uad8c\ud55c, \uc2e4\ud589 \uad8c\ud55c\uc5d0 \ub300\ud55c \uc815\ubcf4\uac00 \ub4e4\uc5b4\uac11\ub2c8\ub2e4. Type Field\uc758 \ucd5c\uc0c1\uc704\ube44\ud2b8 \ub294 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\uc778\uc9c0 \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8\uc778\uc9c0\ub97c \uad6c\ubd84\ud569\ub2c8\ub2e4. Type Field\uc758 \ub9c8\uc9c0\ub9c9 \ube44\ud2b8 \ub294 \uc561\uc138\uc2a4 \ube44\ud2b8\uc778\ub370, \uc5b4\ub5a4 \ud504\ub85c\uadf8\ub7a8\uc774 \uc774 \uc138\uadf8\uba3c\ud2b8\uc5d0 \uc811\uadfc\ud588\uc744 \ub54c CPU\uac00 \uc774\uacf3\uc744 \ucc3e\uc544\uc11c A\ube44\ud2b8\ub97c 1\ub85c \ubc14\uafd4\uc90d\ub2c8\ub2e4. \uadf8\ub7ec\ub098 CPU\ub294 \uc774 \ube44\ud2b8\ub97c 0\uc73c\ub85c \ud074\ub9ac\uc5b4 \ud574\uc8fc\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \ucee4\ub110\uc740 \uba54\ubaa8\ub9ac \uad00\ub9ac\ub97c \ud560 \ub54c \uc774 \ube44\ud2b8\uac00 1\uc774 \ub418\uc5c8\ub294\uc9c0\ub97c \uc870\uc0ac\ud558\uac70\ub098, \uc561\uc138\uc2a4\ub41c \uc138\uadf8\uba3c\ud2b8\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uc544 \uc774 A\ube44\ud2b8\ub97c \uc5b4\ub290 \uc2dc\uac04\uc774 \uc9c0\ub098\uba74 0\uc73c\ub85c \ud558\uac70\ub098 \ud558\ub294 \uc77c\uc744 \ud569\ub2c8\ub2e4. \uc774 \ube44\ud2b8\ub294 \ucee4\ub110\uc758 \uba54\ubaa8\ub9ac \uad00\ub9ac\ub97c \ub3c4\uc640\uc8fc\ub294 \ube44\ud2b8\ub85c CPU \ub3d9\uc791\uc5d0\ub294 \uc544\ubb34\ub7f0 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. GDT \ucd08\uae30\ud654 \uc2dc\uc5d0\ub294 0\uc744 \uae30\uc7ac\ud574 \ub461\ub2c8\ub2e4. Type Field\uc758 \ub450 \ubc88\uc9f8 \ube44\ud2b8 \ub294 \ucd5c\uc0c1\uc704 \ube44\ud2b8\uc5d0 \ub530\ub77c\uc11c \ub2e4\ub974\uac8c \uacb0\uc815\ub429\ub2c8\ub2e4. \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8(\uccab \ubc88\uc9f8 \ube44\ud2b8\uac00 0\uc778 \uacbd\uc6b0)\uc5d0\uc11c\ub294 \ub450 \ubc88\uc9f8 \ube44\ud2b8\uac00 1\uc774\uba74 EXPAND DOWN\uc758 \ud615\ud0dc\ub85c \uc774 \uc138\uadf8\uba3c\ud2b8\uac00 \ud615\uc131\ub41c \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub450 \ubc88\uc9f8 \ube44\ud2b8\uac00 0\uc774\uba74 EXPAND UP \ubc29\uc2dd\uc73c\ub85c \uc138\uadf8\uba3c\ud2b8\uac00 \ud615\uc131\ub41c \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774 \uae30\ub2a5\uc740 \uc774 \uc138\uadf8\uba3c\ud2b8\ub97c \uc2a4\ud0dd\uc73c\ub85c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc138\uadf8\uba3c\ud2b8\uc758 \ud06c\uae30\uac00 \ub3d9\uc801\uc73c\ub85c \ubcc0\ud558\ub3c4\ub85d \ub9cc\ub4e4\uae30 \uc704\ud568\uc785\ub2c8\ub2e4. \uc774 \ube44\ud2b8\ub97c 1\ub85c \uc138\ud305\ud558\uace0 \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \ub3c4\uc911\uc5d0 \uc774 \uc138\uadf8\uba3c\ud2b8\uc758 Limit\uac12\uc744 \ubc14\uafb8\uba74 \uc2a4\ud0dd\uc758 \uc81c\uc77c \ubc11\uc758 \uacf5\uac04\uc5d0 \uc2a4\ud0dd \uacf5\uac04\uc774 \ucd94\uac00\ub429\ub2c8\ub2e4. \uc2a4\ud0dd \uc138\uadf8\uba3c\ud2b8\ub294 \ud56d\uc0c1 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\uc5ec\uc57c \ud558\uace0, \uc77d\uae30/\uc4f0\uae30 \ubaa8\ub450 \uac00\ub2a5\ud574\uc57c \ud569\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \ub3c4\uc911\uc5d0 \uc4f0\uae30\uac00 \ubd88\uac00\ub2a5\ud55c \uc138\uadf8\uba3c\ud2b8\ub97c \uc2a4\ud0dd\uc73c\ub85c \ud558\uba74, \ub2e4\uc2dc \ub9d0\ud574 SS \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc4f0\uae30\uac00 \ubd88\uac00\ub2a5\ud55c \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\ub97c \ub85c\ub4dc\ud558\uba74 #GP \ud3f4\ud2b8\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. Type Field\uc758 \uc138 \ubc88\uc9f8 \ube44\ud2b8 \ub97c 0\uc73c\ub85c \ud558\uba74, \uc774 \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc740 \uc77d\uae30\ub9cc \uac00\ub2a5\ud558\uace0, 1\ub85c \ud558\uba74 \uc138\uadf8\uba3c\ud2b8\ub97c \uc77d\uae30/\uc4f0\uae30 \ubaa8\ub450 \uac00\ub2a5\ud574\uc9d1\ub2c8\ub2e4. G\ube44\ud2b8(Granularity): Limit\uacfc \uad00\ub828\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. G\ube44\ud2b8\uac00 0\uc774\uba74 \uc138\uadf8\uba3c\ud2b8 \ud06c\uae30\ub97c \ubc14\uc774\ud2b8\ub2e8\uc704, 1\uc774\uba74 4KB\ub2e8\uc704\ub85c \ud569\ub2c8\ub2e4. \uc989 0\uc774\uba74 Limit \uadf8\ub300\ub85c \ud45c\ud604\ub418\uace0, 1\uc778 \uacbd\uc6b0\uc5d0\ub294 0xFFF(4KB)\ub97c \uacf1\ud558\uc5ec \uadf8 \uc218\ub97c \ud55c\uacc4\uc810\uc73c\ub85c \ud45c\ud604\ud569\ub2c8\ub2e4. Limit\uc758 20\ube44\ud2b8\ub97c \ubaa8\ub450 \ucc44\uc6cc\uc11c 0xFFFFF\ub97c \uae30\uc7ac\ud574 \ub450\uc5c8\uc744 \ub54c, G\uac00 0\uc774\uba74 \ud06c\uae30\ub294 1\uba54\uac00\ubc14\uc774\ud2b8, G\uac00 1\uc774\uba74 0xFFFFF * 0xFFF = 0xFFFFFFFFFF\ubc14\uc774\ud2b8\uac00 \ub418\uc5b4 4GB \uc601\uc5ed\uc744 \uac16\uac8c \ub429\ub2c8\ub2e4. P\ube44\ud2b8: \uc774 \uc138\uadf8\uba3c\ud2b8\uac00 \uba54\ubaa8\ub9ac\uc0c1\uc5d0 \uc874\uc7ac\ud558\ub294\uc9c0\ub97c \ub098\ud0c0\ub0b4\ub294 \uac12\uc785\ub2c8\ub2e4. \uc774 \ube44\ud2b8\ub294 \ucee4\ub110 \ud504\ub85c\uadf8\ub7a8\uc758 \uba54\ubaa8\ub9ac \uad00\ub9ac \ub8e8\ud2f4\uc774 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ud398\uc774\uc9d5 \uae30\ub2a5\uacfc \uad00\ub828\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ucc98\uc74c\uc5d0\ub294 1\ub85c \uae30\uc7ac\ud574 \ub461\ub2c8\ub2e4. S\ube44\ud2b8: \uc774 \uc138\uadf8\uba3c\ud2b8\uac00 \uc2dc\uc2a4\ud15c \uc138\uadf8\uba3c\ud2b8\uc778\uc9c0(=0), \ucf54\ub4dc \ud639\uc740 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\uc778\uc9c0(=1)\ub97c \uc9c0\uc815\ud569\ub2c8\ub2e4. \ud56d\uc0c1 1\ub85c \ud574\uc90d\ub2c8\ub2e4. D\ube44\ud2b8: \uc774 \uc138\uadf8\uba3c\ud2b8\uac00 16\ube44\ud2b8\uc778\uc9c0 32\ube44\ud2b8\uc778\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. 16\ube44\ud2b8(=0), 32\ube44\ud2b8(=1) GDT\uc758 \uad6c\uc870 \ubc18\ub4dc\uc2dc \uccab \ubc88\uc9f8 Descriptor\ub294 NULL Descriptor(\ubaa8\ub4e0 \ub0b4\uc6a9\uc774 0\uc73c\ub85c \uac00\ub4dd \ucc2c Descriptor)\uc5ec\uc57c \ud55c\ub2e4\ub294 \uc57d\uc18d\uc774 \uc788\uc2b5\ub2c8\ub2e4. (\ucc38\uc870: https://0xax.gitbooks.io/linux-insides/content/Booting/linux-bootstrap-2.html) A20 gate A20 gate\ub97c \uc9c0\uc815\ud558\uac8c \ub418\uba74, 0x100000 \uc774\uc0c1\uc758 \uc8fc\uc18c\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Real Mode\uc5d0\uc11c\ub294 \ucd5c\ub300\ud55c \uc9c0\uc815\ud560 \uc218 \uc788\ub294 \uba54\ubaa8\ub9ac \uc8fc\uc18c\ub294 0xFFFF:0xFFFF = 0xFFFF0 + FFFF = 0x10FFEF\uac00 \ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c 0x10FFEF\uae4c\uc9c0 \ubc16\uc5d0 \uba54\ubaa8\ub9ac \uc9c0\uc815\uc744 \ubabb \ud558\ub294\ub370, \uc2ec\uc9c0\uc5b4 0x0A0000\uc8fc\uc18c \ubcf4\ub2e4 \ud070 \uc8fc\uc18c\ub294 \ube44\ub514\uc624 \uba54\ubaa8\ub9ac, \ubc14\uc774\uc624\uc2a4\uc5d0 \uc758\ud574 \uc608\uc57d\ub41c \uba54\ubaa8\ub9ac \uacf5\uac04\uc785\ub2c8\ub2e4. A20 gate\ub97c \uc9c0\uc815\ud558\uac8c \ub418\uba74, 0x100000(640KB) \uc774\uc0c1\uc758 \uc8fc\uc18c\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc5d0 Protected Mode+ A20 \ube44\ud2b8\ub97c \ud0a4\uac8c \ub418\uba74 4GB\uae4c\uc9c0 \uba54\ubaa8\ub9ac\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Protected Mode \uc9c4\uc785 Protected Mode\uc5d0 \uc9c4\uc785\ud558\uae30 \uc704\ud574\uc11c\ub294 Real Mode => Protected Mode \uc9c4\uc785\uc744 \ud558\uae30 \uc804\uc5d0 GDT(Global Descriptor Table)\uc774\ub77c\ub294 \ud14c\uc774\ube14\uc744 \uc900\ube44\ud574\uc57c \ud569\ub2c8\ub2e4. RAM\uc758 \uc601\uc5ed \uc911 \uc5b4\ub514\ub4e0\uc9c0 \uae30\uc785\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \uae30\uc785\ud574 \ub193\uc740 \ud14c\uc774\ube14\uc740 Protected Mode\ub85c \ubcc0\ud658 \ud6c4\uc5d0 \ucef4\ud4e8\ud130\uc758 \uc804\uc6d0\uc774 \ub0b4\ub824\uc9c8 \ub54c\uae4c\uc9c0 \uadf8 \uc790\ub9ac\uc5d0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.","title":"day3: protected mode \uc9c4\uc785"},{"location":"os-making/03/#day-03-protected-mode","text":"","title":"day 03: protected mode \uc9c4\uc785\ud558\uae30"},{"location":"os-making/03/#_1","text":"","title":"\uc624\ub298 \ub9cc\ub4e0 \uacb0\uacfc\ubb3c"},{"location":"os-making/03/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 [org 0] [bits 16] start: mov ax, cs ; CS\uc5d0\ub294 0x1000\uc774 \ub4e4\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. mov ds, ax xor ax, ax mov ss, ax cli ; EFLAGS \ub808\uc9c0\uc2a4\ud130\uc758 IF(interrupt flag)\ub97c 0\uc73c\ub85c clear <=> sti: IF\ube44\ud2b8\ub97c 1\ub85c set. inturrupt \ud65c\uc131\ud654 lgdt[gdtr] ; gdtr \ud3ec\uc778\ud130\uc5d0 \ub530\ub77c\uc11c gdt\ub97c \ub4f1\ub85d\uc2dc\ud0a4\ub294 \uba85\ub839\uc5b4 mov eax, cr0 or eax, 0x00000001 mov cr0, eax jmp $+2 ; \uc65c \uc774\ubd80\ubd84\uc5d0\uc11c jmp $+2 \ub97c \ud558\uc9c0..? nop\uc744 2\uac1c \uc4f0\uace0..? nop nop db 0x66 ; 0x66, 0x67, 0xEA\ub294 \uc798 gdt\uac00 \ub4f1\ub85d \ub418\uc5c8\ub2e4\ub294 \uc758\ubbf8\uc778\uc9c0..? db 0x67 db 0xEA dd PM_Start ; \uc5ec\uae30\ub85c \uc810\ud504..? dw SysCodeSelector ; \uc774 GDT\ub97c \uc0ac\uc6a9\ud574\uc11c....? ;--------------------------------------------; ;********* \uc5ec\uae30\ubd80\ud130 Protected Mode\uc785\ub2c8\ub2e4. ****; ;--------------------------------------------; [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx xor eax, eax mov ax, VideoSelector mov es, ax mov edi, 80*2*10+2*10 ; \ud55c \uc5f4\uc758 \uce78 \uc218 * 2 * \uc368\uc57c\ud560 \uc5f4 \ubc88\ud638 + 2 * \uc368\uc57c\ud560 \uce78 \ubc88\ud638 lea esi, [ds:msgPMode] call printf jmp $ ;--------------------------------------------; ;************** Sub Routines ****************; ;--------------------------------------------; printf: push eax printf_loop: or al, al jz printf_end mov al, byte [esi] mov byte [es:edi], al inc edi mov byte [es:edi], 0x06 inc esi inc edi jmp printf_loop printf_end: pop eax ret msgPMode db \"We are in Protected Mode\", 0 ;-----------------------------------------; ;************** GDT Table ****************; ;-----------------------------------------; gdtr: dw gdt_end - gdt - 1 ; GDT\uc758 limit dd gdt+0x010000 ; GDT\uc758 \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 gdt: dw 0 ; limit 0 ~ 15\ube44\ud2b8 dw 0 ; \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4\uc758 \ud558\uc704 \ub450 \ubc14\uc774\ud2b8 db 0 ; \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 16~32\ube44\ud2b8 db 0 ; \ud0c0\uc785 db 0 ; limit 16~19\ube44\ud2b8, \ud50c\ub798\uadf8 db 0 ; \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 32~24\ube44\ud2b8 ; \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 SysCodeSelector equ 0x08 dw 0xFFFF ; limit:0xFFFF dw 0x0000 ; base 0~15bit db 0x01 ; base 16~32bit db 0x9A ; P:1, DPL:0, Code, non-conforming, readable db 0xCF ; G:1, D:1, limit 16~19 bit:0xF db 0x00 ; base 24~32 bit ; \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 SysDataSelector equ 0x10 dw 0xFFFF ; limit 0xFFFF dw 0x0000 ; base 0~15 bit db 0x01 ; base 16~23 bit db 0x92 ; P:1, DPL: 0, data, expand-up, writable db 0xCF ; G:1, D:1, limit 16~19 bit:0xF db 0x00 ; base 24~32 bit ; \ube44\ub514\uc624 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 VideoSelector equ 0x18 dw 0xFFFF ; limit 0xFFFF dw 0x8000 ; base 0~15 bit db 0x0B ; base 16~23 bit db 0x92 ; P:1, DPL:0, data, expand-up, writable db 0x40 ; G:0, D:1, limit 16~19 bit:0 db 0x00 ; base 24~32 bit gdt_end:","title":"\uc18c\uc2a4\ucf54\ub4dc"},{"location":"os-making/03/#gdtr","text":"GDTR: The Global Descriptor Table (GDT) is a table in memory that defines the processor's memory segments. The GDT sets the behavior of the segment registers and helps to ensure that protected mode operates smoothly. GDTR\uc740 \uba54\ubaa8\ub9ac \uc0c1\uc5d0 \uc874\uc7ac\ud558\uba70, processor\uc758 \uba54\ubaa8\ub9ac \uc138\uadf8\uba3c\ud2b8\ub97c \uc815\uc758\ud558\ub294 \ud14c\uc774\ube14\uc785\ub2c8\ub2e4. GDT\ub294 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uc758 \ub3d9\uc791\uc744 \uc138\ud305\ud558\uace0 protected mode\uac00 \uc798 \ub3d9\uc791\ud558\ub3c4\ub85d \ubcf4\uc7a5\ud569\ub2c8\ub2e4. GDT\ub294 x86 \uce69\uc5d0 \ub4e4\uc5b4\uc788\ub294 GDT Register(=GDTR)\ub77c\ub294 \ud2b9\uc218\ud55c \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc758\ud574 \uc9c0\uc815\ub429\ub2c8\ub2e4(GDT is pointed by ...). GDTR\uc740 48\ube44\ud2b8\ub85c \uad6c\uc131\ub418\uba70 \ud558\uc704 16\ube44\ud2b8\ub294 GDT\uc758 size\uc5d0 \ub300\ud574 \uae30\uc220\ud558\uba70, \uc0c1\uc704 32\ube44\ud2b8\ub294 GDT\uc758 \uba54\ubaa8\ub9ac \uc0c1\uc758 \uc704\uce58\ub97c \uae30\uc220\ud569\ub2c8\ub2e4. GDTR\uc758 layout 1 |LIMIT|----BASE----| LIMIT: GDT\uc758 \uc0ac\uc774\uc988 BASE: GDT\uc758 \uc2dc\uc791 \uc8fc\uc18c LIMIT\uc758 \uc0ac\uc774\uc988\ub294 GDT\uc758 \uc0ac\uc774\uc988\ubcf4\ub2e4 1\uc774 \uc791\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\uc11c GDT\uc758 \uc0ac\uc774\uc988\uac00 16 byte\ub77c\uba74, LIMIT\uc740 15\ub85c \uc9c0\uc815\ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4. (https://en.wikibooks.org/wiki/X86_Assembly/Global_Descriptor_Table) GDT\uc758 layout \uc704\uc758 Base Address, Limit, \uc18d\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uac83\uc744 Descriptor\ub77c\uace0 \ubd80\ub974\uace0, \uadf8\uac83\uc774 \ubaa8\uc5ec\uc788\uae30 \ub54c\ubb38\uc5d0 GDT-\ub514\uc2a4\ud06c\ub9bd\ud130 \ud14c\uc774\ube14 \uc774\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4. GDT\uc758 \uc124\uba85 Limit : \ucd1d 20\ube44\ud2b8\ub85c \uad6c\uc131(0~15, 16~19\ube44\ud2b8\uac00 \ub098\ub258\uc5b4\uc838 \uc788\uc74c). G\ube44\ud2b8\uc640 \ud568\uaed8 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. DPL(Descriptor Priviledge): 2\ube44\ud2b8\ub85c \ub418\uc5b4 \uc788\uc73c\uba70, \ud2b9\uad8c \ub808\ubca8 \uc9c0\uc815\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc778\ud154 x86\uacc4\uc5f4 CPU\uc5d0\uc11c\ub294 0~3\uc758 \uac12\uc73c\ub85c 4\uac00\uc9c0\uc758 \ub808\ubca8\uc774 \uc788\uc73c\ub098, \ubcf4\ud1b5\uc758 \uacbd\uc6b0 \ucee4\ub110\uc744 \uc81c\uc791\ud560 \ub54c\uc5d0\ub294 0\uacfc 3\ub808\ubca8\ub9cc \uc0ac\uc6a9\ud569\ub2c8\ub2e4. DPL\uac12\uc774 0\uc774\uba74 \uc774 \uc138\uadf8\uba3c\ud2b8\uac00 \ucee4\ub110 \ub808\ubca8\uc774\ub77c\ub294 \uac83\uc744 \ub098\ud0c0\ub0b4\uace0, 3\uc774\uba74 \uc774 \uc138\uadf8\uba3c\ud2b8\uac00 \uc720\uc800\ub808\ubca8\uc774\ub77c\ub294 \uac83\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. Type: 4\ube44\ud2b8\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ud574\ub2f9 \uc601\uc5ed\uc774 \ucf54\ub4dc\uc778\uc9c0, \ub370\uc774\ud130 \uc601\uc5ed\uc778\uc9c0 + \uc77d\uae30/\uc4f0\uae30 \uad8c\ud55c, \uc2e4\ud589 \uad8c\ud55c\uc5d0 \ub300\ud55c \uc815\ubcf4\uac00 \ub4e4\uc5b4\uac11\ub2c8\ub2e4. Type Field\uc758 \ucd5c\uc0c1\uc704\ube44\ud2b8 \ub294 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\uc778\uc9c0 \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8\uc778\uc9c0\ub97c \uad6c\ubd84\ud569\ub2c8\ub2e4. Type Field\uc758 \ub9c8\uc9c0\ub9c9 \ube44\ud2b8 \ub294 \uc561\uc138\uc2a4 \ube44\ud2b8\uc778\ub370, \uc5b4\ub5a4 \ud504\ub85c\uadf8\ub7a8\uc774 \uc774 \uc138\uadf8\uba3c\ud2b8\uc5d0 \uc811\uadfc\ud588\uc744 \ub54c CPU\uac00 \uc774\uacf3\uc744 \ucc3e\uc544\uc11c A\ube44\ud2b8\ub97c 1\ub85c \ubc14\uafd4\uc90d\ub2c8\ub2e4. \uadf8\ub7ec\ub098 CPU\ub294 \uc774 \ube44\ud2b8\ub97c 0\uc73c\ub85c \ud074\ub9ac\uc5b4 \ud574\uc8fc\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \ucee4\ub110\uc740 \uba54\ubaa8\ub9ac \uad00\ub9ac\ub97c \ud560 \ub54c \uc774 \ube44\ud2b8\uac00 1\uc774 \ub418\uc5c8\ub294\uc9c0\ub97c \uc870\uc0ac\ud558\uac70\ub098, \uc561\uc138\uc2a4\ub41c \uc138\uadf8\uba3c\ud2b8\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uc544 \uc774 A\ube44\ud2b8\ub97c \uc5b4\ub290 \uc2dc\uac04\uc774 \uc9c0\ub098\uba74 0\uc73c\ub85c \ud558\uac70\ub098 \ud558\ub294 \uc77c\uc744 \ud569\ub2c8\ub2e4. \uc774 \ube44\ud2b8\ub294 \ucee4\ub110\uc758 \uba54\ubaa8\ub9ac \uad00\ub9ac\ub97c \ub3c4\uc640\uc8fc\ub294 \ube44\ud2b8\ub85c CPU \ub3d9\uc791\uc5d0\ub294 \uc544\ubb34\ub7f0 \uc601\ud5a5\uc744 \uc8fc\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. GDT \ucd08\uae30\ud654 \uc2dc\uc5d0\ub294 0\uc744 \uae30\uc7ac\ud574 \ub461\ub2c8\ub2e4. Type Field\uc758 \ub450 \ubc88\uc9f8 \ube44\ud2b8 \ub294 \ucd5c\uc0c1\uc704 \ube44\ud2b8\uc5d0 \ub530\ub77c\uc11c \ub2e4\ub974\uac8c \uacb0\uc815\ub429\ub2c8\ub2e4. \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8(\uccab \ubc88\uc9f8 \ube44\ud2b8\uac00 0\uc778 \uacbd\uc6b0)\uc5d0\uc11c\ub294 \ub450 \ubc88\uc9f8 \ube44\ud2b8\uac00 1\uc774\uba74 EXPAND DOWN\uc758 \ud615\ud0dc\ub85c \uc774 \uc138\uadf8\uba3c\ud2b8\uac00 \ud615\uc131\ub41c \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \ub450 \ubc88\uc9f8 \ube44\ud2b8\uac00 0\uc774\uba74 EXPAND UP \ubc29\uc2dd\uc73c\ub85c \uc138\uadf8\uba3c\ud2b8\uac00 \ud615\uc131\ub41c \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774 \uae30\ub2a5\uc740 \uc774 \uc138\uadf8\uba3c\ud2b8\ub97c \uc2a4\ud0dd\uc73c\ub85c \uc0ac\uc6a9\ud560 \uacbd\uc6b0 \uc138\uadf8\uba3c\ud2b8\uc758 \ud06c\uae30\uac00 \ub3d9\uc801\uc73c\ub85c \ubcc0\ud558\ub3c4\ub85d \ub9cc\ub4e4\uae30 \uc704\ud568\uc785\ub2c8\ub2e4. \uc774 \ube44\ud2b8\ub97c 1\ub85c \uc138\ud305\ud558\uace0 \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \ub3c4\uc911\uc5d0 \uc774 \uc138\uadf8\uba3c\ud2b8\uc758 Limit\uac12\uc744 \ubc14\uafb8\uba74 \uc2a4\ud0dd\uc758 \uc81c\uc77c \ubc11\uc758 \uacf5\uac04\uc5d0 \uc2a4\ud0dd \uacf5\uac04\uc774 \ucd94\uac00\ub429\ub2c8\ub2e4. \uc2a4\ud0dd \uc138\uadf8\uba3c\ud2b8\ub294 \ud56d\uc0c1 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\uc5ec\uc57c \ud558\uace0, \uc77d\uae30/\uc4f0\uae30 \ubaa8\ub450 \uac00\ub2a5\ud574\uc57c \ud569\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \ub3c4\uc911\uc5d0 \uc4f0\uae30\uac00 \ubd88\uac00\ub2a5\ud55c \uc138\uadf8\uba3c\ud2b8\ub97c \uc2a4\ud0dd\uc73c\ub85c \ud558\uba74, \ub2e4\uc2dc \ub9d0\ud574 SS \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc4f0\uae30\uac00 \ubd88\uac00\ub2a5\ud55c \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\ub97c \ub85c\ub4dc\ud558\uba74 #GP \ud3f4\ud2b8\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. Type Field\uc758 \uc138 \ubc88\uc9f8 \ube44\ud2b8 \ub97c 0\uc73c\ub85c \ud558\uba74, \uc774 \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc740 \uc77d\uae30\ub9cc \uac00\ub2a5\ud558\uace0, 1\ub85c \ud558\uba74 \uc138\uadf8\uba3c\ud2b8\ub97c \uc77d\uae30/\uc4f0\uae30 \ubaa8\ub450 \uac00\ub2a5\ud574\uc9d1\ub2c8\ub2e4. G\ube44\ud2b8(Granularity): Limit\uacfc \uad00\ub828\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. G\ube44\ud2b8\uac00 0\uc774\uba74 \uc138\uadf8\uba3c\ud2b8 \ud06c\uae30\ub97c \ubc14\uc774\ud2b8\ub2e8\uc704, 1\uc774\uba74 4KB\ub2e8\uc704\ub85c \ud569\ub2c8\ub2e4. \uc989 0\uc774\uba74 Limit \uadf8\ub300\ub85c \ud45c\ud604\ub418\uace0, 1\uc778 \uacbd\uc6b0\uc5d0\ub294 0xFFF(4KB)\ub97c \uacf1\ud558\uc5ec \uadf8 \uc218\ub97c \ud55c\uacc4\uc810\uc73c\ub85c \ud45c\ud604\ud569\ub2c8\ub2e4. Limit\uc758 20\ube44\ud2b8\ub97c \ubaa8\ub450 \ucc44\uc6cc\uc11c 0xFFFFF\ub97c \uae30\uc7ac\ud574 \ub450\uc5c8\uc744 \ub54c, G\uac00 0\uc774\uba74 \ud06c\uae30\ub294 1\uba54\uac00\ubc14\uc774\ud2b8, G\uac00 1\uc774\uba74 0xFFFFF * 0xFFF = 0xFFFFFFFFFF\ubc14\uc774\ud2b8\uac00 \ub418\uc5b4 4GB \uc601\uc5ed\uc744 \uac16\uac8c \ub429\ub2c8\ub2e4. P\ube44\ud2b8: \uc774 \uc138\uadf8\uba3c\ud2b8\uac00 \uba54\ubaa8\ub9ac\uc0c1\uc5d0 \uc874\uc7ac\ud558\ub294\uc9c0\ub97c \ub098\ud0c0\ub0b4\ub294 \uac12\uc785\ub2c8\ub2e4. \uc774 \ube44\ud2b8\ub294 \ucee4\ub110 \ud504\ub85c\uadf8\ub7a8\uc758 \uba54\ubaa8\ub9ac \uad00\ub9ac \ub8e8\ud2f4\uc774 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ud398\uc774\uc9d5 \uae30\ub2a5\uacfc \uad00\ub828\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ucc98\uc74c\uc5d0\ub294 1\ub85c \uae30\uc7ac\ud574 \ub461\ub2c8\ub2e4. S\ube44\ud2b8: \uc774 \uc138\uadf8\uba3c\ud2b8\uac00 \uc2dc\uc2a4\ud15c \uc138\uadf8\uba3c\ud2b8\uc778\uc9c0(=0), \ucf54\ub4dc \ud639\uc740 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\uc778\uc9c0(=1)\ub97c \uc9c0\uc815\ud569\ub2c8\ub2e4. \ud56d\uc0c1 1\ub85c \ud574\uc90d\ub2c8\ub2e4. D\ube44\ud2b8: \uc774 \uc138\uadf8\uba3c\ud2b8\uac00 16\ube44\ud2b8\uc778\uc9c0 32\ube44\ud2b8\uc778\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. 16\ube44\ud2b8(=0), 32\ube44\ud2b8(=1) GDT\uc758 \uad6c\uc870 \ubc18\ub4dc\uc2dc \uccab \ubc88\uc9f8 Descriptor\ub294 NULL Descriptor(\ubaa8\ub4e0 \ub0b4\uc6a9\uc774 0\uc73c\ub85c \uac00\ub4dd \ucc2c Descriptor)\uc5ec\uc57c \ud55c\ub2e4\ub294 \uc57d\uc18d\uc774 \uc788\uc2b5\ub2c8\ub2e4. (\ucc38\uc870: https://0xax.gitbooks.io/linux-insides/content/Booting/linux-bootstrap-2.html)","title":"GDTR\uc758 \uc815\uc758"},{"location":"os-making/03/#a20-gate","text":"A20 gate\ub97c \uc9c0\uc815\ud558\uac8c \ub418\uba74, 0x100000 \uc774\uc0c1\uc758 \uc8fc\uc18c\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Real Mode\uc5d0\uc11c\ub294 \ucd5c\ub300\ud55c \uc9c0\uc815\ud560 \uc218 \uc788\ub294 \uba54\ubaa8\ub9ac \uc8fc\uc18c\ub294 0xFFFF:0xFFFF = 0xFFFF0 + FFFF = 0x10FFEF\uac00 \ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c 0x10FFEF\uae4c\uc9c0 \ubc16\uc5d0 \uba54\ubaa8\ub9ac \uc9c0\uc815\uc744 \ubabb \ud558\ub294\ub370, \uc2ec\uc9c0\uc5b4 0x0A0000\uc8fc\uc18c \ubcf4\ub2e4 \ud070 \uc8fc\uc18c\ub294 \ube44\ub514\uc624 \uba54\ubaa8\ub9ac, \ubc14\uc774\uc624\uc2a4\uc5d0 \uc758\ud574 \uc608\uc57d\ub41c \uba54\ubaa8\ub9ac \uacf5\uac04\uc785\ub2c8\ub2e4. A20 gate\ub97c \uc9c0\uc815\ud558\uac8c \ub418\uba74, 0x100000(640KB) \uc774\uc0c1\uc758 \uc8fc\uc18c\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc5d0 Protected Mode+ A20 \ube44\ud2b8\ub97c \ud0a4\uac8c \ub418\uba74 4GB\uae4c\uc9c0 \uba54\ubaa8\ub9ac\uc5d0 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"A20 gate"},{"location":"os-making/03/#protected-mode","text":"Protected Mode\uc5d0 \uc9c4\uc785\ud558\uae30 \uc704\ud574\uc11c\ub294 Real Mode => Protected Mode \uc9c4\uc785\uc744 \ud558\uae30 \uc804\uc5d0 GDT(Global Descriptor Table)\uc774\ub77c\ub294 \ud14c\uc774\ube14\uc744 \uc900\ube44\ud574\uc57c \ud569\ub2c8\ub2e4. RAM\uc758 \uc601\uc5ed \uc911 \uc5b4\ub514\ub4e0\uc9c0 \uae30\uc785\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \uae30\uc785\ud574 \ub193\uc740 \ud14c\uc774\ube14\uc740 Protected Mode\ub85c \ubcc0\ud658 \ud6c4\uc5d0 \ucef4\ud4e8\ud130\uc758 \uc804\uc6d0\uc774 \ub0b4\ub824\uc9c8 \ub54c\uae4c\uc9c0 \uadf8 \uc790\ub9ac\uc5d0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.","title":"Protected Mode \uc9c4\uc785"},{"location":"os-making/04/","text":"day 04: protected mode \uc9c4\uc785\ud558\uae30(2) \uc624\ub298\uc758 \uacb0\uacfc\ubb3c (\uc774\ubbf8\uc9c0 \uc0c1\uc73c\ub85c\ub294 day03\uacfc \ub2e4\ub97c \ubc14\uac00 \uc5c6\uc9c0\ub9cc, \ucf54\ub4dc\uac00 \uc880 \ub354 \uac04\uacb0\ud574\uc84c\uc2b5\ub2c8\ub2e4.) \uc18c\uc2a4\ucf54\ub4dc 1 2 3 4 ; init.inc SysCodeSelector equ 0x08 SysDataSelector equ 0x10 VideoSelector equ 0x18 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 ; boot2.asm %include \"src/init.inc\" [org 0] jmp 07C0h:start start: mov ax, cs mov ds, ax mov es, ax mov ax, 0xB800 mov es, ax mov di, 0 mov ax, word [msgBack] mov cx, 0x7FF paint: mov word [es:di], ax add di, 2 dec cx jnz paint read: mov ax, 0x1000 mov es, ax mov bx, 0 mov ah, 2 mov al, 1 mov ch, 0 mov cl, 2 mov dh, 0 mov dl, 0 int 13h jc read cli lgdt[gdtr] mov eax, cr0 or eax, 0x00000001 mov cr0, eax jmp $+2 nop nop mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx jmp dword SysCodeSelector:0x010000 msgBack db '.', 0x67 gdtr: dw gdt_end - gdt - 1 ; GDT\uc758 limit dd gdt+0x7C00 ; GDT\uc758 \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 gdt: dd 0, 0 dd 0x0000FFFF, 0x00CF9A00 dd 0x0000FFFF, 0x00CF9200 dd 0x8000FFFF, 0x0040920B gdt_end: times 510-($-$$) db 0 dw 0AA55h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 ; kernel2.asm %include \"src/init.inc\" [org 0x010000] [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx xor eax, eax mov ax, VideoSelector mov es, ax mov edi, 80*2*10+2*10 lea esi, [msgPMode] call printf jmp $ printf: push eax printf_loop: or al, al jz printf_end mov al, byte [esi] mov byte [es:edi], al inc edi mov byte[es:edi], 0x06 inc esi inc edi jmp printf_loop printf_end: pop eax ret msgPMode db \"We are in Protected Mode\", 0 protected mode\uc758 \uc8fc\uc18c \uc9c0\uc815 \ubc29\ubc95 Real Mode\uc5d0\uc11c CS, DS\ub4f1 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uac00 16\uc758 \ud55c \uc6cc\ub4dc\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. Protected Mode\uc5d0\uc11c\ub294 \uac01 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uac00 16\ube44\ud2b8\uc758 \uc140\ub809\ud130 \ub808\uc9c0\uc2a4\ud130\uc640 64\ube44\ud2b8\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\ub85c \ub2e4\uc2dc \ub098\ub258\uc5b4\uc9d1\ub2c8\ub2e4. \uc624\ub978\ucabd\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub808\uc9c0\uc2a4\ud130\ub294 GDT\uc640 \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc140\ub809\ud130 \ub808\uc9c0\uc2a4\ud130\uc758 \uad6c\uc870 Index : GDT\uc5d0 \uc788\ub294 descriptor\uc758 \uc778\ub371\uc2a4 \uac1c\uc218\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4. TI (Table Indicator): TI\ub294 descriptor\ub97c \uc5b4\ub514\uc5d0\uc11c \ucc3e\uc744\uc9c0\ub97c \uac00\ub9ac\ud0b5\ub2c8\ub2e4. \ub9cc\uc57d 0\uc73c\ub85c \uc138\ud305\ub418\uc5b4 \uc788\uc73c\uba74 GDT\uc5d0\uc11c \ucc3e\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 LDT(Local Descriptor Talbe)\uc5d0\uc11c \uac80\uc0c9\ud558\uac8c \ub429\ub2c8\ub2e4. RPL (Requester's Privilege Level): \uc694\uccad\uc790\uc758 \uad8c\ud55c \ub808\ubca8 3\uc77c\ucc28\uc5d0\uc11c 1 2 3 4 5 mov bx, SysDataSelector mov ds, bx ... mov ax, VideoSelector mov es, ax \uc774\ub7f0 \uc18c\uc2a4\ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ucf54\ub4dc\ub294 \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \uac12\uc744 \ub123\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uac00 \uc544\ub2cc \uc140\ub809\ud130\ub77c\uace0 \ud558\ub294 \uc774\uc720\ub294 Real Mode\uc5d0\uc11c\ub294 CS, DS \ub4f1\uc774 16\ube44\ud2b8\ub85c \ub418\uc5b4 \uc788\ub294 \ud55c \uac1c\uc758 \uc6cc\ub4dc \ud615\ud0dc\uc758 \ub808\uc9c0\uc2a4\ud130\uc600\uc9c0\ub9cc, Protected Mode\uc5d0\uc11c\ub294 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uac00 \uc140\ub809\ud130\uc640 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub808\uc9c0\uc2a4\ud130, \uc774\ub807\uac8c \ub450 \uac1c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uace0, \uc2e4\uc81c\ub85c \ud504\ub85c\uadf8\ub798\uba38\uac00 \ub2e4\ub8f0 \uc218 \uc788\ub294 \uac83\uc740 \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130 \ubfd0\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub808\uc9c0\uc2a4\ud130\ub294 CPU\ub9cc\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc73c\uba70, \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc774\uac83\uc744 \uc870\uc791\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. DS \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \uac12\uc744 \ub123\uc5c8\uc744 \ub54c\uc758 CPU\uc758 \ub3d9\uc791 \uc544\ub798\uc758 \uadf8\ub9bc\uc5d0 \ub530\ub77c\uc11c index\uc640 \uba54\ubaa8\ub9ac \uc0c1\uc758 GDT \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uc744 \ub54c\ub294 index\uc5d0 8\uc744 \uacf1\ud569\ub2c8\ub2e4. 8\uc744 \uacf1\ud558\ub294 \uc774\uc720\ub294 \ud558\ub098\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \uc0ac\uc774\uc988\uac00 8byte\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc704\uc758 \uadf8\ub9bc\uc5d0\uc11c RPL\uacfc DPL\uc740 \ubc18\ub4dc\uc2dc \uc77c\uce58\ud574\uc57c \ud569\ub2c8\ub2e4. \ub9cc\uc57d \ub450 \uac12\uc774 \uac19\ub2e4\uba74, GDT\uc5d0 \uc788\ub294 \uc774 \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \ub0b4\uc6a9\uc744 \uadf8\ub300\ub85c DS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub808\uc9c0\uc2a4\ud130\uc5d0 \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \uac12\uc744 \ub123\ub294 \uc77c\uc740 \uace7 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub808\uc9c0\uc2a4\ud130\uc5d0 \uac12\uc744 \ub123\uae30 \uc704\ud55c \uc77c\uc774\uc5c8\uc2b5\ub2c8\ub2e4. \uc138\uadf8\uba3c\ud2b8\uc640 \uc624\ud504\uc14b\uc744 \ud1b5\ud574\uc11c \uc8fc\uc18c\ub97c \uc9c0\uc815\ud558\ub294 \ubc29\ubc95 1 lea esi, [ds:msgPMode] 3\uc77c\ucc28\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc5d0\uc11c \uc704\uc640 \uac19\uc740 \uc18c\uc2a4\ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. ds\uc5d0\ub294 \uc138\uadf8\uba3c\ud2b8\uc758 \uac12\uc774 \ub4e4\uc5b4\uac00 \uc788\uace0, msgPMode\ub294 \uc624\ud504\uc14b\uc774 \ub429\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \uba85\ub839\uc5b4\ub85c \ucef4\ud30c\uc77c\uc744 \ub2e4\uc2dc \ud574\uc11c, \ucef4\ud30c\uc77c\ub41c \uae30\uacc4\uc5b4\uc640 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc791\uc131\ud55c \uc18c\uc2a4\ucf54\ub4dc\ub97c \uac19\uc774 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 nasm -f bin -o kernel.bin src \\k ernel.asm -l list.txt \uc904 \ubc88\ud638 / offset / Intel x86 \uae30\uacc4\uc5b4 / \uc5b4\uc148\ube14\ub9ac 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 1 [org 0] 2 [bits 16] 3 4 start: 5 00000000 8CC8 mov ax, cs ; CS\uc5d0\ub294 0x1000\uc774 \ub4e4\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. 6 00000002 8ED8 mov ds, ax 7 8 00000004 31C0 xor ax, ax 9 00000006 8ED0 mov ss, ax 10 11 00000008 FA cli ; EFLAGS \ub808\uc9c0\uc2a4\ud130\uc758 IF(interrupt flag)\ub97c 0\uc73c\ub85c clear <=> sti: IF\ube44\ud2b8\ub97c 1\ub85c set. inturrupt \ud65c\uc131\ud654 12 13 00000009 0F0116[7C00] lgdt[gdtr] ; gdtr \ud3ec\uc778\ud130\uc5d0 \ub530\ub77c\uc11c gdt\ub97c \ub4f1\ub85d\uc2dc\ud0a4\ub294 \uba85\ub839\uc5b4 14 15 0000000E 0F20C0 mov eax, cr0 16 00000011 6683C801 or eax, 0x00000001 17 00000015 0F22C0 mov cr0, eax 18 19 00000018 EB00 jmp $+2 ; \uc65c \uc774\ubd80\ubd84\uc5d0\uc11c jmp $+2 \ub97c \ud558\uc9c0..? nop\uc744 2\uac1c \uc4f0\uace0..? 20 0000001A 90 nop 21 0000001B 90 nop 22 0000001C 66 db 0x66 ; 0x66, 0x67, 0xEA\ub294 \uc798 gdt\uac00 \ub4f1\ub85d \ub418\uc5c8\ub2e4\ub294 \uc758\ubbf8\uc778\uc9c0..? 23 0000001D 67 db 0x67 24 0000001E EA db 0xEA 25 0000001F [25000000] dd PM_Start ; \uc5ec\uae30\ub85c \uc810\ud504..? 26 00000023 0800 dw SysCodeSelector ; \uc774 GDT\ub97c \uc0ac\uc6a9\ud574\uc11c....? 27 28 ;--------------------------------------------; 29 ;********* \uc5ec\uae30\ubd80\ud130 Protected Mode\uc785\ub2c8\ub2e4. ****; 30 ;--------------------------------------------; 31 [bits 32] 32 33 PM_Start: 34 00000025 66BB1000 mov bx, SysDataSelector 35 00000029 8EDB mov ds, bx 36 0000002B 8EC3 mov es, bx 37 0000002D 8EE3 mov fs, bx 38 0000002F 8EEB mov gs, bx 39 00000031 8ED3 mov ss, bx 40 41 00000033 31C0 xor eax, eax 42 00000035 66B81800 mov ax, VideoSelector 43 00000039 8EC0 mov es, ax 44 0000003B BF54060000 mov edi, 80*2*10+2*10 45 00000040 3E8D35[63000000] lea esi, [ds:msgPMode] 46 00000047 E802000000 call printf 47 48 0000004C EBFE jmp $ 49 50 ;--------------------------------------------; 51 ;************** Sub Routines ****************; 52 ;--------------------------------------------; 53 printf: 54 0000004E 50 push eax 55 56 printf_loop: 57 0000004F 08C0 or al, al 58 00000051 740E jz printf_end 59 00000053 8A06 mov al, byte [esi] 60 00000055 268807 mov byte [es:edi], al 61 00000058 47 inc edi 62 00000059 26C60706 mov byte [es:edi], 0x06 63 0000005D 46 inc esi 64 0000005E 47 inc edi 65 0000005F EBEE jmp printf_loop 66 67 printf_end: 68 00000061 58 pop eax 69 00000062 C3 ret 70 71 00000063 57652061726520696E- msgPMode db \"We are in Protected Mode\", 0 71 0000006C 2050726F7465637465- 71 00000075 64204D6F646500 72 73 ;-----------------------------------------; 74 ;************** GDT Table ****************; 75 ;-----------------------------------------; 76 gdtr: 77 0000007C 1F00 dw gdt_end - gdt - 1 ; GDT\uc758 limit 78 0000007E [82000100] dd gdt+0x010000 ; GDT\uc758 \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4(\ubb3c\ub9ac\uc8fc\uc18c) 79 ; [org 0] \uac00 \uccab \uc904\uc5d0 \uc788\ub294\ub370, \uadf8\uac83 \ub54c\ubb38\uc5d0 0\uc744 \uae30\uc900\uc73c\ub85c \uc774 \uc5b4\uc148\ube14\ub9ac \ud30c\uc77c \ub0b4\uc758 \uba54\ubaa8\ub9ac \uacc4\uc0b0\uc744 \ud568. 80 ; \uc2e4\uc81c\ub85c \uc9c4\ud589\ud558\uace0 \uc788\ub294 \ubb3c\ub9ac \uba54\ubaa8\ub9ac \uc8fc\uc18c\ub294 0x010000 \uc774\uae30 \ub54c\ubb38\uc5d0 \uadf8 \uac12\uc744 \ub354\ud574\uc90c 81 82 gdt: 83 00000082 0000 dw 0 ; limit 0 ~ 15\ube44\ud2b8 84 00000084 0000 dw 0 ; \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4\uc758 \ud558\uc704 \ub450 \ubc14\uc774\ud2b8 85 00000086 00 db 0 ; \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 16~32\ube44\ud2b8 86 00000087 00 db 0 ; \ud0c0\uc785 87 00000088 00 db 0 ; limit 16~19\ube44\ud2b8, \ud50c\ub798\uadf8 88 00000089 00 db 0 ; \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 32~24\ube44\ud2b8 89 90 ; \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 91 SysCodeSelector equ 0x08 ; \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \ub4e4\uc5b4\uac08 \uac12(\ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uae30 \uc704\ud55c \uc778\ub371\uc2a4 + TI + RPL) 92 0000008A FFFF dw 0xFFFF ; limit:0xFFFF 93 0000008C 0000 dw 0x0000 ; base 0~15bit 94 0000008E 01 db 0x01 ; base 16~32bit 95 0000008F 9A db 0x9A ; P:1, DPL:0, Code, non-conforming, readable 96 00000090 CF db 0xCF ; G:1, D:1, limit 16~19 bit:0xF 97 00000091 00 db 0x00 ; base 24~32 bit 98 99 ; \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 100 SysDataSelector equ 0x10 ; \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \ub4e4\uc5b4\uac08 \uac12(\ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uae30 \uc704\ud55c \uc778\ub371\uc2a4 + TI + RPL) 101 00000092 FFFF dw 0xFFFF ; limit 0xFFFF 102 00000094 0000 dw 0x0000 ; base 0~15 bit 103 00000096 01 db 0x01 ; base 16~23 bit 104 00000097 92 db 0x92 ; P:1, DPL: 0, data, expand-up, writable 105 00000098 CF db 0xCF ; G:1, D:1, limit 16~19 bit:0xF 106 00000099 00 db 0x00 ; base 24~32 bit 107 108 ; \ube44\ub514\uc624 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 109 VideoSelector equ 0x18 ; \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \ub4e4\uc5b4\uac08 \uac12(\ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uae30 \uc704\ud55c \uc778\ub371\uc2a4 + TI + RPL) 110 0000009A FFFF dw 0xFFFF ; limit 0xFFFF 111 0000009C 0080 dw 0x8000 ; base 0~15 bit 112 0000009E 0B db 0x0B ; base 16~23 bit 113 0000009F 92 db 0x92 ; P:1, DPL:0, data, expand-up, writable 114 000000A0 40 db 0x40 ; G:0, D:1, limit 16~19 bit:0 115 000000A1 00 db 0x00 ; base 24~32 bit 116 gdt_end: \uc704\uc758 45\ubc88\uc9f8 \uc904\uc5d0\uc11c 1 45 00000040 3E8D35[63000000] lea esi, [ds:msgPMode] 63000000\uc774\ub77c\ub294 \uc8fc\uc18c\uac00 \ub4e4\uc5b4\uc788\uc2b5\ub2c8\ub2e4. \uc778\ud154 CPU\uac00 \ub9ac\ud2c0\uc5d4\ub514\uc5b8\uc774\uae30 \ub54c\ubb38\uc5d0, \uc704\uc758 \uac12\uc740 63\uc774\ub77c\ub294 \uac12\uc774 \ub429\ub2c8\ub2e4. 1 2 3 71 00000063 57652061726520696E- msgPMode db \"We are in Protected Mode\", 0 71 0000006C 2050726F7465637465- 71 00000075 64204D6F646500 71\ubc88\uc9f8 \uc904\uc5d0 \uac00\uc11c \ubcf4\uba74, msgPMode\ub77c\ub294 \uc774\ub984\uc73c\ub85c \ubb38\uc790\uc5f4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc989, \ud604\uc7ac \ud504\ub85c\uadf8\ub7a8\uc740 0x010000\ubc88\uc9c0\uc5d0 \uc788\uace0, \ubb38\uc790\uc5f4\uc740 0x10065\ubc88\uc9c0\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \uc989 lea easi, [ds:msgPMode] \ub77c\ub294 \uba85\ub839\uc5b4\uac00 CPU\uc5d0\uc11c \ud574\uc11d\ub420 \ub54c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ub3d9\uc791\uc774 \uc218\ud589\ub429\ub2c8\ub2e4. Protected Mode\uc758 \uc8fc\uc18c \uc9c0\uc815 \ubc29\ubc95\uc744 \ud1b5\ud574 \ub098\uc628 \uc8fc\uc18c\ub97c \uc120\ud615 \uc8fc\uc18c\ub77c\uace0 \ud569\ub2c8\ub2e4. \ud398\uc774\uc9d5\uc774 \uad6c\ud604\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc5d0\uc11c\ub294 \uc120\ud615 \uc8fc\uc18c\uac00 \uadf8\ub300\ub85c \ubb3c\ub9ac \uc8fc\uc18c\ub97c \ub73b\ud558\uac8c \ub429\ub2c8\ub2e4. \ud398\uc774\uc9d5\uc774 \uad6c\ud604\ub41c \ud6c4\uc5d0\ub294 \uc120\ud615 \uc8fc\uc18c\uac00 \ud398\uc774\uc9d5 \uae30\ub2a5\uc744 \uac70\uccd0 \ubb3c\ub9ac \uc8fc\uc18c\uac00 \ub429\ub2c8\ub2e4. protected Mode\ub85c\uc758 \uc804\ud658 \ubc29\ubc95 \uc778\ud130\ub7fd\ud2b8\ub97c \ub9c9\uae30(\uc544\uc9c1 \uad6c\ud604 x) GDT\ub97c \ub9cc\ub4e4\uace0 lgdt \uba85\ub839\uc5b4\ub97c \uc774\uc6a9\ud574\uc11c GDTR\uc5d0 GDT\ub97c \ub85c\ub529 PE(Protection Enable) \ube44\ud2b8\ub97c CR0(Control Register)\uc5d0 \uc138\ud305 Protected Mode\uc758 \ucf54\ub4dc\ub85c \uc810\ud504 \uc704\uc5d0\uc11c 2\ubc88\uc5d0 \ub300\ud574\uc11c\ub9cc \uc0b4\ud3b4\ubd24\uc2b5\ub2c8\ub2e4. Control Register CPU\uc5d0\ub294 CR0, CR1, CR2, CR3\ub77c\ub294 \ub808\uc9c0\uc2a4\ud130\ub4e4\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. \uc774 \ub808\uc9c0\uc2a4\ud130\ub4e4\uc758 \uc5ed\ud560\uc740 CPU\uc758 \uae30\ub2a5\uc744 \ubc14\uafd4\uc8fc\uae30 \uc704\ud574\uc11c \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc0ac\uc6a9\ud558\uac70\ub098, CPU\uc5d0\uc11c \ud604\uc7ac \uc0c1\ud0dc\ub97c \ud504\ub85c\uadf8\ub798\uba38\uc5d0\uac8c \uc54c\ub824\uc8fc\uae30 \uc704\ud574\uc11c \uc0ac\uc6a9\ud558\uac70\ub098, \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc790\uc2e0\uc758 \ud504\ub85c\uadf8\ub7a8\uc744 \ub514\ubc84\uae45 \ud560 \ub54c \ub4f1\uc758 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. (\uc790\uc138\ud55c \ub0b4\uc6a9\uc740 Intel Architecture Manual Volume 3\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c \uad00\uc810\uc5d0\uc11c CPU\ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud558\ub294 \uc9c0\uc5d0 \ub300\ud574\uc11c \ub098\uc640 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ub9e4\ub274\uc5bc\uc758 \uac70\uc758 \ubaa8\ub4e0 \ub0b4\uc6a9\uc774 Protected Mode\uc5d0 \ub300\ud55c \uc124\uba85\uc11c\uc785\ub2c8\ub2e4.) CR0\uc758 \ucd5c\ud558\uc704 \ube44\ud2b8(0x00000001)\ub294 PE(Protection Enable) \ube44\ud2b8\ub77c\uace0 \ud574\uc11c, \uc774 \ube44\ud2b8\uac00 \uc138\ud2b8\ub41c \ub2e4\uc74c \uba85\ub839\uc5b4\ubd80\ud130 Protected Mode \uc548\uc5d0\uc11c \ub3d9\uc791\ud558\uac8c \ub429\ub2c8\ub2e4. \uc2e4\uc81c\ub85c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc774\uc720\ub85c \uc544\ubb34 \uc77c\ub3c4 \ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4\ub97c 2\uac1c \ub123\uc5b4\uc918\uc57c \ud569\ub2c8\ub2e4. CPU\uc758 \ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc870 CPU \ub0b4\ubd80 \uad6c\uc870\uc5d0\uc11c 2\uac1c\uc758 \uba85\ub839\uc5b4\ub97c \ubbf8\ub9ac \uac00\uc838\uc640\uc11c \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\uc744 \ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c CR0\uc5d0\uc11c \ucd5c\ud558\uc704 \ube44\ud2b8\ub97c \uc138\ud2b8\ud558\ub294 \ub3d9\uc2dc\uc5d0 \uadf8 \ub2e4\uc74c \uba85\ub839\uc5b4\uc640 \ub2e4\ub2e4\uc74c \uba85\ub839\uc5b4\uac00 \ub3d9\uc2dc\uc5d0 \uc77d\ud600\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c nop \uba85\ub839\uc5b4\ub97c 2\uac1c\ub97c \ub123\uc5b4\uc918\uc57c \uadf8 \ub2e4\uc74c \uba85\ub839\uc5b4\uc5d0\uc11c\ub294 protected mode\uc5d0\uc11c \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c Protected Mode\ub85c \uc9c4\uc785\ud558\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\ub4e4\uc774 16\ube44\ud2b8 \uac12\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\ubbc0\ub85c \uadf8\uac83\uc744 \ud574\uacb0\ud574\uc57c \ud569\ub2c8\ub2e4. 1 2 3 4 5 22 0000001C 66 db 0x66 23 0000001D 67 db 0x67 24 0000001E EA db 0xEA 25 0000001F [25000000] dd PM_Start 26 00000023 0800 dw SysCodeSelector \uc704\uc758 \uba85\ub839\uc5b4\ub294 \uc0ac\uc2e4 FAR JMP\uc758 \uc758\ubbf8\uc778\ub370, FAR JMP\ub294 CS\ub808\uc9c0\uc2a4\ud130\uc5d0 \uc0c8\ub85c\uc6b4 \uc138\uadf8\uba3c\ud2b8\uac00 \ub4e4\uc5b4\uac00\uac8c \ub429\ub2c8\ub2e4. IA manual(Intel Architecture Manual) Volume. 2D\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \ub0b4\uc6a9\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. 0x66: Operand Size\ub77c\ub294 Prefix(16\ube44\ud2b8 \uba85\ub839\uc774 32\ube44\ud2b8 \uba85\ub839\uc5b4\ub85c \ubcc0\uacbd\ub418\uc5c8\uac70\ub098 32\ube44\ud2b8 \uba85\ub839\uc774 16\ube44\ud2b8\ub85c \ubc14\ub00c\uc5c8\ub2e4\ub294 \uac83\uc744 \uc54c\ub824\uc8fc\ub294 prefix) 0x67: Address Size\ub77c\ub294 Prefix(16\ube44\ud2b8 \uba85\ub839\uc774 32\ube44\ud2b8 \uba85\ub839\uc5b4\ub85c \ubcc0\uacbd\ub418\uc5c8\uac70\ub098 32\ube44\ud2b8 \uba85\ub839\uc774 16\ube44\ud2b8\ub85c \ubc14\ub00c\uc5c8\ub2e4\ub294 \uac83\uc744 \uc54c\ub824\uc8fc\ub294 prefix) 0xEA: FAR JMP [SysCodeSelector:PM_Start] \uc774 \uba85\ub839\uc5b4\ub97c \uac70\uce58\uac8c \ub418\uba74, CS\uc5d0\ub294 SysCodeSelector(0x08)\uc758 \uac12\uc774, EIP \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 PM_Start\uc758 \uc8fc\uc18c \uac12\uc774 \ub4e4\uc5b4\uac00\uc11c CPU\uac00 PM_Start\ubd80\ud130 \uba85\ub839\uc744 \uc2e4\ud589\ud558\uac8c \ub429\ub2c8\ub2e4. prefix\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8 \uc18c\uc2a4\ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 [org 0] [bits 16] mov ax, [si] mov eax, [si] mov ax, [esi] mov eax, [esi] [bits 32] mov ax, [si] mov eax, [si] mov ax, [esi] mov eax, [esi] \ucef4\ud30c\uc77c 1 nasm -f bin -o prefix.bin src \\p refix.asm -l list.txt \ub0b4\uc6a9(list.txt) 1 2 3 4 5 6 7 8 9 10 11 12 1 [org 0] 2 [bits 16] 3 00000000 8B04 mov ax, [si] 4 00000002 668B04 mov eax, [si] 5 00000005 678B06 mov ax, [esi] 6 00000008 66678B06 mov eax, [esi] 7 8 [bits 32] 9 0000000C 66678B04 mov ax, [si] 10 00000010 678B04 mov eax, [si] 11 00000013 668B06 mov ax, [esi] 12 00000016 8B06 mov eax, [esi] \uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c 16\ube44\ud2b8\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub294 \uacbd\uc6b0\uc5d0, 8B04\ub77c\ub294 instruction\uc73c\ub85c mov ax, [si] \ub97c \uc2e4\ud589\ud588\ub294\ub370, operand\uc758 \uc0ac\uc774\uc988\ub97c 32\ube44\ud2b8\ub85c \ubc14\uafc0 \ub54c\ub294 66\uc774\ub77c\ub294 prefix\ub97c \ubd99\uc774\uace0, address\uc758 \uc0ac\uc774\uc988\ub97c 32\ube44\ud2b8\ub85c \ubc14\uafc0 \ub54c\ub294 67\uc774\ub77c\ub294 prefix\ub97c \ubd99\uc785\ub2c8\ub2e4. 32\ube44\ud2b8\uc5d0\uc11c 16\ube44\ud2b8\ub85c \ubc14\uafb8\ub294 \ubc18\ub300\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\uc785\ub2c8\ub2e4. 16\ub144 \uc804\uc758 \ub9ac\ub205\uc2a4 \ucee4\ub110 \ucf54\ub4dc\ub97c github\uc5d0\uc11c \ucc38\uc870\ud560 \uc218 \uc788\ub294\ub370, https://github.com/torvalds/linux/tree/v2.6.12-rc2/arch/x86_64/boot \uc704\uc758 \ub9c1\ud06c\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9ac\ub205\uc2a4 \ucee4\ub110 \ucf54\ub4dc\uc5d0\uc11c\ub294 \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c\uc5d0 \ub4e4\uc5b4\uac08\ub9cc\ud55c \uc791\uc740 \ucee4\ub110\uacfc 1MB \uc774\uc0c1\uc758 \ud06c\uae30\ub97c \uac00\uc9c4 Big Kernel\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. \uc791\uc740 \ucee4\ub110\uc758 \uacbd\uc6b0\uc5d0\ub294 \ucee4\ub110\uc744 RAM\uc758 \ubb3c\ub9ac \uc8fc\uc18c 0x1000\uc5d0 \ub46c\uc11c, 32bit Protected Mode\ub85c \uc810\ud504\ud560 \ub54c \uc774\uacf3\uc73c\ub85c \uc810\ud504\ud569\ub2c8\ub2e4. Big \ucee4\ub110\uc758 \uacbd\uc6b0\uc5d0\ub294 \uc774 \uc810\ud504\ub97c \ud558\uae30 \uc804\uc5d0 \uc704\uc758 .long 0x1000\uc758 \ub370\uc774\ud130 \ubd80\ubd84\uc744 0x010000\uc73c\ub85c \ubc14\uafb8\uc5b4 \ub193\uc544\uc11c \ud504\ub85c\uadf8\ub7a8\uc774 \uc774\uacf3\uc5d0 \ub3c4\ucc29\ud588\uc744 \ub54c \ubb3c\ub9ac\uc8fc\uc18c 0x010000\uc73c\ub85c \uc810\ud504\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. \ub9ac\ub205\uc2a4\uc5d0\uc11c \uc774\ub807\uac8c \ud55c \uc774\uc720\ub294 \ub9ac\ub205\uc2a4\uc758 \uc5b4\uc148\ube14\ub9ac \ubd80\ubd84\uc774 as86\uc774\ub77c\ub294 \uc5b4\uc148\ube14\ub7ec\uc758 \ubc29\uc2dd\uc73c\ub85c \uc81c\uc791\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc774\uace0, as86\uc774 \uc774\ub7ec\ud55c Protected Mode\ub85c\uc758 \uc810\ud504\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \ud558\ub098\uc758 \ud2b8\ub9ad\uc73c\ub85c\uc11c prefix\ub97c \ubd99\uc774\ub294 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud55c \uac83\uc785\ub2c8\ub2e4. NASM\uc5d0\uc11c\ub294 \ub2e4\uc74c\uc758 \uba85\ub839\uc73c\ub85c \uc774\ub7ec\ud55c \uc77c\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 JMP DWORD SysCodeSelector:PM_Start \uc55e\uc73c\ub85c\ub294 \uc774 \ubc29\uc2dd\uc73c\ub85c \ubcc0\uacbd\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774\uc81c Protected Mode\ub85c \uc9c4\uc785\ud588\ub294\ub370, \uccab \ubc88\uc9f8\ub85c \ud560 \uc77c\uc740 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\ub97c \uac01 \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \ub123\uc5b4\uc8fc\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774 \uc791\uc5c5\uc744 \ud558\uae30 \uc804\uc5d0\ub294 \uac01 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130 \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 \uc544\uc9c1 16\ube44\ud2b8 \uac12\uc774 \ub4e4\uc5b4\uc788\uc2b5\ub2c8\ub2e4. Done \ucc55\ud130 3 \ub9c8\ubb34\ub9ac","title":"day4: protected mode \uc9c4\uc785(2)"},{"location":"os-making/04/#day-04-protected-mode-2","text":"","title":"day 04: protected mode \uc9c4\uc785\ud558\uae30(2)"},{"location":"os-making/04/#_1","text":"(\uc774\ubbf8\uc9c0 \uc0c1\uc73c\ub85c\ub294 day03\uacfc \ub2e4\ub97c \ubc14\uac00 \uc5c6\uc9c0\ub9cc, \ucf54\ub4dc\uac00 \uc880 \ub354 \uac04\uacb0\ud574\uc84c\uc2b5\ub2c8\ub2e4.)","title":"\uc624\ub298\uc758 \uacb0\uacfc\ubb3c"},{"location":"os-making/04/#_2","text":"1 2 3 4 ; init.inc SysCodeSelector equ 0x08 SysDataSelector equ 0x10 VideoSelector equ 0x18 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 ; boot2.asm %include \"src/init.inc\" [org 0] jmp 07C0h:start start: mov ax, cs mov ds, ax mov es, ax mov ax, 0xB800 mov es, ax mov di, 0 mov ax, word [msgBack] mov cx, 0x7FF paint: mov word [es:di], ax add di, 2 dec cx jnz paint read: mov ax, 0x1000 mov es, ax mov bx, 0 mov ah, 2 mov al, 1 mov ch, 0 mov cl, 2 mov dh, 0 mov dl, 0 int 13h jc read cli lgdt[gdtr] mov eax, cr0 or eax, 0x00000001 mov cr0, eax jmp $+2 nop nop mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx jmp dword SysCodeSelector:0x010000 msgBack db '.', 0x67 gdtr: dw gdt_end - gdt - 1 ; GDT\uc758 limit dd gdt+0x7C00 ; GDT\uc758 \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 gdt: dd 0, 0 dd 0x0000FFFF, 0x00CF9A00 dd 0x0000FFFF, 0x00CF9200 dd 0x8000FFFF, 0x0040920B gdt_end: times 510-($-$$) db 0 dw 0AA55h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 ; kernel2.asm %include \"src/init.inc\" [org 0x010000] [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx xor eax, eax mov ax, VideoSelector mov es, ax mov edi, 80*2*10+2*10 lea esi, [msgPMode] call printf jmp $ printf: push eax printf_loop: or al, al jz printf_end mov al, byte [esi] mov byte [es:edi], al inc edi mov byte[es:edi], 0x06 inc esi inc edi jmp printf_loop printf_end: pop eax ret msgPMode db \"We are in Protected Mode\", 0","title":"\uc18c\uc2a4\ucf54\ub4dc"},{"location":"os-making/04/#protected-mode","text":"Real Mode\uc5d0\uc11c CS, DS\ub4f1 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uac00 16\uc758 \ud55c \uc6cc\ub4dc\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. Protected Mode\uc5d0\uc11c\ub294 \uac01 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uac00 16\ube44\ud2b8\uc758 \uc140\ub809\ud130 \ub808\uc9c0\uc2a4\ud130\uc640 64\ube44\ud2b8\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\ub85c \ub2e4\uc2dc \ub098\ub258\uc5b4\uc9d1\ub2c8\ub2e4. \uc624\ub978\ucabd\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub808\uc9c0\uc2a4\ud130\ub294 GDT\uc640 \uac19\uc740 \ud615\uc2dd\uc73c\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc140\ub809\ud130 \ub808\uc9c0\uc2a4\ud130\uc758 \uad6c\uc870 Index : GDT\uc5d0 \uc788\ub294 descriptor\uc758 \uc778\ub371\uc2a4 \uac1c\uc218\ub97c \uc800\uc7a5\ud569\ub2c8\ub2e4. TI (Table Indicator): TI\ub294 descriptor\ub97c \uc5b4\ub514\uc5d0\uc11c \ucc3e\uc744\uc9c0\ub97c \uac00\ub9ac\ud0b5\ub2c8\ub2e4. \ub9cc\uc57d 0\uc73c\ub85c \uc138\ud305\ub418\uc5b4 \uc788\uc73c\uba74 GDT\uc5d0\uc11c \ucc3e\uace0, \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 LDT(Local Descriptor Talbe)\uc5d0\uc11c \uac80\uc0c9\ud558\uac8c \ub429\ub2c8\ub2e4. RPL (Requester's Privilege Level): \uc694\uccad\uc790\uc758 \uad8c\ud55c \ub808\ubca8 3\uc77c\ucc28\uc5d0\uc11c 1 2 3 4 5 mov bx, SysDataSelector mov ds, bx ... mov ax, VideoSelector mov es, ax \uc774\ub7f0 \uc18c\uc2a4\ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ucf54\ub4dc\ub294 \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \uac12\uc744 \ub123\ub294 \uc5ed\ud560\uc744 \ud569\ub2c8\ub2e4. \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uac00 \uc544\ub2cc \uc140\ub809\ud130\ub77c\uace0 \ud558\ub294 \uc774\uc720\ub294 Real Mode\uc5d0\uc11c\ub294 CS, DS \ub4f1\uc774 16\ube44\ud2b8\ub85c \ub418\uc5b4 \uc788\ub294 \ud55c \uac1c\uc758 \uc6cc\ub4dc \ud615\ud0dc\uc758 \ub808\uc9c0\uc2a4\ud130\uc600\uc9c0\ub9cc, Protected Mode\uc5d0\uc11c\ub294 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uac00 \uc140\ub809\ud130\uc640 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub808\uc9c0\uc2a4\ud130, \uc774\ub807\uac8c \ub450 \uac1c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uace0, \uc2e4\uc81c\ub85c \ud504\ub85c\uadf8\ub798\uba38\uac00 \ub2e4\ub8f0 \uc218 \uc788\ub294 \uac83\uc740 \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130 \ubfd0\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub808\uc9c0\uc2a4\ud130\ub294 CPU\ub9cc\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc73c\uba70, \ud504\ub85c\uadf8\ub798\uba38\ub294 \uc774\uac83\uc744 \uc870\uc791\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. DS \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \uac12\uc744 \ub123\uc5c8\uc744 \ub54c\uc758 CPU\uc758 \ub3d9\uc791 \uc544\ub798\uc758 \uadf8\ub9bc\uc5d0 \ub530\ub77c\uc11c index\uc640 \uba54\ubaa8\ub9ac \uc0c1\uc758 GDT \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uc744 \ub54c\ub294 index\uc5d0 8\uc744 \uacf1\ud569\ub2c8\ub2e4. 8\uc744 \uacf1\ud558\ub294 \uc774\uc720\ub294 \ud558\ub098\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \uc0ac\uc774\uc988\uac00 8byte\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc704\uc758 \uadf8\ub9bc\uc5d0\uc11c RPL\uacfc DPL\uc740 \ubc18\ub4dc\uc2dc \uc77c\uce58\ud574\uc57c \ud569\ub2c8\ub2e4. \ub9cc\uc57d \ub450 \uac12\uc774 \uac19\ub2e4\uba74, GDT\uc5d0 \uc788\ub294 \uc774 \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \ub0b4\uc6a9\uc744 \uadf8\ub300\ub85c DS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub808\uc9c0\uc2a4\ud130\uc5d0 \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \uac12\uc744 \ub123\ub294 \uc77c\uc740 \uace7 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub808\uc9c0\uc2a4\ud130\uc5d0 \uac12\uc744 \ub123\uae30 \uc704\ud55c \uc77c\uc774\uc5c8\uc2b5\ub2c8\ub2e4.","title":"protected mode\uc758 \uc8fc\uc18c \uc9c0\uc815 \ubc29\ubc95"},{"location":"os-making/04/#_3","text":"1 lea esi, [ds:msgPMode] 3\uc77c\ucc28\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc5d0\uc11c \uc704\uc640 \uac19\uc740 \uc18c\uc2a4\ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. ds\uc5d0\ub294 \uc138\uadf8\uba3c\ud2b8\uc758 \uac12\uc774 \ub4e4\uc5b4\uac00 \uc788\uace0, msgPMode\ub294 \uc624\ud504\uc14b\uc774 \ub429\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \uba85\ub839\uc5b4\ub85c \ucef4\ud30c\uc77c\uc744 \ub2e4\uc2dc \ud574\uc11c, \ucef4\ud30c\uc77c\ub41c \uae30\uacc4\uc5b4\uc640 \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc791\uc131\ud55c \uc18c\uc2a4\ucf54\ub4dc\ub97c \uac19\uc774 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 nasm -f bin -o kernel.bin src \\k ernel.asm -l list.txt \uc904 \ubc88\ud638 / offset / Intel x86 \uae30\uacc4\uc5b4 / \uc5b4\uc148\ube14\ub9ac 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 1 [org 0] 2 [bits 16] 3 4 start: 5 00000000 8CC8 mov ax, cs ; CS\uc5d0\ub294 0x1000\uc774 \ub4e4\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. 6 00000002 8ED8 mov ds, ax 7 8 00000004 31C0 xor ax, ax 9 00000006 8ED0 mov ss, ax 10 11 00000008 FA cli ; EFLAGS \ub808\uc9c0\uc2a4\ud130\uc758 IF(interrupt flag)\ub97c 0\uc73c\ub85c clear <=> sti: IF\ube44\ud2b8\ub97c 1\ub85c set. inturrupt \ud65c\uc131\ud654 12 13 00000009 0F0116[7C00] lgdt[gdtr] ; gdtr \ud3ec\uc778\ud130\uc5d0 \ub530\ub77c\uc11c gdt\ub97c \ub4f1\ub85d\uc2dc\ud0a4\ub294 \uba85\ub839\uc5b4 14 15 0000000E 0F20C0 mov eax, cr0 16 00000011 6683C801 or eax, 0x00000001 17 00000015 0F22C0 mov cr0, eax 18 19 00000018 EB00 jmp $+2 ; \uc65c \uc774\ubd80\ubd84\uc5d0\uc11c jmp $+2 \ub97c \ud558\uc9c0..? nop\uc744 2\uac1c \uc4f0\uace0..? 20 0000001A 90 nop 21 0000001B 90 nop 22 0000001C 66 db 0x66 ; 0x66, 0x67, 0xEA\ub294 \uc798 gdt\uac00 \ub4f1\ub85d \ub418\uc5c8\ub2e4\ub294 \uc758\ubbf8\uc778\uc9c0..? 23 0000001D 67 db 0x67 24 0000001E EA db 0xEA 25 0000001F [25000000] dd PM_Start ; \uc5ec\uae30\ub85c \uc810\ud504..? 26 00000023 0800 dw SysCodeSelector ; \uc774 GDT\ub97c \uc0ac\uc6a9\ud574\uc11c....? 27 28 ;--------------------------------------------; 29 ;********* \uc5ec\uae30\ubd80\ud130 Protected Mode\uc785\ub2c8\ub2e4. ****; 30 ;--------------------------------------------; 31 [bits 32] 32 33 PM_Start: 34 00000025 66BB1000 mov bx, SysDataSelector 35 00000029 8EDB mov ds, bx 36 0000002B 8EC3 mov es, bx 37 0000002D 8EE3 mov fs, bx 38 0000002F 8EEB mov gs, bx 39 00000031 8ED3 mov ss, bx 40 41 00000033 31C0 xor eax, eax 42 00000035 66B81800 mov ax, VideoSelector 43 00000039 8EC0 mov es, ax 44 0000003B BF54060000 mov edi, 80*2*10+2*10 45 00000040 3E8D35[63000000] lea esi, [ds:msgPMode] 46 00000047 E802000000 call printf 47 48 0000004C EBFE jmp $ 49 50 ;--------------------------------------------; 51 ;************** Sub Routines ****************; 52 ;--------------------------------------------; 53 printf: 54 0000004E 50 push eax 55 56 printf_loop: 57 0000004F 08C0 or al, al 58 00000051 740E jz printf_end 59 00000053 8A06 mov al, byte [esi] 60 00000055 268807 mov byte [es:edi], al 61 00000058 47 inc edi 62 00000059 26C60706 mov byte [es:edi], 0x06 63 0000005D 46 inc esi 64 0000005E 47 inc edi 65 0000005F EBEE jmp printf_loop 66 67 printf_end: 68 00000061 58 pop eax 69 00000062 C3 ret 70 71 00000063 57652061726520696E- msgPMode db \"We are in Protected Mode\", 0 71 0000006C 2050726F7465637465- 71 00000075 64204D6F646500 72 73 ;-----------------------------------------; 74 ;************** GDT Table ****************; 75 ;-----------------------------------------; 76 gdtr: 77 0000007C 1F00 dw gdt_end - gdt - 1 ; GDT\uc758 limit 78 0000007E [82000100] dd gdt+0x010000 ; GDT\uc758 \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4(\ubb3c\ub9ac\uc8fc\uc18c) 79 ; [org 0] \uac00 \uccab \uc904\uc5d0 \uc788\ub294\ub370, \uadf8\uac83 \ub54c\ubb38\uc5d0 0\uc744 \uae30\uc900\uc73c\ub85c \uc774 \uc5b4\uc148\ube14\ub9ac \ud30c\uc77c \ub0b4\uc758 \uba54\ubaa8\ub9ac \uacc4\uc0b0\uc744 \ud568. 80 ; \uc2e4\uc81c\ub85c \uc9c4\ud589\ud558\uace0 \uc788\ub294 \ubb3c\ub9ac \uba54\ubaa8\ub9ac \uc8fc\uc18c\ub294 0x010000 \uc774\uae30 \ub54c\ubb38\uc5d0 \uadf8 \uac12\uc744 \ub354\ud574\uc90c 81 82 gdt: 83 00000082 0000 dw 0 ; limit 0 ~ 15\ube44\ud2b8 84 00000084 0000 dw 0 ; \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4\uc758 \ud558\uc704 \ub450 \ubc14\uc774\ud2b8 85 00000086 00 db 0 ; \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 16~32\ube44\ud2b8 86 00000087 00 db 0 ; \ud0c0\uc785 87 00000088 00 db 0 ; limit 16~19\ube44\ud2b8, \ud50c\ub798\uadf8 88 00000089 00 db 0 ; \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 32~24\ube44\ud2b8 89 90 ; \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 91 SysCodeSelector equ 0x08 ; \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \ub4e4\uc5b4\uac08 \uac12(\ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uae30 \uc704\ud55c \uc778\ub371\uc2a4 + TI + RPL) 92 0000008A FFFF dw 0xFFFF ; limit:0xFFFF 93 0000008C 0000 dw 0x0000 ; base 0~15bit 94 0000008E 01 db 0x01 ; base 16~32bit 95 0000008F 9A db 0x9A ; P:1, DPL:0, Code, non-conforming, readable 96 00000090 CF db 0xCF ; G:1, D:1, limit 16~19 bit:0xF 97 00000091 00 db 0x00 ; base 24~32 bit 98 99 ; \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 100 SysDataSelector equ 0x10 ; \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \ub4e4\uc5b4\uac08 \uac12(\ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uae30 \uc704\ud55c \uc778\ub371\uc2a4 + TI + RPL) 101 00000092 FFFF dw 0xFFFF ; limit 0xFFFF 102 00000094 0000 dw 0x0000 ; base 0~15 bit 103 00000096 01 db 0x01 ; base 16~23 bit 104 00000097 92 db 0x92 ; P:1, DPL: 0, data, expand-up, writable 105 00000098 CF db 0xCF ; G:1, D:1, limit 16~19 bit:0xF 106 00000099 00 db 0x00 ; base 24~32 bit 107 108 ; \ube44\ub514\uc624 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 109 VideoSelector equ 0x18 ; \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \ub4e4\uc5b4\uac08 \uac12(\ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uae30 \uc704\ud55c \uc778\ub371\uc2a4 + TI + RPL) 110 0000009A FFFF dw 0xFFFF ; limit 0xFFFF 111 0000009C 0080 dw 0x8000 ; base 0~15 bit 112 0000009E 0B db 0x0B ; base 16~23 bit 113 0000009F 92 db 0x92 ; P:1, DPL:0, data, expand-up, writable 114 000000A0 40 db 0x40 ; G:0, D:1, limit 16~19 bit:0 115 000000A1 00 db 0x00 ; base 24~32 bit 116 gdt_end: \uc704\uc758 45\ubc88\uc9f8 \uc904\uc5d0\uc11c 1 45 00000040 3E8D35[63000000] lea esi, [ds:msgPMode] 63000000\uc774\ub77c\ub294 \uc8fc\uc18c\uac00 \ub4e4\uc5b4\uc788\uc2b5\ub2c8\ub2e4. \uc778\ud154 CPU\uac00 \ub9ac\ud2c0\uc5d4\ub514\uc5b8\uc774\uae30 \ub54c\ubb38\uc5d0, \uc704\uc758 \uac12\uc740 63\uc774\ub77c\ub294 \uac12\uc774 \ub429\ub2c8\ub2e4. 1 2 3 71 00000063 57652061726520696E- msgPMode db \"We are in Protected Mode\", 0 71 0000006C 2050726F7465637465- 71 00000075 64204D6F646500 71\ubc88\uc9f8 \uc904\uc5d0 \uac00\uc11c \ubcf4\uba74, msgPMode\ub77c\ub294 \uc774\ub984\uc73c\ub85c \ubb38\uc790\uc5f4\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc989, \ud604\uc7ac \ud504\ub85c\uadf8\ub7a8\uc740 0x010000\ubc88\uc9c0\uc5d0 \uc788\uace0, \ubb38\uc790\uc5f4\uc740 0x10065\ubc88\uc9c0\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \uc989 lea easi, [ds:msgPMode] \ub77c\ub294 \uba85\ub839\uc5b4\uac00 CPU\uc5d0\uc11c \ud574\uc11d\ub420 \ub54c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ub3d9\uc791\uc774 \uc218\ud589\ub429\ub2c8\ub2e4. Protected Mode\uc758 \uc8fc\uc18c \uc9c0\uc815 \ubc29\ubc95\uc744 \ud1b5\ud574 \ub098\uc628 \uc8fc\uc18c\ub97c \uc120\ud615 \uc8fc\uc18c\ub77c\uace0 \ud569\ub2c8\ub2e4. \ud398\uc774\uc9d5\uc774 \uad6c\ud604\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc5d0\uc11c\ub294 \uc120\ud615 \uc8fc\uc18c\uac00 \uadf8\ub300\ub85c \ubb3c\ub9ac \uc8fc\uc18c\ub97c \ub73b\ud558\uac8c \ub429\ub2c8\ub2e4. \ud398\uc774\uc9d5\uc774 \uad6c\ud604\ub41c \ud6c4\uc5d0\ub294 \uc120\ud615 \uc8fc\uc18c\uac00 \ud398\uc774\uc9d5 \uae30\ub2a5\uc744 \uac70\uccd0 \ubb3c\ub9ac \uc8fc\uc18c\uac00 \ub429\ub2c8\ub2e4.","title":"\uc138\uadf8\uba3c\ud2b8\uc640 \uc624\ud504\uc14b\uc744 \ud1b5\ud574\uc11c \uc8fc\uc18c\ub97c \uc9c0\uc815\ud558\ub294 \ubc29\ubc95"},{"location":"os-making/04/#protected-mode_1","text":"\uc778\ud130\ub7fd\ud2b8\ub97c \ub9c9\uae30(\uc544\uc9c1 \uad6c\ud604 x) GDT\ub97c \ub9cc\ub4e4\uace0 lgdt \uba85\ub839\uc5b4\ub97c \uc774\uc6a9\ud574\uc11c GDTR\uc5d0 GDT\ub97c \ub85c\ub529 PE(Protection Enable) \ube44\ud2b8\ub97c CR0(Control Register)\uc5d0 \uc138\ud305 Protected Mode\uc758 \ucf54\ub4dc\ub85c \uc810\ud504 \uc704\uc5d0\uc11c 2\ubc88\uc5d0 \ub300\ud574\uc11c\ub9cc \uc0b4\ud3b4\ubd24\uc2b5\ub2c8\ub2e4.","title":"protected Mode\ub85c\uc758 \uc804\ud658 \ubc29\ubc95"},{"location":"os-making/04/#control-register","text":"CPU\uc5d0\ub294 CR0, CR1, CR2, CR3\ub77c\ub294 \ub808\uc9c0\uc2a4\ud130\ub4e4\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. \uc774 \ub808\uc9c0\uc2a4\ud130\ub4e4\uc758 \uc5ed\ud560\uc740 CPU\uc758 \uae30\ub2a5\uc744 \ubc14\uafd4\uc8fc\uae30 \uc704\ud574\uc11c \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc0ac\uc6a9\ud558\uac70\ub098, CPU\uc5d0\uc11c \ud604\uc7ac \uc0c1\ud0dc\ub97c \ud504\ub85c\uadf8\ub798\uba38\uc5d0\uac8c \uc54c\ub824\uc8fc\uae30 \uc704\ud574\uc11c \uc0ac\uc6a9\ud558\uac70\ub098, \ud504\ub85c\uadf8\ub798\uba38\uac00 \uc790\uc2e0\uc758 \ud504\ub85c\uadf8\ub7a8\uc744 \ub514\ubc84\uae45 \ud560 \ub54c \ub4f1\uc758 \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. (\uc790\uc138\ud55c \ub0b4\uc6a9\uc740 Intel Architecture Manual Volume 3\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uac1c\ubc1c \uad00\uc810\uc5d0\uc11c CPU\ub97c \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ud558\ub294 \uc9c0\uc5d0 \ub300\ud574\uc11c \ub098\uc640 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ub9e4\ub274\uc5bc\uc758 \uac70\uc758 \ubaa8\ub4e0 \ub0b4\uc6a9\uc774 Protected Mode\uc5d0 \ub300\ud55c \uc124\uba85\uc11c\uc785\ub2c8\ub2e4.) CR0\uc758 \ucd5c\ud558\uc704 \ube44\ud2b8(0x00000001)\ub294 PE(Protection Enable) \ube44\ud2b8\ub77c\uace0 \ud574\uc11c, \uc774 \ube44\ud2b8\uac00 \uc138\ud2b8\ub41c \ub2e4\uc74c \uba85\ub839\uc5b4\ubd80\ud130 Protected Mode \uc548\uc5d0\uc11c \ub3d9\uc791\ud558\uac8c \ub429\ub2c8\ub2e4. \uc2e4\uc81c\ub85c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc774\uc720\ub85c \uc544\ubb34 \uc77c\ub3c4 \ud558\uc9c0 \uc54a\ub294 \uba85\ub839\uc5b4\ub97c 2\uac1c \ub123\uc5b4\uc918\uc57c \ud569\ub2c8\ub2e4. CPU\uc758 \ud30c\uc774\ud504\ub77c\uc778 \uad6c\uc870 CPU \ub0b4\ubd80 \uad6c\uc870\uc5d0\uc11c 2\uac1c\uc758 \uba85\ub839\uc5b4\ub97c \ubbf8\ub9ac \uac00\uc838\uc640\uc11c \ub3d9\uc2dc\uc5d0 \uc2e4\ud589\uc744 \ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c CR0\uc5d0\uc11c \ucd5c\ud558\uc704 \ube44\ud2b8\ub97c \uc138\ud2b8\ud558\ub294 \ub3d9\uc2dc\uc5d0 \uadf8 \ub2e4\uc74c \uba85\ub839\uc5b4\uc640 \ub2e4\ub2e4\uc74c \uba85\ub839\uc5b4\uac00 \ub3d9\uc2dc\uc5d0 \uc77d\ud600\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c nop \uba85\ub839\uc5b4\ub97c 2\uac1c\ub97c \ub123\uc5b4\uc918\uc57c \uadf8 \ub2e4\uc74c \uba85\ub839\uc5b4\uc5d0\uc11c\ub294 protected mode\uc5d0\uc11c \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c Protected Mode\ub85c \uc9c4\uc785\ud558\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\ub4e4\uc774 16\ube44\ud2b8 \uac12\ub4e4\uc744 \uac00\uc9c0\uace0 \uc788\uc73c\ubbc0\ub85c \uadf8\uac83\uc744 \ud574\uacb0\ud574\uc57c \ud569\ub2c8\ub2e4. 1 2 3 4 5 22 0000001C 66 db 0x66 23 0000001D 67 db 0x67 24 0000001E EA db 0xEA 25 0000001F [25000000] dd PM_Start 26 00000023 0800 dw SysCodeSelector \uc704\uc758 \uba85\ub839\uc5b4\ub294 \uc0ac\uc2e4 FAR JMP\uc758 \uc758\ubbf8\uc778\ub370, FAR JMP\ub294 CS\ub808\uc9c0\uc2a4\ud130\uc5d0 \uc0c8\ub85c\uc6b4 \uc138\uadf8\uba3c\ud2b8\uac00 \ub4e4\uc5b4\uac00\uac8c \ub429\ub2c8\ub2e4. IA manual(Intel Architecture Manual) Volume. 2D\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \ub0b4\uc6a9\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. 0x66: Operand Size\ub77c\ub294 Prefix(16\ube44\ud2b8 \uba85\ub839\uc774 32\ube44\ud2b8 \uba85\ub839\uc5b4\ub85c \ubcc0\uacbd\ub418\uc5c8\uac70\ub098 32\ube44\ud2b8 \uba85\ub839\uc774 16\ube44\ud2b8\ub85c \ubc14\ub00c\uc5c8\ub2e4\ub294 \uac83\uc744 \uc54c\ub824\uc8fc\ub294 prefix) 0x67: Address Size\ub77c\ub294 Prefix(16\ube44\ud2b8 \uba85\ub839\uc774 32\ube44\ud2b8 \uba85\ub839\uc5b4\ub85c \ubcc0\uacbd\ub418\uc5c8\uac70\ub098 32\ube44\ud2b8 \uba85\ub839\uc774 16\ube44\ud2b8\ub85c \ubc14\ub00c\uc5c8\ub2e4\ub294 \uac83\uc744 \uc54c\ub824\uc8fc\ub294 prefix) 0xEA: FAR JMP [SysCodeSelector:PM_Start] \uc774 \uba85\ub839\uc5b4\ub97c \uac70\uce58\uac8c \ub418\uba74, CS\uc5d0\ub294 SysCodeSelector(0x08)\uc758 \uac12\uc774, EIP \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 PM_Start\uc758 \uc8fc\uc18c \uac12\uc774 \ub4e4\uc5b4\uac00\uc11c CPU\uac00 PM_Start\ubd80\ud130 \uba85\ub839\uc744 \uc2e4\ud589\ud558\uac8c \ub429\ub2c8\ub2e4.","title":"Control Register"},{"location":"os-making/04/#prefix","text":"\uc18c\uc2a4\ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 [org 0] [bits 16] mov ax, [si] mov eax, [si] mov ax, [esi] mov eax, [esi] [bits 32] mov ax, [si] mov eax, [si] mov ax, [esi] mov eax, [esi] \ucef4\ud30c\uc77c 1 nasm -f bin -o prefix.bin src \\p refix.asm -l list.txt \ub0b4\uc6a9(list.txt) 1 2 3 4 5 6 7 8 9 10 11 12 1 [org 0] 2 [bits 16] 3 00000000 8B04 mov ax, [si] 4 00000002 668B04 mov eax, [si] 5 00000005 678B06 mov ax, [esi] 6 00000008 66678B06 mov eax, [esi] 7 8 [bits 32] 9 0000000C 66678B04 mov ax, [si] 10 00000010 678B04 mov eax, [si] 11 00000013 668B06 mov ax, [esi] 12 00000016 8B06 mov eax, [esi] \uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c 16\ube44\ud2b8\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub294 \uacbd\uc6b0\uc5d0, 8B04\ub77c\ub294 instruction\uc73c\ub85c mov ax, [si] \ub97c \uc2e4\ud589\ud588\ub294\ub370, operand\uc758 \uc0ac\uc774\uc988\ub97c 32\ube44\ud2b8\ub85c \ubc14\uafc0 \ub54c\ub294 66\uc774\ub77c\ub294 prefix\ub97c \ubd99\uc774\uace0, address\uc758 \uc0ac\uc774\uc988\ub97c 32\ube44\ud2b8\ub85c \ubc14\uafc0 \ub54c\ub294 67\uc774\ub77c\ub294 prefix\ub97c \ubd99\uc785\ub2c8\ub2e4. 32\ube44\ud2b8\uc5d0\uc11c 16\ube44\ud2b8\ub85c \ubc14\uafb8\ub294 \ubc18\ub300\ub3c4 \ub9c8\ucc2c\uac00\uc9c0\uc785\ub2c8\ub2e4. 16\ub144 \uc804\uc758 \ub9ac\ub205\uc2a4 \ucee4\ub110 \ucf54\ub4dc\ub97c github\uc5d0\uc11c \ucc38\uc870\ud560 \uc218 \uc788\ub294\ub370, https://github.com/torvalds/linux/tree/v2.6.12-rc2/arch/x86_64/boot \uc704\uc758 \ub9c1\ud06c\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9ac\ub205\uc2a4 \ucee4\ub110 \ucf54\ub4dc\uc5d0\uc11c\ub294 \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c\uc5d0 \ub4e4\uc5b4\uac08\ub9cc\ud55c \uc791\uc740 \ucee4\ub110\uacfc 1MB \uc774\uc0c1\uc758 \ud06c\uae30\ub97c \uac00\uc9c4 Big Kernel\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. \uc791\uc740 \ucee4\ub110\uc758 \uacbd\uc6b0\uc5d0\ub294 \ucee4\ub110\uc744 RAM\uc758 \ubb3c\ub9ac \uc8fc\uc18c 0x1000\uc5d0 \ub46c\uc11c, 32bit Protected Mode\ub85c \uc810\ud504\ud560 \ub54c \uc774\uacf3\uc73c\ub85c \uc810\ud504\ud569\ub2c8\ub2e4. Big \ucee4\ub110\uc758 \uacbd\uc6b0\uc5d0\ub294 \uc774 \uc810\ud504\ub97c \ud558\uae30 \uc804\uc5d0 \uc704\uc758 .long 0x1000\uc758 \ub370\uc774\ud130 \ubd80\ubd84\uc744 0x010000\uc73c\ub85c \ubc14\uafb8\uc5b4 \ub193\uc544\uc11c \ud504\ub85c\uadf8\ub7a8\uc774 \uc774\uacf3\uc5d0 \ub3c4\ucc29\ud588\uc744 \ub54c \ubb3c\ub9ac\uc8fc\uc18c 0x010000\uc73c\ub85c \uc810\ud504\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. \ub9ac\ub205\uc2a4\uc5d0\uc11c \uc774\ub807\uac8c \ud55c \uc774\uc720\ub294 \ub9ac\ub205\uc2a4\uc758 \uc5b4\uc148\ube14\ub9ac \ubd80\ubd84\uc774 as86\uc774\ub77c\ub294 \uc5b4\uc148\ube14\ub7ec\uc758 \ubc29\uc2dd\uc73c\ub85c \uc81c\uc791\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc774\uace0, as86\uc774 \uc774\ub7ec\ud55c Protected Mode\ub85c\uc758 \uc810\ud504\ub97c \uc9c0\uc6d0\ud558\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \ud558\ub098\uc758 \ud2b8\ub9ad\uc73c\ub85c\uc11c prefix\ub97c \ubd99\uc774\ub294 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud55c \uac83\uc785\ub2c8\ub2e4. NASM\uc5d0\uc11c\ub294 \ub2e4\uc74c\uc758 \uba85\ub839\uc73c\ub85c \uc774\ub7ec\ud55c \uc77c\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 JMP DWORD SysCodeSelector:PM_Start \uc55e\uc73c\ub85c\ub294 \uc774 \ubc29\uc2dd\uc73c\ub85c \ubcc0\uacbd\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774\uc81c Protected Mode\ub85c \uc9c4\uc785\ud588\ub294\ub370, \uccab \ubc88\uc9f8\ub85c \ud560 \uc77c\uc740 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\ub97c \uac01 \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \ub123\uc5b4\uc8fc\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774 \uc791\uc5c5\uc744 \ud558\uae30 \uc804\uc5d0\ub294 \uac01 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130 \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 \uc544\uc9c1 16\ube44\ud2b8 \uac12\uc774 \ub4e4\uc5b4\uc788\uc2b5\ub2c8\ub2e4.","title":"prefix\uc5d0 \ub300\ud55c \ud14c\uc2a4\ud2b8"},{"location":"os-making/04/#done","text":"\ucc55\ud130 3 \ub9c8\ubb34\ub9ac","title":"Done"},{"location":"os-making/05/","text":"day 05: \uc778\ud130\ub7fd\ud2b8\uc640 \uc608\uc678 \uc624\ub298\uc758 \uacb0\uacfc\ubb3c inturrupt\uac00 \ubc1c\uc0dd\ud55c \ubd80\ubd84 \ud0c0\uc774\uba38\uc5d0 \uc758\ud55c \uc778\ud130\ub7fd\ud2b8\ub85c \uc778\ud574 floppy disk\ub97c \uacc4\uc18d \ub044\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \ubb34\ud55c\uc73c\ub85c \uc7ac\ubd80\ud305 \ub418\ub294 \ubaa8\uc2b5. \ucf54\ub4dc 1 2 3 4 ; src\\\\init.inc SysCodeSelector equ 0x08 SysDataSelector equ 0x10 VideoSelector equ 0x18 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 ; src\\\\boot.asm %include \"src/init.inc\" [org 0] jmp 07C0h:start start: mov ax, cs mov ds, ax mov es, ax mov ax, 0xB800 mov es, ax mov di, 0 mov ax, word [msgBack] mov cx, 0x7FF paint: mov word [es:di], ax add di, 2 dec cx jnz paint read: mov ax, 0x1000 mov es, ax mov bx, 0 mov ah, 2 mov al, 1 mov ch, 0 mov cl, 2 mov dh, 0 mov dl, 0 int 13h jc read; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud568 mov dx, 0x3F2 ; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c \ub4dc\ub77c\uc774\ube0c\uc758 xor al, al ; \ubaa8\ud130\ub97c \ub048\ub2e4. out dx, al cli mov al, 0xFF ; PIC\uc5d0\uc11c \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c out 0xA1, al ; \ub9c9\uc544\ub193\ub294\ub2e4. lgdt[gdtr] mov eax, cr0 or eax, 0x00000001 mov cr0, eax jmp $+2 nop nop mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx jmp dword SysCodeSelector:0x010000 msgBack db '.', 0x67 gdtr: dw gdt_end - gdt - 1 ; GDT\uc758 limit dd gdt+0x7C00 ; GDT\uc758 \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 gdt: dd 0, 0 dd 0x0000FFFF, 0x00CF9A00 dd 0x0000FFFF, 0x00CF9200 dd 0x8000FFFF, 0x0040920B gdt_end: times 510-($-$$) db 0 dw 0AA55h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 ; src\\\\kernel.asm %include \"src/init.inc\" [org 0x010000] [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx lea esp, [PM_Start] mov edi, 0 lea esi, [msgPMode] call printf cld mov ax, SysDataSelector mov es, ax xor eax, eax xor ecx, ecx mov ax, 256 ; IDT \uc601\uc5ed\uc5d0 256\uac1c\uc758 mov edi, 0 ; \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud55c\ub2e4. loop_idt: lea esi, [idt_ignore] mov cx, 8 ; \ub514\uc2a4\ud06c\ub9bd\ud130 \ud558\ub098\ub294 8\ubc14\uc774\ud2b8\uc774\ub2e4. rep movsb dec ax jnz loop_idt lidt [idtr] sti int 0x77 jmp $ ;***************************** ;********** Subroutines ****** ;***************************** printf: push eax push es mov ax, VideoSelector mov es, ax printf_loop: mov al, byte [esi] mov byte [es:edi], al inc edi mov byte [es:edi], 0x06 inc esi inc edi or al, al jz printf_end jmp printf_loop printf_end: pop es pop eax ret ;********************************* ;*********** Data Area *********** ;********************************* msgPMode db \"We are in Protected Mode\", 0 msg_isr_ignore db \"This is an ignorable inturrupt\", 0 msg_isr_32_timer db \"This is the timer inturrupt\", 0 ;********************************* ;*** Interrupt Service Routines ** ;********************************* isr_ignore: push gs push fs push es push ds pushad pushfd mov ax, VideoSelector mov es, ax mov edi, (80*7*2) lea esi, [msg_isr_ignore] call printf popfd popad pop ds pop es pop fs pop gs ;********************************* ;************* IDT *************** ;********************************* idtr: dw 256*8 - 1 ; IDT\uc758 Limit dd 0 ; IDT\uc758 Base Address idt_ignore: dw isr_ignore dw SysCodeSelector db 0 db 0x8E dw 0x0001 times 512 - ($-$$) db 0 \uc124\uba85 \uc804\uccb4\uc801\uc778 \uc778\ud130\ub7fd\ud2b8\uc758 \uacfc\uc815\uc740 \uc704\uc758 \uadf8\ub9bc\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc774\ubc88 \ucf54\ub4dc\uc5d0\ub294 boot.asm\uc5d0\uc11c floppy disk\uc758 \ubaa8\ud130\ub97c \ub044\ub294 \ubd80\ubd84\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4. 1 2 3 mov dx, 0x3F2 ; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c \ub4dc\ub77c\uc774\ube0c\uc758 xor al, al ; \ubaa8\ud130\ub97c \ub048\ub2e4. out dx, al 0x3F2\ubc88\uc9c0\uc5d0 I/O\uba85\ub839\uc778 out\uc73c\ub85c 0\uc758 \uac12\uc744 \ub123\uc73c\uba74 \ubaa8\ud130\uac00 \uaebc\uc9d1\ub2c8\ub2e4. PC\uc758 \uba54\uc778\ubcf4\ub4dc\uc5d0\ub294 8259A\ub77c\ub294 \uc774\ub984\uc758 \uce69\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uce69\uc740 \uba54\uc778\ubcf4\ub4dc \uc804\uccb4\uc758 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\ub97c \uad00\ub9ac\ud569\ub2c8\ub2e4. \uc694\uc998\uc740 8259A\ub77c\ub294 \ud615\ud0dc\ub85c \ub2e8\uc77c \uce69\uc774 \uc788\ub294 \uac83\uc740 \uc544\ub2c8\uace0 \uba54\uc778\ubcf4\ub4dc\uc758 \uce69\uc14b\uc5d0 \ub85c\uc9c1\ud654\ub418\uc5b4 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc608\uc804\uacfc \uac19\uc740 \ub3d9\uc791\uc744 \ud55c\ub2e4\ub294 \uba74\uc5d0\uc11c \ud638\ud658\uc131\uc744 \uc720\uc9c0\ud558\uace0 \uc788\ub2e4\uace0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc800\ub294 out\uc758 \ub3d9\uc791 \uacfc\uc815\uc774 \uad81\uae08\ud588\uae30 \ub54c\ubb38\uc5d0, stack-overflow\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \ubd80\ubd84\uc744 \ub354 \ucc3e\uc544\ubcf4\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. CPU\uac00 Memory\uc640 I/O\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc5bb\uc5b4\uc624\ub294 \uacfc\uc815 \uc124\uba85 https://stackoverflow.com/questions/3215878/what-are-in-out-instructions-in-x86-used-for You know how memory addressing works? There's an address bus, a data bus, and some control lines. The CPU puts the address of a byte (or a beginning byte) of memory on the address bus, then raises the READ signal, and some RAM chip hopefully returns the contents of memory at that address by raising or lowering individual lines (corresponding to bits in the byte(s)) on the data bus. This works for both RAM and ROM. But then there are also I/O devices: Serial and parallel ports, the driver for a PC's tiny internal speaker, disk controllers, sound chips and so on. And those devices also get read from and written to. They also need to be addressed so the CPU accesses the correct device and (usually) the correct data location within a given device. For some CPU models including the xxx86 series as found in most \"modern\" PCs, I/O devices share the address space with memory. Both RAM/ROM and IO devices are connected to the same address, data and control lines. For example, the serial port for COM1 is addressed starting at (hex) 03F8. But there's almost certainly memory at the same address. Here's a really simple diagram: Clearly the CPU needs to talk to either memory or the I/O device, never both. To distinguish between the two, one of the control lines called \"M/#IO\" asserts whether the CPU wants to talk to memory (line=high) or an I/O device (line=low). The IN instruction reads from an I/O device, OUT writes. When you use the IN or OUT instructions, the M/#IO is not asserted (held low), so memory doesn't respond and the I/O chip does. For the memory-oriented instructions, M/#IO is asserted so CPU talks to the RAM, and IO devices stay out of the communication. Under certain conditions the IO devices can drive the data lines and the RAM can read them at the same time. And vice versa. It's called DMA. Traditionally, serial and printer ports, as well as keyboard, mouse, temperature sensors and so forth were I/O devices. Disks were sort of in between; data transfers would be initiated by I/O commands but the disk controller would usually direct-deposit its data in system memory. In modern operating systems like Windows or Linux, access to I/O ports is hidden away from \"normal\" user programs, and there are layers of software, privileged instructions and drivers to deal with the hardware. So in this century, most programmers don't deal with those instructions. Done p. 108 IDT\ub9cc\ub4e4\uae30 \uc804\uae4c\uc9c0 \ud559\uc2b5\ud588\uc74c \uc544\uc9c1 IDT\uac00 \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud558\uace0, \uc778\ud130\ub7fd\ud2b8\uac00 \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud558\uace0 out instruction\uc758 \ub3d9\uc791 \ub4f1\uc744 \uc790\uc138\ud558\uac8c \uc798 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4.","title":"day5: \uc778\ud130\ub7fd\ud2b8\uc640 \uc608\uc678"},{"location":"os-making/05/#day-05","text":"","title":"day 05: \uc778\ud130\ub7fd\ud2b8\uc640 \uc608\uc678"},{"location":"os-making/05/#_1","text":"inturrupt\uac00 \ubc1c\uc0dd\ud55c \ubd80\ubd84 \ud0c0\uc774\uba38\uc5d0 \uc758\ud55c \uc778\ud130\ub7fd\ud2b8\ub85c \uc778\ud574 floppy disk\ub97c \uacc4\uc18d \ub044\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, \ubb34\ud55c\uc73c\ub85c \uc7ac\ubd80\ud305 \ub418\ub294 \ubaa8\uc2b5.","title":"\uc624\ub298\uc758 \uacb0\uacfc\ubb3c"},{"location":"os-making/05/#_2","text":"1 2 3 4 ; src\\\\init.inc SysCodeSelector equ 0x08 SysDataSelector equ 0x10 VideoSelector equ 0x18 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 ; src\\\\boot.asm %include \"src/init.inc\" [org 0] jmp 07C0h:start start: mov ax, cs mov ds, ax mov es, ax mov ax, 0xB800 mov es, ax mov di, 0 mov ax, word [msgBack] mov cx, 0x7FF paint: mov word [es:di], ax add di, 2 dec cx jnz paint read: mov ax, 0x1000 mov es, ax mov bx, 0 mov ah, 2 mov al, 1 mov ch, 0 mov cl, 2 mov dh, 0 mov dl, 0 int 13h jc read; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud568 mov dx, 0x3F2 ; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c \ub4dc\ub77c\uc774\ube0c\uc758 xor al, al ; \ubaa8\ud130\ub97c \ub048\ub2e4. out dx, al cli mov al, 0xFF ; PIC\uc5d0\uc11c \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c out 0xA1, al ; \ub9c9\uc544\ub193\ub294\ub2e4. lgdt[gdtr] mov eax, cr0 or eax, 0x00000001 mov cr0, eax jmp $+2 nop nop mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx jmp dword SysCodeSelector:0x010000 msgBack db '.', 0x67 gdtr: dw gdt_end - gdt - 1 ; GDT\uc758 limit dd gdt+0x7C00 ; GDT\uc758 \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 gdt: dd 0, 0 dd 0x0000FFFF, 0x00CF9A00 dd 0x0000FFFF, 0x00CF9200 dd 0x8000FFFF, 0x0040920B gdt_end: times 510-($-$$) db 0 dw 0AA55h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 ; src\\\\kernel.asm %include \"src/init.inc\" [org 0x010000] [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx lea esp, [PM_Start] mov edi, 0 lea esi, [msgPMode] call printf cld mov ax, SysDataSelector mov es, ax xor eax, eax xor ecx, ecx mov ax, 256 ; IDT \uc601\uc5ed\uc5d0 256\uac1c\uc758 mov edi, 0 ; \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud55c\ub2e4. loop_idt: lea esi, [idt_ignore] mov cx, 8 ; \ub514\uc2a4\ud06c\ub9bd\ud130 \ud558\ub098\ub294 8\ubc14\uc774\ud2b8\uc774\ub2e4. rep movsb dec ax jnz loop_idt lidt [idtr] sti int 0x77 jmp $ ;***************************** ;********** Subroutines ****** ;***************************** printf: push eax push es mov ax, VideoSelector mov es, ax printf_loop: mov al, byte [esi] mov byte [es:edi], al inc edi mov byte [es:edi], 0x06 inc esi inc edi or al, al jz printf_end jmp printf_loop printf_end: pop es pop eax ret ;********************************* ;*********** Data Area *********** ;********************************* msgPMode db \"We are in Protected Mode\", 0 msg_isr_ignore db \"This is an ignorable inturrupt\", 0 msg_isr_32_timer db \"This is the timer inturrupt\", 0 ;********************************* ;*** Interrupt Service Routines ** ;********************************* isr_ignore: push gs push fs push es push ds pushad pushfd mov ax, VideoSelector mov es, ax mov edi, (80*7*2) lea esi, [msg_isr_ignore] call printf popfd popad pop ds pop es pop fs pop gs ;********************************* ;************* IDT *************** ;********************************* idtr: dw 256*8 - 1 ; IDT\uc758 Limit dd 0 ; IDT\uc758 Base Address idt_ignore: dw isr_ignore dw SysCodeSelector db 0 db 0x8E dw 0x0001 times 512 - ($-$$) db 0","title":"\ucf54\ub4dc"},{"location":"os-making/05/#_3","text":"\uc804\uccb4\uc801\uc778 \uc778\ud130\ub7fd\ud2b8\uc758 \uacfc\uc815\uc740 \uc704\uc758 \uadf8\ub9bc\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc774\ubc88 \ucf54\ub4dc\uc5d0\ub294 boot.asm\uc5d0\uc11c floppy disk\uc758 \ubaa8\ud130\ub97c \ub044\ub294 \ubd80\ubd84\uc774 \ucd94\uac00\ub418\uc5c8\uc2b5\ub2c8\ub2e4. 1 2 3 mov dx, 0x3F2 ; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c \ub4dc\ub77c\uc774\ube0c\uc758 xor al, al ; \ubaa8\ud130\ub97c \ub048\ub2e4. out dx, al 0x3F2\ubc88\uc9c0\uc5d0 I/O\uba85\ub839\uc778 out\uc73c\ub85c 0\uc758 \uac12\uc744 \ub123\uc73c\uba74 \ubaa8\ud130\uac00 \uaebc\uc9d1\ub2c8\ub2e4. PC\uc758 \uba54\uc778\ubcf4\ub4dc\uc5d0\ub294 8259A\ub77c\ub294 \uc774\ub984\uc758 \uce69\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uce69\uc740 \uba54\uc778\ubcf4\ub4dc \uc804\uccb4\uc758 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\ub97c \uad00\ub9ac\ud569\ub2c8\ub2e4. \uc694\uc998\uc740 8259A\ub77c\ub294 \ud615\ud0dc\ub85c \ub2e8\uc77c \uce69\uc774 \uc788\ub294 \uac83\uc740 \uc544\ub2c8\uace0 \uba54\uc778\ubcf4\ub4dc\uc758 \uce69\uc14b\uc5d0 \ub85c\uc9c1\ud654\ub418\uc5b4 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc608\uc804\uacfc \uac19\uc740 \ub3d9\uc791\uc744 \ud55c\ub2e4\ub294 \uba74\uc5d0\uc11c \ud638\ud658\uc131\uc744 \uc720\uc9c0\ud558\uace0 \uc788\ub2e4\uace0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc800\ub294 out\uc758 \ub3d9\uc791 \uacfc\uc815\uc774 \uad81\uae08\ud588\uae30 \ub54c\ubb38\uc5d0, stack-overflow\uc5d0\uc11c \ub2e4\uc74c\uacfc \uac19\uc740 \ubd80\ubd84\uc744 \ub354 \ucc3e\uc544\ubcf4\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4.","title":"\uc124\uba85"},{"location":"os-making/05/#cpu-memory-io","text":"https://stackoverflow.com/questions/3215878/what-are-in-out-instructions-in-x86-used-for You know how memory addressing works? There's an address bus, a data bus, and some control lines. The CPU puts the address of a byte (or a beginning byte) of memory on the address bus, then raises the READ signal, and some RAM chip hopefully returns the contents of memory at that address by raising or lowering individual lines (corresponding to bits in the byte(s)) on the data bus. This works for both RAM and ROM. But then there are also I/O devices: Serial and parallel ports, the driver for a PC's tiny internal speaker, disk controllers, sound chips and so on. And those devices also get read from and written to. They also need to be addressed so the CPU accesses the correct device and (usually) the correct data location within a given device. For some CPU models including the xxx86 series as found in most \"modern\" PCs, I/O devices share the address space with memory. Both RAM/ROM and IO devices are connected to the same address, data and control lines. For example, the serial port for COM1 is addressed starting at (hex) 03F8. But there's almost certainly memory at the same address. Here's a really simple diagram: Clearly the CPU needs to talk to either memory or the I/O device, never both. To distinguish between the two, one of the control lines called \"M/#IO\" asserts whether the CPU wants to talk to memory (line=high) or an I/O device (line=low). The IN instruction reads from an I/O device, OUT writes. When you use the IN or OUT instructions, the M/#IO is not asserted (held low), so memory doesn't respond and the I/O chip does. For the memory-oriented instructions, M/#IO is asserted so CPU talks to the RAM, and IO devices stay out of the communication. Under certain conditions the IO devices can drive the data lines and the RAM can read them at the same time. And vice versa. It's called DMA. Traditionally, serial and printer ports, as well as keyboard, mouse, temperature sensors and so forth were I/O devices. Disks were sort of in between; data transfers would be initiated by I/O commands but the disk controller would usually direct-deposit its data in system memory. In modern operating systems like Windows or Linux, access to I/O ports is hidden away from \"normal\" user programs, and there are layers of software, privileged instructions and drivers to deal with the hardware. So in this century, most programmers don't deal with those instructions.","title":"CPU\uac00 Memory\uc640 I/O\uc5d0\uc11c \ub370\uc774\ud130\ub97c \uc5bb\uc5b4\uc624\ub294 \uacfc\uc815 \uc124\uba85"},{"location":"os-making/05/#done","text":"p. 108 IDT\ub9cc\ub4e4\uae30 \uc804\uae4c\uc9c0 \ud559\uc2b5\ud588\uc74c \uc544\uc9c1 IDT\uac00 \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud558\uace0, \uc778\ud130\ub7fd\ud2b8\uac00 \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud558\uace0 out instruction\uc758 \ub3d9\uc791 \ub4f1\uc744 \uc790\uc138\ud558\uac8c \uc798 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4.","title":"Done"},{"location":"os-making/06/","text":"day 06: IDT \uc624\ub298\uc758 \uacb0\uacfc\ubb3c \uc624\ub298\uc740 day05\uc640 \uacb0\uacfc\ubb3c\uc774 \uac19\uc2b5\ub2c8\ub2e4. \ucd94\uac00\ub41c \uacb0\uacfc\ubb3c\uc740 \uc5c6\uace0, \uc124\uba85\ub9cc \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4. IDT \ub9cc\ub4e4\uae30 Protected Mode\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud574\uc11c \ud14c\uc774\ube14\uc774 \ud558\ub098 \ud544\uc694\ud55c\ub370, \uc774 \uac83\uc744 IDT(Interrupt Descriptor Table)\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. IDT\ub294 GDT\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c RAM \uc0c1\uc5d0 \uc800\uc7a5\ub418\uba70, \uba54\ubaa8\ub9ac \uc911 \uc5b4\ub290 \uacf3\uc774\ub77c\ub3c4 \uc800\uc7a5\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uc774 \ud14c\uc774\ube14\uc740 256\uac1c\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\uba70, GDT\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\uc640 \uc720\uc0ac\ud558\uac8c \uc0dd\uacbc\uc2b5\ub2c8\ub2e4. GDT\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\ub294 \uba54\ubaa8\ub9ac\uc758 \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc5c8\uc9c0\ub9cc, IDT\ub294 \ud574\ub2f9 \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud588\uc744 \ub54c \uc5b4\ub290 \ub8e8\ud2f4\uc744 \uc2e4\ud589\uc2dc\ucf1c\uc57c \ud558\ub294\uc9c0\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. IDT \ub514\uc2a4\ud06c\ub9bd\ud130 \ud578\ub4e4\ub7ec\uc758 \uc624\ud504\uc14b\uc740 \ud578\ub4e4\ub7ec\uac00 \uc790\ub9ac\ud558\uace0 \uc788\ub294 RAM \uc0c1\uc758 \ubb3c\ub9ac \uc8fc\uc18c\uc785\ub2c8\ub2e4. \ud578\ub4e4\ub7ec\uc758 \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\ub294 \ud56d\uc0c1 Protected Mode\uc0c1\uc5d0\uc11c \ub3d9\uc791\ud558\ubbc0\ub85c \ucee4\ub110 \ubaa8\ub4dc \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130 \uac12\uc744 \uae30\uc785\ud558\uba74 \ub429\ub2c8\ub2e4. \uadf8 \ud6c4 \ud55c \ubc14\uc774\ud2b8\ub294 \uc5ec\ub7ec \ube44\ud2b8\ub85c \ub098\ub258\uc5b4\uc838 \uc788\uc2b5\ub2c8\ub2e4. P \ube44\ud2b8 \ub294 GDT \ub514\uc2a4\ud06c\ub9bd\ud130\uc640 \ub9c8\ucc2c\uac00\uc9c0\uc758 \uc758\ubbf8\ub97c \uac16\uc2b5\ub2c8\ub2e4. \ucee4\ub110 \ubaa8\ub4dc\uc758 \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8\uac00 RAM \uc0c1\uc5d0 \uc874\uc7ac\ud558\ub294\uc9c0 \ub97c \ub098\ud0c0\ub0b4\ub294\ub370, \ud56d\uc0c1 1\ub85c \uc138\ud305\ud574 \ub450\uc2dc\uba74 \ub429\ub2c8\ub2e4. DPL \uc740 \ud578\ub4e4\ub7ec\uac00 \uc2e4\ud589\ub420 \ud2b9\uad8c \ub808\ubca8 \uc744 \uc9c0\uc815\ud558\ub294\ub370, \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub294 \ud56d\uc0c1 \ucee4\ub110 \ubaa8\ub4dc\uc5d0\uc11c \ub3d9\uc791\ud558\uae30 \ub54c\ubb38\uc5d0 0~3 \uc911 0\ub808\ubca8\uc744 \uc9c0\uc815\ud569\ub2c8\ub2e4. 0\uacfc 1\ub85c \uc815\ud574\uc9c4 \ube44\ud2b8 \uac12 \ub4e4\uc740 \uc774 \ub514\uc2a4\ud06c\ub9bd\ud130\uac00 IDT\uc5d0 \uc704\uce58\ud55c \uc778\ud130\ub7fd\ud2b8 \uad00\ub828 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub77c\ub294 \uac83\uc744 CPU\uc5d0\uac8c \uc54c\ub824\uc8fc\ub294 \uac12 \uc774\ubbc0\ub85c \uc368\uc788\ub294 \uadf8\ub300\ub85c \uae30\uc785\ud574 \ub450\uba74 \ub429\ub2c8\ub2e4. D \ube44\ud2b8 \ub294 \ud604\uc7ac \uc9c0\uc815\ud55c \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8\uac00 16\ube44\ud2b8\uc778\uc9c0 32\ube44\ud2b8\uc778\uc9c0 \ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc774 \ube44\ud2b8\uac00 0\uc774\uba74 16\ube44\ud2b8\uc774\uace0, 1\uc774\uba74 32\ube44\ud2b8\uc785\ub2c8\ub2e4. \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub294 32\ube44\ud2b8\uc774\ubbc0\ub85c \uc774 \ube44\ud2b8\ub97c 1\ub85c \uc138\ud305\ud569\ub2c8\ub2e4. \uc704\uc758 \ud615\ud0dc\uc758 IDT \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \uba54\ubaa8\ub9ac \uc0c1\uc5d0 256\uac1c\uc758 \ub9cc\ub4e4\uc5b4, \ud558\ub098\uc758 IDT\uc758 \ud615\ud0dc\ub97c \uac16\ucd94\uac8c \ud569\ub2c8\ub2e4. 256\uac1c\ubcf4\ub2e4 \ub9ce\uac70\ub098 \uc801\uc5b4\ub3c4 \uc0c1\uad00\uc740 \uc5c6\uc9c0\ub9cc, \ud604\uc7ac \uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud558\uace0 \uc788\ub294 PC\uc758 \uba54\uc778\ubcf4\ub4dc\uc758 \uc778\ud130\ub7fd\ud2b8 \uad00\ub828 \ud558\ub4dc\uc6e8\uc5b4\uac00 256\uac1c\uc758 \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc544\ub4e4\uc774\ub3c4\ub85d \ub514\uc790\uc778\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 256\uac1c\ub85c \ud569\ub2c8\ub2e4. Protected Mode\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub294 1) \uc2e4\uc81c\ub85c IDT\ub97c RAM \uc0c1\uc5d0 \uc791\uc131\ud558\ub294 \ub8e8\ud2f4, \ub514\uc2a4\ud06c\ub9bd\ud130 \uc0d8\ud50c, \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \ub8e8\ud2f4(Interrupt Service Routine, \uc57d\uc790\ub85c ISR\uc774\ub77c\uace0\ub3c4 \ubd80\ub985\ub2c8\ub2e4.) \uc774\ub807\uac8c \uc138 \uac00\uc9c0\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. lidt [idtr] \uba85\ub839\uc5b4\ub97c \uc774\uc6a9\ud574\uc11c idt\ub97c \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub4f1\ub85d\ud574 \uc918\uc57c \ud569\ub2c8\ub2e4. idtr\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 idtr: dw 256*8 - 1 dd 0 lidt\ub85c \ub4f1\ub85d\uc744 \ud558\ub77c\ub294 \uba85\ub839\uc744 \ub0b4\ub9ac\uba74 CPU\uc758 IDTR \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774 \ubcc0\uc218\uc758 \uac12\uc774 \uadf8\ub300\ub85c \ub4e4\uc5b4\uac00\uac8c \ub429\ub2c8\ub2e4. IDTR \ub808\uc9c0\uc2a4\ud130\uc5d0 IDT\ub97c \ub4f1\ub85d\ud558\ub294 \uacfc\uc815 \uc778\ud130\ub7fd\ud2b8\uac00 \ud638\ucd9c\ub418\uc5c8\uc744 \ub54c\uc758 \ud750\ub984 \uc704\uc758 \uadf8\ub9bc\uc5d0\uc11c 1\ubc88\uc740 CPU\uc5d0 \uc778\ud130\ub7fd\ud2b8\uac00 \ub4e4\uc5b4\uac04 \uc0c1\ud0dc\uc785\ub2c8\ub2e4. \uc624\ub298 \ubc30\uc6b4 nasm \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4 equ: \uc2ec\ubcfc\uc744 \uc815\uc758\ud558\ub294 \ub370\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ud55c \ubc88 \uc815\uc758\ub41c \uc2ec\ubcfc \uac12\uc740 \uc7ac\uc815\uc758 \ub420 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. (\ucc38\uace0 \ub9c1\ud06c: https://opentutorials.org/module/1596/9765) 1 symbol equ value out: I/O device\uc5d0 write\ub97c \ud568( The IN instruction reads from an I/O device, OUT writes ) cld(Clear direction flag): Direction Flag\ub97c 0\uc73c\ub85c \uc124\uc815\ud558\ub294 \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. REP prefix\uac00 \ubd99\uc5b4\uc11c MOVS, LODS, SCAS, ... \ub4f1\uc758 \uba85\ub839\uc5b4\uac00 \uc0ac\uc6a9\ub418\ub294\ub370 \ubc18\ubcf5 \ud69f\uc218\ub294 ECX\ub808\uc9c0\uc2a4\ud130\uc5d0 \ub2f4\uae30\uc9c0\ub9cc, \ub370\uc774\ud130\uac00 \ub2f4\uae34 \uacf3\uc758 \uc8fc\uc18c\ub294 \uc54c\uc544\uc11c \uc99d\uac10\ud569\ub2c8\ub2e4.(ESI, EDI) \uc774 \ub54c \uc790\ub3d9\uc73c\ub85c \uc99d\uac10\ud558\ub294 \ubc29\ud5a5\uc744 \uacb0\uc815\ud558\ub294 \ud50c\ub798\uadf8\uac00 DF(Direction Flag)\uc785\ub2c8\ub2e4. DF=0\uc774\ub77c\uba74 \uc99d\uac00 DF=1\uc774\ub77c\uba74 \uac10\uc18c \ubc29\ud5a5\uc73c\ub85c \uc99d\uac10\ud569\ub2c8\ub2e4. \uc774 \uba85\ub839\uc5b4\ub294 rep movsb \uac19\uc740 \uba85\ub839\uc5b4\ub97c \uc4f0\uae30 \uc804\uc5d0 esi, edi\uc758 \ubc29\ud5a5\uc744 \uc815\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. repeat \uc811\ub450\uc0ac REP: ECX > 0 \uc778\ub3d9\uc548 \ubc18\ubcf5\ud569\ub2c8\ub2e4. REPZ: ZERO \ud50c\ub798\uadf8\uac00 1\uc774\uace0 ECX > 0\uc778\ub3d9\uc548 \ubc18\ubcf5\ud569\ub2c8\ub2e4. REPNZ, REPNE: ZERO \ud50c\ub798\uadf8\uac00 0\uc774\uace0 ECX > 0\uc778\ub3d9\uc548 \ubc18\ubcf5\ud569\ub2c8\ub2e4. MOVSB, MOVSW, MOVSD: Move String Data. \ub370\uc774\ud130\ub97c ESI\uc5d0 \ub4e4\uc5b4\uc788\ub294 \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc5d0\uc11c EDI\uc5d0 \ub4e4\uc5b4\uc788\ub294 \uba54\ubaa8\ub9ac \uc8fc\uc18c\ub85c \uba54\ubaa8\ub9ac\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. iret: \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud55c \ub2f9\uc2dc\uc758 \ud504\ub85c\uadf8\ub7a8\uc758 \ub2e4\uc74c \uba85\ub839\uc73c\ub85c \ub3cc\uc544\uac00\uc11c \ud504\ub85c\uadf8\ub7a8\uc744 \uc7ac\uac1c\ud569\ub2c8\ub2e4. lidt [idtr]: IDT\ub3c4 GDT\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c CPU\uc5d0 \uc778\ud130\ub7fd\ud2b8\uac00 \uac78\ub838\uc744 \ub54c CPU\ub85c \ud558\uc5ec\uae08 \uc774 IDT\ub97c CPU\uc758 IDTR \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub4f1\ub85d\uc2dc\ucf1c \uc8fc\ub294 \uba85\ub839\uc785\ub2c8\ub2e4. \uc0c1\ud0dc \ub808\uc9c0\uc2a4\ud130\ub97c \uc9c1\uc811 \ucee8\ud2b8\ub864 \ud558\ub294 \uba85\ub839\uc5b4 st\uc640 cl: st\ub294 set\uc774\ub77c\ub294 \ub73b\uc774\uba70, \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 1\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. cl\uc758 \uc758\ubbf8\ub294 clear\ub77c\ub294 \ub73b\uc774\uba70 \ub808\uc9c0\uc2a4\ud130\uc758 \uac12\uc744 0\uc73c\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. cl\uacfc st\uc5d0 \ubd99\uc77c \uc218 \uc788\ub294 \uc0c1\ud0dc \ub808\uc9c0\uc2a4\ud130\uc758 flag\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. c(Carry Flag), d(Direction Flag), i(Intterupt Flag) \uc778\ud130\ub7fd\ud2b8 \ud50c\ub798\uadf8 IF : Interruption Flag. Set if interrupts are enabled (\ucc38\uace0 \ub9c1\ud06c: https://stackoverflow.com/questions/3215878/what-are-in-out-instructions-in-x86-used-for)","title":"day6: IDT"},{"location":"os-making/06/#day-06-idt","text":"","title":"day 06: IDT"},{"location":"os-making/06/#_1","text":"\uc624\ub298\uc740 day05\uc640 \uacb0\uacfc\ubb3c\uc774 \uac19\uc2b5\ub2c8\ub2e4. \ucd94\uac00\ub41c \uacb0\uacfc\ubb3c\uc740 \uc5c6\uace0, \uc124\uba85\ub9cc \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4.","title":"\uc624\ub298\uc758 \uacb0\uacfc\ubb3c"},{"location":"os-making/06/#idt","text":"Protected Mode\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud574\uc11c \ud14c\uc774\ube14\uc774 \ud558\ub098 \ud544\uc694\ud55c\ub370, \uc774 \uac83\uc744 IDT(Interrupt Descriptor Table)\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. IDT\ub294 GDT\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c RAM \uc0c1\uc5d0 \uc800\uc7a5\ub418\uba70, \uba54\ubaa8\ub9ac \uc911 \uc5b4\ub290 \uacf3\uc774\ub77c\ub3c4 \uc800\uc7a5\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \uc774 \ud14c\uc774\ube14\uc740 256\uac1c\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\uba70, GDT\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\uc640 \uc720\uc0ac\ud558\uac8c \uc0dd\uacbc\uc2b5\ub2c8\ub2e4. GDT\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\ub294 \uba54\ubaa8\ub9ac\uc758 \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc5c8\uc9c0\ub9cc, IDT\ub294 \ud574\ub2f9 \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud588\uc744 \ub54c \uc5b4\ub290 \ub8e8\ud2f4\uc744 \uc2e4\ud589\uc2dc\ucf1c\uc57c \ud558\ub294\uc9c0\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. IDT \ub514\uc2a4\ud06c\ub9bd\ud130 \ud578\ub4e4\ub7ec\uc758 \uc624\ud504\uc14b\uc740 \ud578\ub4e4\ub7ec\uac00 \uc790\ub9ac\ud558\uace0 \uc788\ub294 RAM \uc0c1\uc758 \ubb3c\ub9ac \uc8fc\uc18c\uc785\ub2c8\ub2e4. \ud578\ub4e4\ub7ec\uc758 \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\ub294 \ud56d\uc0c1 Protected Mode\uc0c1\uc5d0\uc11c \ub3d9\uc791\ud558\ubbc0\ub85c \ucee4\ub110 \ubaa8\ub4dc \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130 \uac12\uc744 \uae30\uc785\ud558\uba74 \ub429\ub2c8\ub2e4. \uadf8 \ud6c4 \ud55c \ubc14\uc774\ud2b8\ub294 \uc5ec\ub7ec \ube44\ud2b8\ub85c \ub098\ub258\uc5b4\uc838 \uc788\uc2b5\ub2c8\ub2e4. P \ube44\ud2b8 \ub294 GDT \ub514\uc2a4\ud06c\ub9bd\ud130\uc640 \ub9c8\ucc2c\uac00\uc9c0\uc758 \uc758\ubbf8\ub97c \uac16\uc2b5\ub2c8\ub2e4. \ucee4\ub110 \ubaa8\ub4dc\uc758 \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8\uac00 RAM \uc0c1\uc5d0 \uc874\uc7ac\ud558\ub294\uc9c0 \ub97c \ub098\ud0c0\ub0b4\ub294\ub370, \ud56d\uc0c1 1\ub85c \uc138\ud305\ud574 \ub450\uc2dc\uba74 \ub429\ub2c8\ub2e4. DPL \uc740 \ud578\ub4e4\ub7ec\uac00 \uc2e4\ud589\ub420 \ud2b9\uad8c \ub808\ubca8 \uc744 \uc9c0\uc815\ud558\ub294\ub370, \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub294 \ud56d\uc0c1 \ucee4\ub110 \ubaa8\ub4dc\uc5d0\uc11c \ub3d9\uc791\ud558\uae30 \ub54c\ubb38\uc5d0 0~3 \uc911 0\ub808\ubca8\uc744 \uc9c0\uc815\ud569\ub2c8\ub2e4. 0\uacfc 1\ub85c \uc815\ud574\uc9c4 \ube44\ud2b8 \uac12 \ub4e4\uc740 \uc774 \ub514\uc2a4\ud06c\ub9bd\ud130\uac00 IDT\uc5d0 \uc704\uce58\ud55c \uc778\ud130\ub7fd\ud2b8 \uad00\ub828 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub77c\ub294 \uac83\uc744 CPU\uc5d0\uac8c \uc54c\ub824\uc8fc\ub294 \uac12 \uc774\ubbc0\ub85c \uc368\uc788\ub294 \uadf8\ub300\ub85c \uae30\uc785\ud574 \ub450\uba74 \ub429\ub2c8\ub2e4. D \ube44\ud2b8 \ub294 \ud604\uc7ac \uc9c0\uc815\ud55c \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8\uac00 16\ube44\ud2b8\uc778\uc9c0 32\ube44\ud2b8\uc778\uc9c0 \ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc774 \ube44\ud2b8\uac00 0\uc774\uba74 16\ube44\ud2b8\uc774\uace0, 1\uc774\uba74 32\ube44\ud2b8\uc785\ub2c8\ub2e4. \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub294 32\ube44\ud2b8\uc774\ubbc0\ub85c \uc774 \ube44\ud2b8\ub97c 1\ub85c \uc138\ud305\ud569\ub2c8\ub2e4. \uc704\uc758 \ud615\ud0dc\uc758 IDT \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \uba54\ubaa8\ub9ac \uc0c1\uc5d0 256\uac1c\uc758 \ub9cc\ub4e4\uc5b4, \ud558\ub098\uc758 IDT\uc758 \ud615\ud0dc\ub97c \uac16\ucd94\uac8c \ud569\ub2c8\ub2e4. 256\uac1c\ubcf4\ub2e4 \ub9ce\uac70\ub098 \uc801\uc5b4\ub3c4 \uc0c1\uad00\uc740 \uc5c6\uc9c0\ub9cc, \ud604\uc7ac \uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud558\uace0 \uc788\ub294 PC\uc758 \uba54\uc778\ubcf4\ub4dc\uc758 \uc778\ud130\ub7fd\ud2b8 \uad00\ub828 \ud558\ub4dc\uc6e8\uc5b4\uac00 256\uac1c\uc758 \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc544\ub4e4\uc774\ub3c4\ub85d \ub514\uc790\uc778\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 256\uac1c\ub85c \ud569\ub2c8\ub2e4. Protected Mode\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\ub97c \uad6c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub294 1) \uc2e4\uc81c\ub85c IDT\ub97c RAM \uc0c1\uc5d0 \uc791\uc131\ud558\ub294 \ub8e8\ud2f4, \ub514\uc2a4\ud06c\ub9bd\ud130 \uc0d8\ud50c, \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \ub8e8\ud2f4(Interrupt Service Routine, \uc57d\uc790\ub85c ISR\uc774\ub77c\uace0\ub3c4 \ubd80\ub985\ub2c8\ub2e4.) \uc774\ub807\uac8c \uc138 \uac00\uc9c0\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. lidt [idtr] \uba85\ub839\uc5b4\ub97c \uc774\uc6a9\ud574\uc11c idt\ub97c \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub4f1\ub85d\ud574 \uc918\uc57c \ud569\ub2c8\ub2e4. idtr\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 idtr: dw 256*8 - 1 dd 0 lidt\ub85c \ub4f1\ub85d\uc744 \ud558\ub77c\ub294 \uba85\ub839\uc744 \ub0b4\ub9ac\uba74 CPU\uc758 IDTR \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 \uc774 \ubcc0\uc218\uc758 \uac12\uc774 \uadf8\ub300\ub85c \ub4e4\uc5b4\uac00\uac8c \ub429\ub2c8\ub2e4. IDTR \ub808\uc9c0\uc2a4\ud130\uc5d0 IDT\ub97c \ub4f1\ub85d\ud558\ub294 \uacfc\uc815 \uc778\ud130\ub7fd\ud2b8\uac00 \ud638\ucd9c\ub418\uc5c8\uc744 \ub54c\uc758 \ud750\ub984 \uc704\uc758 \uadf8\ub9bc\uc5d0\uc11c 1\ubc88\uc740 CPU\uc5d0 \uc778\ud130\ub7fd\ud2b8\uac00 \ub4e4\uc5b4\uac04 \uc0c1\ud0dc\uc785\ub2c8\ub2e4.","title":"IDT \ub9cc\ub4e4\uae30"},{"location":"os-making/06/#nasm","text":"equ: \uc2ec\ubcfc\uc744 \uc815\uc758\ud558\ub294 \ub370\uc5d0 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ud55c \ubc88 \uc815\uc758\ub41c \uc2ec\ubcfc \uac12\uc740 \uc7ac\uc815\uc758 \ub420 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. (\ucc38\uace0 \ub9c1\ud06c: https://opentutorials.org/module/1596/9765) 1 symbol equ value out: I/O device\uc5d0 write\ub97c \ud568( The IN instruction reads from an I/O device, OUT writes ) cld(Clear direction flag): Direction Flag\ub97c 0\uc73c\ub85c \uc124\uc815\ud558\ub294 \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. REP prefix\uac00 \ubd99\uc5b4\uc11c MOVS, LODS, SCAS, ... \ub4f1\uc758 \uba85\ub839\uc5b4\uac00 \uc0ac\uc6a9\ub418\ub294\ub370 \ubc18\ubcf5 \ud69f\uc218\ub294 ECX\ub808\uc9c0\uc2a4\ud130\uc5d0 \ub2f4\uae30\uc9c0\ub9cc, \ub370\uc774\ud130\uac00 \ub2f4\uae34 \uacf3\uc758 \uc8fc\uc18c\ub294 \uc54c\uc544\uc11c \uc99d\uac10\ud569\ub2c8\ub2e4.(ESI, EDI) \uc774 \ub54c \uc790\ub3d9\uc73c\ub85c \uc99d\uac10\ud558\ub294 \ubc29\ud5a5\uc744 \uacb0\uc815\ud558\ub294 \ud50c\ub798\uadf8\uac00 DF(Direction Flag)\uc785\ub2c8\ub2e4. DF=0\uc774\ub77c\uba74 \uc99d\uac00 DF=1\uc774\ub77c\uba74 \uac10\uc18c \ubc29\ud5a5\uc73c\ub85c \uc99d\uac10\ud569\ub2c8\ub2e4. \uc774 \uba85\ub839\uc5b4\ub294 rep movsb \uac19\uc740 \uba85\ub839\uc5b4\ub97c \uc4f0\uae30 \uc804\uc5d0 esi, edi\uc758 \ubc29\ud5a5\uc744 \uc815\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. repeat \uc811\ub450\uc0ac REP: ECX > 0 \uc778\ub3d9\uc548 \ubc18\ubcf5\ud569\ub2c8\ub2e4. REPZ: ZERO \ud50c\ub798\uadf8\uac00 1\uc774\uace0 ECX > 0\uc778\ub3d9\uc548 \ubc18\ubcf5\ud569\ub2c8\ub2e4. REPNZ, REPNE: ZERO \ud50c\ub798\uadf8\uac00 0\uc774\uace0 ECX > 0\uc778\ub3d9\uc548 \ubc18\ubcf5\ud569\ub2c8\ub2e4. MOVSB, MOVSW, MOVSD: Move String Data. \ub370\uc774\ud130\ub97c ESI\uc5d0 \ub4e4\uc5b4\uc788\ub294 \uba54\ubaa8\ub9ac \uc8fc\uc18c\uc5d0\uc11c EDI\uc5d0 \ub4e4\uc5b4\uc788\ub294 \uba54\ubaa8\ub9ac \uc8fc\uc18c\ub85c \uba54\ubaa8\ub9ac\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. iret: \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud55c \ub2f9\uc2dc\uc758 \ud504\ub85c\uadf8\ub7a8\uc758 \ub2e4\uc74c \uba85\ub839\uc73c\ub85c \ub3cc\uc544\uac00\uc11c \ud504\ub85c\uadf8\ub7a8\uc744 \uc7ac\uac1c\ud569\ub2c8\ub2e4. lidt [idtr]: IDT\ub3c4 GDT\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c CPU\uc5d0 \uc778\ud130\ub7fd\ud2b8\uac00 \uac78\ub838\uc744 \ub54c CPU\ub85c \ud558\uc5ec\uae08 \uc774 IDT\ub97c CPU\uc758 IDTR \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub4f1\ub85d\uc2dc\ucf1c \uc8fc\ub294 \uba85\ub839\uc785\ub2c8\ub2e4. \uc0c1\ud0dc \ub808\uc9c0\uc2a4\ud130\ub97c \uc9c1\uc811 \ucee8\ud2b8\ub864 \ud558\ub294 \uba85\ub839\uc5b4 st\uc640 cl: st\ub294 set\uc774\ub77c\ub294 \ub73b\uc774\uba70, \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 1\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. cl\uc758 \uc758\ubbf8\ub294 clear\ub77c\ub294 \ub73b\uc774\uba70 \ub808\uc9c0\uc2a4\ud130\uc758 \uac12\uc744 0\uc73c\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. cl\uacfc st\uc5d0 \ubd99\uc77c \uc218 \uc788\ub294 \uc0c1\ud0dc \ub808\uc9c0\uc2a4\ud130\uc758 flag\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. c(Carry Flag), d(Direction Flag), i(Intterupt Flag) \uc778\ud130\ub7fd\ud2b8 \ud50c\ub798\uadf8 IF : Interruption Flag. Set if interrupts are enabled (\ucc38\uace0 \ub9c1\ud06c: https://stackoverflow.com/questions/3215878/what-are-in-out-instructions-in-x86-used-for)","title":"\uc624\ub298 \ubc30\uc6b4 nasm \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4"},{"location":"os-making/07/","text":"day 07: PIC(Programmable Interrupt Controller)\uc758 \ucd08\uae30\ud654 \uc624\ub298\uc758 \uacb0\uacfc\ubb3c timer\ub85c interrupt\ub85c \uc778\ud574\uc11c This is the timer interrupt \ubd80\ubd84\uc758 \uccab \uae00\uc790\uac00 \uacc4\uc18d \ub2e4\ub978 \uae00\uc790\ub85c \ubcc0\uacbd\ub429\ub2c8\ub2e4. \uc800\ubc88 \uc2dc\uac04 \uac04\ub2e8 \ubcf5\uc2b5 \ubb54\uac00 \uc800\ubc88 \uc2dc\uac04\uc5d0 \ud588\ub358 IDT\uac00 \uc798 \uae30\uc5b5\uc774 \ub098\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \uac04\ub2e8\ud558\uac8c \uc694\uc57d\ud558\uba74, cli\ub77c\ub294 \uba85\ub839\uc5b4\ub85c EFLAGS\ub77c\ub294 \ub808\uc9c0\uc2a4\ud130\uc758 interrupt \ud50c\ub798\uadf8\ub97c 0\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 IDT\ub97c \ub4f1\ub85d\ud574\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \uac78\ub9ac\uba74 \uc5b4\ub514\ub85c \uac08 \uc9c0 \uc124\uc815\ud574\uc90d\ub2c8\ub2e4. \uc774\ud6c4, sti \uba85\ub839\uc5b4\ub85c EFLAGS \ub808\uc9c0\uc2a4\ud130\uc758 interrupt \ud50c\ub798\uadf8\ub97c 1\ub85c \ub9cc\ub4e4\uc5b4\uc90d\ub2c8\ub2e4. interrupt \ud50c\ub798\uadf8\uac00 1\uc774\uba74, \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc744 \uc900\ube44\uac00 \ub410\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \uc624\ub298\uc758 \ucf54\ub4dc 1 2 3 4 ; init.inc SysCodeSelector equ 0x08 SysDataSelector equ 0x10 VideoSelector equ 0x18 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 ; boot.asm %include \"src/init.inc\" [org 0] jmp 07C0h:start start: mov ax, cs mov ds, ax mov es, ax reset: ; \ud50c\ub85c\ud53c \ub514\uc2a4\ud06c\ub97c \ub9ac\uc14b\ud569\ub2c8\ub2e4. mov ax, 0 ; mov dl, 0 ; drive=0 (A:) int 13h ; jc reset ; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud569\ub2c8\ub2e4. mov ax, 0xB800 mov es, ax mov di, 0 mov ax, word [msgBack] mov cx, 0x7FF paint: mov word [es:di], ax add di, 2 dec cx jnz paint read: mov ax, 0x1000 ; ES:BX = 1000:0000 mov es, ax mov bx, 0 mov ah, 2 ; \ub514\uc2a4\ud06c\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c es:bx \uc8fc\uc18c\ub85c mov al, 1 ; 1\uc139\ud130\ub97c \uc77d\uc744 \uac83\uc774\ub77c\uace0 \uc54c\ub9bc mov ch, 0 ; 0\ubc88\uc9f8 \uc2e4\ub9b0\ub354 mov cl, 2 ; 2\ubc88\uc9f8 \uc139\ud130\ubd80\ud130 \uc77d\uae30 \uc2dc\uc791\ud569\ub2c8\ub2e4. mov dh, 0 ; Head=0 mov dl, 0 ; Drive=0, A: \ub4dc\ub77c\uc774\ube0c int 13h jc read; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud568 mov dx, 0x3F2 ; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c \ub4dc\ub77c\uc774\ube0c\uc758 xor al, al ; \ubaa8\ud130\ub97c \ub048\ub2e4. out dx, al cli mov al, 0x11 ; PIC\uc758 \ucd08\uae30\ud654 out 0x20, al ; \ub9c8\uc2a4\ud130 PIC dw 0x00eb, 0x00eb ; jmp $+2, jmp $+2 out 0xA0, al ; \uc2ac\ub808\uc774\ube0c PIC dw 0x00eb, 0x00eb mov al, 0x20 ; \ub9c8\uc2a4\ud130 PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810 out 0x21, al dw 0x00eb, 0x00eb mov al, 0x28 ; \uc2ac\ub808\uc774\ube0c PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810 out 0xA1, al dw 0x00eb, 0x00eb mov al, 0x04 ; \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88\uc5d0 out 0x21, al ; \uc2ac\ub808\uc774\ube0c PIC\uac00 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. dw 0x00eb, 0x00eb mov al, 0x02 ; \uc2ac\ub808\uc774\ube0c PIC\uac00 \ub9c8\uc2a4\ud130 PIC\uc758 out 0xA1, al ; IRQ 2\ubc88\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. dw 0x00eb, 0x00eb mov al, 0x01 ; 8086 \ubaa8\ub4dc\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. out 0x21, al dw 0x00eb, 0x00eb out 0xA1, al dw 0x00eb, 0x00eb mov al, 0xFF ; PIC\uc5d0\uc11c \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c out 0xA1, al ; \ub9c9\uc544\ub193\uc2b5\ub2c8\ub2e4. dw 0x00eb, 0x00eb mov al, 0xFB ; \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88\uc744 \uc81c\uc678\ud55c out 0x21, al ; \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c \ub9c9\uc544\ub461\ub2c8\ub2e4. lgdt[gdtr] mov eax, cr0 or eax, 0x00000001 mov cr0, eax jmp $+2 nop nop mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx jmp dword SysCodeSelector:0x010000 msgBack db '.', 0x67 gdtr: dw gdt_end - gdt - 1 ; GDT\uc758 limit dd gdt+0x7C00 ; GDT\uc758 \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 gdt: dd 0, 0 dd 0x0000FFFF, 0x00CF9A00 dd 0x0000FFFF, 0x00CF9200 dd 0x8000FFFF, 0x0040920B gdt_end: times 510-($-$$) db 0 dw 0AA55h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 ; kernel.asm %include \"src/init.inc\" [org 0x010000] [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx lea esp, [PM_Start] mov edi, 0 lea esi, [msgPMode] call printf cld mov ax, SysDataSelector mov es, ax xor eax, eax xor ecx, ecx mov ax, 256 ; IDT \uc601\uc5ed\uc5d0 256\uac1c\uc758 mov edi, 0 ; \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud55c\ub2e4. loop_idt: lea esi, [idt_ignore] mov cx, 8 ; \ub514\uc2a4\ud06c\ub9bd\ud130 \ud558\ub098\ub294 8\ubc14\uc774\ud2b8\uc774\ub2e4. rep movsb dec ax jnz loop_idt mov edi, 8*0x20 lea esi, [idt_timer] mov cx, 8 rep movsb lidt [idtr] mov al, 0xFE ; \ub9c9\uc544\ub450\uc5c8\ub358 \uc778\ud130\ub7fd\ud2b8 \uc911 out 0x21, al ; \ud0c0\uc774\uba38\ub9cc \ub2e4\uc2dc \uc720\ud6a8\ud558\uac8c \ud569\ub2c8\ub2e4. sti jmp $ ;***************************** ;********** Subroutines ****** ;***************************** printf: push eax push es mov ax, VideoSelector mov es, ax printf_loop: mov al, byte [esi] mov byte [es:edi], al inc edi mov byte [es:edi], 0x06 inc esi inc edi or al, al jz printf_end jmp printf_loop printf_end: pop es pop eax ret ;********************************* ;*********** Data Area *********** ;********************************* msgPMode db \"We are in Protected Mode\", 0 msg_isr_ignore db \"This is an ignorable inturrupt\", 0 msg_isr_32_timer db \"This is the timer inturrupt\", 0 idtr: dw 256*8 - 1 ; IDT\uc758 Limit dd 0 ; IDT\uc758 Base Address ;********************************* ;*** Interrupt Service Routines ** ;********************************* isr_ignore: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*7*2) lea esi, [msg_isr_ignore] call printf popfd popad pop ds pop es pop fs pop gs iret isr_32_timer: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*2*2) lea esi, [msg_isr_32_timer] call printf inc byte [msg_isr_32_timer] popfd popad pop ds pop es pop fs pop gs iret ;********************************* ;************* IDT *************** ;********************************* idt_ignore: dw isr_ignore dw SysCodeSelector db 0 db 0x8E dw 0x0001 idt_timer: dw isr_32_timer dw 0x08 db 0 db 0x8E dw 0x0001 times 512 - ($-$$) db 0 \uc544\uc9c1 \ucf54\ub4dc\ub9cc \uc791\uc131\ud588\uace0, \uc774\ud574\ud558\uc9c0\ub294 \ubabb \ud588\uc2b5\ub2c8\ub2e4. \ud2b9\ud788 PIC(Programmable Interrupt Controller)\ub77c\ub294 \uce69\uc774 \uc5b4\ub5a4 \uce69\uc774\uace0, out \uc774\ub77c\ub294 \uba85\ub839\uc5b4\ub97c \ud1b5\ud574\uc11c \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud558\ub294 \uac83\uc778\uc9c0 \uc798 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4. i/o\ub294 \ud2b9\ubcc4\ud55c \ub9f5 \uac19\uc740 \uac83\uc774 \uc788\uc744 \uc9c0\ub3c4 \uad81\uae08\ud569\ub2c8\ub2e4. \uc65c \ub9c8\uc2a4\ud130 PIC\uac00 0x20\uc778\uc9c0, \uc2ac\ub808\uc774\ube0c PIC\uac00 0xA0\uc778\uc9c0 \uad81\uae08\ud569\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ub2e4\uc74c \uc2dc\uac04\uc5d0 \uc54c\uc544\ubcf4\ub294 \uac83\uc73c\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc624\ub298\uc758 \uba85\ub839\uc5b4 \uc815\ub9ac JC(Jump if Carry flag set): \uce90\ub9ac \ud50c\ub798\uadf8\uac00 1\uc77c \ub54c JUMP PUSHAD: \ubc94\uc6a9 \ub808\uc9c0\uc2a4\ud130 \uac12\ub4e4\uc744 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5 (\ub808\uc9c0\uc2a4\ud130 \ubc31\uc5c5\ud558\ub294 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.) Stack\uc5d0 \uc800\uc7a5\ud558\ub294 \uc21c\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. eax => ecx => edx => ebx => esp => ebp => esi => edi POPAD: pushad\uc758 \ubc18\ub300 \uc5ed\ud560(\uc2a4\ud0dd\uc5d0 \ub4e4\uc5b4\uc788\ub294 \uac12\ub4e4\uc744 register\ub85c pop\ud558\uae30) PUSHFD: PUSH Flags Dword. x86 flags\ub97c \uc21c\uc11c\ub300\ub85c dword \ub9cc\ud07c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. PTR: \uba54\ubaa8\ub9ac\uc5d0 \uc811\uadfc\ud574\uc11c \uc5bc\ub9c8\ub9cc\ud07c \uc77d\uc5b4 \ub4e4\uc77c\uac83\uc778\uc9c0 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uc7ac\uc815\uc758 \ud558\ub294 \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. done p. 124\uae4c\uc9c0 \uc785\ub825 \ud588\uc74c \ub0b4\uc6a9 \uc0b4\ud3b4\ubcf4\uba74\uc11c \uc774\ud574\ud558\uae30","title":"day7: PIC\uc758 \ucd08\uae30\ud654"},{"location":"os-making/07/#day-07-picprogrammable-interrupt-controller","text":"","title":"day 07: PIC(Programmable Interrupt Controller)\uc758 \ucd08\uae30\ud654"},{"location":"os-making/07/#_1","text":"timer\ub85c interrupt\ub85c \uc778\ud574\uc11c This is the timer interrupt \ubd80\ubd84\uc758 \uccab \uae00\uc790\uac00 \uacc4\uc18d \ub2e4\ub978 \uae00\uc790\ub85c \ubcc0\uacbd\ub429\ub2c8\ub2e4.","title":"\uc624\ub298\uc758 \uacb0\uacfc\ubb3c"},{"location":"os-making/07/#_2","text":"\ubb54\uac00 \uc800\ubc88 \uc2dc\uac04\uc5d0 \ud588\ub358 IDT\uac00 \uc798 \uae30\uc5b5\uc774 \ub098\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \uac04\ub2e8\ud558\uac8c \uc694\uc57d\ud558\uba74, cli\ub77c\ub294 \uba85\ub839\uc5b4\ub85c EFLAGS\ub77c\ub294 \ub808\uc9c0\uc2a4\ud130\uc758 interrupt \ud50c\ub798\uadf8\ub97c 0\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 IDT\ub97c \ub4f1\ub85d\ud574\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \uac78\ub9ac\uba74 \uc5b4\ub514\ub85c \uac08 \uc9c0 \uc124\uc815\ud574\uc90d\ub2c8\ub2e4. \uc774\ud6c4, sti \uba85\ub839\uc5b4\ub85c EFLAGS \ub808\uc9c0\uc2a4\ud130\uc758 interrupt \ud50c\ub798\uadf8\ub97c 1\ub85c \ub9cc\ub4e4\uc5b4\uc90d\ub2c8\ub2e4. interrupt \ud50c\ub798\uadf8\uac00 1\uc774\uba74, \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc744 \uc900\ube44\uac00 \ub410\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4.","title":"\uc800\ubc88 \uc2dc\uac04 \uac04\ub2e8 \ubcf5\uc2b5"},{"location":"os-making/07/#_3","text":"1 2 3 4 ; init.inc SysCodeSelector equ 0x08 SysDataSelector equ 0x10 VideoSelector equ 0x18 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 ; boot.asm %include \"src/init.inc\" [org 0] jmp 07C0h:start start: mov ax, cs mov ds, ax mov es, ax reset: ; \ud50c\ub85c\ud53c \ub514\uc2a4\ud06c\ub97c \ub9ac\uc14b\ud569\ub2c8\ub2e4. mov ax, 0 ; mov dl, 0 ; drive=0 (A:) int 13h ; jc reset ; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud569\ub2c8\ub2e4. mov ax, 0xB800 mov es, ax mov di, 0 mov ax, word [msgBack] mov cx, 0x7FF paint: mov word [es:di], ax add di, 2 dec cx jnz paint read: mov ax, 0x1000 ; ES:BX = 1000:0000 mov es, ax mov bx, 0 mov ah, 2 ; \ub514\uc2a4\ud06c\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c es:bx \uc8fc\uc18c\ub85c mov al, 1 ; 1\uc139\ud130\ub97c \uc77d\uc744 \uac83\uc774\ub77c\uace0 \uc54c\ub9bc mov ch, 0 ; 0\ubc88\uc9f8 \uc2e4\ub9b0\ub354 mov cl, 2 ; 2\ubc88\uc9f8 \uc139\ud130\ubd80\ud130 \uc77d\uae30 \uc2dc\uc791\ud569\ub2c8\ub2e4. mov dh, 0 ; Head=0 mov dl, 0 ; Drive=0, A: \ub4dc\ub77c\uc774\ube0c int 13h jc read; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud568 mov dx, 0x3F2 ; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c \ub4dc\ub77c\uc774\ube0c\uc758 xor al, al ; \ubaa8\ud130\ub97c \ub048\ub2e4. out dx, al cli mov al, 0x11 ; PIC\uc758 \ucd08\uae30\ud654 out 0x20, al ; \ub9c8\uc2a4\ud130 PIC dw 0x00eb, 0x00eb ; jmp $+2, jmp $+2 out 0xA0, al ; \uc2ac\ub808\uc774\ube0c PIC dw 0x00eb, 0x00eb mov al, 0x20 ; \ub9c8\uc2a4\ud130 PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810 out 0x21, al dw 0x00eb, 0x00eb mov al, 0x28 ; \uc2ac\ub808\uc774\ube0c PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810 out 0xA1, al dw 0x00eb, 0x00eb mov al, 0x04 ; \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88\uc5d0 out 0x21, al ; \uc2ac\ub808\uc774\ube0c PIC\uac00 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. dw 0x00eb, 0x00eb mov al, 0x02 ; \uc2ac\ub808\uc774\ube0c PIC\uac00 \ub9c8\uc2a4\ud130 PIC\uc758 out 0xA1, al ; IRQ 2\ubc88\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. dw 0x00eb, 0x00eb mov al, 0x01 ; 8086 \ubaa8\ub4dc\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. out 0x21, al dw 0x00eb, 0x00eb out 0xA1, al dw 0x00eb, 0x00eb mov al, 0xFF ; PIC\uc5d0\uc11c \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c out 0xA1, al ; \ub9c9\uc544\ub193\uc2b5\ub2c8\ub2e4. dw 0x00eb, 0x00eb mov al, 0xFB ; \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88\uc744 \uc81c\uc678\ud55c out 0x21, al ; \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c \ub9c9\uc544\ub461\ub2c8\ub2e4. lgdt[gdtr] mov eax, cr0 or eax, 0x00000001 mov cr0, eax jmp $+2 nop nop mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx jmp dword SysCodeSelector:0x010000 msgBack db '.', 0x67 gdtr: dw gdt_end - gdt - 1 ; GDT\uc758 limit dd gdt+0x7C00 ; GDT\uc758 \ubca0\uc774\uc2a4 \uc5b4\ub4dc\ub808\uc2a4 gdt: dd 0, 0 dd 0x0000FFFF, 0x00CF9A00 dd 0x0000FFFF, 0x00CF9200 dd 0x8000FFFF, 0x0040920B gdt_end: times 510-($-$$) db 0 dw 0AA55h 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 ; kernel.asm %include \"src/init.inc\" [org 0x010000] [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx lea esp, [PM_Start] mov edi, 0 lea esi, [msgPMode] call printf cld mov ax, SysDataSelector mov es, ax xor eax, eax xor ecx, ecx mov ax, 256 ; IDT \uc601\uc5ed\uc5d0 256\uac1c\uc758 mov edi, 0 ; \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud55c\ub2e4. loop_idt: lea esi, [idt_ignore] mov cx, 8 ; \ub514\uc2a4\ud06c\ub9bd\ud130 \ud558\ub098\ub294 8\ubc14\uc774\ud2b8\uc774\ub2e4. rep movsb dec ax jnz loop_idt mov edi, 8*0x20 lea esi, [idt_timer] mov cx, 8 rep movsb lidt [idtr] mov al, 0xFE ; \ub9c9\uc544\ub450\uc5c8\ub358 \uc778\ud130\ub7fd\ud2b8 \uc911 out 0x21, al ; \ud0c0\uc774\uba38\ub9cc \ub2e4\uc2dc \uc720\ud6a8\ud558\uac8c \ud569\ub2c8\ub2e4. sti jmp $ ;***************************** ;********** Subroutines ****** ;***************************** printf: push eax push es mov ax, VideoSelector mov es, ax printf_loop: mov al, byte [esi] mov byte [es:edi], al inc edi mov byte [es:edi], 0x06 inc esi inc edi or al, al jz printf_end jmp printf_loop printf_end: pop es pop eax ret ;********************************* ;*********** Data Area *********** ;********************************* msgPMode db \"We are in Protected Mode\", 0 msg_isr_ignore db \"This is an ignorable inturrupt\", 0 msg_isr_32_timer db \"This is the timer inturrupt\", 0 idtr: dw 256*8 - 1 ; IDT\uc758 Limit dd 0 ; IDT\uc758 Base Address ;********************************* ;*** Interrupt Service Routines ** ;********************************* isr_ignore: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*7*2) lea esi, [msg_isr_ignore] call printf popfd popad pop ds pop es pop fs pop gs iret isr_32_timer: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*2*2) lea esi, [msg_isr_32_timer] call printf inc byte [msg_isr_32_timer] popfd popad pop ds pop es pop fs pop gs iret ;********************************* ;************* IDT *************** ;********************************* idt_ignore: dw isr_ignore dw SysCodeSelector db 0 db 0x8E dw 0x0001 idt_timer: dw isr_32_timer dw 0x08 db 0 db 0x8E dw 0x0001 times 512 - ($-$$) db 0 \uc544\uc9c1 \ucf54\ub4dc\ub9cc \uc791\uc131\ud588\uace0, \uc774\ud574\ud558\uc9c0\ub294 \ubabb \ud588\uc2b5\ub2c8\ub2e4. \ud2b9\ud788 PIC(Programmable Interrupt Controller)\ub77c\ub294 \uce69\uc774 \uc5b4\ub5a4 \uce69\uc774\uace0, out \uc774\ub77c\ub294 \uba85\ub839\uc5b4\ub97c \ud1b5\ud574\uc11c \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud558\ub294 \uac83\uc778\uc9c0 \uc798 \ubaa8\ub974\uaca0\uc2b5\ub2c8\ub2e4. i/o\ub294 \ud2b9\ubcc4\ud55c \ub9f5 \uac19\uc740 \uac83\uc774 \uc788\uc744 \uc9c0\ub3c4 \uad81\uae08\ud569\ub2c8\ub2e4. \uc65c \ub9c8\uc2a4\ud130 PIC\uac00 0x20\uc778\uc9c0, \uc2ac\ub808\uc774\ube0c PIC\uac00 0xA0\uc778\uc9c0 \uad81\uae08\ud569\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ub2e4\uc74c \uc2dc\uac04\uc5d0 \uc54c\uc544\ubcf4\ub294 \uac83\uc73c\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"\uc624\ub298\uc758 \ucf54\ub4dc"},{"location":"os-making/07/#_4","text":"JC(Jump if Carry flag set): \uce90\ub9ac \ud50c\ub798\uadf8\uac00 1\uc77c \ub54c JUMP PUSHAD: \ubc94\uc6a9 \ub808\uc9c0\uc2a4\ud130 \uac12\ub4e4\uc744 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5 (\ub808\uc9c0\uc2a4\ud130 \ubc31\uc5c5\ud558\ub294 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.) Stack\uc5d0 \uc800\uc7a5\ud558\ub294 \uc21c\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. eax => ecx => edx => ebx => esp => ebp => esi => edi POPAD: pushad\uc758 \ubc18\ub300 \uc5ed\ud560(\uc2a4\ud0dd\uc5d0 \ub4e4\uc5b4\uc788\ub294 \uac12\ub4e4\uc744 register\ub85c pop\ud558\uae30) PUSHFD: PUSH Flags Dword. x86 flags\ub97c \uc21c\uc11c\ub300\ub85c dword \ub9cc\ud07c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. PTR: \uba54\ubaa8\ub9ac\uc5d0 \uc811\uadfc\ud574\uc11c \uc5bc\ub9c8\ub9cc\ud07c \uc77d\uc5b4 \ub4e4\uc77c\uac83\uc778\uc9c0 \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uc7ac\uc815\uc758 \ud558\ub294 \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4.","title":"\uc624\ub298\uc758 \uba85\ub839\uc5b4 \uc815\ub9ac"},{"location":"os-making/07/#done","text":"p. 124\uae4c\uc9c0 \uc785\ub825 \ud588\uc74c \ub0b4\uc6a9 \uc0b4\ud3b4\ubcf4\uba74\uc11c \uc774\ud574\ud558\uae30","title":"done"},{"location":"os-making/08/","text":"PIC(Programmable Interrupt Controller)\uc758 \ucd08\uae30\ud654 - \uc124\uba85(1) \uc624\ub298\uc758 \uacb0\uacfc\ubb3c \uc124\uba85 INTEL i/o ports i/o ports\ub294 \uba54\ubaa8\ub9ac\uc640 \uc8fc\uc18c\uacf5\uac04\uc744 \uacf5\uc720\ud569\ub2c8\ub2e4. https://wiki.osdev.org/I/O_Ports \uc544\ub798\uc758 \ud45c\uc5d0\uc11c PIC \ub294 0x20 ~ 0x21\uc758 \uc8fc\uc18c\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. second PIC\uc758 \uc8fc\uc18c\ub294 0xA0 ~ 0xA1\uc758 \uc8fc\uc18c\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. PIC\uc758 \ube44\ud2b8\uc758 \uc758\ubbf8 https://stackoverflow.com/questions/282983/setting-up-irq-mapping 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // PICM => master, PICS => slave outportb(0x20, 0x11); /* write ICW1 to PICM, we are gonna write commands to PICM */ outportb(0xA0, 0x11); /* write ICW1 to PICS, we are gonna write commands to PICS */ outportb(0x21, 0x20); /* remap PICM to 0x20 (32 decimal) */ outportb(0xA1, 0x28); /* remap PICS to 0x28 (40 decimal) */ outportb(0x21, 0x04); /* IRQ2 -> connection to slave */ outportb(0xA1, 0x02); outportb(0x21, 0x01); /* write ICW4 to PICM, we are gonna write commands to PICM */ outportb(0xA1, 0x01); /* write ICW4 to PICS, we are gonna write commands to PICS */ outportb(0x21, 0x0); /* enable all IRQs on PICM */ outportb(0xA1, 0x0); /* enable all IRQs on PICS */ PIC \ud558\ub4dc\uc6e8\uc5b4 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\ub294 8259A\ub77c\ub294 \uce69\uc744 \ud1b5\ud574\uc11c \uc774\ub904\uc9d1\ub2c8\ub2e4. \uc774 8259A\ub97c \ubcf4\ud1b5 PIC\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4. \uc774 PIC\ub3c4 \ud558\ub098\uc758 \ucee8\ud2b8\ub864\ub7ec\uc758 \uac1c\ub150\uc744 \uac00\uc9c0\uace0 \uc788\uc5b4\uc11c \uc870\uadf8\ub9c8\ud55c \ud504\ub85c\uadf8\ub7a8\uc744 \ub123\uc5b4 \uc870\uc791\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud504\ub85c\uadf8\ub7a8\uc5d0\ub294 \ucd08\uae30\ud654, \uc5ec\ub7ec \uac1c\uc758 PIC \uc5f0\uacb0 \ubc29\ubc95, \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc544\ub4e4\uc774\ub294 \ubc29\ubc95, \ubc1b\uc544\ub4e4\uc778 \uc778\ud130\ub7fd\ud2b8\uc5d0 \ub300\ud574 CPU\uc5d0\uac8c \uc54c\ub824\uc8fc\ub294 \ubc29\ubc95 \ub4f1\uc774 \uae30\uc7ac\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ud558\ub098\uc758 PIC\ub294 8\uac1c\uc758 IRQ \ud540\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. PIC \ub450 \uac1c\uac00 \ub9c8\uc2a4\ud130, \uc2ac\ub808\uc774\ube0c\ub85c \uc5f0\uacb0\ub418\uc5b4 \uc788\uace0, \ub9c8\uc2a4\ud130\uc758 INT \ud540\uc774 CPU\uc758 INT\ud540\uc73c\ub85c \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc2ac\ub808\uc774\ube0c\uc758 INT \ud540\uc740 \ub9c8\uc2a4\ud130\uc758 3\ubc88\uc9f8 IRQ \ud540\uc778 2\ubc88 \ud540\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub450 PIC \ubaa8\ub450 /INTA \ud540\uc774 CPU\uc758 /INTA \ud540\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc0c8\ub86d\uac8c \uc54c\uac8c\ub41c \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4 out <source i/o port> <data source> : \ub370\uc774\ud130\ub97c i/o PORT\ub85c \uce74\ud53c\ud569\ub2c8\ub2e4. https://c9x.me/x86/html/file_module_x86_id_222.html \uc624\ub298 \ud55c \uac83 P. 127 \uae4c\uc9c0 \ud559\uc2b5","title":"day8: PIC - \uc124\uba85(1)"},{"location":"os-making/08/#picprogrammable-interrupt-controller-1","text":"","title":"PIC(Programmable Interrupt Controller)\uc758 \ucd08\uae30\ud654 - \uc124\uba85(1)"},{"location":"os-making/08/#_1","text":"","title":"\uc624\ub298\uc758 \uacb0\uacfc\ubb3c"},{"location":"os-making/08/#_2","text":"INTEL i/o ports i/o ports\ub294 \uba54\ubaa8\ub9ac\uc640 \uc8fc\uc18c\uacf5\uac04\uc744 \uacf5\uc720\ud569\ub2c8\ub2e4. https://wiki.osdev.org/I/O_Ports \uc544\ub798\uc758 \ud45c\uc5d0\uc11c PIC \ub294 0x20 ~ 0x21\uc758 \uc8fc\uc18c\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. second PIC\uc758 \uc8fc\uc18c\ub294 0xA0 ~ 0xA1\uc758 \uc8fc\uc18c\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. PIC\uc758 \ube44\ud2b8\uc758 \uc758\ubbf8 https://stackoverflow.com/questions/282983/setting-up-irq-mapping 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 // PICM => master, PICS => slave outportb(0x20, 0x11); /* write ICW1 to PICM, we are gonna write commands to PICM */ outportb(0xA0, 0x11); /* write ICW1 to PICS, we are gonna write commands to PICS */ outportb(0x21, 0x20); /* remap PICM to 0x20 (32 decimal) */ outportb(0xA1, 0x28); /* remap PICS to 0x28 (40 decimal) */ outportb(0x21, 0x04); /* IRQ2 -> connection to slave */ outportb(0xA1, 0x02); outportb(0x21, 0x01); /* write ICW4 to PICM, we are gonna write commands to PICM */ outportb(0xA1, 0x01); /* write ICW4 to PICS, we are gonna write commands to PICS */ outportb(0x21, 0x0); /* enable all IRQs on PICM */ outportb(0xA1, 0x0); /* enable all IRQs on PICS */ PIC \ud558\ub4dc\uc6e8\uc5b4 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\ub294 8259A\ub77c\ub294 \uce69\uc744 \ud1b5\ud574\uc11c \uc774\ub904\uc9d1\ub2c8\ub2e4. \uc774 8259A\ub97c \ubcf4\ud1b5 PIC\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4. \uc774 PIC\ub3c4 \ud558\ub098\uc758 \ucee8\ud2b8\ub864\ub7ec\uc758 \uac1c\ub150\uc744 \uac00\uc9c0\uace0 \uc788\uc5b4\uc11c \uc870\uadf8\ub9c8\ud55c \ud504\ub85c\uadf8\ub7a8\uc744 \ub123\uc5b4 \uc870\uc791\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud504\ub85c\uadf8\ub7a8\uc5d0\ub294 \ucd08\uae30\ud654, \uc5ec\ub7ec \uac1c\uc758 PIC \uc5f0\uacb0 \ubc29\ubc95, \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc544\ub4e4\uc774\ub294 \ubc29\ubc95, \ubc1b\uc544\ub4e4\uc778 \uc778\ud130\ub7fd\ud2b8\uc5d0 \ub300\ud574 CPU\uc5d0\uac8c \uc54c\ub824\uc8fc\ub294 \ubc29\ubc95 \ub4f1\uc774 \uae30\uc7ac\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ud558\ub098\uc758 PIC\ub294 8\uac1c\uc758 IRQ \ud540\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. PIC \ub450 \uac1c\uac00 \ub9c8\uc2a4\ud130, \uc2ac\ub808\uc774\ube0c\ub85c \uc5f0\uacb0\ub418\uc5b4 \uc788\uace0, \ub9c8\uc2a4\ud130\uc758 INT \ud540\uc774 CPU\uc758 INT\ud540\uc73c\ub85c \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc2ac\ub808\uc774\ube0c\uc758 INT \ud540\uc740 \ub9c8\uc2a4\ud130\uc758 3\ubc88\uc9f8 IRQ \ud540\uc778 2\ubc88 \ud540\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub450 PIC \ubaa8\ub450 /INTA \ud540\uc774 CPU\uc758 /INTA \ud540\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc124\uba85"},{"location":"os-making/08/#_3","text":"out <source i/o port> <data source> : \ub370\uc774\ud130\ub97c i/o PORT\ub85c \uce74\ud53c\ud569\ub2c8\ub2e4. https://c9x.me/x86/html/file_module_x86_id_222.html","title":"\uc0c8\ub86d\uac8c \uc54c\uac8c\ub41c \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4"},{"location":"os-making/08/#_4","text":"P. 127 \uae4c\uc9c0 \ud559\uc2b5","title":"\uc624\ub298 \ud55c \uac83"},{"location":"os-making/09/","text":"day 09: PIC(Programmable Interrupt Controller)\uc758 \uc124\uba85(2) day 08\uc758 \uc18c\uc2a4\ucf54\ub4dc\ub97c \uae30\uc900\uc73c\ub85c \uc124\uba85\ud569\ub2c8\ub2e4. \ubcc0\uacbd \ub610\ub294 \uc0c8\ub85c \ucd94\uac00\ub41c \ucf54\ub4dc reset floppy disk 1 2 3 4 5 6 7 8 9 ; src/boot.asm ... reset: ; \ud50c\ub85c\ud53c \ub514\uc2a4\ud06c\ub97c \ub9ac\uc14b(controller\uc5d0\uc11c reset flag\ub97c clear\ub85c \uc138\ud305\ud558\uace0, \ud5e4\ub4dc\ub97c track 0\ub85c \uac00\uc838 \uac00\ub294 \uac83) mov ax, 0 mov dl, 0 ; drive=0 A: int 13h jc reset ; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud569\ub2c8\ub2e4. \ud2b8\ub799\uc774\ub780...? cylinder => track => sector \uc21c\uc73c\ub85c \ucc28\uc6d0\uc774 \uc791\uc544\uc9d0 \uadf8\ub9bc \ucd9c\ucc98: https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=capemay&logNo=220221154613 PIC \uc138\ud305 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 cli ; clear inturrpt flag. \uc989, \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc9c0 \uc54a\uc744 \uac83\uc744 \uc758\ubbf8 ; ICW1 \uba85\ub839\uc5b4 - \ucd08\uae30\ud654 mov al, 0x11 ; PIC\uc758 \ucd08\uae30\ud654(0b00010001) - 4\ubc88\uc9f8 \ube44\ud2b8\ub294 1\ub85c \uace0\uc815\uc778 \uac12, 0\ubc88\uc9f8 \ube44\ud2b8\ub294 ICW4 \uba85\ub839\uc5b4\uac00 \ud544\uc694\ud558\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. out 0x20, al ; \ub9c8\uc2a4\ud130 PIC dw 0x00eb, 0x00eb ; jmp $+2, jmp $+2 => \ub2e8\uc21c\ud788 \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c \uac00\uae30 \uc804\uc5d0 \uc2dc\uac04\uc744 \ucda9\ubd84\ud788 \uc8fc\uc790\ub294 \uc758\ubbf8. out 0xA0, al ; \uc2ac\ub808\uc774\ube0c PIC dw 0x00eb, 0x00eb ; ICW2 \uba85\ub839\uc5b4 - IRQ \ubc88\ud638 \ub9ac\ub9e4\ud551(remapping) mov al, 0x20 ; \ub9c8\uc2a4\ud130 PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810(CPU\uc5d0 +0x20\uc744 \ud574\uc11c IRQ\ubc88\ud638\ub97c \ub9e4\uae40) out 0x21, al dw 0x00eb, 0x00eb mov al, 0x28 ; \uc2ac\ub808\uc774\ube0c PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810(CPU\uc5d0 +0x28\uc744 \ud574\uc11c IRQ\ubc88\ud638\ub97c \ub9e4\uae40) out 0xA1, al dw 0x00eb, 0x00eb ; ICW3 \uba85\ub839\uc5b4 - \ub9c8\uc2a4\ud130, \uc2ac\ub808\uc774\ube0c PIC \uc5f0\uacb0 mov al, 0x04 ; \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88\uc5d0 out 0x21, al ; \uc2ac\ub808\uc774\ube0c PIC\uac00 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.(\uc5f0\uacb0\ub41c \uc2ac\ub808\uc774\ube0c PIC\uac00 \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 7\ubc88\uc774\uba74 0x07 \ud574\ub2f9\ud558\ub294 \ud540\uc758 \ube44\ud2b8\ub97c 1\ub85c \uc138\ud305\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ud568.) dw 0x00eb, 0x00eb mov al, 0x02 ; \uc2ac\ub808\uc774\ube0c PIC\uac00 \ub9c8\uc2a4\ud130 PIC\uc758 out 0xA1, al ; IRQ 2\ubc88\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.(\ub9c8\uc2a4\ud130 PIC\uc758 IRQ 7\ubc88\uc774\uba74 0x07 \uadf8\ub300\ub85c \uc500) dw 0x00eb, 0x00eb ; ICW4 \uba85\ub839\uc5b4 - \ucd94\uac00\uc801\uc778 \uc124\uc815(8086 \ubaa8\ub4dc) mov al, 0x01 ; 8086 \ubaa8\ub4dc\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. out 0x21, al dw 0x00eb, 0x00eb out 0xA1, al dw 0x00eb, 0x00eb mov al, 0xFF ; \uc2ac\ub808\uc774\ube0c PIC\uc758 \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c out 0XA1, al ; \ub9c9\uc544\ub461\ub2c8\ub2e4. dw 0x00eb, 0x00eb mov al, 0xFB ; \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88\uc744 \uc81c\uc678\ud55c out 0x21, al ; \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c \ub9c9\uc544\ub461\ub2c8\ub2e4. \uc704\uc758 \uba85\ub839\uc5b4\ub294 8259A\ub77c\ub294 \uce69\uc5d0 \uba85\ub839\uc5b4\ub97c \ub0b4\ub824\uc8fc\ub294 \uacfc\uc815\uc785\ub2c8\ub2e4. \uc9c0\uae08 \ucf54\ub529\uc5d0 \uc0ac\uc6a9\ub41c PIC \uad6c\uc870\ub294 x86\uc5d0\uc11c master, slave PIC\ub97c \ub450\ub294 \ubc29\ubc95\uc778\ub370, \uc774 \ubc29\ubc95\uc740 \uc2f1\uae00 \ucf54\uc5b4\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc778 \ub4ef \ud569\ub2c8\ub2e4. \uba40\ud2f0\ucf54\uc5b4 x86\uc5d0\uc11c\ub294 APIC \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. arm\uc5d0\uc11c\ub294 \uac01 \ud68c\uc0ac\ubcc4\ub85c \ubcc4\ub3c4\uc758 IP \ube14\ub7ed\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\ub97c \uad6c\ud604\ud558\ub294 \uac83 \uac19\uc740\ub370, ARM\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 GIC(Generic interrupt Controller)\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc73c\ub85c \ucd94\uc138\uac00 \uc788\ub294 \ub4ef \ud569\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc544\ub798\uc758 \ube14\ub85c\uadf8\ub97c \ucc38\uace0\ud588\uc2b5\ub2c8\ub2e4. (\ucc38\uc870 \ub9c1\ud06c: http://jake.dothome.co.kr/ic/) \uc704\uc758 8259A \uce69\uc740 PIC(Programmable Controller)\ub77c\uace0 \ubd88\ub9ac\uba70, \uc774 PIC\ub3c4 \ud558\ub098\uc758 \ucee8\ud2b8\ub864\ub7ec\uc758 \uac1c\ub150\uc744 \uac00\uc9c0\uace0 \uc788\uc5b4\uc11c \uc870\uadf8\ub9c8\ud55c \ud504\ub85c\uadf8\ub7a8\uc744 \ub123\uc5b4 \uc870\uc791\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud504\ub85c\uadf8\ub7a8\uc5d0\ub294 \ucd08\uae30\ud654, \uc5ec\ub7ec \uac1c\uc758 PIC \uc5f0\uacb0 \ubc29\ubc95, \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc544\ub4e4\uc774\ub294 \ubc29\ubc95, \ubc1b\uc544\ub4e4\uc778 \uc778\ud130\ub7fd\ud2b8\uc5d0 \ub300\ud574 CPU\uc5d0\uac8c \uc54c\ub824\uc8fc\ub294 \ubc29\ubc95 \ub4f1\uc774 \uae30\uc7ac\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ub9c8\uc2a4\ud130 PIC \uad00\ub828 \ub3d9\uc791 \ub9c8\uc2a4\ud130 PIC\uc5d0 \uc5f0\uacb0\ub41c \uc7a5\uce58 \uc911 \ud558\ub098\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0 \ub9c8\uc2a4\ud130 PIC\ub294 \uc790\uc2e0\uc758 INT \ud540\uc5d0 \uc2e0\ud638\ub97c \uc2e4\uc5b4 CPU\uc758 INT \ud540\uc5d0 \uc2e0\ud638\ub97c \uc90d\ub2c8\ub2e4. CPU\ub294 \uc774\uac83\uc744 \ubc1b\uace0 EFLAG \ub808\uc9c0\uc2a4\ud130\uc758 IE \ube44\ud2b8\uac00 1\ub85c \uc138\ud305\ub418\uc5b4 \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc744 \uc218 \uc788\ub294 \uc0c1\ud669\uc774\ub77c\uba74 /INTA\ub97c \ud1b5\ud574 \ub9c8\uc2a4\ud130 PIC\uc5d0 \uc778\ud130\ub7fd\ud2b8\ub97c \uc798 \ubc1b\uc558\ub2e4\ub294 \uc2e0\ud638\ub97c \ubcf4\ub0c5\ub2c8\ub2e4. \ub9c8\uc2a4\ud130 PIC\ub294 /INTA \uc2e0\ud638\ub97c \ubc1b\uc73c\uba74 \uba87 \ubc88\uc9f8 IRQ\uc5d0 \uc5f0\uacb0\ub41c \uc7a5\uce58\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud588\ub294\uc9c0\ub97c \uc22b\uc790\ub85c \ub370\uc774\ud130 \ubc84\uc2a4\ub97c \ud1b5\ud574 CPU\ub85c \uc804\ub2ec\ud569\ub2c8\ub2e4. CPU\ub294 \uc774 \ub370\uc774\ud130\ub97c \ucc38\uc870\ud558\uc5ec Protected Mode\ub85c \uc2e4\ud589 \uc911\uc774\ub77c\uba74 IDT\uc5d0\uc11c \uadf8 \ubc88\ud638\uc5d0 \ub9de\ub294 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uc544 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc2ac\ub808\uc774\ube0c PIC \uad00\ub828 \ub3d9\uc791 \uc2ac\ub808\uc774\ube0c PIC\uc5d0 \uc5f0\uacb0\ub41c \uc7a5\uce58 \uc911 \ud558\ub098\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0 \uc2ac\ub808\uc774\ube0c PIC\ub294 \uc790\uc2e0\uc758 INT \ud540\uc5d0 \uc2e0\ud638\ub97c \uc2e4\uc5b4 \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88 \ud540\uc5d0 \uc778\ud130\ub7fd\ud2b8 \uc2e0\ud638\ub97c \ubcf4\ub0c5\ub2c8\ub2e4. \ub9c8\uc2a4\ud130 PIC\ub294 \uc790\uc2e0\uc758 IRQ \ud540\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud588\uc73c\ubbc0\ub85c \uc790\uc2e0\uc758 INT \ud540\uc5d0 \uc2e0\ud638\ub97c \uc2e4\uc5b4 CPU\uc5d0\uac8c \uc54c\ub9bd\ub2c8\ub2e4. CPU\uac00 /INTA \uc2e0\ud638\ub97c \uc8fc\uba74 \uc5ed\uc2dc \ub370\uc774\ud130 \ubc84\uc2a4\uc5d0 \uc22b\uc790\ub97c \uc2e4\uc5b4 CPU\uc5d0\uac8c \uba87 \ubc88\uc9f8 IRQ\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud588\ub294\uc9c0\ub97c \uc54c\ub824\uc90d\ub2c8\ub2e4. \uc774 \uacbd\uc6b0 \uc22b\uc790\ub294 8~15 \uc0ac\uc774\uac00 \ub420 \uac83\uc785\ub2c8\ub2e4. PIC\uc758 \ud504\ub85c\uadf8\ub798\ubc0d ICW1, ICW2, ICW3, ICW4 \uc774\ub807\uac8c 4\uac00\uc9c0\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\uba70, \uc774 \uc21c\uc11c\ub300\ub85c \uc2e4\ud589\ub429\ub2c8\ub2e4. ICW1: ICW1\uc740 PIC\ub97c \ucd08\uae30\ud654 \ud558\ub294 \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. 7~4\ube44\ud2b8\ub294 \uc815\ud574\uc9c4 \uac83\uc774\ubbc0\ub85c \uadf8\ub300\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. LTIM\uc740 \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud560 \ub54c \uadf8 \uc778\ud130\ub7fd\ud2b8 \uc2e0\ud638\uc758 \uc5e3\uc9c0\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\uc744 \uc778\uc815\ud560 \uac83\uc778\uc9c0, \ud639\uc740 HIGH LEVEL\ub85c \uc2e0\ud638\uac00 \ubaa8\ub450 \uc62c\ub77c\uac04 \uc0c1\ud0dc\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\uc744 \uc778\uc815\ud560 \uac83\uc778\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. 0\uc774\uba74 \uc5e3\uc9c0 \ud2b8\ub9ac\uac70\ub9c1\uc774\uace0, 1\uc774\uba74 \ub808\ubca8 \ud2b8\ub9ac\uac70\ub9c1\uc785\ub2c8\ub2e4. SNGL\uc740 \uc774 PIC\uac00 \ub9c8\uc2a4\ud130/\uc2ac\ub808\uc774\ube0c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\ub294\uc9c0, \ub9c8\uc2a4\ud130 \ud55c \uac1c\ub9cc \uc0ac\uc6a9\ud560\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. 0 => \ub9c8\uc2a4\ud130/\uc2ac\ub808\uc774\ube0c \ud615\uc2dd\uc73c\ub85c PIC 2\uac1c \uc0ac\uc6a9. 1 => \ub9c8\uc2a4\ud130 \ud558\ub098\ub9cc \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uac83\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. IC4\ub294 ICW4 \uba85\ub839\uc5b4\uac00 \ucd94\uac00\uc801\uc73c\ub85c \ud544\uc694\ud55c\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. 0\uc774\uba74 \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4\ub294 \uac83, 1\uc774\uba74 \ud544\uc694\ud558\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. ICW2: \uc774 PIC\uac00 \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc558\uc744 \ub54c IRQ \ubc88\ud638\uc5d0 \uc5bc\ub9c8\ub97c \ub354\ud574\uc11c CPU\uc5d0\uac8c \uc54c\ub824\uc904\uc9c0\ub97c \uc9c0\uc815\ud569\ub2c8\ub2e4. 0~2\ube44\ud2b8\uac00 0\uc778 \uac83\uc740 \uc774 \uc22b\uc790\ub97c 8\ub2e8\uc704\ub85c \uae30\uc7ac\ud574\uc57c \ud55c\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 16\uc9c4\uc218 0x10\uc744 \ub123\uc73c\uba74 \ub098\uc911\uc5d0 \uc778\ud130\ub7fd\ud2b8 0\ubc88\uc774 \ubc1c\uc0dd\ud588\uc744 \ub54c CPU\uc5d0\uac8c\ub294 0x10\uc758 \uc22b\uc790\ub97c \ubcf4\ub0b4\uc90d\ub2c8\ub2e4. IRQ 16\ubc88\uc774\ub77c\uace0 \uc54c\ub824\uc8fc\ub294 \uac83\uc785\ub2c8\ub2e4. \uc778\ud130\ub7fd\ud2b8 1\ubc88\uc774 \ubc1c\uc0dd\ud588\uc744 \ub54c\uc5d0\ub294 CPU\uc5d0\uac8c 0x11\uc758 \uc22b\uc790\ub97c \ubcf4\ub0b4\uc90d\ub2c8\ub2e4. ICW3: ICW3\ub294 \uac01 PIC\uc758 \ub9c8\uc2a4\ud130, \uc2ac\ub808\uc774\ube0c\ub85c\uc11c\uc758 \uc5f0\uacb0 \ubc29\ubc95\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. S0~S7\uc740 \ub9c8\uc2a4\ud130 PIC\uc758 \uac01 IRQ \uc120\uc5d0 \ud574\ub2f9\ub429\ub2c8\ub2e4. \uac01\uac01\uc758 \ube44\ud2b8\uc5d0 0\uc744 \ub123\uc73c\uba74 \uadf8 IRQ \uc120\uc740 \ud558\ub4dc\uc6e8\uc5b4 \uc7a5\uce58\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub2e4\ub294 \uac83\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uac01\uac01\uc758 \ube44\ud2b8 \uc911 \uc5b4\ub290 \ube44\ud2b8\uc5d0 1\uc744 \ub123\uc73c\uba74 \uadf8 IRQ \uc120\uc740 \uc2ac\ub808\uc774\ube0c PIC\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub2e4\ub294 \uac83\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc2ac\ub808\uc774\ube0c PIC\uc5d0\uc11c 3~7\ube44\ud2b8\ub294 0\uc73c\ub85c \uc138\ud305\ud569\ub2c8\ub2e4. ID0~ID2\uc758 3\ube44\ud2b8\ub97c \uc0ac\uc6a9\ud574\uc11c \uc2ac\ub808\uc774\ube0c PIC\uac00 \ub9c8\uc2a4\ud130 PIC\uc758 \uba87 \ubc88\uc9f8 IRQ \ud540\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \ub9c8\uc2a4\ud130 PIC\uc5d0\uc11c \ud574\ub2f9 \ube44\ud2b8\ub97c 1\ub85c \uc138\ud305\ud558\ub294 ICW3\uc640\ub294 \ub2ec\ub9ac \uc5ec\uae30\uc5d0\uc11c\ub294 \uc22b\uc790\ub85c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. ICW4: ICW4\ub294 \ucd94\uac00 \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. ICW1 \uba85\ub839\uc744 \ub0b4\ub9b4 \ub54c ICW4 \ucd94\uac00 \uba85\ub839\uc744 \ub0b4\ub9ac\uaca0\ub2e4\ub294 \ud45c\uc2dc\ub97c \ud55c\ub2e4\uba74, ICW4 \uba85\ub839\uc744 \ucd94\uac00\ud574\uc57c \ud569\ub2c8\ub2e4. SFNM, BUF, M/S\uc758 \uae30\ub2a5\uc740 \ud604\uc7ac \uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud558\ub294 PC\uc5d0\uc11c\ub294 \uad6c\ud604\ub418\uc9c0 \uc54a\uc544\ub3c4 \ubb34\ubc29\ud558\ubbc0\ub85c \ud56d\uc0c1 0\uc73c\ub85c \ud574\ub461\ub2c8\ub2e4. AEOI \ube44\ud2b8\ub294 PIC\uc758 Reset\uc744 \uc790\ub3d9\uc73c\ub85c \ud560 \uc9c0, \uc218\ub3d9\uc73c\ub85c \ud560 \uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. PIC\ub294 \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud558\uace0 CPU\uc5d0\uac8c \uc54c\ub9b0 \ud6c4 \ub9ac\uc14b\uc744 \ud574\uc57c \uadf8 \ub2e4\uc74c\ubd80\ud130 \ub2e4\ub978 \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc544\ub4e4\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ub9ac\uc14b\uc744 \uc790\ub3d9\uc73c\ub85c \uc218\ud589\ud558\ub3c4\ub85d \ud55c\ub2e4\uba74 CPU\uc5d0\uac8c IRQ \ubc88\ud638\ub97c \uc54c\ub9b0 \ud6c4 \ubc14\ub85c \ub9ac\uc14b\uc744 \ud569\ub2c8\ub2e4. \uc774 \ub9ac\uc14b\uc744 \uc218\ub3d9\uc73c\ub85c \uc218\ud589\ud55c\ub2e4\uba74 CPU \ucabd\uc5d0\uc11c IRQ \ubc88\ud638\ub97c \ubc1b\uc544\ub4e4\uc774\uace0, \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\uc5d0\uc11c \ud574\ub2f9 \uc778\ud130\ub7fd\ud2b8\ub97c \ucc98\ub9ac\ud558\uace0 \ub098\uc11c PIC\uc5d0 \uba85\ub839\uc744 \uc8fc\ub294 \ud615\uc2dd\uc73c\ub85c \ucd08\uae30\ud654\ub97c \ud574\uc57c \ud569\ub2c8\ub2e4. uPM \ube44\ud2b8\uc5d0 0\uc744 \ub123\uc73c\uba74 \uc774 PIC\uac00 MCS-80/85 \ubaa8\ub4dc\ub85c \uc6c0\uc9c1\uc774\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774 \ube44\ud2b8\uac00 1\uc774\uba74 PIC\uac00 8086 \ubaa8\ub4dc\ub85c \uc6c0\uc9c1\uc774\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud558\ub294 PC\ub294 8086 \uacc4\uc5f4\uc774\ubbc0\ub85c 1\uc744 \ub123\uc2b5\ub2c8\ub2e4. \ucc38\uace0: I/O port map 1 2 3 4 5 [I/O port map] Master PIC Command : 0x20 Master PIC Data : 0x21 Slave PIC Command : 0xA0 Slave PIC Data : 0xA1 \uc5b4\uc148\ube14\ub9ac \ubcf5\uc2b5 org 0: \uc774 \ubd80\ubd84\uc774 \uae30\uc5b5\uc774 \uc798 \uc548 \ub0ac\uc2b5\ub2c8\ub2e4. org 0\ub294 \uc774 \ud504\ub85c\uadf8\ub7a8\uc774 \ub85c\ub529\ub418\ub294 \uba54\ubaa8\ub9ac \uc0c1\uc758 \uc704\uce58\ub97c \ub9d0\ud569\ub2c8\ub2e4. \uc989, \uba54\ubaa8\ub9ac \uc0c1\uc5d0 \ud504\ub85c\uadf8\ub7a8\uc774 \uc62c\ub77c\uac14\uc744 \ub54c, \ud504\ub85c\uadf8\ub7a8\uc758 \uc2dc\uc791 \uc8fc\uc18c\ub97c \ud2b9\uc815 \uc8fc\uc18c\uc5d0\uc11c \uc2dc\uc791 \ub420 \uac83\uc774\ub77c\uace0 \uac00\ub9ac\ud0a4\ub294 \uba85\ub839\uc5b4 \uc785\ub2c8\ub2e4. \uc989 ip \ud3ec\uc778\ud130\uac00 0\ubd80\ud130 \uc2dc\uc791\ub429\ub2c8\ub2e4. https://www.csie.ntu.edu.tw/~comp03/nasm/nasmdoc6.html (6.1.1 \ucc38\uc870) ORG : The function of the ORG directive is to specify the origin address which NASM will assume the program begins at when it is loaded into memory. 1 2 [org 0] jmp 07C0h:start ; \uba54\ubaa8\ub9ac\uc758 0\ubc88 \ubb3c\ub9ac\uc8fc\uc18c\ubd80\ud130 \uc2dc\uc791\ud569\ub2c8\ub2e4. 07C0\uc774 \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8\uc774\uace0, start\uc758 \uc8fc\uc18c\ub294 0\uc744 \uae30\uc900\uc73c\ub85c ip\uac00 \uc124\uc815\ub429\ub2c8\ub2e4. \uc0c8\ub85c \ubc30\uc6b4 \uac83 int 13h, ah 0: reset disk system: reset \ud50c\ub798\uadf8\ub97c \ucee8\ud2b8\ub864\ub7ec\uc5d0\uc11c clear \ud558\uace0, \ud5e4\ub4dc\ub97c \ud2b8\ub7990\ub85c \uac00\uc838\ub2e4 \ub461\ub2c8\ub2e4. (\ucd9c\ucc98: https://stanislavs.org/helppc/int_13-0.html) \uad81\uae08\ud55c \uc810 day 08\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc5d0\uc11c reset label\uacfc read label\uc774 \uba40\ub9ac \ub5a8\uc5b4\uc838 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc0ac\uc2e4 floppy disk\uc758 \ud5e4\ub4dc\ub97c \ucc98\uc74c\uc73c\ub85c \uac00\uc838\uac00\uace0, read \ud558\ub294 \uac83\uc778\ub370 \uc880 \ub354 \uac00\uae4c\uc774 \ubd99\uc5b4 \uc788\ub294 \uac83\uc774 \uc88b\uc9c0 \uc54a\uc744\uae4c\uc694? \ucf54\ub4dc \uc911\uac04\uc5d0 \ud50c\ub85c\ud53c \ub514\uc2a4\ud06c\uc758 \ubaa8\ud130\ub97c \ub044\ub294 \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc65c \ub514\uc2a4\ud06c\uc758 \ubaa8\ud130\ub97c \ub044\ub294 \uac78\uae4c\uc694...? 1 2 3 mov dx, 0x3F2 xor al, al out dx, al \uc644\ub8cc p. 133 (\ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \uad6c\ud604 \uc804\uae4c\uc9c0 \uc644\ub8cc)","title":"day9: PIC - \uc124\uba85(2)"},{"location":"os-making/09/#day-09-picprogrammable-interrupt-controller-2","text":"day 08\uc758 \uc18c\uc2a4\ucf54\ub4dc\ub97c \uae30\uc900\uc73c\ub85c \uc124\uba85\ud569\ub2c8\ub2e4.","title":"day 09: PIC(Programmable Interrupt Controller)\uc758 \uc124\uba85(2)"},{"location":"os-making/09/#_1","text":"","title":"\ubcc0\uacbd \ub610\ub294 \uc0c8\ub85c \ucd94\uac00\ub41c \ucf54\ub4dc"},{"location":"os-making/09/#reset-floppy-disk","text":"1 2 3 4 5 6 7 8 9 ; src/boot.asm ... reset: ; \ud50c\ub85c\ud53c \ub514\uc2a4\ud06c\ub97c \ub9ac\uc14b(controller\uc5d0\uc11c reset flag\ub97c clear\ub85c \uc138\ud305\ud558\uace0, \ud5e4\ub4dc\ub97c track 0\ub85c \uac00\uc838 \uac00\ub294 \uac83) mov ax, 0 mov dl, 0 ; drive=0 A: int 13h jc reset ; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud569\ub2c8\ub2e4. \ud2b8\ub799\uc774\ub780...? cylinder => track => sector \uc21c\uc73c\ub85c \ucc28\uc6d0\uc774 \uc791\uc544\uc9d0 \uadf8\ub9bc \ucd9c\ucc98: https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=capemay&logNo=220221154613","title":"reset floppy disk"},{"location":"os-making/09/#pic","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 cli ; clear inturrpt flag. \uc989, \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc9c0 \uc54a\uc744 \uac83\uc744 \uc758\ubbf8 ; ICW1 \uba85\ub839\uc5b4 - \ucd08\uae30\ud654 mov al, 0x11 ; PIC\uc758 \ucd08\uae30\ud654(0b00010001) - 4\ubc88\uc9f8 \ube44\ud2b8\ub294 1\ub85c \uace0\uc815\uc778 \uac12, 0\ubc88\uc9f8 \ube44\ud2b8\ub294 ICW4 \uba85\ub839\uc5b4\uac00 \ud544\uc694\ud558\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. out 0x20, al ; \ub9c8\uc2a4\ud130 PIC dw 0x00eb, 0x00eb ; jmp $+2, jmp $+2 => \ub2e8\uc21c\ud788 \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c \uac00\uae30 \uc804\uc5d0 \uc2dc\uac04\uc744 \ucda9\ubd84\ud788 \uc8fc\uc790\ub294 \uc758\ubbf8. out 0xA0, al ; \uc2ac\ub808\uc774\ube0c PIC dw 0x00eb, 0x00eb ; ICW2 \uba85\ub839\uc5b4 - IRQ \ubc88\ud638 \ub9ac\ub9e4\ud551(remapping) mov al, 0x20 ; \ub9c8\uc2a4\ud130 PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810(CPU\uc5d0 +0x20\uc744 \ud574\uc11c IRQ\ubc88\ud638\ub97c \ub9e4\uae40) out 0x21, al dw 0x00eb, 0x00eb mov al, 0x28 ; \uc2ac\ub808\uc774\ube0c PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810(CPU\uc5d0 +0x28\uc744 \ud574\uc11c IRQ\ubc88\ud638\ub97c \ub9e4\uae40) out 0xA1, al dw 0x00eb, 0x00eb ; ICW3 \uba85\ub839\uc5b4 - \ub9c8\uc2a4\ud130, \uc2ac\ub808\uc774\ube0c PIC \uc5f0\uacb0 mov al, 0x04 ; \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88\uc5d0 out 0x21, al ; \uc2ac\ub808\uc774\ube0c PIC\uac00 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.(\uc5f0\uacb0\ub41c \uc2ac\ub808\uc774\ube0c PIC\uac00 \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 7\ubc88\uc774\uba74 0x07 \ud574\ub2f9\ud558\ub294 \ud540\uc758 \ube44\ud2b8\ub97c 1\ub85c \uc138\ud305\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ud568.) dw 0x00eb, 0x00eb mov al, 0x02 ; \uc2ac\ub808\uc774\ube0c PIC\uac00 \ub9c8\uc2a4\ud130 PIC\uc758 out 0xA1, al ; IRQ 2\ubc88\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.(\ub9c8\uc2a4\ud130 PIC\uc758 IRQ 7\ubc88\uc774\uba74 0x07 \uadf8\ub300\ub85c \uc500) dw 0x00eb, 0x00eb ; ICW4 \uba85\ub839\uc5b4 - \ucd94\uac00\uc801\uc778 \uc124\uc815(8086 \ubaa8\ub4dc) mov al, 0x01 ; 8086 \ubaa8\ub4dc\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. out 0x21, al dw 0x00eb, 0x00eb out 0xA1, al dw 0x00eb, 0x00eb mov al, 0xFF ; \uc2ac\ub808\uc774\ube0c PIC\uc758 \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c out 0XA1, al ; \ub9c9\uc544\ub461\ub2c8\ub2e4. dw 0x00eb, 0x00eb mov al, 0xFB ; \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88\uc744 \uc81c\uc678\ud55c out 0x21, al ; \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c \ub9c9\uc544\ub461\ub2c8\ub2e4. \uc704\uc758 \uba85\ub839\uc5b4\ub294 8259A\ub77c\ub294 \uce69\uc5d0 \uba85\ub839\uc5b4\ub97c \ub0b4\ub824\uc8fc\ub294 \uacfc\uc815\uc785\ub2c8\ub2e4. \uc9c0\uae08 \ucf54\ub529\uc5d0 \uc0ac\uc6a9\ub41c PIC \uad6c\uc870\ub294 x86\uc5d0\uc11c master, slave PIC\ub97c \ub450\ub294 \ubc29\ubc95\uc778\ub370, \uc774 \ubc29\ubc95\uc740 \uc2f1\uae00 \ucf54\uc5b4\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc778 \ub4ef \ud569\ub2c8\ub2e4. \uba40\ud2f0\ucf54\uc5b4 x86\uc5d0\uc11c\ub294 APIC \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. arm\uc5d0\uc11c\ub294 \uac01 \ud68c\uc0ac\ubcc4\ub85c \ubcc4\ub3c4\uc758 IP \ube14\ub7ed\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\ub97c \uad6c\ud604\ud558\ub294 \uac83 \uac19\uc740\ub370, ARM\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 GIC(Generic interrupt Controller)\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc73c\ub85c \ucd94\uc138\uac00 \uc788\ub294 \ub4ef \ud569\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc544\ub798\uc758 \ube14\ub85c\uadf8\ub97c \ucc38\uace0\ud588\uc2b5\ub2c8\ub2e4. (\ucc38\uc870 \ub9c1\ud06c: http://jake.dothome.co.kr/ic/) \uc704\uc758 8259A \uce69\uc740 PIC(Programmable Controller)\ub77c\uace0 \ubd88\ub9ac\uba70, \uc774 PIC\ub3c4 \ud558\ub098\uc758 \ucee8\ud2b8\ub864\ub7ec\uc758 \uac1c\ub150\uc744 \uac00\uc9c0\uace0 \uc788\uc5b4\uc11c \uc870\uadf8\ub9c8\ud55c \ud504\ub85c\uadf8\ub7a8\uc744 \ub123\uc5b4 \uc870\uc791\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud504\ub85c\uadf8\ub7a8\uc5d0\ub294 \ucd08\uae30\ud654, \uc5ec\ub7ec \uac1c\uc758 PIC \uc5f0\uacb0 \ubc29\ubc95, \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc544\ub4e4\uc774\ub294 \ubc29\ubc95, \ubc1b\uc544\ub4e4\uc778 \uc778\ud130\ub7fd\ud2b8\uc5d0 \ub300\ud574 CPU\uc5d0\uac8c \uc54c\ub824\uc8fc\ub294 \ubc29\ubc95 \ub4f1\uc774 \uae30\uc7ac\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ub9c8\uc2a4\ud130 PIC \uad00\ub828 \ub3d9\uc791 \ub9c8\uc2a4\ud130 PIC\uc5d0 \uc5f0\uacb0\ub41c \uc7a5\uce58 \uc911 \ud558\ub098\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0 \ub9c8\uc2a4\ud130 PIC\ub294 \uc790\uc2e0\uc758 INT \ud540\uc5d0 \uc2e0\ud638\ub97c \uc2e4\uc5b4 CPU\uc758 INT \ud540\uc5d0 \uc2e0\ud638\ub97c \uc90d\ub2c8\ub2e4. CPU\ub294 \uc774\uac83\uc744 \ubc1b\uace0 EFLAG \ub808\uc9c0\uc2a4\ud130\uc758 IE \ube44\ud2b8\uac00 1\ub85c \uc138\ud305\ub418\uc5b4 \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc744 \uc218 \uc788\ub294 \uc0c1\ud669\uc774\ub77c\uba74 /INTA\ub97c \ud1b5\ud574 \ub9c8\uc2a4\ud130 PIC\uc5d0 \uc778\ud130\ub7fd\ud2b8\ub97c \uc798 \ubc1b\uc558\ub2e4\ub294 \uc2e0\ud638\ub97c \ubcf4\ub0c5\ub2c8\ub2e4. \ub9c8\uc2a4\ud130 PIC\ub294 /INTA \uc2e0\ud638\ub97c \ubc1b\uc73c\uba74 \uba87 \ubc88\uc9f8 IRQ\uc5d0 \uc5f0\uacb0\ub41c \uc7a5\uce58\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud588\ub294\uc9c0\ub97c \uc22b\uc790\ub85c \ub370\uc774\ud130 \ubc84\uc2a4\ub97c \ud1b5\ud574 CPU\ub85c \uc804\ub2ec\ud569\ub2c8\ub2e4. CPU\ub294 \uc774 \ub370\uc774\ud130\ub97c \ucc38\uc870\ud558\uc5ec Protected Mode\ub85c \uc2e4\ud589 \uc911\uc774\ub77c\uba74 IDT\uc5d0\uc11c \uadf8 \ubc88\ud638\uc5d0 \ub9de\ub294 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uc544 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4. \uc2ac\ub808\uc774\ube0c PIC \uad00\ub828 \ub3d9\uc791 \uc2ac\ub808\uc774\ube0c PIC\uc5d0 \uc5f0\uacb0\ub41c \uc7a5\uce58 \uc911 \ud558\ub098\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud55c \uacbd\uc6b0 \uc2ac\ub808\uc774\ube0c PIC\ub294 \uc790\uc2e0\uc758 INT \ud540\uc5d0 \uc2e0\ud638\ub97c \uc2e4\uc5b4 \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88 \ud540\uc5d0 \uc778\ud130\ub7fd\ud2b8 \uc2e0\ud638\ub97c \ubcf4\ub0c5\ub2c8\ub2e4. \ub9c8\uc2a4\ud130 PIC\ub294 \uc790\uc2e0\uc758 IRQ \ud540\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud588\uc73c\ubbc0\ub85c \uc790\uc2e0\uc758 INT \ud540\uc5d0 \uc2e0\ud638\ub97c \uc2e4\uc5b4 CPU\uc5d0\uac8c \uc54c\ub9bd\ub2c8\ub2e4. CPU\uac00 /INTA \uc2e0\ud638\ub97c \uc8fc\uba74 \uc5ed\uc2dc \ub370\uc774\ud130 \ubc84\uc2a4\uc5d0 \uc22b\uc790\ub97c \uc2e4\uc5b4 CPU\uc5d0\uac8c \uba87 \ubc88\uc9f8 IRQ\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud588\ub294\uc9c0\ub97c \uc54c\ub824\uc90d\ub2c8\ub2e4. \uc774 \uacbd\uc6b0 \uc22b\uc790\ub294 8~15 \uc0ac\uc774\uac00 \ub420 \uac83\uc785\ub2c8\ub2e4. PIC\uc758 \ud504\ub85c\uadf8\ub798\ubc0d ICW1, ICW2, ICW3, ICW4 \uc774\ub807\uac8c 4\uac00\uc9c0\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc73c\uba70, \uc774 \uc21c\uc11c\ub300\ub85c \uc2e4\ud589\ub429\ub2c8\ub2e4. ICW1: ICW1\uc740 PIC\ub97c \ucd08\uae30\ud654 \ud558\ub294 \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. 7~4\ube44\ud2b8\ub294 \uc815\ud574\uc9c4 \uac83\uc774\ubbc0\ub85c \uadf8\ub300\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. LTIM\uc740 \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud560 \ub54c \uadf8 \uc778\ud130\ub7fd\ud2b8 \uc2e0\ud638\uc758 \uc5e3\uc9c0\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\uc744 \uc778\uc815\ud560 \uac83\uc778\uc9c0, \ud639\uc740 HIGH LEVEL\ub85c \uc2e0\ud638\uac00 \ubaa8\ub450 \uc62c\ub77c\uac04 \uc0c1\ud0dc\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\uc744 \uc778\uc815\ud560 \uac83\uc778\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. 0\uc774\uba74 \uc5e3\uc9c0 \ud2b8\ub9ac\uac70\ub9c1\uc774\uace0, 1\uc774\uba74 \ub808\ubca8 \ud2b8\ub9ac\uac70\ub9c1\uc785\ub2c8\ub2e4. SNGL\uc740 \uc774 PIC\uac00 \ub9c8\uc2a4\ud130/\uc2ac\ub808\uc774\ube0c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\ub294\uc9c0, \ub9c8\uc2a4\ud130 \ud55c \uac1c\ub9cc \uc0ac\uc6a9\ud560\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. 0 => \ub9c8\uc2a4\ud130/\uc2ac\ub808\uc774\ube0c \ud615\uc2dd\uc73c\ub85c PIC 2\uac1c \uc0ac\uc6a9. 1 => \ub9c8\uc2a4\ud130 \ud558\ub098\ub9cc \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uac83\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. IC4\ub294 ICW4 \uba85\ub839\uc5b4\uac00 \ucd94\uac00\uc801\uc73c\ub85c \ud544\uc694\ud55c\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. 0\uc774\uba74 \ud544\uc694\ud558\uc9c0 \uc54a\ub2e4\ub294 \uac83, 1\uc774\uba74 \ud544\uc694\ud558\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. ICW2: \uc774 PIC\uac00 \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc558\uc744 \ub54c IRQ \ubc88\ud638\uc5d0 \uc5bc\ub9c8\ub97c \ub354\ud574\uc11c CPU\uc5d0\uac8c \uc54c\ub824\uc904\uc9c0\ub97c \uc9c0\uc815\ud569\ub2c8\ub2e4. 0~2\ube44\ud2b8\uac00 0\uc778 \uac83\uc740 \uc774 \uc22b\uc790\ub97c 8\ub2e8\uc704\ub85c \uae30\uc7ac\ud574\uc57c \ud55c\ub2e4\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 16\uc9c4\uc218 0x10\uc744 \ub123\uc73c\uba74 \ub098\uc911\uc5d0 \uc778\ud130\ub7fd\ud2b8 0\ubc88\uc774 \ubc1c\uc0dd\ud588\uc744 \ub54c CPU\uc5d0\uac8c\ub294 0x10\uc758 \uc22b\uc790\ub97c \ubcf4\ub0b4\uc90d\ub2c8\ub2e4. IRQ 16\ubc88\uc774\ub77c\uace0 \uc54c\ub824\uc8fc\ub294 \uac83\uc785\ub2c8\ub2e4. \uc778\ud130\ub7fd\ud2b8 1\ubc88\uc774 \ubc1c\uc0dd\ud588\uc744 \ub54c\uc5d0\ub294 CPU\uc5d0\uac8c 0x11\uc758 \uc22b\uc790\ub97c \ubcf4\ub0b4\uc90d\ub2c8\ub2e4. ICW3: ICW3\ub294 \uac01 PIC\uc758 \ub9c8\uc2a4\ud130, \uc2ac\ub808\uc774\ube0c\ub85c\uc11c\uc758 \uc5f0\uacb0 \ubc29\ubc95\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. S0~S7\uc740 \ub9c8\uc2a4\ud130 PIC\uc758 \uac01 IRQ \uc120\uc5d0 \ud574\ub2f9\ub429\ub2c8\ub2e4. \uac01\uac01\uc758 \ube44\ud2b8\uc5d0 0\uc744 \ub123\uc73c\uba74 \uadf8 IRQ \uc120\uc740 \ud558\ub4dc\uc6e8\uc5b4 \uc7a5\uce58\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub2e4\ub294 \uac83\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uac01\uac01\uc758 \ube44\ud2b8 \uc911 \uc5b4\ub290 \ube44\ud2b8\uc5d0 1\uc744 \ub123\uc73c\uba74 \uadf8 IRQ \uc120\uc740 \uc2ac\ub808\uc774\ube0c PIC\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub2e4\ub294 \uac83\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc2ac\ub808\uc774\ube0c PIC\uc5d0\uc11c 3~7\ube44\ud2b8\ub294 0\uc73c\ub85c \uc138\ud305\ud569\ub2c8\ub2e4. ID0~ID2\uc758 3\ube44\ud2b8\ub97c \uc0ac\uc6a9\ud574\uc11c \uc2ac\ub808\uc774\ube0c PIC\uac00 \ub9c8\uc2a4\ud130 PIC\uc758 \uba87 \ubc88\uc9f8 IRQ \ud540\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294\uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \ub9c8\uc2a4\ud130 PIC\uc5d0\uc11c \ud574\ub2f9 \ube44\ud2b8\ub97c 1\ub85c \uc138\ud305\ud558\ub294 ICW3\uc640\ub294 \ub2ec\ub9ac \uc5ec\uae30\uc5d0\uc11c\ub294 \uc22b\uc790\ub85c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. ICW4: ICW4\ub294 \ucd94\uac00 \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. ICW1 \uba85\ub839\uc744 \ub0b4\ub9b4 \ub54c ICW4 \ucd94\uac00 \uba85\ub839\uc744 \ub0b4\ub9ac\uaca0\ub2e4\ub294 \ud45c\uc2dc\ub97c \ud55c\ub2e4\uba74, ICW4 \uba85\ub839\uc744 \ucd94\uac00\ud574\uc57c \ud569\ub2c8\ub2e4. SFNM, BUF, M/S\uc758 \uae30\ub2a5\uc740 \ud604\uc7ac \uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud558\ub294 PC\uc5d0\uc11c\ub294 \uad6c\ud604\ub418\uc9c0 \uc54a\uc544\ub3c4 \ubb34\ubc29\ud558\ubbc0\ub85c \ud56d\uc0c1 0\uc73c\ub85c \ud574\ub461\ub2c8\ub2e4. AEOI \ube44\ud2b8\ub294 PIC\uc758 Reset\uc744 \uc790\ub3d9\uc73c\ub85c \ud560 \uc9c0, \uc218\ub3d9\uc73c\ub85c \ud560 \uc9c0\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. PIC\ub294 \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud558\uace0 CPU\uc5d0\uac8c \uc54c\ub9b0 \ud6c4 \ub9ac\uc14b\uc744 \ud574\uc57c \uadf8 \ub2e4\uc74c\ubd80\ud130 \ub2e4\ub978 \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc544\ub4e4\uc77c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ub9ac\uc14b\uc744 \uc790\ub3d9\uc73c\ub85c \uc218\ud589\ud558\ub3c4\ub85d \ud55c\ub2e4\uba74 CPU\uc5d0\uac8c IRQ \ubc88\ud638\ub97c \uc54c\ub9b0 \ud6c4 \ubc14\ub85c \ub9ac\uc14b\uc744 \ud569\ub2c8\ub2e4. \uc774 \ub9ac\uc14b\uc744 \uc218\ub3d9\uc73c\ub85c \uc218\ud589\ud55c\ub2e4\uba74 CPU \ucabd\uc5d0\uc11c IRQ \ubc88\ud638\ub97c \ubc1b\uc544\ub4e4\uc774\uace0, \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\uc5d0\uc11c \ud574\ub2f9 \uc778\ud130\ub7fd\ud2b8\ub97c \ucc98\ub9ac\ud558\uace0 \ub098\uc11c PIC\uc5d0 \uba85\ub839\uc744 \uc8fc\ub294 \ud615\uc2dd\uc73c\ub85c \ucd08\uae30\ud654\ub97c \ud574\uc57c \ud569\ub2c8\ub2e4. uPM \ube44\ud2b8\uc5d0 0\uc744 \ub123\uc73c\uba74 \uc774 PIC\uac00 MCS-80/85 \ubaa8\ub4dc\ub85c \uc6c0\uc9c1\uc774\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc774 \ube44\ud2b8\uac00 1\uc774\uba74 PIC\uac00 8086 \ubaa8\ub4dc\ub85c \uc6c0\uc9c1\uc774\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud558\ub294 PC\ub294 8086 \uacc4\uc5f4\uc774\ubbc0\ub85c 1\uc744 \ub123\uc2b5\ub2c8\ub2e4. \ucc38\uace0: I/O port map 1 2 3 4 5 [I/O port map] Master PIC Command : 0x20 Master PIC Data : 0x21 Slave PIC Command : 0xA0 Slave PIC Data : 0xA1","title":"PIC \uc138\ud305"},{"location":"os-making/09/#_2","text":"\ubcf5\uc2b5 org 0: \uc774 \ubd80\ubd84\uc774 \uae30\uc5b5\uc774 \uc798 \uc548 \ub0ac\uc2b5\ub2c8\ub2e4. org 0\ub294 \uc774 \ud504\ub85c\uadf8\ub7a8\uc774 \ub85c\ub529\ub418\ub294 \uba54\ubaa8\ub9ac \uc0c1\uc758 \uc704\uce58\ub97c \ub9d0\ud569\ub2c8\ub2e4. \uc989, \uba54\ubaa8\ub9ac \uc0c1\uc5d0 \ud504\ub85c\uadf8\ub7a8\uc774 \uc62c\ub77c\uac14\uc744 \ub54c, \ud504\ub85c\uadf8\ub7a8\uc758 \uc2dc\uc791 \uc8fc\uc18c\ub97c \ud2b9\uc815 \uc8fc\uc18c\uc5d0\uc11c \uc2dc\uc791 \ub420 \uac83\uc774\ub77c\uace0 \uac00\ub9ac\ud0a4\ub294 \uba85\ub839\uc5b4 \uc785\ub2c8\ub2e4. \uc989 ip \ud3ec\uc778\ud130\uac00 0\ubd80\ud130 \uc2dc\uc791\ub429\ub2c8\ub2e4. https://www.csie.ntu.edu.tw/~comp03/nasm/nasmdoc6.html (6.1.1 \ucc38\uc870) ORG : The function of the ORG directive is to specify the origin address which NASM will assume the program begins at when it is loaded into memory. 1 2 [org 0] jmp 07C0h:start ; \uba54\ubaa8\ub9ac\uc758 0\ubc88 \ubb3c\ub9ac\uc8fc\uc18c\ubd80\ud130 \uc2dc\uc791\ud569\ub2c8\ub2e4. 07C0\uc774 \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8\uc774\uace0, start\uc758 \uc8fc\uc18c\ub294 0\uc744 \uae30\uc900\uc73c\ub85c ip\uac00 \uc124\uc815\ub429\ub2c8\ub2e4. \uc0c8\ub85c \ubc30\uc6b4 \uac83 int 13h, ah 0: reset disk system: reset \ud50c\ub798\uadf8\ub97c \ucee8\ud2b8\ub864\ub7ec\uc5d0\uc11c clear \ud558\uace0, \ud5e4\ub4dc\ub97c \ud2b8\ub7990\ub85c \uac00\uc838\ub2e4 \ub461\ub2c8\ub2e4. (\ucd9c\ucc98: https://stanislavs.org/helppc/int_13-0.html)","title":"\uc5b4\uc148\ube14\ub9ac"},{"location":"os-making/09/#_3","text":"day 08\uc758 \uc18c\uc2a4\ucf54\ub4dc\uc5d0\uc11c reset label\uacfc read label\uc774 \uba40\ub9ac \ub5a8\uc5b4\uc838 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uc0ac\uc2e4 floppy disk\uc758 \ud5e4\ub4dc\ub97c \ucc98\uc74c\uc73c\ub85c \uac00\uc838\uac00\uace0, read \ud558\ub294 \uac83\uc778\ub370 \uc880 \ub354 \uac00\uae4c\uc774 \ubd99\uc5b4 \uc788\ub294 \uac83\uc774 \uc88b\uc9c0 \uc54a\uc744\uae4c\uc694? \ucf54\ub4dc \uc911\uac04\uc5d0 \ud50c\ub85c\ud53c \ub514\uc2a4\ud06c\uc758 \ubaa8\ud130\ub97c \ub044\ub294 \uc5b4\uc148\ube14\ub9ac \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc65c \ub514\uc2a4\ud06c\uc758 \ubaa8\ud130\ub97c \ub044\ub294 \uac78\uae4c\uc694...? 1 2 3 mov dx, 0x3F2 xor al, al out dx, al","title":"\uad81\uae08\ud55c \uc810"},{"location":"os-making/09/#_4","text":"p. 133 (\ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \uad6c\ud604 \uc804\uae4c\uc9c0 \uc644\ub8cc)","title":"\uc644\ub8cc"},{"location":"os-making/10/","text":"day 10: PIC - \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec kernel.asm 1 2 3 4 mov edi, 8*0x20 lea esi, [idt_timer] mov cx, 8 rep movsb \ud0c0\uc774\uba38\ub294 IRQ 0\ubc88\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ubd80\ud2b8\uc2a4\ud2b8\ub7a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c PIC\ub97c \ub9ac\ub9e4\ud551\ud588\uae30 \ub54c\ubb38\uc5d0 \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud588\uc744 \ub54c PIC\ub294 CPU\uc5d0\uac8c 0x20\ubc88\uc758 \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud588\ub2e4\uace0 \uc54c\ub824\uc904 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c IDT\uc5d0 \uc788\ub294 \ub514\uc2a4\ud06c\ub9bd\ud130 \uc911 0x20\ubc88\uc9f8\uc5d0 \ub9cc\ub4e4\uc5b4 \ub193\uc740 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud574\uc11c \uc124\uc815\ud574 \ub193\uc2b5\ub2c8\ub2e4. idt_timer \ub514\uc2a4\ud06c\ub9bd\ud130 1 2 3 4 5 6 lidt[idtr] mov al, 0xFE ; \ub9c9\uc544\ub450\uc5c8\ub358 \uc778\ud130\ub7fd\ud2b8 \uc911 out 0x21,al ; \ud0c0\uc774\uba38\ub9cc \ub2e4\uc2dc \uc720\ud6a8\ud558\uac8c \ud569\ub2c8\ub2e4. sti jmp $ sti \uba85\ub839\uc5b4\ub97c \uaf2d \ud574\uc918\uc57c, CPU\uac00 PIC\ub85c\ubd80\ud130 \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc544\ub4e4\uc774\uace0, /INTA \uc2e0\ud638\ub97c \ub418\ub3cc\ub824\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. cli \uba85\ub839\uc73c\ub85c \uc778\ud130\ub7fd\ud2b8 \ud50c\ub798\uadf8\uac00 0\uc73c\ub85c \uc138\ud305\ub418\uc5b4 \uc788\uc73c\uba74 CPU \uce21\uc5d0\uc11c /INTA \uc2e0\ud638\ub97c \ub418\ub3cc\ub824 \uc8fc\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\ud6c4\ub85c\ub294 \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\uac00 \uacc4\uc18d \ud638\ucd9c\ub418\uc5b4 \ubb38\uc7a5\uc774 \ub098\uc624\uac8c \ub429\ub2c8\ub2e4. 1 2 3 4 5 6 idt_timer: dw isr_32_timer dw 0x08 db 0 db 0x8E dw 0x0001 \ud578\ub4e4\ub7ec\uc758 \ubb3c\ub9ac\uc8fc\uc18c\ub85c\uc11c 0x010000 + isr_32_timer\ub97c \uc9c0\uc815\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\uc778 isr_32_timer \ub8e8\ud2f4\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 isr_32_timer: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*2*2) lea esi, [msg_isr_32_timer] call printf inc byte [msg_isr_32_timer] popfd popad pop ds pop es pop fs pop gs iret \uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c 0x20(master PIC - \ucee4\ub9e8\ub4dc \ubc84\uc2a4) \uc8fc\uc18c\ub85c 0x20\uc744 \ubcf4\ub0b4\ub294 \uac83\uc758 \uc758\ubbf8\ub294 EOI(End-Of-Interrupt command code)\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc774 \uba85\ub839\uc5b4\ub294 \uc778\ud130\ub7fd\ud2b8\uc758 \ub05d\uc744 \uc54c\ub9bd\ub2c8\ub2e4. \uc774 \ucee4\ub9e8\ub4dc\ub294 IRQ\uae30\ubc18 \uc778\ud130\ub7fd\ud2b8 \ub8e8\ud2f4\uc774 \ub05d\ub0ac\uc744 \ub54c PIC\uce69\uc5d0 \ubc1c\uae09\ub429\ub2c8\ub2e4. \ub9c8\uc2a4\ud130 PIC\ub9cc \uc788\uc73c\uba74, \uc774 \ucee4\ub9e8\ub4dc\uac00 \ud544\uc694 \uc5c6\uc9c0\ub9cc, IRQ\uac00 \uc2ac\ub808\uc774\ube0c PIC\ub85c \uac04\ub2e4\uba74, \uc774 \ucee4\ub9e8\ub4dc\ub97c \ub9c8\uc2a4\ud130 PIC\uc640 \uc2ac\ub808\uc774\ube0c PIC \uac01\uac01\uc5d0 \ubc1c\ud589\ud574\uc57c \ud569\ub2c8\ub2e4. \uc989, EOI \uba85\ub839\uc5b4 out 0x20(master PIC), 0x20(EOI) \uc740 PIC\ub97c \ub9ac\uc14b\ud558\uc5ec IRET \uba85\ub839\uc5b4\ub97c \ud1b5\ud574 \uc911\ub2e8\ub418\uc5c8\ub358 \ub8e8\ud2f4\uc73c\ub85c \ub3cc\uc544\uac00\ub354\ub77c\ub3c4 \uc778\ud130\ub7fd\ud2b8\uac00 \ub2e4\uc2dc \uac78\ub9b4 \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4.","title":"day10: PIC - \ud0c0\uc774\uba38"},{"location":"os-making/10/#day-10-pic-","text":"kernel.asm 1 2 3 4 mov edi, 8*0x20 lea esi, [idt_timer] mov cx, 8 rep movsb \ud0c0\uc774\uba38\ub294 IRQ 0\ubc88\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ubd80\ud2b8\uc2a4\ud2b8\ub7a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c PIC\ub97c \ub9ac\ub9e4\ud551\ud588\uae30 \ub54c\ubb38\uc5d0 \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud588\uc744 \ub54c PIC\ub294 CPU\uc5d0\uac8c 0x20\ubc88\uc758 \uc778\ud130\ub7fd\ud2b8\uac00 \ubc1c\uc0dd\ud588\ub2e4\uace0 \uc54c\ub824\uc904 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c IDT\uc5d0 \uc788\ub294 \ub514\uc2a4\ud06c\ub9bd\ud130 \uc911 0x20\ubc88\uc9f8\uc5d0 \ub9cc\ub4e4\uc5b4 \ub193\uc740 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud574\uc11c \uc124\uc815\ud574 \ub193\uc2b5\ub2c8\ub2e4. idt_timer \ub514\uc2a4\ud06c\ub9bd\ud130 1 2 3 4 5 6 lidt[idtr] mov al, 0xFE ; \ub9c9\uc544\ub450\uc5c8\ub358 \uc778\ud130\ub7fd\ud2b8 \uc911 out 0x21,al ; \ud0c0\uc774\uba38\ub9cc \ub2e4\uc2dc \uc720\ud6a8\ud558\uac8c \ud569\ub2c8\ub2e4. sti jmp $ sti \uba85\ub839\uc5b4\ub97c \uaf2d \ud574\uc918\uc57c, CPU\uac00 PIC\ub85c\ubd80\ud130 \uc778\ud130\ub7fd\ud2b8\ub97c \ubc1b\uc544\ub4e4\uc774\uace0, /INTA \uc2e0\ud638\ub97c \ub418\ub3cc\ub824\uc904 \uc218 \uc788\uc2b5\ub2c8\ub2e4. cli \uba85\ub839\uc73c\ub85c \uc778\ud130\ub7fd\ud2b8 \ud50c\ub798\uadf8\uac00 0\uc73c\ub85c \uc138\ud305\ub418\uc5b4 \uc788\uc73c\uba74 CPU \uce21\uc5d0\uc11c /INTA \uc2e0\ud638\ub97c \ub418\ub3cc\ub824 \uc8fc\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\ud6c4\ub85c\ub294 \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\uac00 \uacc4\uc18d \ud638\ucd9c\ub418\uc5b4 \ubb38\uc7a5\uc774 \ub098\uc624\uac8c \ub429\ub2c8\ub2e4. 1 2 3 4 5 6 idt_timer: dw isr_32_timer dw 0x08 db 0 db 0x8E dw 0x0001 \ud578\ub4e4\ub7ec\uc758 \ubb3c\ub9ac\uc8fc\uc18c\ub85c\uc11c 0x010000 + isr_32_timer\ub97c \uc9c0\uc815\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\uc778 isr_32_timer \ub8e8\ud2f4\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 isr_32_timer: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*2*2) lea esi, [msg_isr_32_timer] call printf inc byte [msg_isr_32_timer] popfd popad pop ds pop es pop fs pop gs iret \uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c 0x20(master PIC - \ucee4\ub9e8\ub4dc \ubc84\uc2a4) \uc8fc\uc18c\ub85c 0x20\uc744 \ubcf4\ub0b4\ub294 \uac83\uc758 \uc758\ubbf8\ub294 EOI(End-Of-Interrupt command code)\ub77c\uace0 \ud569\ub2c8\ub2e4. \uc774 \uba85\ub839\uc5b4\ub294 \uc778\ud130\ub7fd\ud2b8\uc758 \ub05d\uc744 \uc54c\ub9bd\ub2c8\ub2e4. \uc774 \ucee4\ub9e8\ub4dc\ub294 IRQ\uae30\ubc18 \uc778\ud130\ub7fd\ud2b8 \ub8e8\ud2f4\uc774 \ub05d\ub0ac\uc744 \ub54c PIC\uce69\uc5d0 \ubc1c\uae09\ub429\ub2c8\ub2e4. \ub9c8\uc2a4\ud130 PIC\ub9cc \uc788\uc73c\uba74, \uc774 \ucee4\ub9e8\ub4dc\uac00 \ud544\uc694 \uc5c6\uc9c0\ub9cc, IRQ\uac00 \uc2ac\ub808\uc774\ube0c PIC\ub85c \uac04\ub2e4\uba74, \uc774 \ucee4\ub9e8\ub4dc\ub97c \ub9c8\uc2a4\ud130 PIC\uc640 \uc2ac\ub808\uc774\ube0c PIC \uac01\uac01\uc5d0 \ubc1c\ud589\ud574\uc57c \ud569\ub2c8\ub2e4. \uc989, EOI \uba85\ub839\uc5b4 out 0x20(master PIC), 0x20(EOI) \uc740 PIC\ub97c \ub9ac\uc14b\ud558\uc5ec IRET \uba85\ub839\uc5b4\ub97c \ud1b5\ud574 \uc911\ub2e8\ub418\uc5c8\ub358 \ub8e8\ud2f4\uc73c\ub85c \ub3cc\uc544\uac00\ub354\ub77c\ub3c4 \uc778\ud130\ub7fd\ud2b8\uac00 \ub2e4\uc2dc \uac78\ub9b4 \uc218 \uc788\ub3c4\ub85d \ud569\ub2c8\ub2e4.","title":"day 10: PIC - \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec"},{"location":"os-making/11/","text":"day11: \ud0a4\ubcf4\ub4dc \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec, exception \uc624\ub298\uc758 \uacb0\uacfc\ubb3c keyboard \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec - \uc544\ubb34 \ud0a4\ub098 \ub204\ub974\uba74 \ud0a4\ubcf4\ub4dc \uc778\ud130\ub7fd\ud2b8 \ub77c\ub294 \ubb38\uad6c\uac00 \ub738(key down, key up \ub450 \uac00\uc9c0 \uacbd\uc6b0\uc5d0 \ub2e4 \uc778\ud130\ub7fd\ud2b8 \uac78\ub9bc) \uc608\uc678(Exception) zero divide Exception\uc758 ISR(Interrupt Service Routine) \uc2e4\ud589 \uc911\uc5d0\ub294 \ub2e4\ub978 interrupt\uac00 \uac78\ub9ac\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \ud0a4\ubcf4\ub4dc \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \ucf54\ub4dc kernel.asmsrc\\kernel.asm % include \"init.inc\" [org 0x010000] [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx lea esp, [PM_Start] mov edi, 0 lea esi, [msgPMode] call printf cld mov ax, SysDataSelector mov es, ax xor eax, eax xor ecx, ecx mov ax, 256 ; IDT \uc601\uc5ed\uc5d0 256\uac1c\uc758 \ube48 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. mov edi, 0 loop_idt: lea esi, [idt_ignore] mov cx, 8 ; \ub514\uc2a4\ud06c\ub9bd\ud130 \ud558\ub098\ub294 8\ubc14\uc774\ud2b8\uc785\ub2c8\ub2e4. rep movsb dec ax jnz loop_idt mov edi, 8*0x20 ; \ud0c0\uc774\uba38 IDT \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. lea esi, [idt_timer] mov cx, 8 rep movsb mov edi, 8*0x21 ; \ud0a4\ubcf4\ub4dc IDT \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. lea esi, [idt_keyboard] mov cx, 8 rep movsb lidt [idtr] mov al, 0xFC ; \ub9c9\uc544\ub450\uc5c8\ub358 \uc778\ud130\ub7fd\ud2b8 \uc911 out 0x21, al ; \ud0c0\uc774\uba38\uc640 \ud0a4\ubcf4\ub4dc\ub9cc \ub2e4\uc2dc \uc720\ud6a8\ud558\uac8c \ud569\ub2c8\ub2e4. sti jmp $ printf: push eax push es mov ax, VideoSelector mov es, ax printf_loop: mov al, byte [esi] mov byte [es:edi], al inc edi mov byte [es:edi], 0x06 inc esi inc edi or al, al jz printf_end jmp printf_loop printf_end: pop es pop eas ret msgPMode db \"We are in Protected Mode\", 0 msg_isr_ignore db \"This is an ignorable intterrupt\", 0 msg_isr_32_timer db \".This is the timer interrupt.\", 0 msg_isr_33_keyboard db \".This is the keyboard interrupt\", 0 idtr: dw 256*8-1 ; IDT\uc758 limit dd 0 ; IDT\uc758 Base Address isr_ignore: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*7*2) lea esi, [msg_isr_ignore] call printf popfd popad pop ds pop es pop fs pop gs iret isr_32_timer: push gs push fs push es push ds pushad pushfd moval, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*2*2) lea esi, [msg_isr_32_timer] call printf inc byte [msg_isr_32_timer] popfd popad pop ds pop es pop fs pop gs iret isr_33_keyboard: pushad push gs push fs push es push ds pushfd in al, 0x60 mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov esi, [msg_isr_33_keyboard] call printf inc byte [msg_isr_33_keyboard] popfd pop ds pop es pop fs pop gs popad iret ;*************************************** ;************** IDT ******************** ;*************************************** idt_ignore: dw isr_ignore dw 0x08 db 0 db 0x8E dw 0x0001 idt_timer: dw isr_32_timer dw 0x08 db 0 db 0x8E dw 0x0001 idt_keyboard: dw isr_33_keyboard dw 0x08 db 0 db 0x8E dw 0x0001 times 512-($-$$) db 0 \uc124\uba85 \ud0a4\ubcf4\ub4dc \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \uad6c\ud604\uc744 \uc704\ud574\uc11c\ub3c4 IDT\uc5d0 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud574\uc57c \ud569\ub2c8\ub2e4. 1 2 3 4 mov edi, 8*0x21 lea esi, [idt_keyboard] mov cx, 8 rep movsb idt_keyboard\ub294 \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \ud3ec\uc778\ud130\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 idt_keyboard: dw isr_33_keyboard dw 0x08 db 0 db 0x8E dw 0x0001 \uc5ec\uae30\uc11c\ub3c4 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\uac00 \uc788\ub294 \uc8fc\uc18c\ub294 0x010000+isr_33_keyboard\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 isr_33_keyboard: pushad push gs push fs push es push ds pushfd in al, 0x60 mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*4*2) lea esi, [msg_isr_33_keyboard] call printf inc byte [msg_isr_33_keyboard] popfd pop ds pop es pop fs pop gs popad iret isr_33_keyboard \ub8e8\ud2f4\uc5d0\uc11c\ub294 \ud0a4\ubcf4\ub4dc\uc5d0\uc11c \uc5b4\ub5a4 \ud0a4\uac00 \ub20c\ub838\ub294\uc9c0\ub97c \uc54c\uc544\uc57c \ud558\ubbc0\ub85c, in al, 0x60 \uba85\ub839\uc73c\ub85c \ud0a4\ubcf4\ub4dc \ubc84\ud37c\uc5d0 \uc788\ub294 \ubb38\uc790 \uc2a4\uce94\ucf54\ub4dc\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. \uc774 \uc2a4\uce94\ucf54\ub4dc\ub294 \uc544\uc2a4\ud0a4\ucf54\ub4dc\uc640\ub294 \ub2e4\ub985\ub2c8\ub2e4.\uadf8\ub9ac\uace0 \ubc84\ud37c\uc5d0\uc11c \ubb38\uc790\ub97c \uac00\uc838\uc624\uc9c0 \uc54a\uc73c\uba74 \ud0a4\ubcf4\ub4dc\uc5d0\uc11c \ub2e4\uc74c \uc778\ud130\ub7fd\ud2b8\ub294 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc774 \uc18c\uc2a4\uc5d0\uc11c\ub294 \uc77c\ub2e8 \uac00\uc838\uc624\ub294 \ud589\ub3d9\ub9cc \ud569\ub2c8\ub2e4. \uadf8 \ud6c4 PIC\ub97c \ub9ac\uc14b\ud569\ub2c8\ub2e4. \uc608\uc678(Exception) \ucf54\ub4dc \uc608\uc678\ub294 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc744 \ub54c CPU\uc5d0\uc11c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \uc778\ud130\ub7fd\ud2b8 \uc758 \ud55c \uc885\ub958\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc2e4\uc81c\ub85c \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 page faults \ucc98\ub7fc \uc624\ub958\uac00 \uc544\ub2d9\ub2c8\ub2e4. Exception\uc758 \uc885\ub958 Faults: \uc774 Exception\uc740 \uace0\uccd0\uc9c8 \uc218 \uc788\uace0, \ud504\ub85c\uadf8\ub7a8\uc740 \uc544\ub9c8\ub3c4 \uc544\ubb34 \uc77c\ub3c4 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc558\uc73c\uba74 \uacc4\uc18d \uc2e4\ud589\ub420 \uac81\ub2c8\ub2e4. Traps: Trap\uc740 trapping instruction\uc774 \uc2e4\ud589\ub41c \uc774\ud6c4\uc5d0 \ubc14\ub85c \ubcf4\uace0\ub429\ub2c8\ub2e4. Aborts: \uc2ec\uac01\ud55c \ud68c\ubcf5 \ubd88\uac00\ub2a5\ud55c \uc5d0\ub7ec\uc785\ub2c8\ub2e4. Protected Mode\uc5d0\uc11c \uc608\uc678\ub3c4 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8, \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\uc640 \ud568\uaed8 \uac19\uc740 IDT\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. 0\ubc88 ~ 19\ubc88\uae4c\uc9c0\uc758 \uc778\ud130\ub7fd\ud2b8\ub294 \uc608\uc678 \ucc98\ub9ac\ub97c \uc704\ud574 \ud560\ub2f9\ub418\uc5b4 \uc788\uc73c\uba70, 20\ubc88\uc5d0\uc11c 31\ubc88\uae4c\uc9c0\ub294 intel\uc5d0\uc11c \uc608\uc57d\ud574 \ub454 \uc778\ud130\ub7fd\ud2b8\uc785\ub2c8\ub2e4. 32 ~ 255\uae4c\uc9c0\uc758 \uc8fc\uc18c\ub294 \uc720\uc800 \uc815\uc758 \uc778\ud130\ub7fd\ud2b8\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc804\uccb4 \uc608\uc678 \uc885\ub958(https://wiki.osdev.org/Exceptions#FPU_Error_Interrupt) Name Vector nr. Type Mnemonic Error code? Divide-by-zero Error 0 (0x0) Fault #DE No Debug 1 (0x1) Fault/Trap #DB No Non-maskable Interrupt 2 (0x2) Interrupt - No Breakpoint 3 (0x3) Trap #BP No Overflow 4 (0x4) Trap #OF No Bound Range Exceeded 5 (0x5) Fault #BR No Invalid Opcode 6 (0x6) Fault #UD No Device Not Available 7 (0x7) Fault #NM No Double Fault 8 (0x8) Abort #DF Yes (Zero) ~~ Coprocessor Segment Overrun ~~ 9 (0x9) Fault - No Invalid TSS 10 (0xA) Fault #TS Yes Segment Not Present 11 (0xB) Fault #NP Yes Stack-Segment Fault 12 (0xC) Fault #SS Yes General Protection Fault 13 (0xD) Fault #GP Yes Page Fault 14 (0xE) Fault #PF Yes Reserved 15 (0xF) - - No x87 Floating-Point Exception 16 (0x10) Fault #MF No Alignment Check 17 (0x11) Fault #AC Yes Machine Check 18 (0x12) Abort #MC No SIMD Floating-Point Exception 19 (0x13) Fault #XM/#XF No Virtualization Exception 20 (0x14) Fault #VE No Reserved 21-29 (0x15-0x1D) - - No Security Exception 30 (0x1E) - #SX Yes Reserved 31 (0x1F) - - No Triple Fault - - - No ~~ FPU Error Interrupt ~~ IRQ 13 Interrupt #FERR No \ud754\ud558\uac8c \ub9ac\ub205\uc2a4\uc5d0\uc11c \ubd24\ub358 segmentation fault \ub294 0x0D\ubc88\uc5d0 \ud574\ub2f9\ud558\ub294 general protection fault\uc5d0 \ud574\ub2f9\ud569\ub2c8\ub2e4. segmentation fault \ub610\ub294 access violation\uc740 \ud558\ub4dc\uc6e8\uc5b4\uc758 memory protection\uc5d0 \uc758\ud574\uc11c \uc77c\uc5b4\ub098\ub294 fault\uc785\ub2c8\ub2e4. \ud558\ub4dc\uc6e8\uc5b4\ub294 OS\uc5d0 \uba54\ubaa8\ub9ac\uc5d0 \uc811\uadfc \uc704\ubc18\uc774 \ubc1c\uc0dd\ud588\ub2e4\uace0 \uc54c\ub824\uc90d\ub2c8\ub2e4. x86 computer\uc5d0\uc11c\ub294 general protection fault\uc758 \ud558\ub098\uc758 \ud615\ud0dc\uc785\ub2c8\ub2e4. (https://en.wikipedia.org/wiki/Segmentation_fault) general Protection Fault general Protection Fault\ub294 \ub2e4\uc591\ud55c \uc774\uc720\ub85c \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac00\uc7a5 \ud754\ud55c \uac83\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Segment error (privilege, type, limit, read/write rights). Executing a privileged instruction while CPL != 0. Writing a 1 in a reserved register field or writing invalid value combinations (e.g. CR0 with PE=0 and PG=1). Referencing or accessing a null-descriptor. (https://wiki.osdev.org/Exceptions#Stack-Segment_Fault) Legacy Exceptions FPU Error Interrupt \uc608\uc804\uc5d0\ub294 FPU(Floating Point Unit)\uc740 \ubcc4\ub3c4\uc758 \uce69\uc73c\ub85c \uc874\uc7ac\ud588\uace0, \uadf8 \uce69\uc5d0\uc11c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uba74 CPU\ub85c \uc624\ub958\ub97c \uc54c\ub824\uc92c\uc5b4\uc57c \ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 IRQ 13\ubc88\uc744 \uc0ac\uc6a9\ud588\uc5c8\ub294\ub370, 486\ubd80\ud130\ub294 embedded \ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 \ub354\uc774\uc0c1 IRQ 13\ubc88\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud638\ud658\uc131\uc744 \uc704\ud574\uc11c\ub9cc \uc874\uc7ac\ud569\ub2c8\ub2e4. Coprocessor Segment Overrun FPU\uac00 processor\uc758 \uc678\ubd80\uc5d0 \uc788\uc744 \ub54c, segment\uc5d0\uc11c \uc624\ub958\uac00 \ub0ac\ub294\uc9c0 \ud655\uc778\uc744 \ud588\uc5b4\uc57c \ud588\uc2b5\ub2c8\ub2e4. 486\ubd80\ud130\ub294 GPF(General Protection Fault) IRQ\uc5d0\uc11c \ucc98\ub9ac\ub97c \ud569\ub2c8\ub2e4. IRQ \ubc88\ud638 \ub9ac\ub9e4\ud551 \uc778\ud130\ub7fd\ud2b8 0\ubc88\ubd80\ud130 31\ubc88\uae4c\uc9c0 \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ub420 \uc9c0 \uc815\ud574\uc838 \uc788\uae30 \ub54c\ubb38\uc5d0, 32\ubc88\ubd80\ud130 255\ubc88 \uae4c\uc9c0 \uc4f8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d PIC\ub97c \ud504\ub85c\uadf8\ub798\ubc0d \ud558\uc9c0 \uc54a\uc558\ub2e4\uba74 IRQ\ub294 0\ubc88\ubd80\ud130 \uc2dc\uc791\ud569\ub2c8\ub2e4. 0\uc9f8 IDT \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc38\uc870\ud574\uc11c \ud574\ub2f9 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub97c \uc2e4\ud589\ud558\uac8c \ub418\ub294\ub370, \ud578\ub4e4\ub7ec \uc785\uc7a5\uc5d0\uc11c\ub294 \uc774\uac83\uc774 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\uc778\uc9c0, \uc608\uc678\uac00 \ubc1c\uc0dd\ud55c \uac83\uc778\uc9c0\ub97c \ubaa8\ub974\uac8c \ub429\ub2c8\ub2e4. \uc560\ucd08\uc5d0 CPU\uc5d0 \uc9c0\uc815\ub41c \uc608\uc678\uc640 PC \uba54\uc778\ubcf4\ub4dc\uc5d0 PIC\uac00 \uc5f0\uacb0\ub41c \ubc29\ubc95\uc774 \ucda9\ub3cc\ub098\ub3c4\ub85d \ub514\uc790\uc778 \ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c PIC\uc5d0\uc11c IRQ \ubc88\ud638\ub97c \ub9ac\ub9e4\ud551 \ud574\uc8fc\ub294 \uc791\uc5c5\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. Exception \ucf54\ub4dc src\\boot.asm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ; src/boot.asm ; ...\uc0dd\ub7b5... read: mov ax, 0x1000 ; ES:BX = 1000:0000 mov es, ax mov bx, 0 mov ah, 2 ; \ub514\uc2a4\ud06c\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c es:bx \uc8fc\uc18c\ub85c mov al, 2 ; 2\uc139\ud130\ub97c \uc77d\uc744 \uac83\uc774\ub77c\uace0 \uc54c\ub9bc mov ch, 0 ; 0\ubc88\uc9f8 \uc2e4\ub9b0\ub354 mov cl, 2 ; 2\ubc88\uc9f8 \uc139\ud130\ubd80\ud130 \uc77d\uae30 \uc2dc\uc791\ud569\ub2c8\ub2e4. mov dh, 0 ; Head=0 mov dl, 0 ; Drive=0, A: \ub4dc\ub77c\uc774\ube0c int 13h ; ...\uc0dd\ub7b5... src\\kernel.asminclude \"src/init.inc\" [org 0x010000] [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx lea esp, [PM_Start] mov edi, 0 lea esi, [msgPMode] call printf cld mov ax, SysDataSelector mov es, ax xor eax, eax xor ecx, ecx mov ax, 256 ; IDT \uc601\uc5ed\uc5d0 256\uac1c\uc758 mov edi, 0 ; \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud55c\ub2e4. loop_idt: lea esi, [idt_ignore] mov cx, 8 ; \ub514\uc2a4\ud06c\ub9bd\ud130 \ud558\ub098\ub294 8\ubc14\uc774\ud2b8\uc785\ub2c8\ub2e4. rep movsb dec ax jnz loop_idt mov edi, 0 lea esi, [idt_zero_divide] mov cx, 8 ; \ub514\uc2a4\ud06c\ub9bd\ud130 \ud558\ub098\ub294 8\ubc14\uc774\ud2b8\uc785\ub2c8\ub2e4. rep movsb mov edi, 8*0x20 lea esi, [idt_timer] mov cx, 8 rep movsb mov edi, 8*0x21 lea esi, [idt_keyboard] mov cx, 8 rep movsb lidt [idtr] mov al, 0xFC ; \ub9c9\uc544\ub450\uc5c8\ub358 \uc778\ud130\ub7fd\ud2b8 \uc911 out 0x21, al ; \ud0c0\uc774\uba38\uc640 \ud0a4\ubcf4\ub4dc\ub9cc \ub2e4\uc2dc \uc720\ud6a8\ud558\uac8c \ud569\ub2c8\ub2e4. sti mov edx, 0 mov eax, 0x0100 mov ebx, 0 div ebx jmp $ ;***************************** ;********** Subroutines ****** ;***************************** printf: push eax push es mov ax, VideoSelector mov es, ax printf_loop: mov al, byte [esi] mov byte [es:edi], al inc edi mov byte [es:edi], 0x06 inc esi inc edi or al, al jz printf_end jmp printf_loop printf_end: pop es pop eax ret ;********************************* ;*********** Data Area *********** ;********************************* msgPMode db \"We are in Protected Mode\", 0 msg_isr_ignore db \"This is an ignorable inturrupt\", 0 msg_isr_zero_divide db \"Zero Divide Exception\", 0 msg_isr_32_timer db \".This is the timer inturrupt\", 0 msg_isr_33_keyboard db \".This is the keyboard interrupt\", 0 idtr: dw 256*8 - 1 ; IDT\uc758 Limit dd 0 ; IDT\uc758 Base Address ;********************************* ;*** Interrupt Service Routines ** ;********************************* isr_ignore: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*7*2) lea esi, [msg_isr_ignore] call printf popfd popad pop ds pop es pop fs pop gs iret isr_zero_divide: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*6*2) lea esi, [msg_isr_zero_divide] call printf jmp $ popfd popad pop ds pop es pop fs pop gs iret isr_32_timer: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*2*2) lea esi, [msg_isr_32_timer] call printf inc byte [msg_isr_32_timer] popfd popad pop ds pop es pop fs pop gs iret isr_33_keyboard: pushad push gs push fs push es push ds pushfd in al, 0x60 mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*4*2) lea esi, [msg_isr_33_keyboard] call printf inc byte [msg_isr_33_keyboard] popfd pop ds pop es pop fs pop gs popad iret ;********************************* ;************* IDT *************** ;********************************* idt_ignore: dw isr_ignore dw SysCodeSelector db 0 db 0x8E dw 0x0001 idt_zero_divide: dw isr_zero_divide dw 0x08 db 0 db 0x8E dw 0x0001 idt_timer: dw isr_32_timer dw 0x08 db 0 db 0x8E dw 0x0001 idt_keyboard: dw isr_33_keyboard dw 0x08 db 0 db 0x8E dw 0x0001 times 1024 - ($-$$) db 0 \ucd1d \uc138 \ubd80\ubd84\uc744 keyboard_interrupt \ucf54\ub4dc\uc5d0\uc11c \uace0\ucce4\uc2b5\ub2c8\ub2e4. (\ucd94\uac00\uc801\uc73c\ub85c, kernel\ub3c4 512\ubc14\uc774\ud2b8\ub97c \ucd08\uacfc\ud588\uae30 \ub54c\ubb38\uc5d0 2 \uc139\ud130\ub97c \uc77d\uc5b4\uc624\ub3c4\ub85d \ubcc0\uacbd\ud588\uc2b5\ub2c8\ub2e4.) IDT Descriptor\uc5d0 idt_zero_divide \ucd94\uac00 1 2 3 4 5 6 idt_zero_divide: dw isr_zero_divide dw 0x08 db 0 db 0x8E dw 0x0001 idt_zero_divide IDT descriptor\ub97c lidt \ud560 \ub54c \ub4f1\ub85d 1 2 3 4 mov edi, 0 lea esi, [idt_zero_divide] mov cx, 8 ; \ub514\uc2a4\ud06c\ub9bd\ud130 \ud558\ub098\ub294 8\ubc14\uc774\ud2b8\uc785\ub2c8\ub2e4. rep movsb ISR \ub8e8\ud2f4\uc5d0 isr_zero_divide \ucd94\uac00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 isr_zero_divide: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*6*2) lea esi, [msg_isr_zero_divide] call printf jmp $ popfd popad pop ds pop es pop fs pop gs iret jmp $\ub85c \uadf8 \uc790\ub9ac\uc5d0\uc11c \ubb34\ud55c\ub8e8\ud504\ub97c \ub3cc\ub3c4\ub85d \ud588\uc2b5\ub2c8\ub2e4. 0 / 0 \uc5f0\uc0b0\uc744 \ud574\uc11c, \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \ubd80\ubd84 1 2 3 4 5 6 mov edx, 0 mov eax, 0x0100 mov ebx, 0 div ebx jmp $ 0x100\uc744 0\uc73c\ub85c \ub098\ub204\ub294 \uac83\uc744 \uc2dc\ub3c4\ud569\ub2c8\ub2e4. \uc774 \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\uc2dc\ud0a4\uba74 \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub3c4, \ud0a4\ubcf4\ub4dc \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub3c4 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uc720\ub294 PIC\uc758 \ub9c8\uc2a4\ud06c\ub97c \ud574\uc81c\ud558\uace0 \ubc14\ub85c 0x100 \uc744 0\uc73c\ub85c \ub098\ub204\uae30\ub97c \uc2dc\ub3c4\ud574\uc11c \uc608\uc678\uac00 \ubc1c\uc0dd\ud588\uace0, isr_zero_divide \ud578\ub4e4\ub7ec\uc5d0\uc11c iret \ud558\uc9c0 \uc54a\uace0 jmp $\ub85c \uadf8 \uc790\ub9ac\uc5d0\uc11c \ubb34\ud55c\ub8e8\ud504\ub97c \ub3cc\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc54c\uac8c\ub41c \uc810 PIC\uc758 \ube44\ud2b8\ub9c8\uc2a4\ud06c \uc124\uc815\uc73c\ub85c, interrupt \ubcc4\ub85c enable/disable \uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\ub098\uc758 interrupt\ub85c \ub4e4\uc5b4\uac14\uc744 \ub54c, iret\uc744 \ud558\uc9c0 \uc54a\uc73c\uba74 \ub2e4\uc74c \uc778\ud130\ub7fd\ud2b8\ub85c \ub118\uc5b4\uac00\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"day11: interrupt/exception \ub9c8\ubb34\ub9ac"},{"location":"os-making/11/#day11-exception","text":"","title":"day11: \ud0a4\ubcf4\ub4dc \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec, exception"},{"location":"os-making/11/#_1","text":"keyboard \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec - \uc544\ubb34 \ud0a4\ub098 \ub204\ub974\uba74 \ud0a4\ubcf4\ub4dc \uc778\ud130\ub7fd\ud2b8 \ub77c\ub294 \ubb38\uad6c\uac00 \ub738(key down, key up \ub450 \uac00\uc9c0 \uacbd\uc6b0\uc5d0 \ub2e4 \uc778\ud130\ub7fd\ud2b8 \uac78\ub9bc) \uc608\uc678(Exception) zero divide Exception\uc758 ISR(Interrupt Service Routine) \uc2e4\ud589 \uc911\uc5d0\ub294 \ub2e4\ub978 interrupt\uac00 \uac78\ub9ac\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4.","title":"\uc624\ub298\uc758 \uacb0\uacfc\ubb3c"},{"location":"os-making/11/#_2","text":"kernel.asm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 ; src\\kernel.asm % include \"init.inc\" [org 0x010000] [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx lea esp, [PM_Start] mov edi, 0 lea esi, [msgPMode] call printf cld mov ax, SysDataSelector mov es, ax xor eax, eax xor ecx, ecx mov ax, 256 ; IDT \uc601\uc5ed\uc5d0 256\uac1c\uc758 \ube48 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. mov edi, 0 loop_idt: lea esi, [idt_ignore] mov cx, 8 ; \ub514\uc2a4\ud06c\ub9bd\ud130 \ud558\ub098\ub294 8\ubc14\uc774\ud2b8\uc785\ub2c8\ub2e4. rep movsb dec ax jnz loop_idt mov edi, 8*0x20 ; \ud0c0\uc774\uba38 IDT \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. lea esi, [idt_timer] mov cx, 8 rep movsb mov edi, 8*0x21 ; \ud0a4\ubcf4\ub4dc IDT \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud569\ub2c8\ub2e4. lea esi, [idt_keyboard] mov cx, 8 rep movsb lidt [idtr] mov al, 0xFC ; \ub9c9\uc544\ub450\uc5c8\ub358 \uc778\ud130\ub7fd\ud2b8 \uc911 out 0x21, al ; \ud0c0\uc774\uba38\uc640 \ud0a4\ubcf4\ub4dc\ub9cc \ub2e4\uc2dc \uc720\ud6a8\ud558\uac8c \ud569\ub2c8\ub2e4. sti jmp $ printf: push eax push es mov ax, VideoSelector mov es, ax printf_loop: mov al, byte [esi] mov byte [es:edi], al inc edi mov byte [es:edi], 0x06 inc esi inc edi or al, al jz printf_end jmp printf_loop printf_end: pop es pop eas ret msgPMode db \"We are in Protected Mode\", 0 msg_isr_ignore db \"This is an ignorable intterrupt\", 0 msg_isr_32_timer db \".This is the timer interrupt.\", 0 msg_isr_33_keyboard db \".This is the keyboard interrupt\", 0 idtr: dw 256*8-1 ; IDT\uc758 limit dd 0 ; IDT\uc758 Base Address isr_ignore: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*7*2) lea esi, [msg_isr_ignore] call printf popfd popad pop ds pop es pop fs pop gs iret isr_32_timer: push gs push fs push es push ds pushad pushfd moval, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*2*2) lea esi, [msg_isr_32_timer] call printf inc byte [msg_isr_32_timer] popfd popad pop ds pop es pop fs pop gs iret isr_33_keyboard: pushad push gs push fs push es push ds pushfd in al, 0x60 mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov esi, [msg_isr_33_keyboard] call printf inc byte [msg_isr_33_keyboard] popfd pop ds pop es pop fs pop gs popad iret ;*************************************** ;************** IDT ******************** ;*************************************** idt_ignore: dw isr_ignore dw 0x08 db 0 db 0x8E dw 0x0001 idt_timer: dw isr_32_timer dw 0x08 db 0 db 0x8E dw 0x0001 idt_keyboard: dw isr_33_keyboard dw 0x08 db 0 db 0x8E dw 0x0001 times 512-($-$$) db 0","title":"\ud0a4\ubcf4\ub4dc \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \ucf54\ub4dc"},{"location":"os-making/11/#_3","text":"\ud0a4\ubcf4\ub4dc \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \uad6c\ud604\uc744 \uc704\ud574\uc11c\ub3c4 IDT\uc5d0 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud574\uc57c \ud569\ub2c8\ub2e4. 1 2 3 4 mov edi, 8*0x21 lea esi, [idt_keyboard] mov cx, 8 rep movsb idt_keyboard\ub294 \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \ud3ec\uc778\ud130\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 idt_keyboard: dw isr_33_keyboard dw 0x08 db 0 db 0x8E dw 0x0001 \uc5ec\uae30\uc11c\ub3c4 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\uac00 \uc788\ub294 \uc8fc\uc18c\ub294 0x010000+isr_33_keyboard\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 isr_33_keyboard: pushad push gs push fs push es push ds pushfd in al, 0x60 mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*4*2) lea esi, [msg_isr_33_keyboard] call printf inc byte [msg_isr_33_keyboard] popfd pop ds pop es pop fs pop gs popad iret isr_33_keyboard \ub8e8\ud2f4\uc5d0\uc11c\ub294 \ud0a4\ubcf4\ub4dc\uc5d0\uc11c \uc5b4\ub5a4 \ud0a4\uac00 \ub20c\ub838\ub294\uc9c0\ub97c \uc54c\uc544\uc57c \ud558\ubbc0\ub85c, in al, 0x60 \uba85\ub839\uc73c\ub85c \ud0a4\ubcf4\ub4dc \ubc84\ud37c\uc5d0 \uc788\ub294 \ubb38\uc790 \uc2a4\uce94\ucf54\ub4dc\ub97c \uac00\uc838\uc635\ub2c8\ub2e4. \uc774 \uc2a4\uce94\ucf54\ub4dc\ub294 \uc544\uc2a4\ud0a4\ucf54\ub4dc\uc640\ub294 \ub2e4\ub985\ub2c8\ub2e4.\uadf8\ub9ac\uace0 \ubc84\ud37c\uc5d0\uc11c \ubb38\uc790\ub97c \uac00\uc838\uc624\uc9c0 \uc54a\uc73c\uba74 \ud0a4\ubcf4\ub4dc\uc5d0\uc11c \ub2e4\uc74c \uc778\ud130\ub7fd\ud2b8\ub294 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc774 \uc18c\uc2a4\uc5d0\uc11c\ub294 \uc77c\ub2e8 \uac00\uc838\uc624\ub294 \ud589\ub3d9\ub9cc \ud569\ub2c8\ub2e4. \uadf8 \ud6c4 PIC\ub97c \ub9ac\uc14b\ud569\ub2c8\ub2e4.","title":"\uc124\uba85"},{"location":"os-making/11/#exception","text":"\uc608\uc678\ub294 \uc624\ub958\uac00 \ubc1c\uc0dd\ud588\uc744 \ub54c CPU\uc5d0\uc11c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \uc778\ud130\ub7fd\ud2b8 \uc758 \ud55c \uc885\ub958\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc2e4\uc81c\ub85c \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0\uc5d0 page faults \ucc98\ub7fc \uc624\ub958\uac00 \uc544\ub2d9\ub2c8\ub2e4.","title":"\uc608\uc678(Exception) \ucf54\ub4dc"},{"location":"os-making/11/#exception_1","text":"Faults: \uc774 Exception\uc740 \uace0\uccd0\uc9c8 \uc218 \uc788\uace0, \ud504\ub85c\uadf8\ub7a8\uc740 \uc544\ub9c8\ub3c4 \uc544\ubb34 \uc77c\ub3c4 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc558\uc73c\uba74 \uacc4\uc18d \uc2e4\ud589\ub420 \uac81\ub2c8\ub2e4. Traps: Trap\uc740 trapping instruction\uc774 \uc2e4\ud589\ub41c \uc774\ud6c4\uc5d0 \ubc14\ub85c \ubcf4\uace0\ub429\ub2c8\ub2e4. Aborts: \uc2ec\uac01\ud55c \ud68c\ubcf5 \ubd88\uac00\ub2a5\ud55c \uc5d0\ub7ec\uc785\ub2c8\ub2e4. Protected Mode\uc5d0\uc11c \uc608\uc678\ub3c4 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8, \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\uc640 \ud568\uaed8 \uac19\uc740 IDT\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. 0\ubc88 ~ 19\ubc88\uae4c\uc9c0\uc758 \uc778\ud130\ub7fd\ud2b8\ub294 \uc608\uc678 \ucc98\ub9ac\ub97c \uc704\ud574 \ud560\ub2f9\ub418\uc5b4 \uc788\uc73c\uba70, 20\ubc88\uc5d0\uc11c 31\ubc88\uae4c\uc9c0\ub294 intel\uc5d0\uc11c \uc608\uc57d\ud574 \ub454 \uc778\ud130\ub7fd\ud2b8\uc785\ub2c8\ub2e4. 32 ~ 255\uae4c\uc9c0\uc758 \uc8fc\uc18c\ub294 \uc720\uc800 \uc815\uc758 \uc778\ud130\ub7fd\ud2b8\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc804\uccb4 \uc608\uc678 \uc885\ub958(https://wiki.osdev.org/Exceptions#FPU_Error_Interrupt) Name Vector nr. Type Mnemonic Error code? Divide-by-zero Error 0 (0x0) Fault #DE No Debug 1 (0x1) Fault/Trap #DB No Non-maskable Interrupt 2 (0x2) Interrupt - No Breakpoint 3 (0x3) Trap #BP No Overflow 4 (0x4) Trap #OF No Bound Range Exceeded 5 (0x5) Fault #BR No Invalid Opcode 6 (0x6) Fault #UD No Device Not Available 7 (0x7) Fault #NM No Double Fault 8 (0x8) Abort #DF Yes (Zero) ~~ Coprocessor Segment Overrun ~~ 9 (0x9) Fault - No Invalid TSS 10 (0xA) Fault #TS Yes Segment Not Present 11 (0xB) Fault #NP Yes Stack-Segment Fault 12 (0xC) Fault #SS Yes General Protection Fault 13 (0xD) Fault #GP Yes Page Fault 14 (0xE) Fault #PF Yes Reserved 15 (0xF) - - No x87 Floating-Point Exception 16 (0x10) Fault #MF No Alignment Check 17 (0x11) Fault #AC Yes Machine Check 18 (0x12) Abort #MC No SIMD Floating-Point Exception 19 (0x13) Fault #XM/#XF No Virtualization Exception 20 (0x14) Fault #VE No Reserved 21-29 (0x15-0x1D) - - No Security Exception 30 (0x1E) - #SX Yes Reserved 31 (0x1F) - - No Triple Fault - - - No ~~ FPU Error Interrupt ~~ IRQ 13 Interrupt #FERR No \ud754\ud558\uac8c \ub9ac\ub205\uc2a4\uc5d0\uc11c \ubd24\ub358 segmentation fault \ub294 0x0D\ubc88\uc5d0 \ud574\ub2f9\ud558\ub294 general protection fault\uc5d0 \ud574\ub2f9\ud569\ub2c8\ub2e4. segmentation fault \ub610\ub294 access violation\uc740 \ud558\ub4dc\uc6e8\uc5b4\uc758 memory protection\uc5d0 \uc758\ud574\uc11c \uc77c\uc5b4\ub098\ub294 fault\uc785\ub2c8\ub2e4. \ud558\ub4dc\uc6e8\uc5b4\ub294 OS\uc5d0 \uba54\ubaa8\ub9ac\uc5d0 \uc811\uadfc \uc704\ubc18\uc774 \ubc1c\uc0dd\ud588\ub2e4\uace0 \uc54c\ub824\uc90d\ub2c8\ub2e4. x86 computer\uc5d0\uc11c\ub294 general protection fault\uc758 \ud558\ub098\uc758 \ud615\ud0dc\uc785\ub2c8\ub2e4. (https://en.wikipedia.org/wiki/Segmentation_fault)","title":"Exception\uc758 \uc885\ub958"},{"location":"os-making/11/#general-protection-fault","text":"general Protection Fault\ub294 \ub2e4\uc591\ud55c \uc774\uc720\ub85c \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac00\uc7a5 \ud754\ud55c \uac83\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Segment error (privilege, type, limit, read/write rights). Executing a privileged instruction while CPL != 0. Writing a 1 in a reserved register field or writing invalid value combinations (e.g. CR0 with PE=0 and PG=1). Referencing or accessing a null-descriptor. (https://wiki.osdev.org/Exceptions#Stack-Segment_Fault)","title":"general Protection Fault"},{"location":"os-making/11/#legacy-exceptions","text":"","title":"Legacy Exceptions"},{"location":"os-making/11/#fpu-error-interrupt","text":"\uc608\uc804\uc5d0\ub294 FPU(Floating Point Unit)\uc740 \ubcc4\ub3c4\uc758 \uce69\uc73c\ub85c \uc874\uc7ac\ud588\uace0, \uadf8 \uce69\uc5d0\uc11c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uba74 CPU\ub85c \uc624\ub958\ub97c \uc54c\ub824\uc92c\uc5b4\uc57c \ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 IRQ 13\ubc88\uc744 \uc0ac\uc6a9\ud588\uc5c8\ub294\ub370, 486\ubd80\ud130\ub294 embedded \ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0 \ub354\uc774\uc0c1 IRQ 13\ubc88\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud638\ud658\uc131\uc744 \uc704\ud574\uc11c\ub9cc \uc874\uc7ac\ud569\ub2c8\ub2e4.","title":"FPU Error Interrupt"},{"location":"os-making/11/#coprocessor-segment-overrun","text":"FPU\uac00 processor\uc758 \uc678\ubd80\uc5d0 \uc788\uc744 \ub54c, segment\uc5d0\uc11c \uc624\ub958\uac00 \ub0ac\ub294\uc9c0 \ud655\uc778\uc744 \ud588\uc5b4\uc57c \ud588\uc2b5\ub2c8\ub2e4. 486\ubd80\ud130\ub294 GPF(General Protection Fault) IRQ\uc5d0\uc11c \ucc98\ub9ac\ub97c \ud569\ub2c8\ub2e4.","title":"Coprocessor Segment Overrun"},{"location":"os-making/11/#irq","text":"\uc778\ud130\ub7fd\ud2b8 0\ubc88\ubd80\ud130 31\ubc88\uae4c\uc9c0 \uc5b4\ub5bb\uac8c \uc0ac\uc6a9\ub420 \uc9c0 \uc815\ud574\uc838 \uc788\uae30 \ub54c\ubb38\uc5d0, 32\ubc88\ubd80\ud130 255\ubc88 \uae4c\uc9c0 \uc4f8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub9cc\uc57d PIC\ub97c \ud504\ub85c\uadf8\ub798\ubc0d \ud558\uc9c0 \uc54a\uc558\ub2e4\uba74 IRQ\ub294 0\ubc88\ubd80\ud130 \uc2dc\uc791\ud569\ub2c8\ub2e4. 0\uc9f8 IDT \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc38\uc870\ud574\uc11c \ud574\ub2f9 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub97c \uc2e4\ud589\ud558\uac8c \ub418\ub294\ub370, \ud578\ub4e4\ub7ec \uc785\uc7a5\uc5d0\uc11c\ub294 \uc774\uac83\uc774 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\uc778\uc9c0, \uc608\uc678\uac00 \ubc1c\uc0dd\ud55c \uac83\uc778\uc9c0\ub97c \ubaa8\ub974\uac8c \ub429\ub2c8\ub2e4. \uc560\ucd08\uc5d0 CPU\uc5d0 \uc9c0\uc815\ub41c \uc608\uc678\uc640 PC \uba54\uc778\ubcf4\ub4dc\uc5d0 PIC\uac00 \uc5f0\uacb0\ub41c \ubc29\ubc95\uc774 \ucda9\ub3cc\ub098\ub3c4\ub85d \ub514\uc790\uc778 \ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c PIC\uc5d0\uc11c IRQ \ubc88\ud638\ub97c \ub9ac\ub9e4\ud551 \ud574\uc8fc\ub294 \uc791\uc5c5\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.","title":"IRQ \ubc88\ud638 \ub9ac\ub9e4\ud551"},{"location":"os-making/11/#exception_2","text":"src\\boot.asm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ; src/boot.asm ; ...\uc0dd\ub7b5... read: mov ax, 0x1000 ; ES:BX = 1000:0000 mov es, ax mov bx, 0 mov ah, 2 ; \ub514\uc2a4\ud06c\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c es:bx \uc8fc\uc18c\ub85c mov al, 2 ; 2\uc139\ud130\ub97c \uc77d\uc744 \uac83\uc774\ub77c\uace0 \uc54c\ub9bc mov ch, 0 ; 0\ubc88\uc9f8 \uc2e4\ub9b0\ub354 mov cl, 2 ; 2\ubc88\uc9f8 \uc139\ud130\ubd80\ud130 \uc77d\uae30 \uc2dc\uc791\ud569\ub2c8\ub2e4. mov dh, 0 ; Head=0 mov dl, 0 ; Drive=0, A: \ub4dc\ub77c\uc774\ube0c int 13h ; ...\uc0dd\ub7b5... src\\kernel.asminclude \"src/init.inc\" [org 0x010000] [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx lea esp, [PM_Start] mov edi, 0 lea esi, [msgPMode] call printf cld mov ax, SysDataSelector mov es, ax xor eax, eax xor ecx, ecx mov ax, 256 ; IDT \uc601\uc5ed\uc5d0 256\uac1c\uc758 mov edi, 0 ; \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ubcf5\uc0ac\ud55c\ub2e4. loop_idt: lea esi, [idt_ignore] mov cx, 8 ; \ub514\uc2a4\ud06c\ub9bd\ud130 \ud558\ub098\ub294 8\ubc14\uc774\ud2b8\uc785\ub2c8\ub2e4. rep movsb dec ax jnz loop_idt mov edi, 0 lea esi, [idt_zero_divide] mov cx, 8 ; \ub514\uc2a4\ud06c\ub9bd\ud130 \ud558\ub098\ub294 8\ubc14\uc774\ud2b8\uc785\ub2c8\ub2e4. rep movsb mov edi, 8*0x20 lea esi, [idt_timer] mov cx, 8 rep movsb mov edi, 8*0x21 lea esi, [idt_keyboard] mov cx, 8 rep movsb lidt [idtr] mov al, 0xFC ; \ub9c9\uc544\ub450\uc5c8\ub358 \uc778\ud130\ub7fd\ud2b8 \uc911 out 0x21, al ; \ud0c0\uc774\uba38\uc640 \ud0a4\ubcf4\ub4dc\ub9cc \ub2e4\uc2dc \uc720\ud6a8\ud558\uac8c \ud569\ub2c8\ub2e4. sti mov edx, 0 mov eax, 0x0100 mov ebx, 0 div ebx jmp $ ;***************************** ;********** Subroutines ****** ;***************************** printf: push eax push es mov ax, VideoSelector mov es, ax printf_loop: mov al, byte [esi] mov byte [es:edi], al inc edi mov byte [es:edi], 0x06 inc esi inc edi or al, al jz printf_end jmp printf_loop printf_end: pop es pop eax ret ;********************************* ;*********** Data Area *********** ;********************************* msgPMode db \"We are in Protected Mode\", 0 msg_isr_ignore db \"This is an ignorable inturrupt\", 0 msg_isr_zero_divide db \"Zero Divide Exception\", 0 msg_isr_32_timer db \".This is the timer inturrupt\", 0 msg_isr_33_keyboard db \".This is the keyboard interrupt\", 0 idtr: dw 256*8 - 1 ; IDT\uc758 Limit dd 0 ; IDT\uc758 Base Address ;********************************* ;*** Interrupt Service Routines ** ;********************************* isr_ignore: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*7*2) lea esi, [msg_isr_ignore] call printf popfd popad pop ds pop es pop fs pop gs iret isr_zero_divide: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*6*2) lea esi, [msg_isr_zero_divide] call printf jmp $ popfd popad pop ds pop es pop fs pop gs iret isr_32_timer: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*2*2) lea esi, [msg_isr_32_timer] call printf inc byte [msg_isr_32_timer] popfd popad pop ds pop es pop fs pop gs iret isr_33_keyboard: pushad push gs push fs push es push ds pushfd in al, 0x60 mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*4*2) lea esi, [msg_isr_33_keyboard] call printf inc byte [msg_isr_33_keyboard] popfd pop ds pop es pop fs pop gs popad iret ;********************************* ;************* IDT *************** ;********************************* idt_ignore: dw isr_ignore dw SysCodeSelector db 0 db 0x8E dw 0x0001 idt_zero_divide: dw isr_zero_divide dw 0x08 db 0 db 0x8E dw 0x0001 idt_timer: dw isr_32_timer dw 0x08 db 0 db 0x8E dw 0x0001 idt_keyboard: dw isr_33_keyboard dw 0x08 db 0 db 0x8E dw 0x0001 times 1024 - ($-$$) db 0 \ucd1d \uc138 \ubd80\ubd84\uc744 keyboard_interrupt \ucf54\ub4dc\uc5d0\uc11c \uace0\ucce4\uc2b5\ub2c8\ub2e4. (\ucd94\uac00\uc801\uc73c\ub85c, kernel\ub3c4 512\ubc14\uc774\ud2b8\ub97c \ucd08\uacfc\ud588\uae30 \ub54c\ubb38\uc5d0 2 \uc139\ud130\ub97c \uc77d\uc5b4\uc624\ub3c4\ub85d \ubcc0\uacbd\ud588\uc2b5\ub2c8\ub2e4.) IDT Descriptor\uc5d0 idt_zero_divide \ucd94\uac00 1 2 3 4 5 6 idt_zero_divide: dw isr_zero_divide dw 0x08 db 0 db 0x8E dw 0x0001 idt_zero_divide IDT descriptor\ub97c lidt \ud560 \ub54c \ub4f1\ub85d 1 2 3 4 mov edi, 0 lea esi, [idt_zero_divide] mov cx, 8 ; \ub514\uc2a4\ud06c\ub9bd\ud130 \ud558\ub098\ub294 8\ubc14\uc774\ud2b8\uc785\ub2c8\ub2e4. rep movsb ISR \ub8e8\ud2f4\uc5d0 isr_zero_divide \ucd94\uac00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 isr_zero_divide: push gs push fs push es push ds pushad pushfd mov al, 0x20 out 0x20, al mov ax, VideoSelector mov es, ax mov edi, (80*6*2) lea esi, [msg_isr_zero_divide] call printf jmp $ popfd popad pop ds pop es pop fs pop gs iret jmp $\ub85c \uadf8 \uc790\ub9ac\uc5d0\uc11c \ubb34\ud55c\ub8e8\ud504\ub97c \ub3cc\ub3c4\ub85d \ud588\uc2b5\ub2c8\ub2e4. 0 / 0 \uc5f0\uc0b0\uc744 \ud574\uc11c, \uc778\ud130\ub7fd\ud2b8 \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \ubd80\ubd84 1 2 3 4 5 6 mov edx, 0 mov eax, 0x0100 mov ebx, 0 div ebx jmp $ 0x100\uc744 0\uc73c\ub85c \ub098\ub204\ub294 \uac83\uc744 \uc2dc\ub3c4\ud569\ub2c8\ub2e4. \uc774 \ud504\ub85c\uadf8\ub7a8\uc744 \uc2e4\ud589\uc2dc\ud0a4\uba74 \ud0c0\uc774\uba38 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub3c4, \ud0a4\ubcf4\ub4dc \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub3c4 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uc720\ub294 PIC\uc758 \ub9c8\uc2a4\ud06c\ub97c \ud574\uc81c\ud558\uace0 \ubc14\ub85c 0x100 \uc744 0\uc73c\ub85c \ub098\ub204\uae30\ub97c \uc2dc\ub3c4\ud574\uc11c \uc608\uc678\uac00 \ubc1c\uc0dd\ud588\uace0, isr_zero_divide \ud578\ub4e4\ub7ec\uc5d0\uc11c iret \ud558\uc9c0 \uc54a\uace0 jmp $\ub85c \uadf8 \uc790\ub9ac\uc5d0\uc11c \ubb34\ud55c\ub8e8\ud504\ub97c \ub3cc\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.","title":"Exception \ucf54\ub4dc"},{"location":"os-making/11/#_4","text":"PIC\uc758 \ube44\ud2b8\ub9c8\uc2a4\ud06c \uc124\uc815\uc73c\ub85c, interrupt \ubcc4\ub85c enable/disable \uc2dc\ud0ac \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud558\ub098\uc758 interrupt\ub85c \ub4e4\uc5b4\uac14\uc744 \ub54c, iret\uc744 \ud558\uc9c0 \uc54a\uc73c\uba74 \ub2e4\uc74c \uc778\ud130\ub7fd\ud2b8\ub85c \ub118\uc5b4\uac00\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"\uc54c\uac8c\ub41c \uc810"},{"location":"os-making/12/","text":"day12: task switching \uc624\ub298\uc758 \uacb0\uacfc\ubb3c \uc624\ub298 \ud559\uc2b5 \ub0b4\uc6a9 task switching \ubc29\ubc95\uc5d0\ub294 call\uc73c\ub85c \uc2a4\uc704\uce6d \ud558\ub294 \ubc29\ubc95, jmp\ub85c \uc2a4\uc704\uce6d \ud558\ub294 \ubc29\ubc95 \ub450 \uac00\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc624\ub298\uc740 \ucf54\ub4dc\ub97c \ub530\ub77c \uce58\uba74\uc11c, \uac10\uc744 \uc775\ud614\uace0, \ub2e4\uc74c \uc2dc\uac04\uc5d0 \uc6d0\ub9ac\ub97c \uc774\ud574\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc0c8\ub85c \ubc30\uc6b4 nasm assembly LTR: Load Task Register \ud53c\uc5f0\uc0b0\uc790\ub85c \uc8fc\uc5b4\uc9c0\ub294 segment selector\uc5d0 \uc758\ud574 \uc120\ud0dd\ub41c GDT \ub610\ub294 LDT descriptor\uc758 \uc138\uadf8\uba3c\ud2b8\uc758 base\uc640 limit\uc744 \ucc38\uc870\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uadf8\uac83\ub4e4\uc744 task register\ub85c \uac00\uc838 \uc635\ub2c8\ub2e4. 1 LTR r/m16 ; 0F 00 /3 [286,PRIV] \uc624\ub298\uae4c\uc9c0\uc758 \uc9c4\ub3c4 p. 165","title":"day12: task switching"},{"location":"os-making/12/#day12-task-switching","text":"","title":"day12: task switching"},{"location":"os-making/12/#_1","text":"","title":"\uc624\ub298\uc758 \uacb0\uacfc\ubb3c"},{"location":"os-making/12/#_2","text":"task switching \ubc29\ubc95\uc5d0\ub294 call\uc73c\ub85c \uc2a4\uc704\uce6d \ud558\ub294 \ubc29\ubc95, jmp\ub85c \uc2a4\uc704\uce6d \ud558\ub294 \ubc29\ubc95 \ub450 \uac00\uc9c0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc624\ub298\uc740 \ucf54\ub4dc\ub97c \ub530\ub77c \uce58\uba74\uc11c, \uac10\uc744 \uc775\ud614\uace0, \ub2e4\uc74c \uc2dc\uac04\uc5d0 \uc6d0\ub9ac\ub97c \uc774\ud574\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"\uc624\ub298 \ud559\uc2b5 \ub0b4\uc6a9"},{"location":"os-making/12/#nasm-assembly","text":"LTR: Load Task Register \ud53c\uc5f0\uc0b0\uc790\ub85c \uc8fc\uc5b4\uc9c0\ub294 segment selector\uc5d0 \uc758\ud574 \uc120\ud0dd\ub41c GDT \ub610\ub294 LDT descriptor\uc758 \uc138\uadf8\uba3c\ud2b8\uc758 base\uc640 limit\uc744 \ucc38\uc870\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uadf8\uac83\ub4e4\uc744 task register\ub85c \uac00\uc838 \uc635\ub2c8\ub2e4. 1 LTR r/m16 ; 0F 00 /3 [286,PRIV]","title":"\uc0c8\ub85c \ubc30\uc6b4 nasm assembly"},{"location":"os-making/12/#_3","text":"p. 165","title":"\uc624\ub298\uae4c\uc9c0\uc758 \uc9c4\ub3c4"},{"location":"os-making/13/","text":"day 13: Task Switching\uacfc TSS Intel 80286 \uc774\uc0c1\uc758 CPU \uc5d0\uc11c\ub294 Protected Mode \uc5d0\uc11c\uc758 Task switching\uc744 CPU\ub808\ubca8\uc5d0\uc11c \uc9c0\uc6d0 \ud574 \uc90d\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uba3c\uc800 CPU\uac00 \uc9c0\uc6d0\ud574 \uc8fc\ub294 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud55c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d \ubc29\uc2dd\uc5d0 \ub300\ud574 \ubc30\uc6b0\uace0, \uc774\ud6c4 \ud604\uc7ac OS \ucee4\ub110\ub4e4\uc774 \uad6c\ud604\ud55c \ubc29\uc2dd\uc5d0 \ub530\ub77c CPU\uac00 \uc9c0\uc6d0\ud558\ub294 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc120\uc810\ud615 task switching \ubc29\uc2dd \ud504\ub85c\uadf8\ub7a8\uc774 \uc218\ud589\ub418\ub294 \ub3d9\uc548 \uc5b4\ub5a4 \uc0c1\ud669\uc5d0 \uc788\ub4e0\uc9c0 \uad00\uacc4\uc5c6\uc774 \uadf8 \ud504\ub85c\uadf8\ub7a8\uc744 \uc77c\ub2e8 \uc815\uc9c0\uc2dc\ud0a4\uace0, \ub2e4\ub978 \ud504\ub85c\uadf8\ub7a8\uc774 \uc774\uc804\uc5d0 \uc2e4\ud589\ud588\ub358 \uacf3\ubd80\ud130 \ub2e4\uc2dc \uc2e4\ud589 \ub418\ub3c4\ub85d \ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uad6c\ud604\uc744 \uc704\ud574\uc11c\ub294 CPU\uc5d0\uc11c \uc218\ud589\ub418\ub294 \ud504\ub85c\uadf8\ub7a8\uc758 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 \uc77c\ub2e8 \ubcf4\uc874 \uc2dc\ud0a4\uace0, \uc774\uc804\uc5d0 \uc218\ud589\ub418\uc5c8\ub2e4 \uc800\uc7a5\ub418\uc5c8\ub358 \ud504\ub85c\uadf8\ub7a8\uc758 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130 \uac12\ub4e4\uc744 CPU\uc5d0 \uc62e\uaca8\ub193\uc544, \uba48\ucd94\uc5c8\ub358 \ubd80\ubd84\ubd80\ud130 \ub2e4\uc2dc \uc7ac\uac1c\ud558\ub3c4\ub85d \ud574\uc57c \ud569\ub2c8\ub2e4. task switching\uc744 \uad6c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub294 \uba3c\uc800 RAM\uc0c1\uc5d0 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130 \uac12\ub4e4\uc774 \ubcf4\uc874\ub420 \uc601\uc5ed\uc744 \ub9cc\ub4e4\uc5b4 \ub193\uc544\uc57c \ud569\ub2c8\ub2e4. \uc774 \uc601\uc5ed\uc744 TSS(Task State Segment)\ub77c\uace0 \ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub610 \ud558\ub098 \uc774 TSS\ub97c \uc9c0\uc815\ud558\ub294 TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uac00 GDT\uc5d0 \uc9c0\uc815\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. TSS TSS\ub294 CPU\uc758 \uac70\uc758 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130 \uac12\ub4e4\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\uac8c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. GDTR, IDTR, CR0, CR2 \ub4f1\uc758 \ubaa8\ub4e0 \ud0dc\uc2a4\ud06c\uac00 \uacf5\ud1b5\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \ub808\uc9c0\uc2a4\ud130\ub97c \uc81c\uc678\ud558\uace0, \uac01 \ud0dc\uc2a4\ud06c\uac00 \uc0ac\uc6a9\ud558\ub294 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130\ub97c \ud3ec\ud568\ud558\ub3c4\ub85d \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. TSS\uc758 \uac01 \ubd80\ubd84\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc124\uba85 \uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 back link \uc774\uc804\uc5d0 \ub3d9\uc791\ud558\ub358 \ud504\ub85c\uadf8\ub7a8\uc758 TSS \uc601\uc5ed\uc758 \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130 \uac12\uc774 \ub4e4\uc5b4\uac11\ub2c8\ub2e4. TSS \uc601\uc5ed\uc740 GDT\uc5d0 \uc788\ub294 TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc640 \ud55c \uc30d\uc744 \uc774\ub8f9\ub2c8\ub2e4. JMP \uba85\ub839\uc740 \ud574\ub2f9\ub418\uc9c0 \uc54a\uc73c\ub098, CALL \uba85\ub839\uc73c\ub85c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \ud558\uac8c \ub418\uba74 \ub2e4\uc74c \ud0dc\uc2a4\ud06c\ub294 \uc790\uc2e0\uc758 TSS \uc601\uc5ed\uc5d0 \uc774\uc804 \ud0dc\uc2a4\ud06c\uc774 TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \uc140\ub809\ud130 \uac12\uc744 \uc800\uc7a5\ud574 \ub450\uc5c8\ub2e4\uac00 \uc790\uc2e0\uc740 IRET \uba85\ub839\uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc744 \ub9c8\uce58\uace0, \uadf8\ub7ec\uba74 CPU\ub294 \ud604\uc7ac \ud0dc\uc2a4\ud06c\uc758 TSS\uc601\uc5ed\uc5d0\uc11c \"\uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 back link\" \uac12\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 \uc2a4\uc704\uce6d\uc744 \ud589\ud558\uac8c \ub429\ub2c8\ub2e4. ESP0, SS0 \uc720\uc800 \ubaa8\ub4dc(\ub808\ubca8 3) \ud0dc\uc2a4\ud06c\uac00 \uc2e4\ud589 \uc911 \ucee4\ub110 \ubaa8\ub4dc(\ub808\ubca8 0)\ub85c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc774 \ud589\ud574\uc84c\uc744 \ub54c \uc2a4\ud0dd \uac12\uc774 \ubc14\ub00c\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \uc720\uc800 \ubaa8\ub4dc\uc640 \ucee4\ub110 \ubaa8\ub4dc\uc5d0\uc11c \uc2a4\ud0dd\uc744 \uac19\uc774 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ud504\ub85c\uadf8\ub7a8\uc758 \uc2e4\ud589\uc774 \uc5c9\ud0a4\uae30\ub3c4 \ud560 \ubfd0\ub354\ub7ec \uc720\uc800 \ubaa8\ub4dc\uc5d0\uc11c \ucee4\ub110 \ubaa8\ub4dc\uc758 \ub370\uc774\ud130\ub97c \uc77d\uace0 \uc4f0\ub294 \ud589\uc704\uac00 \uac00\ub2a5\ud574\uc9c0\ubbc0\ub85c \ucee4\ub110\uc758 \ubcf4\uc548 \uae30\ub2a5\uc774 \ub098\ube60\uc9c0\uac8c \ub429\ub2c8\ub2e4. \uadf8\ub798\uc11c TSS \uc601\uc5ed\uc5d0 ESP0, SS0, ESP1, SS1, ESP2, SS2\uc640 \uac19\uc774 CPU\uac00 \uc0ac\uc6a9\ud558\ub294 \uc2dc\uc2a4\ud15c \ub808\ubca8\ubcc4\ub85c \uc2a4\ud0dd\uc774 \ub530\ub85c \uc874\uc7ac\ud558\uac8c \ub429\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc774 \uc911 \ub808\ubca8 0\uc640 \ub808\ubca83\ub9cc\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. ESP3, SS3\uc740 \uc5c6\uc2b5\ub2c8\ub2e4. \uc720\uc800 \ub808\ubca8 \uc2a4\ud0dd\uc740 TSS\uc758 ESP \uce78\uacfc SS \uce78\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. \ub514\ubc84\uadf8\uc6a9 T \ube44\ud2b8 \uc720\uc800 \ub808\ubca8 \ud0dc\uc2a4\ud06c\ub97c \ub514\ubc84\uae45\ud560 \ub54c \ube0c\ub808\uc774\ud06c \ud3ec\uc778\ud2b8\ub97c \uac78\uc5b4\ub450\uace0 \ud55c \uc2a4\ud15d\uc529 \uc9c4\ud589\uc2dc\ucf1c\uac00\uba70 \ud504\ub85c\uadf8\ub7a8\uc758 \ub3d9\uc791\uc744 \ud655\uc778\ud574\uc57c \ud560 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud504\ub85c\uadf8\ub7a8\uc758 \ub514\ubc84\uae45 \uc911\uc5d0\ub3c4 \ub2e4\ub978 \ud504\ub85c\uadf8\ub7a8 \uacfc\uc758 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \ud574\uc57c \ud558\ubbc0\ub85c, \ub514\ubc84\uae45\ud558\uace0 \uc788\ub294 \ud0dc\uc2a4\ud06c\uac00 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\ub418\uae30 \uc804\uc5d0 \uc774 \ud0dc\uc2a4\ud06c\ub294 \ub514\ubc84\uae45 \uc911\uc774\uc5c8\ub2e4\ub294 \ud45c\uc2dc\ub97c \uc774\uacf3 T \ube44\ud2b8\uc5d0 \ud574\ub461\ub2c8\ub2e4. I/O \ud5c8\uac00 \ube44\ud2b8\ub9f5 \uc720\uc800 \ub808\ubca8 \ud0dc\uc2a4\ud06c\ub294 \uc8fc\ubcc0\uc7a5\uce58\ub97c \uc81c\uba4b\ub300\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. I/O \ud5c8\uac00 \ube44\ud2b8\ub9f5\uc774\ub77c\ub294 \uac83\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 I/O \uc7a5\uce58\uc640 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub294 I/O \uc7a5\uce58\ub97c \uad6c\ubd84\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774 \ub610\ud55c RAM\uc758 \ud55c \uc601\uc5ed\uc5d0 \ud45c\uc2dc\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774 \ud45c\uc2dc\ud574 \ub454 \uc601\uc5ed\uc758 \uc2dc\uc791 \uc8fc\uc18c\ub97c TSS\uc758 I/O \ud5c8\uac00 \ube44\ud2b8\ub9f5 \uce78\uc5d0 \ub123\uc5b4\ub461\ub2c8\ub2e4. TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\ub294 TSS\uc640 \ud55c \uc30d\uc744 \uc774\ub8e8\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ub514\uc2a4\ud06c\ub9bd\ud130\ub3c4 GDT\uc5d0 \ub4e4\uc5b4\uac00\uba70, init.inc\uc5d0\uc11c \ubcf4\ub4ef \uc774 TSS \ub514\uc2a4\ud06c\ub9bd\ud130\ub3c4 8\ubc14\uc774\ud2b8\uc774\ubbc0\ub85c \uc140\ub809\ud130 \uac12\uc774 8\uc529 \uac74\ub108\ub6f0\uba70 \uc9c0\uc815\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. Limit\uc774 104(16\uc9c4\uc218 0x68)\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0\uc11c\ub294 \uc774 Limit \uac12\uc774 \ud56d\uc0c1 0x67 \uc774\uc0c1\uc758 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \ud560 \ub54c \ubb34\ud6a8 TSS \uc608\uc678(#TS)\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. 0x68 \uc774\ub77c\uace0 \uc54c\uace0 \uc788\uc73c\uba74 \ubcc4\ub85c \ubb38\uc81c\ub420 \uac83\uc740 \uc5c6\uc2b5\ub2c8\ub2e4. (https://www.intel.la/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.pdf) \uc704\uc758 intel manual\uc744 \ucc38\uace0\ud558\ub2c8, 0x67 \uc774\uc0c1\uc774\uc5b4\uc57c \ud558\ub294 \uc774\uc720\ub294 G\ube44\ud2b8(Granuality bit)\uac00 0\uc77c \ub54c, TSS descriptor\uc758 \uc0ac\uc774\uc988\ubcf4\ub2e4 1 \ubc14\uc774\ud2b8 \uc791\uc740 \uac12\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. 0x68(\ud558\ub098\uc758 TSS)\uc774 \uc77c\ubc18\uc801\uc73c\ub85c \ub418\uba74 \ub418\ub294 \uc774\uc720\ub294 \ud558\ub098\uc758 TSS descriptor\uac00 0x68\ube44\ud2b8\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uc9c4\ub3c4 p. 173\uae4c\uc9c0 \ubd24\uc74c \uad81\uae08\ud55c \uc810 \uc65c TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\ub3c4 GDT(Global Descriptor Table)\uc5d0 \ub123\ub294 \uac70\uc9c0? GDT\ub294 \uac01 \uba54\ubaa8\ub9ac\uc758 \uad8c\ud55c\uacfc \uc601\uc5ed\uc744 \uc9c0\uc815\ud558\ub294 \uacf5\uac04\uc774\uc5c8\ub358 \uac83 \uac19\uc740\ub370..? ltr ax \ub77c\ub294 \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4\ub294 \ubb58\uae4c? => \uc800\ubc88\uc2dc\uac04\uc5d0 load task register \ub77c\ub294 \uba85\ub839\uc5b4\ub97c \ubc30\uc6e0\uc2b5\ub2c8\ub2e4(day 12\ucc38\uc870). \uc774 \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud558\uba74, GDT \ub610\ub294 LDT \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \ub4e4\uc5b4\uc788\ub294 segment base\uc640 limit\uc744 \ucc38\uc870\ud574\uc11c, task register\ub85c \uac00\uc838\uc635\ub2c8\ub2e4.","title":"day13: task switching(2)"},{"location":"os-making/13/#day-13-task-switching-tss","text":"Intel 80286 \uc774\uc0c1\uc758 CPU \uc5d0\uc11c\ub294 Protected Mode \uc5d0\uc11c\uc758 Task switching\uc744 CPU\ub808\ubca8\uc5d0\uc11c \uc9c0\uc6d0 \ud574 \uc90d\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uba3c\uc800 CPU\uac00 \uc9c0\uc6d0\ud574 \uc8fc\ub294 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud55c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d \ubc29\uc2dd\uc5d0 \ub300\ud574 \ubc30\uc6b0\uace0, \uc774\ud6c4 \ud604\uc7ac OS \ucee4\ub110\ub4e4\uc774 \uad6c\ud604\ud55c \ubc29\uc2dd\uc5d0 \ub530\ub77c CPU\uac00 \uc9c0\uc6d0\ud558\ub294 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc120\uc810\ud615 task switching \ubc29\uc2dd \ud504\ub85c\uadf8\ub7a8\uc774 \uc218\ud589\ub418\ub294 \ub3d9\uc548 \uc5b4\ub5a4 \uc0c1\ud669\uc5d0 \uc788\ub4e0\uc9c0 \uad00\uacc4\uc5c6\uc774 \uadf8 \ud504\ub85c\uadf8\ub7a8\uc744 \uc77c\ub2e8 \uc815\uc9c0\uc2dc\ud0a4\uace0, \ub2e4\ub978 \ud504\ub85c\uadf8\ub7a8\uc774 \uc774\uc804\uc5d0 \uc2e4\ud589\ud588\ub358 \uacf3\ubd80\ud130 \ub2e4\uc2dc \uc2e4\ud589 \ub418\ub3c4\ub85d \ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uad6c\ud604\uc744 \uc704\ud574\uc11c\ub294 CPU\uc5d0\uc11c \uc218\ud589\ub418\ub294 \ud504\ub85c\uadf8\ub7a8\uc758 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 \uc77c\ub2e8 \ubcf4\uc874 \uc2dc\ud0a4\uace0, \uc774\uc804\uc5d0 \uc218\ud589\ub418\uc5c8\ub2e4 \uc800\uc7a5\ub418\uc5c8\ub358 \ud504\ub85c\uadf8\ub7a8\uc758 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130 \uac12\ub4e4\uc744 CPU\uc5d0 \uc62e\uaca8\ub193\uc544, \uba48\ucd94\uc5c8\ub358 \ubd80\ubd84\ubd80\ud130 \ub2e4\uc2dc \uc7ac\uac1c\ud558\ub3c4\ub85d \ud574\uc57c \ud569\ub2c8\ub2e4. task switching\uc744 \uad6c\ud604\ud558\uae30 \uc704\ud574\uc11c\ub294 \uba3c\uc800 RAM\uc0c1\uc5d0 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130 \uac12\ub4e4\uc774 \ubcf4\uc874\ub420 \uc601\uc5ed\uc744 \ub9cc\ub4e4\uc5b4 \ub193\uc544\uc57c \ud569\ub2c8\ub2e4. \uc774 \uc601\uc5ed\uc744 TSS(Task State Segment)\ub77c\uace0 \ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub610 \ud558\ub098 \uc774 TSS\ub97c \uc9c0\uc815\ud558\ub294 TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uac00 GDT\uc5d0 \uc9c0\uc815\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. TSS TSS\ub294 CPU\uc758 \uac70\uc758 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130 \uac12\ub4e4\uc744 \uc800\uc7a5\ud560 \uc218 \uc788\uac8c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. GDTR, IDTR, CR0, CR2 \ub4f1\uc758 \ubaa8\ub4e0 \ud0dc\uc2a4\ud06c\uac00 \uacf5\ud1b5\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \ub808\uc9c0\uc2a4\ud130\ub97c \uc81c\uc678\ud558\uace0, \uac01 \ud0dc\uc2a4\ud06c\uac00 \uc0ac\uc6a9\ud558\ub294 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130\ub97c \ud3ec\ud568\ud558\ub3c4\ub85d \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.","title":"day 13: Task Switching\uacfc TSS"},{"location":"os-making/13/#tss","text":"\uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 back link \uc774\uc804\uc5d0 \ub3d9\uc791\ud558\ub358 \ud504\ub85c\uadf8\ub7a8\uc758 TSS \uc601\uc5ed\uc758 \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130 \uac12\uc774 \ub4e4\uc5b4\uac11\ub2c8\ub2e4. TSS \uc601\uc5ed\uc740 GDT\uc5d0 \uc788\ub294 TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc640 \ud55c \uc30d\uc744 \uc774\ub8f9\ub2c8\ub2e4. JMP \uba85\ub839\uc740 \ud574\ub2f9\ub418\uc9c0 \uc54a\uc73c\ub098, CALL \uba85\ub839\uc73c\ub85c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \ud558\uac8c \ub418\uba74 \ub2e4\uc74c \ud0dc\uc2a4\ud06c\ub294 \uc790\uc2e0\uc758 TSS \uc601\uc5ed\uc5d0 \uc774\uc804 \ud0dc\uc2a4\ud06c\uc774 TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \uc140\ub809\ud130 \uac12\uc744 \uc800\uc7a5\ud574 \ub450\uc5c8\ub2e4\uac00 \uc790\uc2e0\uc740 IRET \uba85\ub839\uc73c\ub85c \ud504\ub85c\uadf8\ub7a8\uc744 \ub9c8\uce58\uace0, \uadf8\ub7ec\uba74 CPU\ub294 \ud604\uc7ac \ud0dc\uc2a4\ud06c\uc758 TSS\uc601\uc5ed\uc5d0\uc11c \"\uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 back link\" \uac12\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 \uc2a4\uc704\uce6d\uc744 \ud589\ud558\uac8c \ub429\ub2c8\ub2e4. ESP0, SS0 \uc720\uc800 \ubaa8\ub4dc(\ub808\ubca8 3) \ud0dc\uc2a4\ud06c\uac00 \uc2e4\ud589 \uc911 \ucee4\ub110 \ubaa8\ub4dc(\ub808\ubca8 0)\ub85c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc774 \ud589\ud574\uc84c\uc744 \ub54c \uc2a4\ud0dd \uac12\uc774 \ubc14\ub00c\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uc65c\ub0d0\ud558\uba74 \uc720\uc800 \ubaa8\ub4dc\uc640 \ucee4\ub110 \ubaa8\ub4dc\uc5d0\uc11c \uc2a4\ud0dd\uc744 \uac19\uc774 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \ud504\ub85c\uadf8\ub7a8\uc758 \uc2e4\ud589\uc774 \uc5c9\ud0a4\uae30\ub3c4 \ud560 \ubfd0\ub354\ub7ec \uc720\uc800 \ubaa8\ub4dc\uc5d0\uc11c \ucee4\ub110 \ubaa8\ub4dc\uc758 \ub370\uc774\ud130\ub97c \uc77d\uace0 \uc4f0\ub294 \ud589\uc704\uac00 \uac00\ub2a5\ud574\uc9c0\ubbc0\ub85c \ucee4\ub110\uc758 \ubcf4\uc548 \uae30\ub2a5\uc774 \ub098\ube60\uc9c0\uac8c \ub429\ub2c8\ub2e4. \uadf8\ub798\uc11c TSS \uc601\uc5ed\uc5d0 ESP0, SS0, ESP1, SS1, ESP2, SS2\uc640 \uac19\uc774 CPU\uac00 \uc0ac\uc6a9\ud558\ub294 \uc2dc\uc2a4\ud15c \ub808\ubca8\ubcc4\ub85c \uc2a4\ud0dd\uc774 \ub530\ub85c \uc874\uc7ac\ud558\uac8c \ub429\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc774 \uc911 \ub808\ubca8 0\uc640 \ub808\ubca83\ub9cc\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. ESP3, SS3\uc740 \uc5c6\uc2b5\ub2c8\ub2e4. \uc720\uc800 \ub808\ubca8 \uc2a4\ud0dd\uc740 TSS\uc758 ESP \uce78\uacfc SS \uce78\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. \ub514\ubc84\uadf8\uc6a9 T \ube44\ud2b8 \uc720\uc800 \ub808\ubca8 \ud0dc\uc2a4\ud06c\ub97c \ub514\ubc84\uae45\ud560 \ub54c \ube0c\ub808\uc774\ud06c \ud3ec\uc778\ud2b8\ub97c \uac78\uc5b4\ub450\uace0 \ud55c \uc2a4\ud15d\uc529 \uc9c4\ud589\uc2dc\ucf1c\uac00\uba70 \ud504\ub85c\uadf8\ub7a8\uc758 \ub3d9\uc791\uc744 \ud655\uc778\ud574\uc57c \ud560 \uacbd\uc6b0\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ud504\ub85c\uadf8\ub7a8\uc758 \ub514\ubc84\uae45 \uc911\uc5d0\ub3c4 \ub2e4\ub978 \ud504\ub85c\uadf8\ub7a8 \uacfc\uc758 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \ud574\uc57c \ud558\ubbc0\ub85c, \ub514\ubc84\uae45\ud558\uace0 \uc788\ub294 \ud0dc\uc2a4\ud06c\uac00 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\ub418\uae30 \uc804\uc5d0 \uc774 \ud0dc\uc2a4\ud06c\ub294 \ub514\ubc84\uae45 \uc911\uc774\uc5c8\ub2e4\ub294 \ud45c\uc2dc\ub97c \uc774\uacf3 T \ube44\ud2b8\uc5d0 \ud574\ub461\ub2c8\ub2e4. I/O \ud5c8\uac00 \ube44\ud2b8\ub9f5 \uc720\uc800 \ub808\ubca8 \ud0dc\uc2a4\ud06c\ub294 \uc8fc\ubcc0\uc7a5\uce58\ub97c \uc81c\uba4b\ub300\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. I/O \ud5c8\uac00 \ube44\ud2b8\ub9f5\uc774\ub77c\ub294 \uac83\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 I/O \uc7a5\uce58\uc640 \uc0ac\uc6a9\ud560 \uc218 \uc5c6\ub294 I/O \uc7a5\uce58\ub97c \uad6c\ubd84\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774 \ub610\ud55c RAM\uc758 \ud55c \uc601\uc5ed\uc5d0 \ud45c\uc2dc\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774 \ud45c\uc2dc\ud574 \ub454 \uc601\uc5ed\uc758 \uc2dc\uc791 \uc8fc\uc18c\ub97c TSS\uc758 I/O \ud5c8\uac00 \ube44\ud2b8\ub9f5 \uce78\uc5d0 \ub123\uc5b4\ub461\ub2c8\ub2e4.","title":"TSS\uc758 \uac01 \ubd80\ubd84\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uc124\uba85"},{"location":"os-making/13/#tss_1","text":"TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\ub294 TSS\uc640 \ud55c \uc30d\uc744 \uc774\ub8e8\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ub514\uc2a4\ud06c\ub9bd\ud130\ub3c4 GDT\uc5d0 \ub4e4\uc5b4\uac00\uba70, init.inc\uc5d0\uc11c \ubcf4\ub4ef \uc774 TSS \ub514\uc2a4\ud06c\ub9bd\ud130\ub3c4 8\ubc14\uc774\ud2b8\uc774\ubbc0\ub85c \uc140\ub809\ud130 \uac12\uc774 8\uc529 \uac74\ub108\ub6f0\uba70 \uc9c0\uc815\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. Limit\uc774 104(16\uc9c4\uc218 0x68)\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0\uc11c\ub294 \uc774 Limit \uac12\uc774 \ud56d\uc0c1 0x67 \uc774\uc0c1\uc758 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \ud560 \ub54c \ubb34\ud6a8 TSS \uc608\uc678(#TS)\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. 0x68 \uc774\ub77c\uace0 \uc54c\uace0 \uc788\uc73c\uba74 \ubcc4\ub85c \ubb38\uc81c\ub420 \uac83\uc740 \uc5c6\uc2b5\ub2c8\ub2e4. (https://www.intel.la/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3a-part-1-manual.pdf) \uc704\uc758 intel manual\uc744 \ucc38\uace0\ud558\ub2c8, 0x67 \uc774\uc0c1\uc774\uc5b4\uc57c \ud558\ub294 \uc774\uc720\ub294 G\ube44\ud2b8(Granuality bit)\uac00 0\uc77c \ub54c, TSS descriptor\uc758 \uc0ac\uc774\uc988\ubcf4\ub2e4 1 \ubc14\uc774\ud2b8 \uc791\uc740 \uac12\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. 0x68(\ud558\ub098\uc758 TSS)\uc774 \uc77c\ubc18\uc801\uc73c\ub85c \ub418\uba74 \ub418\ub294 \uc774\uc720\ub294 \ud558\ub098\uc758 TSS descriptor\uac00 0x68\ube44\ud2b8\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.","title":"TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130"},{"location":"os-making/13/#_1","text":"p. 173\uae4c\uc9c0 \ubd24\uc74c","title":"\uc9c4\ub3c4"},{"location":"os-making/13/#_2","text":"\uc65c TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\ub3c4 GDT(Global Descriptor Table)\uc5d0 \ub123\ub294 \uac70\uc9c0? GDT\ub294 \uac01 \uba54\ubaa8\ub9ac\uc758 \uad8c\ud55c\uacfc \uc601\uc5ed\uc744 \uc9c0\uc815\ud558\ub294 \uacf5\uac04\uc774\uc5c8\ub358 \uac83 \uac19\uc740\ub370..? ltr ax \ub77c\ub294 \uc5b4\uc148\ube14\ub9ac \uba85\ub839\uc5b4\ub294 \ubb58\uae4c? => \uc800\ubc88\uc2dc\uac04\uc5d0 load task register \ub77c\ub294 \uba85\ub839\uc5b4\ub97c \ubc30\uc6e0\uc2b5\ub2c8\ub2e4(day 12\ucc38\uc870). \uc774 \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud558\uba74, GDT \ub610\ub294 LDT \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \ub4e4\uc5b4\uc788\ub294 segment base\uc640 limit\uc744 \ucc38\uc870\ud574\uc11c, task register\ub85c \uac00\uc838\uc635\ub2c8\ub2e4.","title":"\uad81\uae08\ud55c \uc810"},{"location":"os-making/14/","text":"day14: Task Switching (3) TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 TSS \ub514\uc2a4\ud06c\ub9bd\ud130\ub3c4 GDT\uc5d0 \ub4e4\uc5b4\uac11\ub2c8\ub2e4. TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \ud3ec\ud568\ub41c Type \ud544\ub4dc TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 Type field\uc5d0\uc11c\ub294 1\uacfc 0\uc73c\ub85c \uace0\uc815\ub41c \ubd80\ubd84\uacfc B \ube44\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4. B\ube44\ud2b8\ub294 \ud604\uc7ac \ud604\uc7ac \uc774 \ud0dc\uc2a4\ud06c\uac00 \uc2e4\ud589 \uc911 \ud639\uc740 \uc2e4\ud589\uc744 \uae30\ub2e4\ub9ac\uace0 \uc788\ub294 \uc911\uc774\ub77c\ub294 \ud45c\uc2dc\uc785\ub2c8\ub2e4. CPU\ub294 \uc774 \ube44\ud2b8\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc2e4\ud589 \uc911 \uc778\ud130\ub7fd\ud2b8\uac00 \uac78\ub9b0 \ud0dc\uc2a4\ud06c\ub97c \ub2e4\uc2dc CALL \ud588\ub294\uc9c0 \uc544\ub2cc\uc9c0\ub97c \uac80\uc0ac\ud569\ub2c8\ub2e4. \ucc98\uc74c\uc5d0\ub294 0\uc73c\ub85c \ud074\ub9ac\uc5b4 \ud574\ub450\uba74 \ub429\ub2c8\ub2e4. \uc18c\uc2a4\ucf54\ub4dc\uc758 descriptor4 \ubd80\ubd84\uc5d0\uc11c 0x89\ub97c \ub300\uc785\ud574 \ubcf4\uba74 P \ube44\ud2b8\uac00 1, DPL\uc774 00, \uace0\uc815\ub41c 0, Type\uc774 1001\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc740 \ud56d\uc0c1 \ucee4\ub110 \ub808\ubca8\uc5d0\uc11c \uc774\ub8e8\uc5b4\uc9c0\ub3c4\ub85d \ud558\ub294 \uac83\uc774 \ubcf4\ud1b5\uc774\ubbc0\ub85c DPL\uc740 00\uc73c\ub85c \ud574\ub461\ub2c8\ub2e4. LTR \uba85\ub839\uc740 CPU\uc5d0 \uc788\ub294 TR \ub808\uc9c0\uc2a4\ud130\uc5d0 TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \uc140\ub809\ud130 \uac12\uc744 \ub123\ub294 \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4. \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d \ud750\ub984\ub3c4 ltr: TSS1Selector\ub85c TSS1\uc73c\ub85c \uc2e4\ud589 process2\uc5d0\uc11c \"This is System Process 2\" \ucd9c\ub825 TSS2Selector TSS1 selector:0\ub85c \uc810\ud504(\ud504\ub85c\uadf8\ub7a8 \ucc98\uc74c\ubd80\ud130 \uc2dc\uc791) . . .? \uc774\ud574\uac00 \uc798 \uc548 \ub418\ub294 \ubd80\ubd84 \uc804\uccb4 \uc2e4\ud589 \ud750\ub984\uc774 \uc798 \uc774\ud574\uac00 \uc548 \ub429\ub2c8\ub2e4 \u3160\u3160","title":"day14: task switching(3)"},{"location":"os-making/14/#day14-task-switching-3","text":"","title":"day14: Task Switching (3)"},{"location":"os-making/14/#tss","text":"TSS \ub514\uc2a4\ud06c\ub9bd\ud130\ub3c4 GDT\uc5d0 \ub4e4\uc5b4\uac11\ub2c8\ub2e4. TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \ud3ec\ud568\ub41c Type \ud544\ub4dc TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 Type field\uc5d0\uc11c\ub294 1\uacfc 0\uc73c\ub85c \uace0\uc815\ub41c \ubd80\ubd84\uacfc B \ube44\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4. B\ube44\ud2b8\ub294 \ud604\uc7ac \ud604\uc7ac \uc774 \ud0dc\uc2a4\ud06c\uac00 \uc2e4\ud589 \uc911 \ud639\uc740 \uc2e4\ud589\uc744 \uae30\ub2e4\ub9ac\uace0 \uc788\ub294 \uc911\uc774\ub77c\ub294 \ud45c\uc2dc\uc785\ub2c8\ub2e4. CPU\ub294 \uc774 \ube44\ud2b8\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc2e4\ud589 \uc911 \uc778\ud130\ub7fd\ud2b8\uac00 \uac78\ub9b0 \ud0dc\uc2a4\ud06c\ub97c \ub2e4\uc2dc CALL \ud588\ub294\uc9c0 \uc544\ub2cc\uc9c0\ub97c \uac80\uc0ac\ud569\ub2c8\ub2e4. \ucc98\uc74c\uc5d0\ub294 0\uc73c\ub85c \ud074\ub9ac\uc5b4 \ud574\ub450\uba74 \ub429\ub2c8\ub2e4. \uc18c\uc2a4\ucf54\ub4dc\uc758 descriptor4 \ubd80\ubd84\uc5d0\uc11c 0x89\ub97c \ub300\uc785\ud574 \ubcf4\uba74 P \ube44\ud2b8\uac00 1, DPL\uc774 00, \uace0\uc815\ub41c 0, Type\uc774 1001\uc774\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc740 \ud56d\uc0c1 \ucee4\ub110 \ub808\ubca8\uc5d0\uc11c \uc774\ub8e8\uc5b4\uc9c0\ub3c4\ub85d \ud558\ub294 \uac83\uc774 \ubcf4\ud1b5\uc774\ubbc0\ub85c DPL\uc740 00\uc73c\ub85c \ud574\ub461\ub2c8\ub2e4. LTR \uba85\ub839\uc740 CPU\uc5d0 \uc788\ub294 TR \ub808\uc9c0\uc2a4\ud130\uc5d0 TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \uc140\ub809\ud130 \uac12\uc744 \ub123\ub294 \uba85\ub839\uc5b4\uc785\ub2c8\ub2e4.","title":"TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130"},{"location":"os-making/14/#_1","text":"ltr: TSS1Selector\ub85c TSS1\uc73c\ub85c \uc2e4\ud589 process2\uc5d0\uc11c \"This is System Process 2\" \ucd9c\ub825 TSS2Selector TSS1 selector:0\ub85c \uc810\ud504(\ud504\ub85c\uadf8\ub7a8 \ucc98\uc74c\ubd80\ud130 \uc2dc\uc791) . . .?","title":"\ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d \ud750\ub984\ub3c4"},{"location":"os-making/14/#_2","text":"\uc804\uccb4 \uc2e4\ud589 \ud750\ub984\uc774 \uc798 \uc774\ud574\uac00 \uc548 \ub429\ub2c8\ub2e4 \u3160\u3160","title":"\uc774\ud574\uac00 \uc798 \uc548 \ub418\ub294 \ubd80\ubd84"},{"location":"os-making/15/","text":"day15: Task Switching (4) day 13\uc758 \ucf54\ub4dc\ub97c \uacc4\uc18d \ud30c\uc545\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc9c0\uae08 \uc774\ud574\ud55c \ud750\ub984\uc740 1 jmp TSS2Selector:0 \uc704\uc758 \uad6c\ubb38\uc73c\ub85c task switching\uc744 \ud55c\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. TSS2Selector\ub77c\ub294 \uac83\uc740 src\\init.inc \uc5d0 \uc815\uc758\ub41c \uac12\uc778\ub370 0x28\ub85c \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc989, GDT\uc758 offset \uae30\uc900\uc73c\ub85c 0x28\ub9cc\ud07c \ub5a8\uc5b4\uc9c4 \uacf3\uc5d0 \uc874\uc7ac\ud558\ub294 GDT Descriptor\ub77c\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. GDT + 0x28\uc758 \uc8fc\uc18c\uc5d0\ub294 descriptor5\ub77c\ub294 \uac83\uc744 \uc800\uc7a5\ud574 \ub193\uc558\uace0, (\ucd08\uae30\uc5d0\ub294 0\uc73c\ub85c \uac12\uc744 \uc8fc\uace0, \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \uc2dc\uc5d0 tss2\uc758 \uc8fc\uc18c\ub97c BASE_ADDRESS\ub85c \ub118\uaca8 \uc90d\ub2c8\ub2e4.) segment limit\uc758 \uac12\uc73c\ub85c\ub294 0x68(10\uc9c4\uc218 104)\uc774 \uc800\uc7a5\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. TSS Descriptor\uc758 \uc0ac\uc774\uc988\uac00 0x68\uc774\uae30 \ub54c\ubb38\uc5d0 \uc774 \uac12\uc774 \ub4e4\uc5b4\uac00 \uc788\uc2b5\ub2c8\ub2e4. P, DPL, S, Type\uc744 \uc9c0\uc815\ud558\ub294 \uac12\uc73c\ub85c\ub294 0x89(0b10001001) \uc989, P=1, DPL=0, S=0, Type=1001\uc774 \ub4e4\uc5b4\uac00 \uc788\uc2b5\ub2c8\ub2e4. Type\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uac12\uc774 \ub4e4\uc5b4\uac11\ub2c8\ub2e4. TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \ud3ec\ud568\ub41c Type \uc989, \uc9c0\uae08\uc740 B\uac00 0\uc73c\ub85c \uc138\ud305\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0, \ud574\ub2f9 \ud0dc\uc2a4\ud06c\uac00 busy task\uac00 \uc544\ub2c8\ub77c\ub294 \uc758\ubbf8(\ud604\uc7ac \uc2e4\ud589\ub418\uace0 \uc788\uac70\ub098 \uc2e4\ud589\uc744 \uae30\ub2e4\ub9ac\uace0 \uc788\ub294 \uc0c1\ud0dc\uac00 \uc544\ub2c8\ub77c\ub294 \uc758\ubbf8)\uc785\ub2c8\ub2e4. TSS \uc138\uadf8\uba3c\ud2b8\uc758 \ud0c0\uc785\uc740 0b10x1 \uc785\ub2c8\ub2e4. \uc989 type\uc73c\ub85c TSS \uc138\uadf8\uba3c\ud2b8\uc784\uc744 \ub098\ud0c0\ub0b4\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc704\uc5d0\uc11c descriptor5\uc5d0 tss2\uc758 \uc8fc\uc18c\ub97c \ub123\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, tss2\ub97c \uc0b4\ud3b4\ubcf4\uac8c \ub418\uba74, tss2 ~ tss_esp\ubd80\ubd84\uae4c\uc9c0 \ucd1d 0x68\ubc14\uc774\ud2b8\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc2e4\ud589 \uc2dc\uc5d0, tss_eip\uc5d0 process2\ub77c\ub294 \uc8fc\uc18c\ub97c \ub123\uace0, esp\uc5d0 PM_Start\uc758 \uc8fc\uc18c\ub97c \ub123\uc5b4\uc11c \ud638\ucd9c \ud569\ub2c8\ub2e4. \uc989, CPU\uc785\uc7a5\uc5d0\uc11c\ub294 segment\uc758 type\uc774 0b10x1\uc778 segment descriptor\ub97c \ubcf4\uace0 jump\ub97c \ud558\uae30 \ub54c\ubb38\uc5d0 context switching\uc774\ub77c\ub294 \uac83\uc744 \uc54c\uace0 \uc788\uace0, CPU\ub294 TSS\uc758 eip\uac00 \uc801\ud78c \ubd80\ubd84\uc73c\ub85c jump\ub97c \ud558\ub3c4\ub85d \uc9c0\uc2dc\ud569\ub2c8\ub2e4. jump \uc9c1\uc804\uc5d0 \uc774\uc804 Segment Selector\uac00 \ud544\uc694\ud558\uae30 \ub54c\ubb38\uc5d0 TSS1Selector\ub77c\ub294 \uac83\uc744 \ub123\uc5b4 \uc8fc\uace0 \uc788\uc74c \uc815\ub9ac 1 jmp TSS2Selector:0 (offset\uc740 0\uc774 \uc544\ub2c8\uc5b4\ub3c4 \uc804\ud600 \uc0c1\uad00\uc5c6\uc74c. TSS\uc758 eip\ub85c \uc810\ud504\ud558\uae30 \ub54c\ubb38) \ub77c\ub294 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud588\uc744 \ub54c, GDT\uc758 TSS Descriptor\uac00 \uc815\uc758\ub418\uc5b4 \uc788\uace0(type\uc774 0b10x1), \uadf8 descriptor\uc5d0\uc11c \uac00\ub9ac\ud0a4\ub294 TSS\uc758 eip\uac12\uc774 \uc815\ud574\uc838 \uc788\uc73c\uba74 TSS\uc758 eip\ub85c \uc810\ud504\ud569\ub2c8\ub2e4. \uc21c\uc11c\ub300\ub85c \uc2e4\ud589 \ud750\ub984 \ud504\ub85c\uadf8\ub7a8\uc774 Protected Mode\ub85c \ub118\uc5b4\uc624\uace0, LTR \uba85\ub839\uc73c\ub85c TSS \uc601\uc5ed\uc744 \uc9c0\uc815\ud55c \ud6c4 jmp TSS2Selector:0 \uba85\ub839\uc774 \ub0b4\ub824\uc9d1\ub2c8\ub2e4. CPU \ub0b4\ubd80\uc758 TR \ub808\uc9c0\uc2a4\ud130\ub97c \ucc38\uc870\ud558\uace0 GDTR \ub808\uc9c0\uc2a4\ud130\ub97c \ucc38\uc870\ud558\uc5ec GDT\uc5d0 \uc788\ub294 TSS1Selector(0x20) - 5\ubc88\uc9f8\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uc2b5\ub2c8\ub2e4. TSS1Selector \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 Base Address\ub97c \ucc38\uc870\ud558\uc5ec tss1 \uc601\uc5ed\uc744 \ucc3e\uc2b5\ub2c8\ub2e4. tss1 \uc601\uc5ed\uc5d0 \ud604\uc7ac CPU\uac00 \uac00\uc9c0\uace0 \uc788\ub294 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 \uac01\uac01\uc758 \uc790\ub9ac\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. GDT\uc5d0\uc11c TSS2Selector(0x28) - 6\ubc88\uc9f8 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uc2b5\ub2c8\ub2e4. \uc774 \ub54c TR \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 TSS2Selector(0x28)\uc774 \ub4e4\uc5b4\uac00\uac8c \ub429\ub2c8\ub2e4. TSS2Selector \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \uc788\ub294 Base Address\ub97c \ucc38\uc870\ud558\uc5ec tss2 \uc601\uc5ed\uc744 \ucc3e\uc2b5\ub2c8\ub2e4. tss2\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 CPU\uc5d0 \ubcf5\uc6d0\uc2dc\ud0b5\ub2c8\ub2e4. \ubcf5\uc6d0\uc774 \ub418\uc5c8\uc744 \ub54c EIP \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 process2: \ub8e8\ud2f4\uc758 \uc8fc\uc18c\uac00 \uc788\uc73c\ubbc0\ub85c \uc5ec\uae30\uc11c\ubd80\ud130 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2dc\uc791\ub429\ub2c8\ub2e4. EIP\uc5d0 \ub2e4\ub978 \uac12\uc774 \uc788\ub2e4\uba74 \uadf8 \uc8fc\uc18c\ubd80\ud130 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2dc\uc791\ub429\ub2c8\ub2e4. \uc9c4\ub3c4 p. 180\uae4c\uc9c0 \uc644\ub8cc","title":"day15: task switching(4)"},{"location":"os-making/15/#day15-task-switching-4","text":"day 13\uc758 \ucf54\ub4dc\ub97c \uacc4\uc18d \ud30c\uc545\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc9c0\uae08 \uc774\ud574\ud55c \ud750\ub984\uc740 1 jmp TSS2Selector:0 \uc704\uc758 \uad6c\ubb38\uc73c\ub85c task switching\uc744 \ud55c\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. TSS2Selector\ub77c\ub294 \uac83\uc740 src\\init.inc \uc5d0 \uc815\uc758\ub41c \uac12\uc778\ub370 0x28\ub85c \uc815\uc758\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc989, GDT\uc758 offset \uae30\uc900\uc73c\ub85c 0x28\ub9cc\ud07c \ub5a8\uc5b4\uc9c4 \uacf3\uc5d0 \uc874\uc7ac\ud558\ub294 GDT Descriptor\ub77c\ub294 \uc758\ubbf8\uc785\ub2c8\ub2e4. GDT + 0x28\uc758 \uc8fc\uc18c\uc5d0\ub294 descriptor5\ub77c\ub294 \uac83\uc744 \uc800\uc7a5\ud574 \ub193\uc558\uace0, (\ucd08\uae30\uc5d0\ub294 0\uc73c\ub85c \uac12\uc744 \uc8fc\uace0, \ud504\ub85c\uadf8\ub7a8 \uc2e4\ud589 \uc2dc\uc5d0 tss2\uc758 \uc8fc\uc18c\ub97c BASE_ADDRESS\ub85c \ub118\uaca8 \uc90d\ub2c8\ub2e4.) segment limit\uc758 \uac12\uc73c\ub85c\ub294 0x68(10\uc9c4\uc218 104)\uc774 \uc800\uc7a5\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. TSS Descriptor\uc758 \uc0ac\uc774\uc988\uac00 0x68\uc774\uae30 \ub54c\ubb38\uc5d0 \uc774 \uac12\uc774 \ub4e4\uc5b4\uac00 \uc788\uc2b5\ub2c8\ub2e4. P, DPL, S, Type\uc744 \uc9c0\uc815\ud558\ub294 \uac12\uc73c\ub85c\ub294 0x89(0b10001001) \uc989, P=1, DPL=0, S=0, Type=1001\uc774 \ub4e4\uc5b4\uac00 \uc788\uc2b5\ub2c8\ub2e4. Type\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uac12\uc774 \ub4e4\uc5b4\uac11\ub2c8\ub2e4. TSS \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \ud3ec\ud568\ub41c Type \uc989, \uc9c0\uae08\uc740 B\uac00 0\uc73c\ub85c \uc138\ud305\ub418\uc5b4 \uc788\uae30 \ub54c\ubb38\uc5d0, \ud574\ub2f9 \ud0dc\uc2a4\ud06c\uac00 busy task\uac00 \uc544\ub2c8\ub77c\ub294 \uc758\ubbf8(\ud604\uc7ac \uc2e4\ud589\ub418\uace0 \uc788\uac70\ub098 \uc2e4\ud589\uc744 \uae30\ub2e4\ub9ac\uace0 \uc788\ub294 \uc0c1\ud0dc\uac00 \uc544\ub2c8\ub77c\ub294 \uc758\ubbf8)\uc785\ub2c8\ub2e4. TSS \uc138\uadf8\uba3c\ud2b8\uc758 \ud0c0\uc785\uc740 0b10x1 \uc785\ub2c8\ub2e4. \uc989 type\uc73c\ub85c TSS \uc138\uadf8\uba3c\ud2b8\uc784\uc744 \ub098\ud0c0\ub0b4\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc704\uc5d0\uc11c descriptor5\uc5d0 tss2\uc758 \uc8fc\uc18c\ub97c \ub123\uace0 \uc788\uae30 \ub54c\ubb38\uc5d0, tss2\ub97c \uc0b4\ud3b4\ubcf4\uac8c \ub418\uba74, tss2 ~ tss_esp\ubd80\ubd84\uae4c\uc9c0 \ucd1d 0x68\ubc14\uc774\ud2b8\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc2e4\ud589 \uc2dc\uc5d0, tss_eip\uc5d0 process2\ub77c\ub294 \uc8fc\uc18c\ub97c \ub123\uace0, esp\uc5d0 PM_Start\uc758 \uc8fc\uc18c\ub97c \ub123\uc5b4\uc11c \ud638\ucd9c \ud569\ub2c8\ub2e4. \uc989, CPU\uc785\uc7a5\uc5d0\uc11c\ub294 segment\uc758 type\uc774 0b10x1\uc778 segment descriptor\ub97c \ubcf4\uace0 jump\ub97c \ud558\uae30 \ub54c\ubb38\uc5d0 context switching\uc774\ub77c\ub294 \uac83\uc744 \uc54c\uace0 \uc788\uace0, CPU\ub294 TSS\uc758 eip\uac00 \uc801\ud78c \ubd80\ubd84\uc73c\ub85c jump\ub97c \ud558\ub3c4\ub85d \uc9c0\uc2dc\ud569\ub2c8\ub2e4. jump \uc9c1\uc804\uc5d0 \uc774\uc804 Segment Selector\uac00 \ud544\uc694\ud558\uae30 \ub54c\ubb38\uc5d0 TSS1Selector\ub77c\ub294 \uac83\uc744 \ub123\uc5b4 \uc8fc\uace0 \uc788\uc74c","title":"day15: Task Switching (4)"},{"location":"os-making/15/#_1","text":"1 jmp TSS2Selector:0 (offset\uc740 0\uc774 \uc544\ub2c8\uc5b4\ub3c4 \uc804\ud600 \uc0c1\uad00\uc5c6\uc74c. TSS\uc758 eip\ub85c \uc810\ud504\ud558\uae30 \ub54c\ubb38) \ub77c\ub294 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud588\uc744 \ub54c, GDT\uc758 TSS Descriptor\uac00 \uc815\uc758\ub418\uc5b4 \uc788\uace0(type\uc774 0b10x1), \uadf8 descriptor\uc5d0\uc11c \uac00\ub9ac\ud0a4\ub294 TSS\uc758 eip\uac12\uc774 \uc815\ud574\uc838 \uc788\uc73c\uba74 TSS\uc758 eip\ub85c \uc810\ud504\ud569\ub2c8\ub2e4.","title":"\uc815\ub9ac"},{"location":"os-making/15/#_2","text":"\ud504\ub85c\uadf8\ub7a8\uc774 Protected Mode\ub85c \ub118\uc5b4\uc624\uace0, LTR \uba85\ub839\uc73c\ub85c TSS \uc601\uc5ed\uc744 \uc9c0\uc815\ud55c \ud6c4 jmp TSS2Selector:0 \uba85\ub839\uc774 \ub0b4\ub824\uc9d1\ub2c8\ub2e4. CPU \ub0b4\ubd80\uc758 TR \ub808\uc9c0\uc2a4\ud130\ub97c \ucc38\uc870\ud558\uace0 GDTR \ub808\uc9c0\uc2a4\ud130\ub97c \ucc38\uc870\ud558\uc5ec GDT\uc5d0 \uc788\ub294 TSS1Selector(0x20) - 5\ubc88\uc9f8\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uc2b5\ub2c8\ub2e4. TSS1Selector \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 Base Address\ub97c \ucc38\uc870\ud558\uc5ec tss1 \uc601\uc5ed\uc744 \ucc3e\uc2b5\ub2c8\ub2e4. tss1 \uc601\uc5ed\uc5d0 \ud604\uc7ac CPU\uac00 \uac00\uc9c0\uace0 \uc788\ub294 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 \uac01\uac01\uc758 \uc790\ub9ac\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4. GDT\uc5d0\uc11c TSS2Selector(0x28) - 6\ubc88\uc9f8 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ucc3e\uc2b5\ub2c8\ub2e4. \uc774 \ub54c TR \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 TSS2Selector(0x28)\uc774 \ub4e4\uc5b4\uac00\uac8c \ub429\ub2c8\ub2e4. TSS2Selector \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \uc788\ub294 Base Address\ub97c \ucc38\uc870\ud558\uc5ec tss2 \uc601\uc5ed\uc744 \ucc3e\uc2b5\ub2c8\ub2e4. tss2\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 CPU\uc5d0 \ubcf5\uc6d0\uc2dc\ud0b5\ub2c8\ub2e4. \ubcf5\uc6d0\uc774 \ub418\uc5c8\uc744 \ub54c EIP \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 process2: \ub8e8\ud2f4\uc758 \uc8fc\uc18c\uac00 \uc788\uc73c\ubbc0\ub85c \uc5ec\uae30\uc11c\ubd80\ud130 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2dc\uc791\ub429\ub2c8\ub2e4. EIP\uc5d0 \ub2e4\ub978 \uac12\uc774 \uc788\ub2e4\uba74 \uadf8 \uc8fc\uc18c\ubd80\ud130 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2dc\uc791\ub429\ub2c8\ub2e4.","title":"\uc21c\uc11c\ub300\ub85c \uc2e4\ud589 \ud750\ub984"},{"location":"os-making/15/#_3","text":"p. 180\uae4c\uc9c0 \uc644\ub8cc","title":"\uc9c4\ub3c4"},{"location":"os-making/16/","text":"day 16: CALL \uba85\ub839\uc5d0 \uc758\ud55c Task Switching \uc624\ub298\uc758 \uacb0\uacfc jmp\ub97c \uc0ac\uc6a9\ud55c task switching\uc778 day 12\uc5d0\uc11c\uc758 \uacb0\uacfc\uc640 \uac19\uc2b5\ub2c8\ub2e4. jmp \uba85\ub839\uc5d0 \uc758\ud55c Task Switching\uacfc \ub2e4\ub978 \uc810\uc740, \ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d\uc744 \ud560 \ub54c JMP \uba85\ub839 => CALL \uba85\ub839 task\ub97c \ucc98\ub9ac\ud558\ub294 \ub8e8\ud2f4\uc5d0\uc11c JMP \uba85\ub839\uc73c\ub85c \ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d => IRET \uc774 \ub450 \uac00\uc9c0\uc785\ub2c8\ub2e4(\ub2e8 \ub450 \uc904). \uc18c\uc2a4\ucf54\ub4dc kernel.asmsrc\\kernel.asm %include \"src/init.inc\" [org 0x010000] [bits 16] start: cld ; Advance = inc mov ax, cs mov ds, ax xor ax, ax mov ss, ax xor ebx, ebx lea eax, [tss1] ; EAX\uc5d0 tss1\uc758 \ubb3c\ub9ac \uc8fc\uc18c\ub97c \ub123\uc2b5\ub2c8\ub2e4. add eax, 0x10000 mov [descriptor4+2], ax shr eax, 16 mov [descriptor4+4], al mov [descriptor4+7], ah lea eax, [tss2] ; EAX\uc5d0 tss2\uc758 \ubb3c\ub9ac \uc8fc\uc18c\ub97c \ub123\uc2b5\ub2c8\ub2e4. add eax, 0x10000 mov [descriptor5+2], ax shr eax, 16 mov [descriptor5+4], al mov [descriptor5+7], ah cli lgdt[gdtr] mov eax, cr0 or eax, 0x00000001 mov cr0, eax jmp $+2 nop nop jmp dword SysCodeSelector:PM_Start [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx lea esp, [PM_Start] mov ax, TSS1Selector ltr ax lea eax, [process2] mov [tss2_eip], eax mov [tss2_esp], esp call TSS2Selector:0 ; \ub2e4\uc2dc \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc774 \ub418\uba74 \uc774\uacf3\uc73c\ub85c \ub3cc\uc544\uc635\ub2c8\ub2e4. mov edi, 80*2*9 lea esi, [msg_process1] call printf jmp $ ;************************************ ;********** Subroutines ************* ;************************************ printf: push eax push es mov ax, VideoSelector mov es, ax printf_loop: mov al, byte [esi] mov byte [es:edi], al inc edi mov byte [es:edi], 0x06 inc esi inc edi or al, al jz printf_end jmp printf_loop printf_end: pop es pop eax ret process2: mov edi, 80*2*7 lea esi, [msg_process2] call printf iret ;************************************ ;*********** Data Area ************** ;************************************ msg_process1 db \"This is System Process 1\", 0 msg_process2 db \"This is System Process 2\", 0 gdtr: dw gdt_end-gdt-1 dd gdt gdt: dd 0, 0 dd 0x0000FFFF, 0x00CF9A00 dd 0x0000FFFF, 0x00CF9200 dd 0x8000FFFF, 0x0040920B descriptor4: dw 104 dw 0 db 0 db 0x89 db 0 db 0 descriptor5: dw 104 dw 0 db 0 db 0x89 db 0 db 0 gdt_end: tss1: dw 0, 0 ; \uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 back link dd 0 ; ESP0 dw 0, 0 ; SS0, \uc0ac\uc6a9 \uc548 \ud568 dd 0 ; ESP1 dw 0, 0 ; SS1, \uc0ac\uc6a9 \uc548 \ud568 dd 0 ; ESP2 dw 0, 0 ; SS2, \uc0ac\uc6a9 \uc548 \ud568 dd 0, 0, 0 ; CR3, EIP, EFLAGS dd 0, 0, 0, 0 ; EAX, ECX, EDX, EBX dd 0, 0, 0, 0 ; ESP, EBP, ESI, EDI dw 0, 0 ; ES, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; CS, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; SS, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; DS, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; FS, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; GS, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; LDT, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; \ub514\ubc84\uadf8\uc6a9 T \ube44\ud2b8, IO \ud5c8\uac00 \ube44\ud2b8\ub9f5 tss2: dw 0, 0 ; \uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 back link dd 0 ; ESP0 dw 0, 0 ; SS0, \uc0ac\uc6a9 \uc548 \ud568 dd 0 ; ESP1 dw 0, 0 ; SS1, \uc0ac\uc6a9 \uc548 \ud568 dd 0 ; ESP2 dw 0, 0 ; SS2, \uc0ac\uc6a9 \uc548 \ud568 dd 0 tss2_eip: dd 0, 0 ; EIP, EFLAGS(EFLAGS=0x200 for ints) dd 0, 0, 0, 0 tss2_esp: dd 0, 0, 0, 0 ; ESP. EBP, ESI, EDI dw SysDataSelector, 0 ; ES, \uc0ac\uc6a9 \uc548 \ud568 dw SysCodeSelector, 0 ; CS, \uc0ac\uc6a9 \uc548 \ud568 dw SysDataSelector, 0 ; SS, \uc0ac\uc6a9 \uc548 \ud568 dw SysDataSelector, 0 ; DS, \uc0ac\uc6a9 \uc548 \ud568 dw SysDataSelector, 0 ; FS, \uc0ac\uc6a9 \uc548 \ud568 dw SysDataSelector, 0 ; GS, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; LDT, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; \ub514\ubc84\uadf8\uc6a9 T \ube44\ud2b8, IO \ud5c8\uac00 \ube44\ud2b8\ub9f5 times 1024-($-$$) db 0 \uc624\ub298 \ud559\uc2b5 \ub0b4\uc6a9 GDT\uc5d0 \uc788\ub294 TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \ub300\ud558\uc5ec \uc140\ub809\ud130\ub97c \uc0ac\uc6a9\ud55c CALL \uba85\ub839\uc5d0\uc11c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc774 \uc77c\uc5b4\ub098\uace0 \ub610\ud55c IRET \uba85\ub839\uc744 \ud1b5\ud574\uc11c\ub3c4 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc774 \uc77c\uc5b4\ub0a9\ub2c8\ub2e4. EFLAG TSS Descriptor\uc758 Segment type\ubd80\ubd84\uc5d0\ub294 B \ube44\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 EFLAGS \ub808\uc9c0\uc2a4\ud130\uc758 14\ubc88 \ube44\ud2b8\ub294 NT(nested) \ube44\ud2b8\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. NT\uc758 \uc758\ubbf8\ub294 IRET \uba85\ub839\uc744 \uc2e4\ud589\ud560 \ub54c \uc774\uac83\uc774 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\uc758 IRET\uc778\uc9c0, \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\ub418\uc5b4 \ub2e4\uc2dc \uc774\uc804\uc758 \ud0dc\uc2a4\ud06c\ub85c \ub3cc\uc544\uac00\ub294 \uc758\ubbf8\uc758 IRET\uc778\uc9c0 CPU\uac00 \uad6c\ubcc4\ud560 \ub54c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. LTR \uba85\ub839 TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 B \ube44\ud2b8\ub97c 1\ub85c \uc138\ud2b8\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 CPU\ub294 \ud604\uc7ac \uc2e4\ud589\ub418\uace0 \uc788\ub294 \ud0dc\uc2a4\ud06c\uc758 B \ube44\ud2b8\ub294 \ud56d\uc0c1 1\uc774\ub77c\uace0 \uc778\uc2dd\ud569\ub2c8\ub2e4. CALL \uba85\ub839 CALL \uba85\ub839\uc5d0 \uc758\ud55c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc774 \uc77c\uc5b4\ub0a0 \ub54c \uc774\uc804 \ud0dc\uc2a4\ud06c\uc758 EFLAGS\uc5d0 \uc788\ub294 NT \ube44\ud2b8\uac00 1\ub85c \uc138\ud2b8\ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 B \ube44\ud2b8\ub3c4 1\ub85c \uc138\ud2b8\ub429\ub2c8\ub2e4. \ub610\ud55c TSS \uc601\uc5ed\uc5d0 \uc788\ub294 \"\uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 \ubc31\ub9c1\ud06c\" \uce78\uc5d0 \uad6c\ud0dc\uc2a4\ud06c\uc758 TSS \ub514\uc2a4\ud06c\ub9bd\ud130 \uc140\ub809\ud130\ub97c \uc800\uc7a5\ud574 \ub461\ub2c8\ub2e4. \uc774\uc804 \ud0dc\uc2a4\ud06c\uc758 B \ube44\ud2b8\ub294 1\uc778 \ucc44\ub85c \ub0a8\uc544\uc788\uc2b5\ub2c8\ub2e4. Task Switching\uacfc Interrupt\uac00 \uac19\uc774 \uac78\ub9ac\uba74? \uc704\uc640 \uac19\uc774 \uc778\ud130\ub7fd\ud2b8\uac00 \uac78\ub9ac\ub354\ub77c\ub3c4 EFLAGS \ub808\uc9c0\uc2a4\ud130\ub97c ISR(Interrupt Service Routine)\uc5d0\uc11c \uc800\uc7a5\ud574 \ub193\uc558\ub2e4\uac00 \ubcf5\uc6d0\ud558\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc81c\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. CPU\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 Context Switching \uc815\ub9ac JMP \uba85\ub839\uc73c\ub85c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \ud558\ub294 \uac83\uc740 \ud604\uc7ac \uc2e4\ud589\ud558\ub294 context\uc758 EFLAGS\uc758 B \ube44\ud2b8\uac00 \ud56d\uc0c1 1\uc774 \ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\uc804\uc758 context EFLAGS\uc758 B\ube44\ud2b8\ub294 \ud56d\uc0c1 0\uc774 \ub429\ub2c8\ub2e4. JMP \uba85\ub839\uc73c\ub85c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \ud558\ub294 \uac83\uc740 \ud0dc\uc2a4\ud06c\ub07c\ub9ac\uc758 \uad6c\uc18d\uc131\uc774 \uc5c6\uc2b5\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \ucd5c\uc885\uc801\uc73c\ub85c \uad6c\ud604\ud560 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc740 \ud0c0\uc774\uba38\ub97c \uc0ac\uc6a9\ud55c \uc120\uc810\ud615 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc774\uace0, \uc720\uc800 \ubaa8\ub4dc\uc758 \uc5ec\ub7ec \ud0dc\uc2a4\ud06c\ub97c \uc2a4\uc704\uce6d \ud560 \uac83\uc785\ub2c8\ub2e4. CALL \uba85\ub839\uc73c\ub85c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\ud558\ub294 \ubc29\ubc95\uc740 \ube44\uc120\uc810\ud615 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \uc704\ud55c \uae30\ub2a5\uc785\ub2c8\ub2e4. JMP \ub610\ub294 CALL \uba85\ub839\uc744 \ud1b5\ud55c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \uc9c1\uc811 \uc0ac\uc6a9\ud558\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub7f0 \ud558\ub4dc\uc6e8\uc5b4\uc801\uc778(CPU\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294)\ubc29\uc2dd\uc5d0 \ub300\ud55c \uc9c0\uc2dd\uc774 \uae30\ubc18\uc9c0\uc2dd\uc774 \ub418\uae30 \ub54c\ubb38\uc5d0 \uc880 \ub354 \uc55e\uc73c\ub85c \uad6c\ud604\ud560 TASK SWITCHING\uc744 \uc798 \uc774\ud574\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"day16: call\uc744 \uc774\uc6a9\ud55c task switching"},{"location":"os-making/16/#day-16-call-task-switching","text":"","title":"day 16: CALL \uba85\ub839\uc5d0 \uc758\ud55c Task Switching"},{"location":"os-making/16/#_1","text":"jmp\ub97c \uc0ac\uc6a9\ud55c task switching\uc778 day 12\uc5d0\uc11c\uc758 \uacb0\uacfc\uc640 \uac19\uc2b5\ub2c8\ub2e4. jmp \uba85\ub839\uc5d0 \uc758\ud55c Task Switching\uacfc \ub2e4\ub978 \uc810\uc740, \ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d\uc744 \ud560 \ub54c JMP \uba85\ub839 => CALL \uba85\ub839 task\ub97c \ucc98\ub9ac\ud558\ub294 \ub8e8\ud2f4\uc5d0\uc11c JMP \uba85\ub839\uc73c\ub85c \ucee8\ud14d\uc2a4\ud2b8 \uc2a4\uc704\uce6d => IRET \uc774 \ub450 \uac00\uc9c0\uc785\ub2c8\ub2e4(\ub2e8 \ub450 \uc904).","title":"\uc624\ub298\uc758 \uacb0\uacfc"},{"location":"os-making/16/#_2","text":"kernel.asm 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 ; src\\kernel.asm %include \"src/init.inc\" [org 0x010000] [bits 16] start: cld ; Advance = inc mov ax, cs mov ds, ax xor ax, ax mov ss, ax xor ebx, ebx lea eax, [tss1] ; EAX\uc5d0 tss1\uc758 \ubb3c\ub9ac \uc8fc\uc18c\ub97c \ub123\uc2b5\ub2c8\ub2e4. add eax, 0x10000 mov [descriptor4+2], ax shr eax, 16 mov [descriptor4+4], al mov [descriptor4+7], ah lea eax, [tss2] ; EAX\uc5d0 tss2\uc758 \ubb3c\ub9ac \uc8fc\uc18c\ub97c \ub123\uc2b5\ub2c8\ub2e4. add eax, 0x10000 mov [descriptor5+2], ax shr eax, 16 mov [descriptor5+4], al mov [descriptor5+7], ah cli lgdt[gdtr] mov eax, cr0 or eax, 0x00000001 mov cr0, eax jmp $+2 nop nop jmp dword SysCodeSelector:PM_Start [bits 32] PM_Start: mov bx, SysDataSelector mov ds, bx mov es, bx mov fs, bx mov gs, bx mov ss, bx lea esp, [PM_Start] mov ax, TSS1Selector ltr ax lea eax, [process2] mov [tss2_eip], eax mov [tss2_esp], esp call TSS2Selector:0 ; \ub2e4\uc2dc \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc774 \ub418\uba74 \uc774\uacf3\uc73c\ub85c \ub3cc\uc544\uc635\ub2c8\ub2e4. mov edi, 80*2*9 lea esi, [msg_process1] call printf jmp $ ;************************************ ;********** Subroutines ************* ;************************************ printf: push eax push es mov ax, VideoSelector mov es, ax printf_loop: mov al, byte [esi] mov byte [es:edi], al inc edi mov byte [es:edi], 0x06 inc esi inc edi or al, al jz printf_end jmp printf_loop printf_end: pop es pop eax ret process2: mov edi, 80*2*7 lea esi, [msg_process2] call printf iret ;************************************ ;*********** Data Area ************** ;************************************ msg_process1 db \"This is System Process 1\", 0 msg_process2 db \"This is System Process 2\", 0 gdtr: dw gdt_end-gdt-1 dd gdt gdt: dd 0, 0 dd 0x0000FFFF, 0x00CF9A00 dd 0x0000FFFF, 0x00CF9200 dd 0x8000FFFF, 0x0040920B descriptor4: dw 104 dw 0 db 0 db 0x89 db 0 db 0 descriptor5: dw 104 dw 0 db 0 db 0x89 db 0 db 0 gdt_end: tss1: dw 0, 0 ; \uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 back link dd 0 ; ESP0 dw 0, 0 ; SS0, \uc0ac\uc6a9 \uc548 \ud568 dd 0 ; ESP1 dw 0, 0 ; SS1, \uc0ac\uc6a9 \uc548 \ud568 dd 0 ; ESP2 dw 0, 0 ; SS2, \uc0ac\uc6a9 \uc548 \ud568 dd 0, 0, 0 ; CR3, EIP, EFLAGS dd 0, 0, 0, 0 ; EAX, ECX, EDX, EBX dd 0, 0, 0, 0 ; ESP, EBP, ESI, EDI dw 0, 0 ; ES, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; CS, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; SS, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; DS, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; FS, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; GS, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; LDT, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; \ub514\ubc84\uadf8\uc6a9 T \ube44\ud2b8, IO \ud5c8\uac00 \ube44\ud2b8\ub9f5 tss2: dw 0, 0 ; \uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 back link dd 0 ; ESP0 dw 0, 0 ; SS0, \uc0ac\uc6a9 \uc548 \ud568 dd 0 ; ESP1 dw 0, 0 ; SS1, \uc0ac\uc6a9 \uc548 \ud568 dd 0 ; ESP2 dw 0, 0 ; SS2, \uc0ac\uc6a9 \uc548 \ud568 dd 0 tss2_eip: dd 0, 0 ; EIP, EFLAGS(EFLAGS=0x200 for ints) dd 0, 0, 0, 0 tss2_esp: dd 0, 0, 0, 0 ; ESP. EBP, ESI, EDI dw SysDataSelector, 0 ; ES, \uc0ac\uc6a9 \uc548 \ud568 dw SysCodeSelector, 0 ; CS, \uc0ac\uc6a9 \uc548 \ud568 dw SysDataSelector, 0 ; SS, \uc0ac\uc6a9 \uc548 \ud568 dw SysDataSelector, 0 ; DS, \uc0ac\uc6a9 \uc548 \ud568 dw SysDataSelector, 0 ; FS, \uc0ac\uc6a9 \uc548 \ud568 dw SysDataSelector, 0 ; GS, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; LDT, \uc0ac\uc6a9 \uc548 \ud568 dw 0, 0 ; \ub514\ubc84\uadf8\uc6a9 T \ube44\ud2b8, IO \ud5c8\uac00 \ube44\ud2b8\ub9f5 times 1024-($-$$) db 0","title":"\uc18c\uc2a4\ucf54\ub4dc"},{"location":"os-making/16/#_3","text":"GDT\uc5d0 \uc788\ub294 TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \ub300\ud558\uc5ec \uc140\ub809\ud130\ub97c \uc0ac\uc6a9\ud55c CALL \uba85\ub839\uc5d0\uc11c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc774 \uc77c\uc5b4\ub098\uace0 \ub610\ud55c IRET \uba85\ub839\uc744 \ud1b5\ud574\uc11c\ub3c4 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc774 \uc77c\uc5b4\ub0a9\ub2c8\ub2e4. EFLAG TSS Descriptor\uc758 Segment type\ubd80\ubd84\uc5d0\ub294 B \ube44\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 EFLAGS \ub808\uc9c0\uc2a4\ud130\uc758 14\ubc88 \ube44\ud2b8\ub294 NT(nested) \ube44\ud2b8\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. NT\uc758 \uc758\ubbf8\ub294 IRET \uba85\ub839\uc744 \uc2e4\ud589\ud560 \ub54c \uc774\uac83\uc774 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\uc758 IRET\uc778\uc9c0, \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\ub418\uc5b4 \ub2e4\uc2dc \uc774\uc804\uc758 \ud0dc\uc2a4\ud06c\ub85c \ub3cc\uc544\uac00\ub294 \uc758\ubbf8\uc758 IRET\uc778\uc9c0 CPU\uac00 \uad6c\ubcc4\ud560 \ub54c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. LTR \uba85\ub839 TSS \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 B \ube44\ud2b8\ub97c 1\ub85c \uc138\ud2b8\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 CPU\ub294 \ud604\uc7ac \uc2e4\ud589\ub418\uace0 \uc788\ub294 \ud0dc\uc2a4\ud06c\uc758 B \ube44\ud2b8\ub294 \ud56d\uc0c1 1\uc774\ub77c\uace0 \uc778\uc2dd\ud569\ub2c8\ub2e4. CALL \uba85\ub839 CALL \uba85\ub839\uc5d0 \uc758\ud55c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc774 \uc77c\uc5b4\ub0a0 \ub54c \uc774\uc804 \ud0dc\uc2a4\ud06c\uc758 EFLAGS\uc5d0 \uc788\ub294 NT \ube44\ud2b8\uac00 1\ub85c \uc138\ud2b8\ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 B \ube44\ud2b8\ub3c4 1\ub85c \uc138\ud2b8\ub429\ub2c8\ub2e4. \ub610\ud55c TSS \uc601\uc5ed\uc5d0 \uc788\ub294 \"\uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 \ubc31\ub9c1\ud06c\" \uce78\uc5d0 \uad6c\ud0dc\uc2a4\ud06c\uc758 TSS \ub514\uc2a4\ud06c\ub9bd\ud130 \uc140\ub809\ud130\ub97c \uc800\uc7a5\ud574 \ub461\ub2c8\ub2e4. \uc774\uc804 \ud0dc\uc2a4\ud06c\uc758 B \ube44\ud2b8\ub294 1\uc778 \ucc44\ub85c \ub0a8\uc544\uc788\uc2b5\ub2c8\ub2e4.","title":"\uc624\ub298 \ud559\uc2b5 \ub0b4\uc6a9"},{"location":"os-making/16/#task-switching-interrupt","text":"\uc704\uc640 \uac19\uc774 \uc778\ud130\ub7fd\ud2b8\uac00 \uac78\ub9ac\ub354\ub77c\ub3c4 EFLAGS \ub808\uc9c0\uc2a4\ud130\ub97c ISR(Interrupt Service Routine)\uc5d0\uc11c \uc800\uc7a5\ud574 \ub193\uc558\ub2e4\uac00 \ubcf5\uc6d0\ud558\uae30 \ub54c\ubb38\uc5d0 \ubb38\uc81c\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.","title":"Task Switching\uacfc Interrupt\uac00 \uac19\uc774 \uac78\ub9ac\uba74?"},{"location":"os-making/16/#cpu-context-switching","text":"JMP \uba85\ub839\uc73c\ub85c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \ud558\ub294 \uac83\uc740 \ud604\uc7ac \uc2e4\ud589\ud558\ub294 context\uc758 EFLAGS\uc758 B \ube44\ud2b8\uac00 \ud56d\uc0c1 1\uc774 \ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc774\uc804\uc758 context EFLAGS\uc758 B\ube44\ud2b8\ub294 \ud56d\uc0c1 0\uc774 \ub429\ub2c8\ub2e4. JMP \uba85\ub839\uc73c\ub85c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \ud558\ub294 \uac83\uc740 \ud0dc\uc2a4\ud06c\ub07c\ub9ac\uc758 \uad6c\uc18d\uc131\uc774 \uc5c6\uc2b5\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \ucd5c\uc885\uc801\uc73c\ub85c \uad6c\ud604\ud560 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc740 \ud0c0\uc774\uba38\ub97c \uc0ac\uc6a9\ud55c \uc120\uc810\ud615 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc774\uace0, \uc720\uc800 \ubaa8\ub4dc\uc758 \uc5ec\ub7ec \ud0dc\uc2a4\ud06c\ub97c \uc2a4\uc704\uce6d \ud560 \uac83\uc785\ub2c8\ub2e4. CALL \uba85\ub839\uc73c\ub85c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\ud558\ub294 \ubc29\ubc95\uc740 \ube44\uc120\uc810\ud615 \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \uc704\ud55c \uae30\ub2a5\uc785\ub2c8\ub2e4. JMP \ub610\ub294 CALL \uba85\ub839\uc744 \ud1b5\ud55c \ud0dc\uc2a4\ud06c \uc2a4\uc704\uce6d\uc744 \uc9c1\uc811 \uc0ac\uc6a9\ud558\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc774\ub7f0 \ud558\ub4dc\uc6e8\uc5b4\uc801\uc778(CPU\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294)\ubc29\uc2dd\uc5d0 \ub300\ud55c \uc9c0\uc2dd\uc774 \uae30\ubc18\uc9c0\uc2dd\uc774 \ub418\uae30 \ub54c\ubb38\uc5d0 \uc880 \ub354 \uc55e\uc73c\ub85c \uad6c\ud604\ud560 TASK SWITCHING\uc744 \uc798 \uc774\ud574\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"CPU\uc5d0\uc11c \uc9c0\uc6d0\ud558\ub294 Context Switching \uc815\ub9ac"},{"location":"os-making/17/","text":"day 17: \ubcf4\ud638(2) Protected Mode\ub85c \ub118\uc5b4\uc628 \ud6c4\uc5d0\ub294 CPU\ub294 \uac01 \uba85\ub839\uc5b4\ub9c8\ub2e4 \uc544\ub798\uc640 \uac19\uc740 \uccb4\ud06c\ub97c \ud558\uace0, \ud569\ub2f9\ud55c \uba85\ub839\ub9cc \uc2e4\ud589\uc2dc\ud0a4\uace0, \ud569\ub2f9\ud558\uc9c0 \uc54a\ub2e4\uba74 \ud3f4\ud2b8\ub97c \ubc1c\uc0dd\uc2dc\ucf1c \ucee4\ub110\uc774\ub098 \uc720\uc800 \ud504\ub85c\uadf8\ub7a8\uc774 \uc790\uc2e0\uc774 \uc774 \uc5d0\ub7ec\ub97c \ub2e4\uc2dc \uc870\uc815\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. Limit \uccb4\ud06c Type \uccb4\ud06c \ud2b9\uad8c \ub808\ubca8 \uccb4\ud06c \uba85\ub839 \uc138\ud2b8 \uccb4\ud06c CPU\uc758 \uccb4\ud06c \ud3ec\uc778\ud2b8 Limit \uccb4\ud06c \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 Limit\uc740 \ud504\ub85c\uadf8\ub7a8 \ub610\ub294 \ud504\ub85c\uc138\uc2a4\uac00 \uc138\uadf8\uba3c\ud2b8 \uc678\uc758 \uba54\ubaa8\ub9ac \uc704\uce58\ub97c \uc624\ud504\uc14b\uc73c\ub85c \uc9c0\uc815\ud558\uc9c0 \ubabb\ud558\uac8c \ud569\ub2c8\ub2e4. \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub0b4\uc758 G \ube44\ud2b8\uac00 0\uc77c \ub54c\uc5d0\ub294 Limit\uc744 0~0xFFFFF(1MB)\uae4c\uc9c0 \uc120\ud0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc758\ubbf8\ub294 \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc758 \ud06c\uae30\ub97c 0\uc73c\ub85c \uc9c0\uc815\ud574\ub3c4 \ub418\uace0, 0xFFFFF\ub85c \uc9c0\uc815\ud574\ub3c4 \ub41c\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4. \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc5d0\uc11c \uc720\ud6a8 Limit\uc740 \uc804\uccb4 \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc758 \ud06c\uae30\uc5d0\uc11c 1\ubc14\uc774\ud2b8\ub97c \ube80 \uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \uacbd\uc6b0 CPU\ub294 \uc77c\ubc18 \ubcf4\ud638 \uc608\uc678(#GP)\ub97c \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4. \uc624\ud504\uc14b\uc774 \uc720\ud6a8 Limit\ubcf4\ub2e4 \ud070 \ubc14\uc774\ud2b8 \uc624\ud504\uc14b\uc774 \uc720\ud6a8 Limit-1\ubc14\uc774\ud2b8\ubcf4\ub2e4 \ud070 \uc6cc\ub4dc \uc624\ud504\uc14b\uc774 \uc720\ud6a8 Limit-3\ubc14\uc774\ud2b8\ubcf4\ub2e4 \ud070 \ub354\ube14\uc6cc\ub4dc \uc624\ud504\uc14b\uc774 \uc720\ud6a8 Limit-7\ubc14\uc774\ud2b8\ubcf4\ub2e4 \ud070 \ucffc\ub4dc\uc6cc\ub4dc Limit \uccb4\ud06c\ub294 \ubc1c\uc0dd\ud588\uc744 \ub54c \uac80\ucd9c\ub418\uae30 \ub54c\ubb38\uc5d0 \uc6d0\uc778\uc744 \uc7a1\uc544\ub0b4\uae30\uac00 \uc27d\uc2b5\ub2c8\ub2e4. CPU\ub294 \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc758 Limit \uccb4\ud06c\uc640 \ub354\ubd88\uc5b4 GDT\ub098 IDT \uac19\uc740 \ud14c\uc774\ube14 \uadf8\ub9ac\uace0 TSS \uc601\uc5ed\uc758 \ud06c\uae30\ub3c4 \uccb4\ud06c\ud569\ub2c8\ub2e4. \uc774\ub294 GDT, IDT\ub294 GDTR, IDTR\uc758 6\ubc14\uc774\ud2b8(48\ube44\ud2b8) \uc911 2\ubc14\uc774\ud2b8(16\ube44\ud2b8)\uc5d0 \ud574\ub2f9\ud558\ub294 Limit\uac12\uc744 \uc0ac\uc6a9\ud558\uae30\ub3c4 \ud558\uace0, TSS\ub294 TR \ub808\uc9c0\uc2a4\ud130 6\ubc14\uc774\ud2b8 \uc911 Limit\uc744 \ub098\ud0c0\ub0b4\ub294 2\ubc14\uc774\ud2b8\ub97c \uc0ac\uc6a9\ud558\uc5ec Limit\uc744 \uccb4\ud06c\ud569\ub2c8\ub2e4. Type \uccb4\ud06c \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0\ub294 S \ube44\ud2b8\uc640 Type \ud544\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. S \ube44\ud2b8\uac00 0\uc774\uba74 Type \ud544\ub4dc\uac00 \uc2dc\uc2a4\ud15c Type\uc774\ub77c\ub294 \uac83\uc774\uace0, 1\uc774\uba74 \ucf54\ub4dc\ub098 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\uc758 Type\uc774\ub77c\ub294 \ub73b\uc785\ub2c8\ub2e4. S\ube44\ud2b8\uac00 0\uc77c \ub54c\uc758 \ud0c0\uc785 \uc608\ub97c \ub4e4\uc5b4 P \ube44\ud2b8\uac00 1, DPL\uc774 00, S\uac00 0\uc774\uace0, 32\ube44\ud2b8 \uc778\ud2b8\ub7fd\ud2b8 \uac8c\uc774\ud2b8\ub77c\uba74 \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \ud55c \ubd80\ubd84\uc5d0 0x8E\uac00 \ub4e4\uc5b4\uac00\uace0, 32\ube44\ud2b8 TSS\uc600\ub2e4\uba74 0x89\uac00 \ub4e4\uc5b4\uac00\uace0, 32\ube44\ud2b8 TSS\uc758 B\ube44\ud2b8\uac00 1\ub85c \uc138\ud305\ub418\uc5c8\uc744 \ub54c 0x8B\uac00 \ub429\ub2c8\ub2e4. \uc544\ub798\uc758 \uacbd\uc6b0\uac00 Type \uccb4\ud06c\ub418\ub294 \ub300\ud45c\uc801\uc778 \uc608\uc785\ub2c8\ub2e4. \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uac00 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub85c\ub4dc\ub420 \ub54c CS\uc5d0\ub294 \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\ub9cc\uc774 \ub85c\ub4dc\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 2 MOV AX, 0x08 MOV CS, AX \ub514\uc2a4\ud06c\ub9bd\ud130\uac00 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc774\ubbf8 \ub85c\ub4dc\ub418\uc5b4 \uc788\ub294 \uc138\uadf8\uba3c\ud2b8\uc5d0 \uba85\ub839\uc774 \uc561\uc138\uc2a4 \ud560 \ub54c \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc5d0\ub294 \ub370\uc774\ud130\uc758 \uc4f0\uae30\uac00 \uae08\uc9c0\ub429\ub2c8\ub2e4. \uc77d\uae30 \uc804\uc6a9 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\uc5d0 \ub370\uc774\ud130\uc758 \uc4f0\uae30\uac00 \uae08\uc9c0\ub429\ub2c8\ub2e4. \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc5d0 \uc77d\uae30 \uac00\ub2a5 \ud50c\ub798\uadf8\uac00 \uc124\uc815\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc5d0\uc11c\ub294 \uc774 \uc601\uc5ed\uc744 \uc77d\uc5b4\ub4e4\uc77c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. CALL JMP \uba85\ub839\uc758 \uc624\ud37c\ub79c\ub4dc\uc5d0 \uc140\ub809\ud130\uac00 \uc788\uc744 \ub54c \uadf8 \uc140\ub809\ud130\uc5d0 \ub300\ud55c \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 Type \ud544\ub4dc\ub97c \uc870\uc0ac\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 TSS \uc140\ub809\ud130\ub97c \uc624\ud37c\ub79c\ub4dc\ub85c \ud55c CALL JMP \uba85\ub839\uc5d0\uc11c\ub294 \uadf8 \uc140\ub809\ud130\uc5d0 \ub300\ud55c \ub514\uc2a4\ud06c\ub9bd\ud130\uac00 TSS\uc6a9\uc778\uc9c0\ub97c \uc790\ub3d9\uc801\uc73c\ub85c \uccb4\ud06c\ud569\ub2c8\ub2e4. \ub610\ub294 IRET \uba85\ub839\uc774 \ub0b4\ub824\uc84c\uc744 \ub54c \ud604\uc7ac \uc2e4\ud589 \uc911\uc778 \ud0dc\uc2a4\ud06c\uc758 NT \ube44\ud2b8\uac00 1\ub85c \uc138\ud305\ub418\uc5b4 \uc788\uc73c\uba74 \uc774\uc5d0 \ub300\ud55c TSS \uc601\uc5ed\uc5d0\uc11c \"\uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 \ubc31\ub9c1\ud06c\"\uac00 TSS\uc6a9\uc778\uc9c0\ub97c \uccb4\ud06c\ud569\ub2c8\ub2e4. GDT\uc758 \ub9e8 \ucc98\uc74c \ub514\uc2a4\ud06c\ub9bd\ud130\uc778 NULL \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c CS\ub098 SS\uc5d0 \ub85c\ub4dc\ud558\ub824\uace0 \ud560 \ub54c\uc5d0\ub294 \uc77c\ubc18 \ubcf4\ud638 \uc608\uc678(#GP)\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 DS, ES, FS, GS\uc5d0 \ub85c\ub4dc\ub294 \uac00\ub2a5\ud558\ub098 \ub85c\ub4dc\ub41c \uc140\ub809\ud130\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc5d0 \uc811\uadfc\ud558\ub824\uace0 \ud574\ub3c4 \uc77c\ubc18 \ubcf4\ud638 \uc608\uc678(#GP)\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 CPU\uc758 \ud2b9\uad8c \ub808\ubca8\uc740 0~3\uc73c\ub85c 4\uac1c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc774 \uc911 0\uacfc 3\uc758 2\uac1c\uc758 \ub808\ubca8\ub9cc\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub0ae\uc740 \ub808\ubca8\uc758 \ud0dc\uc2a4\ud06c\uac00 \ub192\uc740 \ub808\ubca8\uc758 \ub370\uc774\ud130\ub97c \ucc38\uc870\ud558\ub824\uace0 \ud558\uba74 \uc77c\ubc18 \ubcf4\ud638 \uc5d0\ub7ec(#GP)\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8\uc744 \uc774\ud574\ud558\uae30 \uc704\ud574\uc11c\ub294 CPL, DPL, RPL \uc138 \uac1c\uc758 \ub808\ubca8\uc744 \uc54c\uc544\uc57c \ud569\ub2c8\ub2e4. CPL(Current Privilege Level) CPL\uc740 \ud604\uc7ac \uc2e4\ud589\ub418\uace0 \uc788\ub294 \ud0dc\uc2a4\ud06c\uc758 \ud2b9\uad8c \ub808\ubca8\ub85c, CS, SS \uc140\ub809\ud130 \ub808\uc9c0\uc2a4\ud130\uc758 0, 1\ubc88\uc9f8 \ube44\ud2b8\uc5d0 \uc788\ub294 \uc218\uc785\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc774 \ub2e4\ub978 \ud2b9\uad8c \ub808\ubca8\uc758 \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8\ub85c \uc81c\uc5b4 \uc774\ud589\ub418\uba74 CPU\ub294 CPL\uc744 \ubcc0\uacbd\ud569\ub2c8\ub2e4. DPL(Description Privilege Level) \uc704\uc5d0\uc11c CPL\uc740 \ud604\uc7ac CS, SS\uc758 0, 1\ube44\ud2b8\uc758 \uac12\uc774\ub77c\uace0 \ud588\uc2b5\ub2c8\ub2e4. DPL\uc740 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \uae30\uc7ac\ub41c DPL \uac12\uc774\uace0 2\ube44\ud2b8\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ud1b5\ud55c \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc73c\ub85c\uc758 \ubaa8\ub4e0 \uc811\uadfc\uc5d0\uc11c \ud56d\uc0c1 CPL\uacfc DPL\uc758 \uad00\uacc4\uac00 \uccb4\ud06c\ub429\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ud604\uc7ac \ub0ae\uc740 \ub808\ubca8\uc758 CPL\uc744 \uac00\uc9c0\uace0 \uc788\ub294\ub370, \ub192\uc740 \ub808\ubca8\uc758 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc5d0 \uc811\uadfc\uc744 \uc2dc\ub3c4\ud55c\ub2e4\uba74 CS\uc758 0, 1\ube44\ud2b8(CPL)\uc640 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \uc788\ub294 DPL \uac12\uc744 \ube44\uad50\ud560 \uac83\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc0c1\ud669\uc5d0\uc11c\ub294 \uccb4\ud06c \ud6c4\uc5d0 \ubb3c\ub860 \ubd88\uac00\ub2a5\ud558\ub2e4\ub294 \ud310\ub2e8\uc774 \ub0b4\ub824\uc9c8 \uac83\uc785\ub2c8\ub2e4. RPL(Requested Privilege Level) \ud2b9\uad8c \ub808\ubca8 3\uc778 \ud504\ub85c\uc138\uc2a4\uac00 \ucf5c\uac8c\uc774\ud2b8(\ub0ae\uc740 \ud2b9\uad8c\ub808\ubca8\uc5d0\uc11c \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ub8e8\ud2f4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ud558\ub294 \uad00\ubb38)\uc744 \ud1b5\ud574 \ud2b9\uad8c \ub808\ubca8 0\uc5d0 \uc788\ub294 \ub8e8\ud2f4\uc744 \uc2e4\ud589\ud560 \ub54c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ub54c \uc77c\uc2dc\uc801\uc73c\ub85c \ud2b9\uad8c \ub808\ubca8 0\uc73c\ub85c \ub4e4\uc5b4\uac00\uae30 \ub54c\ubb38\uc5d0 \ud2b9\uad8c \ub808\ubca8 0\uc758 \ub370\uc774\ud130 \uc601\uc5ed\uc5d0\ub3c4 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ud604\uc0c1\uc744 \uad50\ubb18\ud788 \uc774\uc6a9\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\ub3c4 \uc874\uc7ac\ud560 \uac00\ub2a5\uc131\uc774 \uc788\uc2b5\ub2c8\ub2e4. RPL \uac12\uc740 \uc774\ub7ec\ud55c \uc0c1\ud669\uc744 \ub9c9\uae30 \uc704\ud574 OS \ucee4\ub110\uc774 \uc0ac\uc6a9\ud558\ub294 \uac12\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ucf5c\uac8c\uc774\ud2b8\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294 \ub8e8\ud2f4\uc5d0 \uc774 \ub8e8\ud2f4\uc774 \uc5b4\ub514\uc5d0\uc11c \ubd88\ub7ec\uc84c\ub294\uc9c0\ub97c \uae30\ub85d\ud558\ub294 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 3\uc778 \ud504\ub85c\uc138\uc2a4\uac00 \ucf5c\uac8c\uc774\ud2b8\ub97c \ud1b5\ud574 \uc774 \ub8e8\ud2f4\uc744 \ubd88\ub800\ub2e4\uba74 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \ud2b9\uad8c \ub808\ubca8 3\uc5d0\uc11c \ubd88\ub7ec\uc84c\ub2e4\ub294 \uac83\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4. RPL\uc740 \ub2e8\uc5b4\uac00 \uc554\uc2dc\ud558\ub294 \ubc14\uc640 \uac19\uc774 \ub204\uac00 \uc694\uad6c\ud588\ub294\uac00\ub97c \ub098\ud0c0\ub0b4\ub294 \uac12\uc785\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 3\uc5d0\uc11c \ubd88\ub7ec\uc84c\ub2e4\ub294 \ud45c\uc2dc\ub97c \ud574\ub450\uba74 \ud2b9\uad8c \ub808\ubca8 0\uc758 \ub370\uc774\ud130\ub294 \uac74\ub4dc\ub9ac\uc9c0 \ubabb\ud560 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ud2b9\uad8c \ub808\ubca8 0\uc5d0\uc11c \ubd88\ub7ec\uc84c\ub2e4\uba74 OS \ucee4\ub110\uacfc \uac19\uc740 \ub808\ubca8\uc5d0\uc11c \ubd88\ub7ec\uc84c\uae30 \ub54c\ubb38\uc5d0 \ud2b9\uad8c \ub808\ubca8 0\uc758 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \ucf5c\uac8c\uc774\ud2b8 \uc774\uc678\uc758 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 RPL\uc740 CPL\uacfc \uac19\ub2e4\uace0 \ubcf4\uba74 \ub429\ub2c8\ub2e4. Done \ub531 200\ud398\uc774\uc9c0\ub97c \ubd24\uc2b5\ub2c8\ub2e4. \ucf5c\uac8c\uc774\ud2b8\ubd80\ud130\ub294 \ub2e4\uc74c\uc5d0..","title":"day17: protection"},{"location":"os-making/17/#day-17-2","text":"Protected Mode\ub85c \ub118\uc5b4\uc628 \ud6c4\uc5d0\ub294 CPU\ub294 \uac01 \uba85\ub839\uc5b4\ub9c8\ub2e4 \uc544\ub798\uc640 \uac19\uc740 \uccb4\ud06c\ub97c \ud558\uace0, \ud569\ub2f9\ud55c \uba85\ub839\ub9cc \uc2e4\ud589\uc2dc\ud0a4\uace0, \ud569\ub2f9\ud558\uc9c0 \uc54a\ub2e4\uba74 \ud3f4\ud2b8\ub97c \ubc1c\uc0dd\uc2dc\ucf1c \ucee4\ub110\uc774\ub098 \uc720\uc800 \ud504\ub85c\uadf8\ub7a8\uc774 \uc790\uc2e0\uc774 \uc774 \uc5d0\ub7ec\ub97c \ub2e4\uc2dc \uc870\uc815\ud558\ub3c4\ub85d \ud569\ub2c8\ub2e4. Limit \uccb4\ud06c Type \uccb4\ud06c \ud2b9\uad8c \ub808\ubca8 \uccb4\ud06c \uba85\ub839 \uc138\ud2b8 \uccb4\ud06c","title":"day 17: \ubcf4\ud638(2)"},{"location":"os-making/17/#cpu","text":"Limit \uccb4\ud06c \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 Limit\uc740 \ud504\ub85c\uadf8\ub7a8 \ub610\ub294 \ud504\ub85c\uc138\uc2a4\uac00 \uc138\uadf8\uba3c\ud2b8 \uc678\uc758 \uba54\ubaa8\ub9ac \uc704\uce58\ub97c \uc624\ud504\uc14b\uc73c\ub85c \uc9c0\uc815\ud558\uc9c0 \ubabb\ud558\uac8c \ud569\ub2c8\ub2e4. \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 \ub0b4\uc758 G \ube44\ud2b8\uac00 0\uc77c \ub54c\uc5d0\ub294 Limit\uc744 0~0xFFFFF(1MB)\uae4c\uc9c0 \uc120\ud0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc758\ubbf8\ub294 \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc758 \ud06c\uae30\ub97c 0\uc73c\ub85c \uc9c0\uc815\ud574\ub3c4 \ub418\uace0, 0xFFFFF\ub85c \uc9c0\uc815\ud574\ub3c4 \ub41c\ub2e4\ub294 \ub73b\uc785\ub2c8\ub2e4. \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc5d0\uc11c \uc720\ud6a8 Limit\uc740 \uc804\uccb4 \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc758 \ud06c\uae30\uc5d0\uc11c 1\ubc14\uc774\ud2b8\ub97c \ube80 \uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \uacbd\uc6b0 CPU\ub294 \uc77c\ubc18 \ubcf4\ud638 \uc608\uc678(#GP)\ub97c \ubc1c\uc0dd\uc2dc\ud0b5\ub2c8\ub2e4. \uc624\ud504\uc14b\uc774 \uc720\ud6a8 Limit\ubcf4\ub2e4 \ud070 \ubc14\uc774\ud2b8 \uc624\ud504\uc14b\uc774 \uc720\ud6a8 Limit-1\ubc14\uc774\ud2b8\ubcf4\ub2e4 \ud070 \uc6cc\ub4dc \uc624\ud504\uc14b\uc774 \uc720\ud6a8 Limit-3\ubc14\uc774\ud2b8\ubcf4\ub2e4 \ud070 \ub354\ube14\uc6cc\ub4dc \uc624\ud504\uc14b\uc774 \uc720\ud6a8 Limit-7\ubc14\uc774\ud2b8\ubcf4\ub2e4 \ud070 \ucffc\ub4dc\uc6cc\ub4dc Limit \uccb4\ud06c\ub294 \ubc1c\uc0dd\ud588\uc744 \ub54c \uac80\ucd9c\ub418\uae30 \ub54c\ubb38\uc5d0 \uc6d0\uc778\uc744 \uc7a1\uc544\ub0b4\uae30\uac00 \uc27d\uc2b5\ub2c8\ub2e4. CPU\ub294 \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc758 Limit \uccb4\ud06c\uc640 \ub354\ubd88\uc5b4 GDT\ub098 IDT \uac19\uc740 \ud14c\uc774\ube14 \uadf8\ub9ac\uace0 TSS \uc601\uc5ed\uc758 \ud06c\uae30\ub3c4 \uccb4\ud06c\ud569\ub2c8\ub2e4. \uc774\ub294 GDT, IDT\ub294 GDTR, IDTR\uc758 6\ubc14\uc774\ud2b8(48\ube44\ud2b8) \uc911 2\ubc14\uc774\ud2b8(16\ube44\ud2b8)\uc5d0 \ud574\ub2f9\ud558\ub294 Limit\uac12\uc744 \uc0ac\uc6a9\ud558\uae30\ub3c4 \ud558\uace0, TSS\ub294 TR \ub808\uc9c0\uc2a4\ud130 6\ubc14\uc774\ud2b8 \uc911 Limit\uc744 \ub098\ud0c0\ub0b4\ub294 2\ubc14\uc774\ud2b8\ub97c \uc0ac\uc6a9\ud558\uc5ec Limit\uc744 \uccb4\ud06c\ud569\ub2c8\ub2e4. Type \uccb4\ud06c \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0\ub294 S \ube44\ud2b8\uc640 Type \ud544\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. S \ube44\ud2b8\uac00 0\uc774\uba74 Type \ud544\ub4dc\uac00 \uc2dc\uc2a4\ud15c Type\uc774\ub77c\ub294 \uac83\uc774\uace0, 1\uc774\uba74 \ucf54\ub4dc\ub098 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\uc758 Type\uc774\ub77c\ub294 \ub73b\uc785\ub2c8\ub2e4. S\ube44\ud2b8\uac00 0\uc77c \ub54c\uc758 \ud0c0\uc785 \uc608\ub97c \ub4e4\uc5b4 P \ube44\ud2b8\uac00 1, DPL\uc774 00, S\uac00 0\uc774\uace0, 32\ube44\ud2b8 \uc778\ud2b8\ub7fd\ud2b8 \uac8c\uc774\ud2b8\ub77c\uba74 \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \ud55c \ubd80\ubd84\uc5d0 0x8E\uac00 \ub4e4\uc5b4\uac00\uace0, 32\ube44\ud2b8 TSS\uc600\ub2e4\uba74 0x89\uac00 \ub4e4\uc5b4\uac00\uace0, 32\ube44\ud2b8 TSS\uc758 B\ube44\ud2b8\uac00 1\ub85c \uc138\ud305\ub418\uc5c8\uc744 \ub54c 0x8B\uac00 \ub429\ub2c8\ub2e4. \uc544\ub798\uc758 \uacbd\uc6b0\uac00 Type \uccb4\ud06c\ub418\ub294 \ub300\ud45c\uc801\uc778 \uc608\uc785\ub2c8\ub2e4. \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uac00 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub85c\ub4dc\ub420 \ub54c CS\uc5d0\ub294 \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\ub9cc\uc774 \ub85c\ub4dc\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 2 MOV AX, 0x08 MOV CS, AX \ub514\uc2a4\ud06c\ub9bd\ud130\uac00 \uc138\uadf8\uba3c\ud2b8 \ub808\uc9c0\uc2a4\ud130\uc5d0 \uc774\ubbf8 \ub85c\ub4dc\ub418\uc5b4 \uc788\ub294 \uc138\uadf8\uba3c\ud2b8\uc5d0 \uba85\ub839\uc774 \uc561\uc138\uc2a4 \ud560 \ub54c \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc5d0\ub294 \ub370\uc774\ud130\uc758 \uc4f0\uae30\uac00 \uae08\uc9c0\ub429\ub2c8\ub2e4. \uc77d\uae30 \uc804\uc6a9 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8\uc5d0 \ub370\uc774\ud130\uc758 \uc4f0\uae30\uac00 \uae08\uc9c0\ub429\ub2c8\ub2e4. \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc5d0 \uc77d\uae30 \uac00\ub2a5 \ud50c\ub798\uadf8\uac00 \uc124\uc815\ub418\uc9c0 \uc54a\uc740 \uc0c1\ud0dc\uc5d0\uc11c\ub294 \uc774 \uc601\uc5ed\uc744 \uc77d\uc5b4\ub4e4\uc77c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. CALL JMP \uba85\ub839\uc758 \uc624\ud37c\ub79c\ub4dc\uc5d0 \uc140\ub809\ud130\uac00 \uc788\uc744 \ub54c \uadf8 \uc140\ub809\ud130\uc5d0 \ub300\ud55c \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 Type \ud544\ub4dc\ub97c \uc870\uc0ac\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 TSS \uc140\ub809\ud130\ub97c \uc624\ud37c\ub79c\ub4dc\ub85c \ud55c CALL JMP \uba85\ub839\uc5d0\uc11c\ub294 \uadf8 \uc140\ub809\ud130\uc5d0 \ub300\ud55c \ub514\uc2a4\ud06c\ub9bd\ud130\uac00 TSS\uc6a9\uc778\uc9c0\ub97c \uc790\ub3d9\uc801\uc73c\ub85c \uccb4\ud06c\ud569\ub2c8\ub2e4. \ub610\ub294 IRET \uba85\ub839\uc774 \ub0b4\ub824\uc84c\uc744 \ub54c \ud604\uc7ac \uc2e4\ud589 \uc911\uc778 \ud0dc\uc2a4\ud06c\uc758 NT \ube44\ud2b8\uac00 1\ub85c \uc138\ud305\ub418\uc5b4 \uc788\uc73c\uba74 \uc774\uc5d0 \ub300\ud55c TSS \uc601\uc5ed\uc5d0\uc11c \"\uc774\uc804 \ud0dc\uc2a4\ud06c\ub85c\uc758 \ubc31\ub9c1\ud06c\"\uac00 TSS\uc6a9\uc778\uc9c0\ub97c \uccb4\ud06c\ud569\ub2c8\ub2e4. GDT\uc758 \ub9e8 \ucc98\uc74c \ub514\uc2a4\ud06c\ub9bd\ud130\uc778 NULL \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c CS\ub098 SS\uc5d0 \ub85c\ub4dc\ud558\ub824\uace0 \ud560 \ub54c\uc5d0\ub294 \uc77c\ubc18 \ubcf4\ud638 \uc608\uc678(#GP)\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 DS, ES, FS, GS\uc5d0 \ub85c\ub4dc\ub294 \uac00\ub2a5\ud558\ub098 \ub85c\ub4dc\ub41c \uc140\ub809\ud130\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc5d0 \uc811\uadfc\ud558\ub824\uace0 \ud574\ub3c4 \uc77c\ubc18 \ubcf4\ud638 \uc608\uc678(#GP)\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 CPU\uc758 \ud2b9\uad8c \ub808\ubca8\uc740 0~3\uc73c\ub85c 4\uac1c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc774 \uc911 0\uacfc 3\uc758 2\uac1c\uc758 \ub808\ubca8\ub9cc\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub0ae\uc740 \ub808\ubca8\uc758 \ud0dc\uc2a4\ud06c\uac00 \ub192\uc740 \ub808\ubca8\uc758 \ub370\uc774\ud130\ub97c \ucc38\uc870\ud558\ub824\uace0 \ud558\uba74 \uc77c\ubc18 \ubcf4\ud638 \uc5d0\ub7ec(#GP)\uac00 \ubc1c\uc0dd\ud569\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8\uc744 \uc774\ud574\ud558\uae30 \uc704\ud574\uc11c\ub294 CPL, DPL, RPL \uc138 \uac1c\uc758 \ub808\ubca8\uc744 \uc54c\uc544\uc57c \ud569\ub2c8\ub2e4. CPL(Current Privilege Level) CPL\uc740 \ud604\uc7ac \uc2e4\ud589\ub418\uace0 \uc788\ub294 \ud0dc\uc2a4\ud06c\uc758 \ud2b9\uad8c \ub808\ubca8\ub85c, CS, SS \uc140\ub809\ud130 \ub808\uc9c0\uc2a4\ud130\uc758 0, 1\ubc88\uc9f8 \ube44\ud2b8\uc5d0 \uc788\ub294 \uc218\uc785\ub2c8\ub2e4. \ud504\ub85c\uadf8\ub7a8\uc774 \ub2e4\ub978 \ud2b9\uad8c \ub808\ubca8\uc758 \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8\ub85c \uc81c\uc5b4 \uc774\ud589\ub418\uba74 CPU\ub294 CPL\uc744 \ubcc0\uacbd\ud569\ub2c8\ub2e4. DPL(Description Privilege Level) \uc704\uc5d0\uc11c CPL\uc740 \ud604\uc7ac CS, SS\uc758 0, 1\ube44\ud2b8\uc758 \uac12\uc774\ub77c\uace0 \ud588\uc2b5\ub2c8\ub2e4. DPL\uc740 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \uae30\uc7ac\ub41c DPL \uac12\uc774\uace0 2\ube44\ud2b8\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4. \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \ud1b5\ud55c \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc73c\ub85c\uc758 \ubaa8\ub4e0 \uc811\uadfc\uc5d0\uc11c \ud56d\uc0c1 CPL\uacfc DPL\uc758 \uad00\uacc4\uac00 \uccb4\ud06c\ub429\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ud604\uc7ac \ub0ae\uc740 \ub808\ubca8\uc758 CPL\uc744 \uac00\uc9c0\uace0 \uc788\ub294\ub370, \ub192\uc740 \ub808\ubca8\uc758 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc5d0 \uc811\uadfc\uc744 \uc2dc\ub3c4\ud55c\ub2e4\uba74 CS\uc758 0, 1\ube44\ud2b8(CPL)\uc640 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \uc788\ub294 DPL \uac12\uc744 \ube44\uad50\ud560 \uac83\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc0c1\ud669\uc5d0\uc11c\ub294 \uccb4\ud06c \ud6c4\uc5d0 \ubb3c\ub860 \ubd88\uac00\ub2a5\ud558\ub2e4\ub294 \ud310\ub2e8\uc774 \ub0b4\ub824\uc9c8 \uac83\uc785\ub2c8\ub2e4. RPL(Requested Privilege Level) \ud2b9\uad8c \ub808\ubca8 3\uc778 \ud504\ub85c\uc138\uc2a4\uac00 \ucf5c\uac8c\uc774\ud2b8(\ub0ae\uc740 \ud2b9\uad8c\ub808\ubca8\uc5d0\uc11c \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ub8e8\ud2f4\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ud558\ub294 \uad00\ubb38)\uc744 \ud1b5\ud574 \ud2b9\uad8c \ub808\ubca8 0\uc5d0 \uc788\ub294 \ub8e8\ud2f4\uc744 \uc2e4\ud589\ud560 \ub54c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \ub54c \uc77c\uc2dc\uc801\uc73c\ub85c \ud2b9\uad8c \ub808\ubca8 0\uc73c\ub85c \ub4e4\uc5b4\uac00\uae30 \ub54c\ubb38\uc5d0 \ud2b9\uad8c \ub808\ubca8 0\uc758 \ub370\uc774\ud130 \uc601\uc5ed\uc5d0\ub3c4 \uc811\uadfc\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ud604\uc0c1\uc744 \uad50\ubb18\ud788 \uc774\uc6a9\ud558\ub294 \ud504\ub85c\uadf8\ub7a8\ub3c4 \uc874\uc7ac\ud560 \uac00\ub2a5\uc131\uc774 \uc788\uc2b5\ub2c8\ub2e4. RPL \uac12\uc740 \uc774\ub7ec\ud55c \uc0c1\ud669\uc744 \ub9c9\uae30 \uc704\ud574 OS \ucee4\ub110\uc774 \uc0ac\uc6a9\ud558\ub294 \uac12\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ucf5c\uac8c\uc774\ud2b8\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub294 \ub8e8\ud2f4\uc5d0 \uc774 \ub8e8\ud2f4\uc774 \uc5b4\ub514\uc5d0\uc11c \ubd88\ub7ec\uc84c\ub294\uc9c0\ub97c \uae30\ub85d\ud558\ub294 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 3\uc778 \ud504\ub85c\uc138\uc2a4\uac00 \ucf5c\uac8c\uc774\ud2b8\ub97c \ud1b5\ud574 \uc774 \ub8e8\ud2f4\uc744 \ubd88\ub800\ub2e4\uba74 \ub370\uc774\ud130 \uc138\uadf8\uba3c\ud2b8 \uc140\ub809\ud130\uc5d0 \ud2b9\uad8c \ub808\ubca8 3\uc5d0\uc11c \ubd88\ub7ec\uc84c\ub2e4\ub294 \uac83\uc744 \ud45c\uc2dc\ud569\ub2c8\ub2e4. RPL\uc740 \ub2e8\uc5b4\uac00 \uc554\uc2dc\ud558\ub294 \ubc14\uc640 \uac19\uc774 \ub204\uac00 \uc694\uad6c\ud588\ub294\uac00\ub97c \ub098\ud0c0\ub0b4\ub294 \uac12\uc785\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 3\uc5d0\uc11c \ubd88\ub7ec\uc84c\ub2e4\ub294 \ud45c\uc2dc\ub97c \ud574\ub450\uba74 \ud2b9\uad8c \ub808\ubca8 0\uc758 \ub370\uc774\ud130\ub294 \uac74\ub4dc\ub9ac\uc9c0 \ubabb\ud560 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ud2b9\uad8c \ub808\ubca8 0\uc5d0\uc11c \ubd88\ub7ec\uc84c\ub2e4\uba74 OS \ucee4\ub110\uacfc \uac19\uc740 \ub808\ubca8\uc5d0\uc11c \ubd88\ub7ec\uc84c\uae30 \ub54c\ubb38\uc5d0 \ud2b9\uad8c \ub808\ubca8 0\uc758 \ub370\uc774\ud130\uc5d0 \uc811\uadfc\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4. \ucf5c\uac8c\uc774\ud2b8 \uc774\uc678\uc758 \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 RPL\uc740 CPL\uacfc \uac19\ub2e4\uace0 \ubcf4\uba74 \ub429\ub2c8\ub2e4.","title":"CPU\uc758 \uccb4\ud06c \ud3ec\uc778\ud2b8"},{"location":"os-making/17/#done","text":"\ub531 200\ud398\uc774\uc9c0\ub97c \ubd24\uc2b5\ub2c8\ub2e4. \ucf5c\uac8c\uc774\ud2b8\ubd80\ud130\ub294 \ub2e4\uc74c\uc5d0..","title":"Done"},{"location":"os-making/18/","text":"day18: \ubcf4\ud638(3) \ucf5c\uac8c\uc774\ud2b8 \ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud589 \ub3c4\uc911 \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\ub85c \ubcc0\uacbd\ub418\ub294 \uc218\ub2e8\uc740 \ub300\ud45c\uc801\uc73c\ub85c \uc778\ud130\ub7fd\ud2b8, \uc608\uc678, \ucf5c\uac8c\uc774\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc911 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\uc640 \uc608\uc678\uc5d0\uc11c\ub294 \ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8 \ud504\ub85c\uadf8\ub7a8\uc774 \uc790\uc2e0\uc758 \uc758\uc9c0\uc640\ub294 \uc0c1\uad00\uc5c6\uc774 \ud2b9\uad8c \ub808\ubca8\uc758 \ubcc0\uacbd\uc774 \uc774\ub8e8\uc5b4\uc9c0\uace0, \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\uc640 \ucf5c\uac8c\uc774\ud2b8\ub294 \ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ud504\ub85c\uadf8\ub7a8\uc774 \uc790\uc2e0\uc758 \uc758\uc9c0\uc5d0 \uc758\ud574 \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ub8e8\ud2f4\uc744 \uc7a0\uae50 \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \ud638\uc801\ub4f1\ubcf8\uc744 \ubc1c\uae09\ubc1b\uc73c\ub824 \ud560 \ub54c \ub3d9\uc0ac\ubb34\uc18c\uc5d0 \uac11\ub2c8\ub2e4. \uac04\ub2e8\ud55c \uc2e0\uccad\uc11c\ub97c \uc791\uc131\ud558\uc5ec \ucc3d\uad6c\uc5d0 \uc81c\ucd9c\ud558\uba74 \ub3d9\uc0ac\ubb34\uc18c \uc9c1\uc6d0\uc740 \uadc0\uc911\ud55c \uc11c\ub958\ub4e4\uc774 \uc788\ub294 \uacf3\uc73c\ub85c \ub2e4\ub140\uc640\uc11c \uc11c\ub958\ub97c \ubcf5\uc0ac\ud558\uace0, \ub3c4\uc7a5\uc744 \ucc0d\uc5b4 \uc6b0\ub9ac\uc5d0\uac8c \uac74\ub124\uc90d\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc815\ubd80\uae30\uad00\uc5d0 \uc811\uadfc\ud560 \ub54c\uc5d0\ub294 \ud56d\uc0c1 \uac01\uac01\uc758 \ucc3d\uad6c\ub97c \uc774\uc6a9\ud569\ub2c8\ub2e4. \ub3d9\uc0ac\ubb34\uc18c\ub294 \uc815\ubd80\uae30\uad00 \ub8e8\ud2f4\uc758 \uc77c\ubd80\uc774\uba70, \uac70\uae30\uc5d0 \uc788\ub294 \uc11c\ub958\ub4e4\uc740 \uadc0\uc911\ud55c \uc790\ub8cc\uc785\ub2c8\ub2e4. \uc774 \uc790\ub8cc\ub4e4\uc5d0\ub294 \uc815\ud574\uc9c4 \ub8e8\ud2f4\uc778 \ub3d9\uc0ac\ubb34\uc18c\uc758 \uc9c1\uc6d0 \uc678\uc5d0\ub294 \uc544\ubb34\ub098 \uc811\uadfc\ud574\uc11c\ub294 \uc548 \ub429\ub2c8\ub2e4. \ucc3d\uad6c\uc5d0\uc11c \uc2e0\uccad\ud558\uace0, \ub3d9\uc0ac\ubb34\uc18c\uc758 \uc2dc\uc2a4\ud15c\ub9cc\uc774 \uc774 \uc790\ub8cc\uc5d0 \uc811\uadfc\ud558\uc5ec \uc2e0\uccad\uc790\uc5d0\uac8c \uc2e0\uccad\uc790\uac00 \uc694\uad6c\ud55c \uac83\uc758 \uacb0\uacfc\ubb3c\uc744 \uac74\ub124\uc8fc\ub294 \uc21c\uc11c\ub85c \uc77c\uc774 \uc774\ub8e8\uc5b4\uc838\uc57c\ub9cc \ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc2e0\uccad\uc790\ub294 \ucc3d\uad6c\ub77c\ub294 \uac04\uc811\uc801\uc778 \ubc29\ubc95\uc73c\ub85c \uc815\ubd80 \uc2dc\uc2a4\ud15c\uc758 \uc77c\ubd80\ubd84\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc790\uc2e0\uc774 \uc6d0\ud558\ub358 \uacb0\uacfc\ub97c \uc5bb\uc740 \uac83\uc785\ub2c8\ub2e4. \ucef4\ud4e8\ud130\uc5d0\uc11c\ub294 \ucf5c\uac8c\uc774\ud2b8\ub098 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\ub97c \ud1b5\ud558\uc5ec \uc704\uc640 \uac19\uc740 \uc77c\uc774 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. \ucf5c\uac8c\uc774\ud2b8\ub3c4 \ub2e4\ub978 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc640 \ud568\uaed8 GDT \ud14c\uc774\ube14\uc5d0 \ub514\uc2a4\ud06c\ub9bd\ud130\ub85c\uc11c \ud3ec\ud568\ub418\uba70, \ub610 \ud558\ub098\uc758 \uc138\uadf8\uba3c\ud2b8 \uc815\uc758\ub77c\uace0 \uc0dd\uac01\ud574\ub3c4 \ub429\ub2c8\ub2e4. \ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ud504\ub85c\uadf8\ub7a8\uc774 \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ud504\ub85c\uadf8\ub7a8\uc758 \uc77c\ubd80\ubd84\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ucc3d\uad6c \uc138\uadf8\uba3c\ud2b8\uc785\ub2c8\ub2e4. \ucf5c\uac8c\uc774\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 \ucf5c\uac8c\uc774\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\ub294 \"\uc778\uc218\uc758 \uac1c\uc218\" \uce78\uacfc Type \uc774\uc678\uc758 \ubd80\ubd84\uc740 \ub2e4\ub978 \ub514\uc2a4\ud06c\ub9bd\ud130\uc640 \ube44\uc2b7\ud569\ub2c8\ub2e4. \uc774\uac83\uc744 GDT\uc5d0 \uc9c0\uc815\ud574 \ub193\uace0, \uc720\uc800 \ud504\ub85c\uadf8\ub7a8\uc740 \ucf54\ub4dc \uc140\ub809\ud130\uc758 \uc0ac\uc6a9\ubc95\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc774 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \uc140\ub809\ud130\ub85c \uc120\ud0dd\ud574\uc11c JMP\ub098 CALL \uba85\ub839\uc744 \ub0b4\ub9bd\ub2c8\ub2e4. \uc624\ud504\uc14b\uc740 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \uc9c0\uc815\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c \uc544\ubb34 \uc22b\uc790\ub098 \uc0ac\uc6a9\ud574\ub3c4 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \uc9c0\uc815\ub41c \uc624\ud504\uc14b\uc758 \ub8e8\ud2f4\uc774 \uc218\ud589\ub429\ub2c8\ub2e4. \ucf54\ub4dc\uc640 \ub370\uc774\ud130\uc758 \ud2b9\uad8c \ub808\ubca8 \uad00\uacc4 \ud2b9\uad8c \ub808\ubca8 \uac04\uc758 JMP \uba85\ub839\uc740 \ubd88\uac00\ub2a5\ud569\ub2c8\ub2e4. \ubc18\uba74\uc5d0 CALL \uba85\ub839\uc740 \ud2b9\uad8c \ub808\ubca8 \uac04\uc758 \uc774\ub3d9\uc744 \uac00\ub2a5\ud558\uac8c \ud574\uc8fc\ub294\ub370, CALL \uba85\ub839\uc740 \ud56d\uc0c1 \ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8\uc5d0\uc11c \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc5d0 \ub300\ud558\uc5ec \uc774\ub8e8\uc5b4\uc838\uc57c \ud558\uace0, RET \uba85\ub839\uc740 \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc5d0\uc11c \ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8\uc5d0 \ub300\ud558\uc5ec \uc774\ub8e8\uc5b4\uc838\uc57c \ud569\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 0\uc758 \ucf54\ub4dc\uac00 \ud2b9\uad8c \ub808\ubca8 3\uc758 \ucf54\ub4dc\ub97c \ubd88\ub7ec\ub0bc \uc774\uc720\ub294 \uc5c6\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub9cc\uc57d \ud2b9\uad8c \ub808\ubca8 \uac04\uc758 JMP \uba85\ub839\uc744 \uad73\uc774 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\uba74 \ucf5c\uac8c\uc774\ud2b8(Call Gate)\ub97c \ud1b5\ud558\uc5ec \uc774\ub8e8\uc5b4\uc9c0\ub3c4\ub85d \ud569\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 0\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \ub3d9\uc548 CS \uc140\ub809\ud130\uc758 0, 1\ube44\ud2b8\uc5d0\ub294 00\uc774 \ub4e4\uc5b4\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 3\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \ub3d9\uc548\uc758 CS \uc140\ub809\ud130\uc5d0\ub294 0, 1\ube44\ud2b8\uc5d0 11(10\uc9c4\uc218 3)\uc774 \ub4e4\uc5b4\uac00 \uc788\uac8c \ub429\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 3\uc5d0\uc11c CALL \uba85\ub839\uc73c\ub85c \ud2b9\uad8c \ub808\ubca8 0\uc758 \ub8e8\ud2f4\uc744 \ubd88\ub7ec\ub0b4\uac8c \ub418\uba74 CS \uc140\ub809\ud130\uc758 0, 1 \ube44\ud2b8\uc5d0 00\uc774 \ub4e4\uc5b4\uac11\ub2c8\ub2e4. \uc774 \ub54c\uc758 CPL\uc740 0\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub8e8\ud2f4\uc774 \ub05d\ub098\uace0 RET \uba85\ub839\uc73c\ub85c \ud2b9\uad8c \ub808\ubca8 3\uc73c\ub85c \ub3cc\uc544\uc624\uac8c \ub418\uba74 CS \uc140\ub809\ud130\uc758 0, 1\ube44\ud2b8\uc5d0 11(10\uc9c4\uc218 3)\uc774 \ub2e4\uc2dc \ub4e4\uc5b4\uac00\uac8c \ub429\ub2c8\ub2e4. \uc774 \ub54c\uc758 CPL\uc740 3\uc774 \ub429\ub2c8\ub2e4. \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc758 \ud2b9\uad8c \ub808\ubca8\uc778 DPL\uacfc \uadf8 \ub54c CPL\uc758 \uac12\uc740 \ubaa8\ub4e0 \uc0c1\ud669\uc5d0\uc11c \uac19\ub2e4\uace0 \uc0dd\uac01\ud558\uba74 \ub429\ub2c8\ub2e4. \ud55c \uac00\uc9c0 \uc608\uc678\uac00 \uc788\ub2e4\uba74 Conforming \uc138\uadf8\uba3c\ud2b8\uc77c \uacbd\uc6b0\uc778\ub370, \uc774\uac83\uc740 \ud2b9\uad8c \ub808\ubca8 0\uc758 \ub8e8\ud2f4\uc744 \ubd88\ub7ec\ub0b4\ub3c4 CPL\uc758 \uac12\uc774 \uadf8\ub300\ub85c 3\uc778 \ucc44\ub85c \uc2e4\ud589 \ub418\uc5c8\ub2e4\uac00 RET \uba85\ub839\uc73c\ub85c \ub3cc\uc544\uc635\ub2c8\ub2e4. Conforming \uc138\uadf8\uba3c\ud2b8\ub294 \ucf5c\uac8c\uc774\ud2b8\uc640 \uad00\ub828\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uad8c\ud55c\uc774 \ub192\uc740 \uacf3\uc5d0\uc11c\ub294 \ub0ae\uc740 \uacf3\uc73c\ub85c \uc811\uadfc \uac00\ub2a5. \uc5ed\uc740 \ubd88\uac00 \ud2b9\uad8c \ub808\ubca8 \ubcc0\ub3d9 \uc2dc\uc758 \uc2a4\ud0dd\uc758 \ubcc0\ud654 \ud0dc\uc2a4\ud06c\uac00 \uc2e4\ud589 \uc911\uc778 \ub3d9\uc548 \uc778\ud130\ub7fd\ud2b8\ub098 \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uac70\ub098 \ucf5c\uac8c\uc774\ud2b8\ub97c \uac70\uce60 \ub54c \ud2b9\uad8c \ub808\ubca8\uc758 \ubcc0\ud654\uac00 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub098 \uc608\uc678 \ucc98\ub9ac \ub8e8\ud2f4, \ucf5c\uac8c\uc774\ud2b8\uc5d0 \uc9c0\uc2dc\ub41c \ucee4\ub110 \ub8e8\ud2f4\uc740 \ucee4\ub110 \ubaa8\ub4dc\uc5d0\uc11c \uc2e4\ud589\uc774 \ub418\uc5b4\uc57c \ud558\ubbc0\ub85c \ud604\uc7ac \ud0dc\uc2a4\ud06c\uac00 \uc720\uc800 \ubaa8\ub4dc\ub85c \ub3d9\uc791\ud558\uace0 \uc788\ub294 \ub3c4\uc911\uc5d0 \ud2b9\uad8c \ub808\ubca8\uc744 \ubc14\uafb8\uc5b4 \ud578\ub4e4\ub7ec\ub85c \uc81c\uc5b4\uac00 \ub118\uc5b4\uac00\uac8c \ub418\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc2a4\ud0dd \uc2a4\uc704\uce6d\uc740 \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ub8e8\ud2f4\uc774 \uc2a4\ud0dd \uacf5\uac04\uc758 \ubd80\uc871 \ub54c\ubb38\uc5d0 \ud06c\ub798\uc26c\ub418\uc9c0 \uc54a\uac8c \ud558\uae30 \uc704\ud55c \uac83\uacfc \ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ub8e8\ud2f4\uc774 \uc2a4\ud0dd\uc744 \ud1b5\ud574 \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ub8e8\ud2f4\uc5d0 \uac04\uc12d\ud558\uc9c0 \ubabb\ud558\ub3c4\ub85d \ud558\ub824\ub294 \uc774\uc720\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud578\ub4e4\ub7ec\ub098 \ucee4\ub110 \ub8e8\ud2f4\uc73c\ub85c \ub4e4\uc5b4\uac00\uae30 \uc804\uc5d0 \uc2a4\ud0dd\uc5d0 \ub3cc\uc544\uc62c \uc8fc\uc18c \ub4f1\uc744 \ub123\uc5b4\ub450\uc5c8\ub2e4\uac00 \ud578\ub4e4\ub7ec\ub098 \ucee4\ub110 \ub8e8\ud2f4\uc774 \ub05d\ub098\uace0 \ub2e4\uc2dc \uc720\uc800 \ubaa8\ub4dc \ud0dc\uc2a4\ud06c\ub85c \ub3cc\uc544\uc624\uae30 \uc704\ud574\uc11c \uc2a4\ud0dd\uc5d0 \ub123\uc5b4\ub450\uc5c8\ub358 \uac12\ub4e4\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. CALL \uba85\ub839\uc774 \ub0b4\ub824\uc84c\uc744 \ub54c\uc758 \uc2a4\ud0dd \uc720\uc800 \ud0dc\uc2a4\ud06c\uac00 \ucf5c\uac8c\uc774\ud2b8 \ub4f1\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucee4\ub110 \ubaa8\ub4dc\uc758 \ub8e8\ud2f4\uc744 \ubd88\ub7ec\ub0b4\ub294 \uacbd\uc6b0, CPU\ub294 \uc77c\ub2e8 \uc774 \ud0dc\uc2a4\ud06c\uc758 TSS \uc601\uc5ed\uc5d0 \uc788\ub294 SS0, ESP0\uc758 \uac12\uc744 \ucc38\uc870\ud558\uc5ec \ucee4\ub110 \ubaa8\ub4dc\uc758 \uc2a4\ud0dd\uc5d0 \ud604\uc7ac \uc720\uc800 \ud0dc\uc2a4\ud06c\uac00 \uc0ac\uc6a9\ud558\uace0 \uc788\ub294 SS, ESP, \uadf8\ub9ac\uace0 \uc720\uc800 \ud0dc\uc2a4\ud06c\uac00 \ud604\uc7ac \uc9c4\ud589 \uc911\uc778 \ub8e8\ud2f4\uc758 \uc8fc\uc18c\uc778 CS, EIP\ub97c \ucc28\ub840\ub85c PUSH\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 CPU\uc758 SS, ESP \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 SS0, ESP0\uc758 \uac12\uc744 \uac01\uac01 \ub123\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ucf5c\uac8c\uc774\ud2b8\uc5d0 \uc9c0\uc815\ub41c \ucee4\ub110 \ubaa8\ub4dc\uc758 \ub8e8\ud2f4 \uc8fc\uc18c\ub85c \uc810\ud504\ud558\uace0 \uc2e4\ud589\ud569\ub2c8\ub2e4. \ub8e8\ud2f4\uc744 \ub9c8\uce58\uace0 \ub3cc\uc544\uac08 \ub54c RET \uba85\ub839\uc774 \ub0b4\ub824\uc9c0\uba74 \ud604\uc7ac \ucee4\ub110 \ubaa8\ub4dc\uc758 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c SS, ESP, CS, EIP\ub97c POP\ud558\uc5ec CPU\uc758 \uac01\uac01\uc758 \ub808\uc9c0\uc2a4\ud130\uc5d0 \ubcf5\uc6d0\ud558\uc5ec \uc720\uc800 \ubaa8\ub4dc \ud0dc\uc2a4\ud06c\ub85c \ub3cc\uc544\uac11\ub2c8\ub2e4. \uc774 \ub54c \uba3c\uc800 CS\ub97c \ud655\uc778\ud55c \ud6c4 \ud604\uc7ac \ucee4\ub110 \ubaa8\ub4dc\ubcf4\ub2e4 \ub0ae\uc740 \ud2b9\uad8c\uc774\uba74 SS\uc640 ESP\ub97c POP\ud569\ub2c8\ub2e4. \ucee4\ub110 \ubaa8\ub4dc \uc2a4\ud0dd(\ud638\ucd9c \uc778\uc218\uac00 \uc5c6\ub294 \uacbd\uc6b0) \ucf5c \uac8c\uc774\ud2b8 \uc0ac\uc6a9 \uc2dc\uc758 \uc2a4\ud0dd\uc758 \ubcc0\ud654(\uc778\uc218 \uc788\ub294 \uacbd\uc6b0) \uc704\uc758 \uacbd\uc6b0\uc5d0 GDT\uc5d0 \uc788\ub294 \ucf5c\uac8c\uc774\ud2b8\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \"\uc778\uc218\uc758 \uac1c\uc218\" \uce78\uc5d0 2\uac00 \ub4e4\uc5b4 \uc788\ub2e4\uba74 \uc720\uc800 \ub808\ubca8\uc758 \uc2a4\ud0dd\uc5d0\uc11c 2\uac1c\ub97c \ucee4\ub110 \ubaa8\ub4dc\uc758 \uc2a4\ud0dd\uc5d0 \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \ucee4\ub110 \ub808\ubca8 \ud0dc\uc2a4\ud06c\uc758 \uc2a4\ud0dd\uc744 \ud638\ucd9c \ud560 \ub54c\ub294 \uc720\uc800 \ub808\ubca8\uc5d0 \uc788\ub294 \uc2a4\ud0dd\uc758 \uc8fc\uc18c\uc640 \ub2ec\ub77c\uc9c0\uae30 \ub54c\ubb38\uc5d0 POP\ud574\ub3c4 \ubc29\uae08 \uc804 \uc720\uc800 \ub808\ubca8\uc5d0\uc11c \ub123\uc5c8\ub358 \uc778\uc218\ub294 \ub098\uc624\uc9c0 \uc54a\uace0 \ub2e4\ub978 \uac12\uc774 \ub098\uc624\uac8c \ub429\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574\uc11c \ucf5c\uac8c\uc774\ud2b8\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \"\uc778\uc218\uc758 \uac1c\uc218\" \uce78\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. \uc774\uacf3\uc5d0 \ucf5c\uac8c\uc774\ud2b8\ub97c \ud1b5\ud55c \ucee4\ub110 \ub8e8\ud2f4\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc778\uc218\uc758 \uac1c\uc218\ub97c \ubbf8\ub9ac \uae30\uc785\ud574 \ub461\ub2c8\ub2e4. \uc778\ud130\ub7fd\ud2b8 \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uc168\uc744 \ub54c\uc758 \uc2a4\ud0dd EFLAGS\uac00 \ucd94\uac00\ub41c \uac83\ub9cc \ube7c\uba74 \ucf5c\uac8c\uc774\ud2b8\uc758 \uacbd\uc6b0\uc640 \ud761\uc0ac\ud569\ub2c8\ub2e4. \ucee4\ub110 \ubaa8\ub4dc\uc778 \ud2b9\uad8c \ub808\ubca8 0\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \uac78\ub838\uc744 \ub54c\uc5d0\ub294 \uc2a4\ud0dd \ubcc0\uacbd\uc774 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 0\uc5d0\uc11c \uad73\uc774 \uc2dc\uc2a4\ud15c\uc744 \ub354 \ubcf4\ud638\ud560 \ud544\uc694\uac00 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ud2b9\uad8c \ub808\ubca8 0\uc5d0\uc11c \uc0ac\uc6a9\ud558\uace0 \uc788\ub358 SS, ESP \uadf8\ub300\ub85c\uc758 \uac12\uc744 \uc0ac\uc6a9\ud558\uc5ec EFLAGS, CS, EIP\ub97c PUSH\ud569\ub2c8\ub2e4. \uc720\uc800 \ub808\ubca8 \ud0dc\uc2a4\ud06c\uc758 \ub3d9\uc791 \uc911\uc5d0 \uc778\ud130\ub7fd\ud2b8\ub098 \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uba74 \uc774 \uc720\uc800 \ub808\ubca8 \ud0dc\uc2a4\ud06c\uc758 TSS \uc601\uc5ed\uc5d0\uc11c SS0, ESP0\uc744 CPU\uc758 SS, ESP \ub808\uc9c0\uc2a4\ud130\uc5d0 \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \uc774\ub85c\uc368 \ucee4\ub110 \ubaa8\ub4dc\uc758 \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uac8c \ub418\ub294\ub370, \uc774 \ucee4\ub110 \ubaa8\ub4dc \uc2a4\ud0dd\uc5d0 \ucf5c\uac8c\uc774\ud2b8\uc758 \uacbd\uc6b0\uc640 \uac19\uc774 \uc720\uc800 \ubaa8\ub4dc\uc758 \ud0dc\uc2a4\ud06c\uac00 \uc0ac\uc6a9\ud558\ub358 SS, ESP, CS, EIP \ub4f1\uc758 \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 PUSH\ud558\uc5ec \uc800\uc7a5\ud569\ub2c8\ub2e4. \uadf8 \ud6c4 \ucee4\ub110 \ubaa8\ub4dc\uc5d0 \uc788\ub294 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \ub8e8\ud2f4\uc73c\ub85c \uc810\ud504\ud558\uace0, \uc778\ud130\ub7fd\ud2b8 \ucc98\ub9ac\uac00 \ub05d\ub098\uba74 IRET\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubc29\uae08 \uc804\uc5d0 \uc778\ud130\ub7fd\ud2b8\uac00 \uac78\ub9b0 \uc720\uc800 \ubaa8\ub4dc\ub85c \ub3cc\uc544\uc624\ub294\ub370, \uc774 \ub54c \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uac12\ub4e4\uc744 POP\ud558\uc5ec CPU\uc758 \uac01\uac01\uc758 \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub2e4\uc2dc \ubcf5\uc6d0\ud569\ub2c8\ub2e4. Done 6\uc7a5 \ub05d( ~ p. 207)","title":"day18: protection"},{"location":"os-making/18/#day18-3","text":"","title":"day18: \ubcf4\ud638(3)"},{"location":"os-making/18/#_1","text":"\ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ud504\ub85c\uadf8\ub7a8\uc774 \uc2e4\ud589 \ub3c4\uc911 \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\ub85c \ubcc0\uacbd\ub418\ub294 \uc218\ub2e8\uc740 \ub300\ud45c\uc801\uc73c\ub85c \uc778\ud130\ub7fd\ud2b8, \uc608\uc678, \ucf5c\uac8c\uc774\ud2b8\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc911 \ud558\ub4dc\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\uc640 \uc608\uc678\uc5d0\uc11c\ub294 \ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8 \ud504\ub85c\uadf8\ub7a8\uc774 \uc790\uc2e0\uc758 \uc758\uc9c0\uc640\ub294 \uc0c1\uad00\uc5c6\uc774 \ud2b9\uad8c \ub808\ubca8\uc758 \ubcc0\uacbd\uc774 \uc774\ub8e8\uc5b4\uc9c0\uace0, \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\uc640 \ucf5c\uac8c\uc774\ud2b8\ub294 \ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ud504\ub85c\uadf8\ub7a8\uc774 \uc790\uc2e0\uc758 \uc758\uc9c0\uc5d0 \uc758\ud574 \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ub8e8\ud2f4\uc744 \uc7a0\uae50 \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \ud638\uc801\ub4f1\ubcf8\uc744 \ubc1c\uae09\ubc1b\uc73c\ub824 \ud560 \ub54c \ub3d9\uc0ac\ubb34\uc18c\uc5d0 \uac11\ub2c8\ub2e4. \uac04\ub2e8\ud55c \uc2e0\uccad\uc11c\ub97c \uc791\uc131\ud558\uc5ec \ucc3d\uad6c\uc5d0 \uc81c\ucd9c\ud558\uba74 \ub3d9\uc0ac\ubb34\uc18c \uc9c1\uc6d0\uc740 \uadc0\uc911\ud55c \uc11c\ub958\ub4e4\uc774 \uc788\ub294 \uacf3\uc73c\ub85c \ub2e4\ub140\uc640\uc11c \uc11c\ub958\ub97c \ubcf5\uc0ac\ud558\uace0, \ub3c4\uc7a5\uc744 \ucc0d\uc5b4 \uc6b0\ub9ac\uc5d0\uac8c \uac74\ub124\uc90d\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 \uc815\ubd80\uae30\uad00\uc5d0 \uc811\uadfc\ud560 \ub54c\uc5d0\ub294 \ud56d\uc0c1 \uac01\uac01\uc758 \ucc3d\uad6c\ub97c \uc774\uc6a9\ud569\ub2c8\ub2e4. \ub3d9\uc0ac\ubb34\uc18c\ub294 \uc815\ubd80\uae30\uad00 \ub8e8\ud2f4\uc758 \uc77c\ubd80\uc774\uba70, \uac70\uae30\uc5d0 \uc788\ub294 \uc11c\ub958\ub4e4\uc740 \uadc0\uc911\ud55c \uc790\ub8cc\uc785\ub2c8\ub2e4. \uc774 \uc790\ub8cc\ub4e4\uc5d0\ub294 \uc815\ud574\uc9c4 \ub8e8\ud2f4\uc778 \ub3d9\uc0ac\ubb34\uc18c\uc758 \uc9c1\uc6d0 \uc678\uc5d0\ub294 \uc544\ubb34\ub098 \uc811\uadfc\ud574\uc11c\ub294 \uc548 \ub429\ub2c8\ub2e4. \ucc3d\uad6c\uc5d0\uc11c \uc2e0\uccad\ud558\uace0, \ub3d9\uc0ac\ubb34\uc18c\uc758 \uc2dc\uc2a4\ud15c\ub9cc\uc774 \uc774 \uc790\ub8cc\uc5d0 \uc811\uadfc\ud558\uc5ec \uc2e0\uccad\uc790\uc5d0\uac8c \uc2e0\uccad\uc790\uac00 \uc694\uad6c\ud55c \uac83\uc758 \uacb0\uacfc\ubb3c\uc744 \uac74\ub124\uc8fc\ub294 \uc21c\uc11c\ub85c \uc77c\uc774 \uc774\ub8e8\uc5b4\uc838\uc57c\ub9cc \ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc2e0\uccad\uc790\ub294 \ucc3d\uad6c\ub77c\ub294 \uac04\uc811\uc801\uc778 \ubc29\ubc95\uc73c\ub85c \uc815\ubd80 \uc2dc\uc2a4\ud15c\uc758 \uc77c\ubd80\ubd84\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc790\uc2e0\uc774 \uc6d0\ud558\ub358 \uacb0\uacfc\ub97c \uc5bb\uc740 \uac83\uc785\ub2c8\ub2e4. \ucef4\ud4e8\ud130\uc5d0\uc11c\ub294 \ucf5c\uac8c\uc774\ud2b8\ub098 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc778\ud130\ub7fd\ud2b8\ub97c \ud1b5\ud558\uc5ec \uc704\uc640 \uac19\uc740 \uc77c\uc774 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. \ucf5c\uac8c\uc774\ud2b8\ub3c4 \ub2e4\ub978 \uc138\uadf8\uba3c\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\uc640 \ud568\uaed8 GDT \ud14c\uc774\ube14\uc5d0 \ub514\uc2a4\ud06c\ub9bd\ud130\ub85c\uc11c \ud3ec\ud568\ub418\uba70, \ub610 \ud558\ub098\uc758 \uc138\uadf8\uba3c\ud2b8 \uc815\uc758\ub77c\uace0 \uc0dd\uac01\ud574\ub3c4 \ub429\ub2c8\ub2e4. \ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ud504\ub85c\uadf8\ub7a8\uc774 \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ud504\ub85c\uadf8\ub7a8\uc758 \uc77c\ubd80\ubd84\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ucc3d\uad6c \uc138\uadf8\uba3c\ud2b8\uc785\ub2c8\ub2e4. \ucf5c\uac8c\uc774\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130 \ucf5c\uac8c\uc774\ud2b8 \ub514\uc2a4\ud06c\ub9bd\ud130\ub294 \"\uc778\uc218\uc758 \uac1c\uc218\" \uce78\uacfc Type \uc774\uc678\uc758 \ubd80\ubd84\uc740 \ub2e4\ub978 \ub514\uc2a4\ud06c\ub9bd\ud130\uc640 \ube44\uc2b7\ud569\ub2c8\ub2e4. \uc774\uac83\uc744 GDT\uc5d0 \uc9c0\uc815\ud574 \ub193\uace0, \uc720\uc800 \ud504\ub85c\uadf8\ub7a8\uc740 \ucf54\ub4dc \uc140\ub809\ud130\uc758 \uc0ac\uc6a9\ubc95\uacfc \ub9c8\ucc2c\uac00\uc9c0\ub85c \uc774 \ub514\uc2a4\ud06c\ub9bd\ud130\ub97c \uc140\ub809\ud130\ub85c \uc120\ud0dd\ud574\uc11c JMP\ub098 CALL \uba85\ub839\uc744 \ub0b4\ub9bd\ub2c8\ub2e4. \uc624\ud504\uc14b\uc740 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \uc9c0\uc815\ub418\uc5b4 \uc788\uc73c\ubbc0\ub85c \uc544\ubb34 \uc22b\uc790\ub098 \uc0ac\uc6a9\ud574\ub3c4 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \uc9c0\uc815\ub41c \uc624\ud504\uc14b\uc758 \ub8e8\ud2f4\uc774 \uc218\ud589\ub429\ub2c8\ub2e4.","title":"\ucf5c\uac8c\uc774\ud2b8"},{"location":"os-making/18/#_2","text":"\ud2b9\uad8c \ub808\ubca8 \uac04\uc758 JMP \uba85\ub839\uc740 \ubd88\uac00\ub2a5\ud569\ub2c8\ub2e4. \ubc18\uba74\uc5d0 CALL \uba85\ub839\uc740 \ud2b9\uad8c \ub808\ubca8 \uac04\uc758 \uc774\ub3d9\uc744 \uac00\ub2a5\ud558\uac8c \ud574\uc8fc\ub294\ub370, CALL \uba85\ub839\uc740 \ud56d\uc0c1 \ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8\uc5d0\uc11c \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc5d0 \ub300\ud558\uc5ec \uc774\ub8e8\uc5b4\uc838\uc57c \ud558\uace0, RET \uba85\ub839\uc740 \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc5d0\uc11c \ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8\uc5d0 \ub300\ud558\uc5ec \uc774\ub8e8\uc5b4\uc838\uc57c \ud569\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 0\uc758 \ucf54\ub4dc\uac00 \ud2b9\uad8c \ub808\ubca8 3\uc758 \ucf54\ub4dc\ub97c \ubd88\ub7ec\ub0bc \uc774\uc720\ub294 \uc5c6\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub9cc\uc57d \ud2b9\uad8c \ub808\ubca8 \uac04\uc758 JMP \uba85\ub839\uc744 \uad73\uc774 \uc0ac\uc6a9\ud574\uc57c \ud55c\ub2e4\uba74 \ucf5c\uac8c\uc774\ud2b8(Call Gate)\ub97c \ud1b5\ud558\uc5ec \uc774\ub8e8\uc5b4\uc9c0\ub3c4\ub85d \ud569\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 0\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \ub3d9\uc548 CS \uc140\ub809\ud130\uc758 0, 1\ube44\ud2b8\uc5d0\ub294 00\uc774 \ub4e4\uc5b4\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 3\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 \ub3d9\uc548\uc758 CS \uc140\ub809\ud130\uc5d0\ub294 0, 1\ube44\ud2b8\uc5d0 11(10\uc9c4\uc218 3)\uc774 \ub4e4\uc5b4\uac00 \uc788\uac8c \ub429\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 3\uc5d0\uc11c CALL \uba85\ub839\uc73c\ub85c \ud2b9\uad8c \ub808\ubca8 0\uc758 \ub8e8\ud2f4\uc744 \ubd88\ub7ec\ub0b4\uac8c \ub418\uba74 CS \uc140\ub809\ud130\uc758 0, 1 \ube44\ud2b8\uc5d0 00\uc774 \ub4e4\uc5b4\uac11\ub2c8\ub2e4. \uc774 \ub54c\uc758 CPL\uc740 0\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub8e8\ud2f4\uc774 \ub05d\ub098\uace0 RET \uba85\ub839\uc73c\ub85c \ud2b9\uad8c \ub808\ubca8 3\uc73c\ub85c \ub3cc\uc544\uc624\uac8c \ub418\uba74 CS \uc140\ub809\ud130\uc758 0, 1\ube44\ud2b8\uc5d0 11(10\uc9c4\uc218 3)\uc774 \ub2e4\uc2dc \ub4e4\uc5b4\uac00\uac8c \ub429\ub2c8\ub2e4. \uc774 \ub54c\uc758 CPL\uc740 3\uc774 \ub429\ub2c8\ub2e4. \ucf54\ub4dc \uc138\uadf8\uba3c\ud2b8 \uc601\uc5ed\uc758 \ud2b9\uad8c \ub808\ubca8\uc778 DPL\uacfc \uadf8 \ub54c CPL\uc758 \uac12\uc740 \ubaa8\ub4e0 \uc0c1\ud669\uc5d0\uc11c \uac19\ub2e4\uace0 \uc0dd\uac01\ud558\uba74 \ub429\ub2c8\ub2e4. \ud55c \uac00\uc9c0 \uc608\uc678\uac00 \uc788\ub2e4\uba74 Conforming \uc138\uadf8\uba3c\ud2b8\uc77c \uacbd\uc6b0\uc778\ub370, \uc774\uac83\uc740 \ud2b9\uad8c \ub808\ubca8 0\uc758 \ub8e8\ud2f4\uc744 \ubd88\ub7ec\ub0b4\ub3c4 CPL\uc758 \uac12\uc774 \uadf8\ub300\ub85c 3\uc778 \ucc44\ub85c \uc2e4\ud589 \ub418\uc5c8\ub2e4\uac00 RET \uba85\ub839\uc73c\ub85c \ub3cc\uc544\uc635\ub2c8\ub2e4. Conforming \uc138\uadf8\uba3c\ud2b8\ub294 \ucf5c\uac8c\uc774\ud2b8\uc640 \uad00\ub828\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uad8c\ud55c\uc774 \ub192\uc740 \uacf3\uc5d0\uc11c\ub294 \ub0ae\uc740 \uacf3\uc73c\ub85c \uc811\uadfc \uac00\ub2a5. \uc5ed\uc740 \ubd88\uac00","title":"\ucf54\ub4dc\uc640 \ub370\uc774\ud130\uc758 \ud2b9\uad8c \ub808\ubca8 \uad00\uacc4"},{"location":"os-making/18/#_3","text":"\ud0dc\uc2a4\ud06c\uac00 \uc2e4\ud589 \uc911\uc778 \ub3d9\uc548 \uc778\ud130\ub7fd\ud2b8\ub098 \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uac70\ub098 \ucf5c\uac8c\uc774\ud2b8\ub97c \uac70\uce60 \ub54c \ud2b9\uad8c \ub808\ubca8\uc758 \ubcc0\ud654\uac00 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4. \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec\ub098 \uc608\uc678 \ucc98\ub9ac \ub8e8\ud2f4, \ucf5c\uac8c\uc774\ud2b8\uc5d0 \uc9c0\uc2dc\ub41c \ucee4\ub110 \ub8e8\ud2f4\uc740 \ucee4\ub110 \ubaa8\ub4dc\uc5d0\uc11c \uc2e4\ud589\uc774 \ub418\uc5b4\uc57c \ud558\ubbc0\ub85c \ud604\uc7ac \ud0dc\uc2a4\ud06c\uac00 \uc720\uc800 \ubaa8\ub4dc\ub85c \ub3d9\uc791\ud558\uace0 \uc788\ub294 \ub3c4\uc911\uc5d0 \ud2b9\uad8c \ub808\ubca8\uc744 \ubc14\uafb8\uc5b4 \ud578\ub4e4\ub7ec\ub85c \uc81c\uc5b4\uac00 \ub118\uc5b4\uac00\uac8c \ub418\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc2a4\ud0dd \uc2a4\uc704\uce6d\uc740 \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ub8e8\ud2f4\uc774 \uc2a4\ud0dd \uacf5\uac04\uc758 \ubd80\uc871 \ub54c\ubb38\uc5d0 \ud06c\ub798\uc26c\ub418\uc9c0 \uc54a\uac8c \ud558\uae30 \uc704\ud55c \uac83\uacfc \ub0ae\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ub8e8\ud2f4\uc774 \uc2a4\ud0dd\uc744 \ud1b5\ud574 \ub192\uc740 \ud2b9\uad8c \ub808\ubca8\uc758 \ub8e8\ud2f4\uc5d0 \uac04\uc12d\ud558\uc9c0 \ubabb\ud558\ub3c4\ub85d \ud558\ub824\ub294 \uc774\uc720\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud578\ub4e4\ub7ec\ub098 \ucee4\ub110 \ub8e8\ud2f4\uc73c\ub85c \ub4e4\uc5b4\uac00\uae30 \uc804\uc5d0 \uc2a4\ud0dd\uc5d0 \ub3cc\uc544\uc62c \uc8fc\uc18c \ub4f1\uc744 \ub123\uc5b4\ub450\uc5c8\ub2e4\uac00 \ud578\ub4e4\ub7ec\ub098 \ucee4\ub110 \ub8e8\ud2f4\uc774 \ub05d\ub098\uace0 \ub2e4\uc2dc \uc720\uc800 \ubaa8\ub4dc \ud0dc\uc2a4\ud06c\ub85c \ub3cc\uc544\uc624\uae30 \uc704\ud574\uc11c \uc2a4\ud0dd\uc5d0 \ub123\uc5b4\ub450\uc5c8\ub358 \uac12\ub4e4\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.","title":"\ud2b9\uad8c \ub808\ubca8 \ubcc0\ub3d9 \uc2dc\uc758 \uc2a4\ud0dd\uc758 \ubcc0\ud654"},{"location":"os-making/18/#call","text":"\uc720\uc800 \ud0dc\uc2a4\ud06c\uac00 \ucf5c\uac8c\uc774\ud2b8 \ub4f1\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucee4\ub110 \ubaa8\ub4dc\uc758 \ub8e8\ud2f4\uc744 \ubd88\ub7ec\ub0b4\ub294 \uacbd\uc6b0, CPU\ub294 \uc77c\ub2e8 \uc774 \ud0dc\uc2a4\ud06c\uc758 TSS \uc601\uc5ed\uc5d0 \uc788\ub294 SS0, ESP0\uc758 \uac12\uc744 \ucc38\uc870\ud558\uc5ec \ucee4\ub110 \ubaa8\ub4dc\uc758 \uc2a4\ud0dd\uc5d0 \ud604\uc7ac \uc720\uc800 \ud0dc\uc2a4\ud06c\uac00 \uc0ac\uc6a9\ud558\uace0 \uc788\ub294 SS, ESP, \uadf8\ub9ac\uace0 \uc720\uc800 \ud0dc\uc2a4\ud06c\uac00 \ud604\uc7ac \uc9c4\ud589 \uc911\uc778 \ub8e8\ud2f4\uc758 \uc8fc\uc18c\uc778 CS, EIP\ub97c \ucc28\ub840\ub85c PUSH\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 CPU\uc758 SS, ESP \ub808\uc9c0\uc2a4\ud130\uc5d0\ub294 SS0, ESP0\uc758 \uac12\uc744 \uac01\uac01 \ub123\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ucf5c\uac8c\uc774\ud2b8\uc5d0 \uc9c0\uc815\ub41c \ucee4\ub110 \ubaa8\ub4dc\uc758 \ub8e8\ud2f4 \uc8fc\uc18c\ub85c \uc810\ud504\ud558\uace0 \uc2e4\ud589\ud569\ub2c8\ub2e4. \ub8e8\ud2f4\uc744 \ub9c8\uce58\uace0 \ub3cc\uc544\uac08 \ub54c RET \uba85\ub839\uc774 \ub0b4\ub824\uc9c0\uba74 \ud604\uc7ac \ucee4\ub110 \ubaa8\ub4dc\uc758 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c SS, ESP, CS, EIP\ub97c POP\ud558\uc5ec CPU\uc758 \uac01\uac01\uc758 \ub808\uc9c0\uc2a4\ud130\uc5d0 \ubcf5\uc6d0\ud558\uc5ec \uc720\uc800 \ubaa8\ub4dc \ud0dc\uc2a4\ud06c\ub85c \ub3cc\uc544\uac11\ub2c8\ub2e4. \uc774 \ub54c \uba3c\uc800 CS\ub97c \ud655\uc778\ud55c \ud6c4 \ud604\uc7ac \ucee4\ub110 \ubaa8\ub4dc\ubcf4\ub2e4 \ub0ae\uc740 \ud2b9\uad8c\uc774\uba74 SS\uc640 ESP\ub97c POP\ud569\ub2c8\ub2e4. \ucee4\ub110 \ubaa8\ub4dc \uc2a4\ud0dd(\ud638\ucd9c \uc778\uc218\uac00 \uc5c6\ub294 \uacbd\uc6b0) \ucf5c \uac8c\uc774\ud2b8 \uc0ac\uc6a9 \uc2dc\uc758 \uc2a4\ud0dd\uc758 \ubcc0\ud654(\uc778\uc218 \uc788\ub294 \uacbd\uc6b0) \uc704\uc758 \uacbd\uc6b0\uc5d0 GDT\uc5d0 \uc788\ub294 \ucf5c\uac8c\uc774\ud2b8\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\uc758 \"\uc778\uc218\uc758 \uac1c\uc218\" \uce78\uc5d0 2\uac00 \ub4e4\uc5b4 \uc788\ub2e4\uba74 \uc720\uc800 \ub808\ubca8\uc758 \uc2a4\ud0dd\uc5d0\uc11c 2\uac1c\ub97c \ucee4\ub110 \ubaa8\ub4dc\uc758 \uc2a4\ud0dd\uc5d0 \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \ucee4\ub110 \ub808\ubca8 \ud0dc\uc2a4\ud06c\uc758 \uc2a4\ud0dd\uc744 \ud638\ucd9c \ud560 \ub54c\ub294 \uc720\uc800 \ub808\ubca8\uc5d0 \uc788\ub294 \uc2a4\ud0dd\uc758 \uc8fc\uc18c\uc640 \ub2ec\ub77c\uc9c0\uae30 \ub54c\ubb38\uc5d0 POP\ud574\ub3c4 \ubc29\uae08 \uc804 \uc720\uc800 \ub808\ubca8\uc5d0\uc11c \ub123\uc5c8\ub358 \uc778\uc218\ub294 \ub098\uc624\uc9c0 \uc54a\uace0 \ub2e4\ub978 \uac12\uc774 \ub098\uc624\uac8c \ub429\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574\uc11c \ucf5c\uac8c\uc774\ud2b8\uc758 \ub514\uc2a4\ud06c\ub9bd\ud130\uc5d0 \"\uc778\uc218\uc758 \uac1c\uc218\" \uce78\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. \uc774\uacf3\uc5d0 \ucf5c\uac8c\uc774\ud2b8\ub97c \ud1b5\ud55c \ucee4\ub110 \ub8e8\ud2f4\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc778\uc218\uc758 \uac1c\uc218\ub97c \ubbf8\ub9ac \uae30\uc785\ud574 \ub461\ub2c8\ub2e4.","title":"CALL \uba85\ub839\uc774 \ub0b4\ub824\uc84c\uc744 \ub54c\uc758 \uc2a4\ud0dd"},{"location":"os-making/18/#_4","text":"EFLAGS\uac00 \ucd94\uac00\ub41c \uac83\ub9cc \ube7c\uba74 \ucf5c\uac8c\uc774\ud2b8\uc758 \uacbd\uc6b0\uc640 \ud761\uc0ac\ud569\ub2c8\ub2e4. \ucee4\ub110 \ubaa8\ub4dc\uc778 \ud2b9\uad8c \ub808\ubca8 0\uc5d0\uc11c \uc778\ud130\ub7fd\ud2b8\uac00 \uac78\ub838\uc744 \ub54c\uc5d0\ub294 \uc2a4\ud0dd \ubcc0\uacbd\uc774 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ud2b9\uad8c \ub808\ubca8 0\uc5d0\uc11c \uad73\uc774 \uc2dc\uc2a4\ud15c\uc744 \ub354 \ubcf4\ud638\ud560 \ud544\uc694\uac00 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \ud2b9\uad8c \ub808\ubca8 0\uc5d0\uc11c \uc0ac\uc6a9\ud558\uace0 \uc788\ub358 SS, ESP \uadf8\ub300\ub85c\uc758 \uac12\uc744 \uc0ac\uc6a9\ud558\uc5ec EFLAGS, CS, EIP\ub97c PUSH\ud569\ub2c8\ub2e4. \uc720\uc800 \ub808\ubca8 \ud0dc\uc2a4\ud06c\uc758 \ub3d9\uc791 \uc911\uc5d0 \uc778\ud130\ub7fd\ud2b8\ub098 \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uba74 \uc774 \uc720\uc800 \ub808\ubca8 \ud0dc\uc2a4\ud06c\uc758 TSS \uc601\uc5ed\uc5d0\uc11c SS0, ESP0\uc744 CPU\uc758 SS, ESP \ub808\uc9c0\uc2a4\ud130\uc5d0 \ubcf5\uc0ac\ud569\ub2c8\ub2e4. \uc774\ub85c\uc368 \ucee4\ub110 \ubaa8\ub4dc\uc758 \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uac8c \ub418\ub294\ub370, \uc774 \ucee4\ub110 \ubaa8\ub4dc \uc2a4\ud0dd\uc5d0 \ucf5c\uac8c\uc774\ud2b8\uc758 \uacbd\uc6b0\uc640 \uac19\uc774 \uc720\uc800 \ubaa8\ub4dc\uc758 \ud0dc\uc2a4\ud06c\uac00 \uc0ac\uc6a9\ud558\ub358 SS, ESP, CS, EIP \ub4f1\uc758 \ub808\uc9c0\uc2a4\ud130 \uac12\uc744 PUSH\ud558\uc5ec \uc800\uc7a5\ud569\ub2c8\ub2e4. \uadf8 \ud6c4 \ucee4\ub110 \ubaa8\ub4dc\uc5d0 \uc788\ub294 \uc778\ud130\ub7fd\ud2b8 \ud578\ub4e4\ub7ec \ub8e8\ud2f4\uc73c\ub85c \uc810\ud504\ud558\uace0, \uc778\ud130\ub7fd\ud2b8 \ucc98\ub9ac\uac00 \ub05d\ub098\uba74 IRET\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubc29\uae08 \uc804\uc5d0 \uc778\ud130\ub7fd\ud2b8\uac00 \uac78\ub9b0 \uc720\uc800 \ubaa8\ub4dc\ub85c \ub3cc\uc544\uc624\ub294\ub370, \uc774 \ub54c \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uac12\ub4e4\uc744 POP\ud558\uc5ec CPU\uc758 \uac01\uac01\uc758 \ub808\uc9c0\uc2a4\ud130\uc5d0 \ub2e4\uc2dc \ubcf5\uc6d0\ud569\ub2c8\ub2e4.","title":"\uc778\ud130\ub7fd\ud2b8 \uc608\uc678\uac00 \ubc1c\uc0dd\ud558\uc168\uc744 \ub54c\uc758 \uc2a4\ud0dd"},{"location":"os-making/18/#done","text":"6\uc7a5 \ub05d( ~ p. 207)","title":"Done"},{"location":"os-making/19/","text":"usermode task switching 1 2 3 4 5 6 7 # init.inc SysCodeSelector equ 0x08 SysDataSelector equ 0x10 VideoSelector equ 0x18 TSSSelector equ 0x20 UserCodeSelector equ 0x28+3 UserDataSelector equ 0x30+3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # boot.asm %include \"init.inc\" [org 0] jmp 07C0h:start start: mov ax, cs mov ds, ax mov es, ax mov ax, 0xB800 mov es, ax mov di, 0 mov ax, word [msgBack] mov cx, 0x7FF paint: mov word [es:di], ax add di, 2 dec cx jnz paint read: mov ax, 0x1000 ; ES:BX = 1000:0000 mov es, ax mov bx, 0 mov ah, 2 ; \ub514\uc2a4\ud06c\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c es:bx\uc758 \uc8fc\uc18c\ub85c mov al, 2 ; 2\uc139\ud130\ub97c \uc77d\uc744 \uac83\uc774\ub2e4. mov ch, 0 ; 0\ubc88\uc9f8 \uc2e4\ub9b0\ub354 mov cl, 2 ; 2\ubc88\uc9f8 \uc139\ud130\ubd80\ud130 \uc77d\uae30 \uc2dc\uc791\ud55c\ub2e4. mov dh, 0 ; Head=0 mov dl, 0 ; Drive=0, A: \ub4dc\ub77c\uc774\ube0c int 13h ; Read! jc read ; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud568 mov dx, 0x3F2 ; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c \ub4dc\ub77c\uc774\ube0c\uc758 xor al, al ; \ubaa8\ud130\ub97c \ub048\ub2e4. out dx, al cli mov al, 0x11 ; PIC\uc758 \ucd08\uae30\ud654 out 0x20, al ; \ub9c8\uc2a4\ud130 PIC dw 0x00eb, 0x00eb ; jmp $+2, jmp $+2 out 0xA0, al ; \uc2ac\ub808\uc774\ube0c PIC dw 0x00eb, 0x00eb mov al, 0x20 ; \ub9c8\uc2a4\ud130 PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810 out 0x21, al","title":"day19: usermode_task_switching"},{"location":"os-making/19/#usermode-task-switching","text":"1 2 3 4 5 6 7 # init.inc SysCodeSelector equ 0x08 SysDataSelector equ 0x10 VideoSelector equ 0x18 TSSSelector equ 0x20 UserCodeSelector equ 0x28+3 UserDataSelector equ 0x30+3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 # boot.asm %include \"init.inc\" [org 0] jmp 07C0h:start start: mov ax, cs mov ds, ax mov es, ax mov ax, 0xB800 mov es, ax mov di, 0 mov ax, word [msgBack] mov cx, 0x7FF paint: mov word [es:di], ax add di, 2 dec cx jnz paint read: mov ax, 0x1000 ; ES:BX = 1000:0000 mov es, ax mov bx, 0 mov ah, 2 ; \ub514\uc2a4\ud06c\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c es:bx\uc758 \uc8fc\uc18c\ub85c mov al, 2 ; 2\uc139\ud130\ub97c \uc77d\uc744 \uac83\uc774\ub2e4. mov ch, 0 ; 0\ubc88\uc9f8 \uc2e4\ub9b0\ub354 mov cl, 2 ; 2\ubc88\uc9f8 \uc139\ud130\ubd80\ud130 \uc77d\uae30 \uc2dc\uc791\ud55c\ub2e4. mov dh, 0 ; Head=0 mov dl, 0 ; Drive=0, A: \ub4dc\ub77c\uc774\ube0c int 13h ; Read! jc read ; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud568 mov dx, 0x3F2 ; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c \ub4dc\ub77c\uc774\ube0c\uc758 xor al, al ; \ubaa8\ud130\ub97c \ub048\ub2e4. out dx, al cli mov al, 0x11 ; PIC\uc758 \ucd08\uae30\ud654 out 0x20, al ; \ub9c8\uc2a4\ud130 PIC dw 0x00eb, 0x00eb ; jmp $+2, jmp $+2 out 0xA0, al ; \uc2ac\ub808\uc774\ube0c PIC dw 0x00eb, 0x00eb mov al, 0x20 ; \ub9c8\uc2a4\ud130 PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810 out 0x21, al","title":"usermode task switching"},{"location":"os-making/20/","text":"day 20: \uc720\uc800 \ubaa8\ub4dc\uc640 \ucf5c \uac8c\uc774\ud2b8 1 2 3 4 5 6 7 # src/init.inc SysCodeSelector equ 0x08 SysDataSelector equ 0x10 VideoSelector equ 0x18 TSSSelector equ 0x20 UserCodeSelector equ 0x28+3 UserDataSelector equ 0x30+3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 # src/boot.asm %include \"init.inc\" [org 0] jmp 07C0h:start start: mov ax, cs mov ds, ax mov es, ax mov ax, 0xB800 mov es, ax mov di, 0 mov ax, word [msgBack] mov cx, 0x7FF paint: mov word [es:di], ax add di, 2 dec cx jnz paint read: mov ax, 0x1000 ; ES:BX = 1000:0000 mov es, ax mov bx, 0 mov ah, 2 ; \ub514\uc2a4\ud06c\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c es:bx\uc758 \uc8fc\uc18c\ub85c mov al, 2 ; 2\uc139\ud130\ub97c \uc77d\uc744 \uac83\uc774\ub2e4. mov ch, 0 ; 0\ubc88\uc9f8 \uc2e4\ub9b0\ub354 mov cl, 2 ; 2\ubc88\uc9f8 \uc139\ud130\ubd80\ud130 \uc77d\uae30 \uc2dc\uc791\ud55c\ub2e4. mov dh, 0 ; Head=0 mov dl, 0 ; Drive=0, A: \ub4dc\ub77c\uc774\ube0c int 13h ; Read! jc read ; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud568 mov dx, 0X3F2 ; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c \ub4dc\ub77c\uc774\ube0c\uc758 xor al, al ; \ubaa8\ud130\ub97c \ub048\ub2e4 out dx, al cli mov al, 0x11 ; PIC\uc758 \ucd08\uae30\ud654 out 0x20, al ; \ub9c8\uc2a4\ud130 PIC dw 0x00eb, 0x00eb ; jmp $+2, jmp $+2 out 0xA0, al ; \uc2ac\ub808\uc774\ube0c PIC dw 0x00eb, 0x00eb mov al, 0x20 ; \ub9c8\uc2a4\ud130 PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810 out 0x21, al out 0x00eb, 0x00eb mov al, 0x28 ; \uc2ac\ub808\uc774\ube0c PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810 out 0xA1, al dw 0x00eb, 0x00eb mov al, 0x04 ; \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88\uc5d0 out 0x21, al ; \uc2ac\ub808\uc774\ube0c PIC\uac00 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub2e4 dw 0x00eb, 0x00eb mov al, 0x02 ; \uc2ac\ub808\uc774\ube0c PIC\uac00 \ub9c8\uc2a4\ud130 PIC\uc758 out 0xA1, al ; IRQ 2\ubc88\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub2e4. dw 0x00eb, 0x00eb mov al, 0x01 ; 8086 \ubaa8\ub4dc\ub97c \uc0ac\uc6a9\ud55c\ub2e4. out 0x21, al dw 0x00eb, 0x00eb out 0xA1, al dw 0x00eb, 0x00eb mov al, 0xFF ; \uc2ac\ub808\uc774\ube0c PIC\uc758 \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c out 0xA1, al ; \ub9c9\uc544\ub454\ub2e4. dw 0x00eb, 0x00eb mov al, 0xFB ; \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88\uc744 \uc81c\uc678\ud55c out 0x21, al ; \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c \ub9c9\uc544\ub454\ub2e4. jmp 0x1000:0000 msgBack db '.', 0x67 times 510-($-$$) db 0 dw 0AA55h p. 214 \ubd80\ud2b8\ucf54\ub4dc\uae4c\uc9c0 \ubcf5\uc2b5\ud588\uc74c. \uc624\ub79c\ub9cc\uc5d0 \ub2e4\uc2dc \uc6b4\uc601\uccb4\uc81c\ub97c \ud558\ub824\uace0 \ud558\ub2c8\uae4c \uae30\uc5b5\uc774 \uc798 \uc548 \ub0a9\ub2c8\ub2e4..\u3160\u3160","title":"day20: usermode_task_switching(2)"},{"location":"os-making/20/#day-20","text":"1 2 3 4 5 6 7 # src/init.inc SysCodeSelector equ 0x08 SysDataSelector equ 0x10 VideoSelector equ 0x18 TSSSelector equ 0x20 UserCodeSelector equ 0x28+3 UserDataSelector equ 0x30+3 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 # src/boot.asm %include \"init.inc\" [org 0] jmp 07C0h:start start: mov ax, cs mov ds, ax mov es, ax mov ax, 0xB800 mov es, ax mov di, 0 mov ax, word [msgBack] mov cx, 0x7FF paint: mov word [es:di], ax add di, 2 dec cx jnz paint read: mov ax, 0x1000 ; ES:BX = 1000:0000 mov es, ax mov bx, 0 mov ah, 2 ; \ub514\uc2a4\ud06c\uc5d0 \uc788\ub294 \ub370\uc774\ud130\ub97c es:bx\uc758 \uc8fc\uc18c\ub85c mov al, 2 ; 2\uc139\ud130\ub97c \uc77d\uc744 \uac83\uc774\ub2e4. mov ch, 0 ; 0\ubc88\uc9f8 \uc2e4\ub9b0\ub354 mov cl, 2 ; 2\ubc88\uc9f8 \uc139\ud130\ubd80\ud130 \uc77d\uae30 \uc2dc\uc791\ud55c\ub2e4. mov dh, 0 ; Head=0 mov dl, 0 ; Drive=0, A: \ub4dc\ub77c\uc774\ube0c int 13h ; Read! jc read ; \uc5d0\ub7ec\uac00 \ub098\uba74 \ub2e4\uc2dc \ud568 mov dx, 0X3F2 ; \ud50c\ub85c\ud53c\ub514\uc2a4\ud06c \ub4dc\ub77c\uc774\ube0c\uc758 xor al, al ; \ubaa8\ud130\ub97c \ub048\ub2e4 out dx, al cli mov al, 0x11 ; PIC\uc758 \ucd08\uae30\ud654 out 0x20, al ; \ub9c8\uc2a4\ud130 PIC dw 0x00eb, 0x00eb ; jmp $+2, jmp $+2 out 0xA0, al ; \uc2ac\ub808\uc774\ube0c PIC dw 0x00eb, 0x00eb mov al, 0x20 ; \ub9c8\uc2a4\ud130 PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810 out 0x21, al out 0x00eb, 0x00eb mov al, 0x28 ; \uc2ac\ub808\uc774\ube0c PIC \uc778\ud130\ub7fd\ud2b8 \uc2dc\uc791\uc810 out 0xA1, al dw 0x00eb, 0x00eb mov al, 0x04 ; \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88\uc5d0 out 0x21, al ; \uc2ac\ub808\uc774\ube0c PIC\uac00 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub2e4 dw 0x00eb, 0x00eb mov al, 0x02 ; \uc2ac\ub808\uc774\ube0c PIC\uac00 \ub9c8\uc2a4\ud130 PIC\uc758 out 0xA1, al ; IRQ 2\ubc88\uc5d0 \uc5f0\uacb0\ub418\uc5b4 \uc788\ub2e4. dw 0x00eb, 0x00eb mov al, 0x01 ; 8086 \ubaa8\ub4dc\ub97c \uc0ac\uc6a9\ud55c\ub2e4. out 0x21, al dw 0x00eb, 0x00eb out 0xA1, al dw 0x00eb, 0x00eb mov al, 0xFF ; \uc2ac\ub808\uc774\ube0c PIC\uc758 \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c out 0xA1, al ; \ub9c9\uc544\ub454\ub2e4. dw 0x00eb, 0x00eb mov al, 0xFB ; \ub9c8\uc2a4\ud130 PIC\uc758 IRQ 2\ubc88\uc744 \uc81c\uc678\ud55c out 0x21, al ; \ubaa8\ub4e0 \uc778\ud130\ub7fd\ud2b8\ub97c \ub9c9\uc544\ub454\ub2e4. jmp 0x1000:0000 msgBack db '.', 0x67 times 510-($-$$) db 0 dw 0AA55h p. 214 \ubd80\ud2b8\ucf54\ub4dc\uae4c\uc9c0 \ubcf5\uc2b5\ud588\uc74c. \uc624\ub79c\ub9cc\uc5d0 \ub2e4\uc2dc \uc6b4\uc601\uccb4\uc81c\ub97c \ud558\ub824\uace0 \ud558\ub2c8\uae4c \uae30\uc5b5\uc774 \uc798 \uc548 \ub0a9\ub2c8\ub2e4..\u3160\u3160","title":"day 20: \uc720\uc800 \ubaa8\ub4dc\uc640 \ucf5c \uac8c\uc774\ud2b8"},{"location":"self-feedback/2021/","text":"2021\ub144 \ud68c\uace0 IT \uac1c\ubc1c Computer Science Algorithm: \ud3c9\uc18c\uc5d0 TIL\uc744 \ucc0d\uc744 \uac83\uc774 \uc5c6\uc744 \ub54c \uc54c\uace0\ub9ac\uc998 \ubb38\uc81c\ub97c \ud558\ub098\uc529 \ud478\ub294 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \uafb8\uc900\ud788 \ud558\ub294 \uae30\ucd08\uccb4\ub825 \ub2e8\ub828 \uc815\ub3c4\ub85c \uc5f4\uc2ec\ud788 \ud588\uc2b5\ub2c8\ub2e4. FaceBook HackerCup: 2800th(round2) Atcoder: 8kyu(brown) CodeForce: newbie Leetcode(\ud55c \uc804\uccb4\uc801\uc73c\ub85c 70% \ubb38\uc81c \ud47c \ub4ef) Google Foobar Challenge: Level5 \uc9c4\ucd9c(total 5/5) OS: \uc6b4\uc601\uccb4\uc81c\ub97c bootstrap\ubd80\ud130 CUI \uae30\ubc18\uc73c\ub85c \ub9cc\ub4e4\uc5b4\ubcf4\ub294 \uc6b4\uc601\uccb4\uc81c\uc600\uace0, 80% \uc815\ub3c4 \uc644\uc131 \uc6b4\uc601\uccb4\uc81c \ub9cc\ub4e4\uae30: \uae40\ubc94\uc900. 2005. \ub9cc\ub4e4\uba74\uc11c \ubc30\uc6b0\ub294 OS \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac https://noelbird.github.io/os-making/ versioning semantic versioning: https://semver.org/lang/ko/ \uac8c\uc784 \uc548\uacbd\uc54crun \ub9cc\ub4e4\uc5c8\uc74c => \ubaa9\uacf5 \uc120\uc0dd\ub2d8 \uc120\ubb3c(electronjs) Unity\ub85c \ub9cc\ub4dc\ub294 \uac8c\uc784(inflearn): C# \uc5b8\uc5b4 \uac15\uc758\ub9cc \uc644\ub8cc\ud588\uc74c. \uae30\ud0c0 \uc0ac\uc774\ub4dc \ud504\ub85c\uc81d\ud2b8 markdown editor \ub9cc\ub4e4\uae30(Mars) \uae30\ubcf8\uc801\uc778 \uae30\ub2a5\ub9cc \uad6c\ud604: \ub80c\ub354\ub9c1, \ud30c\uc77c \uc4f0\uae30, \ubd88\ub7ec\uc624\uae30 https://github.com/NoelBird/mars Simple OJ(Online Judgement) \ud55c \uba85\uc758 \uc720\uc800\uc6a9: \ubb38\uc81c 1\uac1c. \ub3c4\ucee4 \uc0ac\uc6a9 x http://playground.noelbird.com:50080/ \ubc11\ubc14\ub2e5\ubd80\ud130 \ub9cc\ub4dc\ub294 \uc778\ud130\ud504\ub9ac\ud130 in Go https://noelbird.github.io/interpreter/02/ mytreepy \uc624\ud508 \uc18c\uc2a4 https://github.com/NoelBird/treepy \ub525\ub7ec\ub2dd \ub124\uc774\ubc84 \ucee4\ub125\ud2b8 \uc7ac\ub2e8 - \ubd80\uc2a4\ud2b8\ucf54\uc2a4 AI tech course(upstage) 2\uae30 \uba58\ud1a0\ub9c1(NLP \uba58\ud1a0) \ubaa8\ub378 \ucd5c\uc801\ud654 KLUE(Korean NLU Benchmark) \ub370\uc774\ud130\uc14b\uc744 \ud65c\uc6a9\ud55c ODQA(Open Domain Question & Ansering) \uac04\ub2e8\ud55c \ube14\ub85d\uccb4\uc778 \ub9cc\ub4e4\uae30 \ud30c\uc774\uc36c\uc73c\ub85c \uad6c\ud604: https://noelbird.github.io/daily/2021-05-16/ \ubd24\ub358 \ucc45 \uc791\ub144\uc5d0\ub294 \ucc45\uc744 3\uad8c \uc77d\uc5c8\uc2b5\ub2c8\ub2e4. \ub9ac\ud329\ud1a0\ub9c1 \uac19\uc740 \uc88b\uc740 \ucc45\uc744 \uc77d\uc73c\ub824\ub2c8\uae4c \uc77c\uc815\uc5d0 \uce58\uc5ec\uc11c \uc798 \uc548 \uc77d\uac8c \ub429\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc9e7\uace0 \uadf8\ub9bc\uc774 \ub9ce\uc740 \ucc45\uc774 \ud655\uc2e4\ud788 \uc798 \uc77d\ud788\ub294 \uac83\uc744 \uae68\ub2ec\uc558\uc2b5\ub2c8\ub2e4. \ub514\ubc84\uae45\uc744 \ud1b5\ud574 \ubc30\uc6b0\ub294 \ub9ac\ub205\uc2a4 \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac(~2\uc7a5) \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc7a5\uc778(\uc644) 1 2 3 4 5 [\ucf04\ud2b8 \ubca1\uc758 \"\ub2e8\uc21c\ud55c \uc124\uacc4\ub97c \uc704\ud55c \ub124 \uac00\uc9c0 \uc6d0\uce59\"] 1. \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8\ub97c \ud1b5\uacfc\ud574\uc57c \ud55c\ub2e4. 2. \uba85\ub8cc\ud558\uace0, \ucda9\ubd84\ud788 \ud45c\ud604\ub418\uace0, \uc77c\uad00\ub418\uc5b4\uc57c \ud55c\ub2e4. 3. \ub3d9\uc791\uc774\ub098 \uc124\uc815\uc5d0 \uc911\ubcf5\uc774 \uc788\uc5b4\uc11c\ub294 \uc548 \ub41c\ub2e4. 4. \uba54\uc11c\ub4dc, \ud074\ub798\uc2a4, \ubaa8\ub4c8\uc758 \uc218\ub294 \uac00\ub2a5\ud55c \uc801\uc5b4\uc57c \ud55c\ub2e4. \ub9ac\ud329\ud130\ub9c1(~2\uc7a5) \uc5c5\ubb34\uc5d0 \ubc14\ub85c \uc4f0\ub294 SQL \ud29c\ub2dd(\uc644) https://noelbird.github.io/daily/2021-07-10/ \ubc11\ubc14\ub2e5\ubd80\ud130 \uc2dc\uc791\ud558\ub294 \ub525\ub7ec\ub2dd(\uc55e\ubd80\ubd84 \uc0b4\uc9dd \ubd24\uc74c) Tucker\uc758 Go \uc5b8\uc5b4 \ud504\ub85c\uadf8\ub798\ubc0d(\uc644) \ubc11\ubc14\ub2e5\ubd80\ud130 \ub9cc\ub4dc\ub294 \uc778\ud130\ud504\ub9ac\ud130 in go(~2\uc7a5) \uc791\ub144\uc5d0 \uc81c\ub300\ub85c \ubabb \ubcf8 \uac83\uc774 \ub108\ubb34 \uc544\uc27d\uc2b5\ub2c8\ub2e4... \ud30c\uc774\uc36c \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d \uc774\ub860\uc5d0 \uce58\uc911\ud574\uc11c, \ud750\ub984\ub300\ub85c \ub530\ub77c\uac00\uae30\uac00 \uc5b4\ub824\uc6e0\uc74c \ud504\ub7f0\ud2b8\uc5d4\ub4dc \uac1c\ubc1c \uc2dc\uc791\ud558\uae30(2014) - \uc704\ud0a4\ubd81\uc2a4 \"\ub124\uc774\ubc84\ub294 \uc774\ub807\uac8c \ud55c\ub2e4\" \ub77c\ub294 \ubb38\uad6c\uac00 \uc788\uc5b4\uc11c \ucc45\uc744 \uc0c0\ub294\ub370, \uc0ac\uc2e4 \ucc45\uc758 \ub0b4\uc6a9\uc774 \ub9ce\uc774 \uc544\uc26c\uc6c0 \uc0c8\ub86d\uac8c \uc54c\uac8c\ub41c \ub9c1\ud06c \uace0\ud004\ub9ac\ud2f0 \uac1c\ubc1c \ucee8\ud150\uce20(\uc544\uc9c1 \ubabb \ubd24\uc74c): https://github.com/Integerous/goQuality-dev-contents \uae30\uc220 \ube14\ub85c\uadf8 \uad6c\ub3c5 \uc0ac\uc774\ud2b8: http://daily-devblog.com/ \uc544\uc26c\uc6e0\ub358 \uac83 \uc0ac\uc774\ub4dc \ud504\ub85c\uc81d\ud2b8 \uae30\uac04\uc744 \ub108\ubb34 \uae38\uac8c \uc7a1\uc544\uc11c, \uc2dc\uc791\ud55c \uac83\uc740 \ub9ce\uc9c0\ub9cc \uc81c\ub300\ub85c \ub05d\ub0b8 \uac83\uc774 \ubcc4\ub85c \uc5c6\uc5c8\uc74c \uacc4\uc18d \uc9c4\ud589\ud558\ub294 \uae34 \ud504\ub85c\uc81d\ud2b8\ub791 \ubcc4\uac1c\ub85c \uc9e7\uac8c 3~4\uc8fc \ub0b4\uc5d0 \ub05d\ub0b4\ub294 \uc0ac\uc774\ub4dc\ud504\ub85c\uc81d\ud2b8\ub97c \uc9c4\ud589\ud558\uba74 \uc88b\uaca0\uc74c \uc54c\uace0\ub9ac\uc998\uc5d0 \ub300\ud574\uc11c \uac1c\ub150\uc740 \uc54c\uc9c0\ub9cc, \ud6c8\ub828\uc774 \ub418\uc9c0 \uc54a\uc740 \uc54c\uace0\ub9ac\uc998\ub4e4\uc774 \ub9ce\uc74c \ud55c \uc8fc\uc81c \uc7a1\uace0 \uc624\ub798 \ud574\ub3c4 \uad1c\ucc2e\uc744 \ub4ef \ucc45 \ucc45 \ub9ac\ubdf0\ud560 \ub54c, \ucc45 \uc77d\uae30 \uc2dc\uc791\ud55c \uc2dc\uc810 / \ub2e4 \uc77d\uc740 \uc2dc\uc810\uc744 \uc801\uc5b4 \ub450\uba74 \ub354 \uc88b\uc744 \ub4ef \ubcf4\uace0 \uc2f6\uc740 \ucc45 \ub9ac\uc2a4\ud2b8\ub97c \uc798 \uad00\ub9ac\ud558\uba74 \uc88b\uaca0\uc74c.. \uc88b\uc740 \ucc45\ub4e4 \ub9ac\uc2a4\ud2b8\uc5c5\uc740 \ub9ce\uc774 \ud574\ub480\uc74c \ud3ec\ud2b8\ud3f4\ub9ac\uc624 \uc0ac\uc774\ud2b8 \ucde8\uc5c5 \uc774\ud6c4\uc5d0 \uac70\uc758 \uc5c5\ub370\uc774\ud2b8 \ub418\uc9c0 \ubabb \ud588\uc74c \ud68c\uc0ac\uc5d0\uc11c \uc9c4\ud589\ud56d \ud0c0\uc784\ub77c\uc778\uacfc \uc77c\uc815\uad00\ub9ac TODO \uc571\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc5c6\uc5b4\uc11c \ud6a8\uc728\uc801\uc778 \uc77c\uc815 \uad00\ub9ac\uac00 \uc5b4\ub824\uc6e0\uc74c \ubaa9\uacf5 \ube75\ub3c4\ub9c8 / \uc7c1\ubc18 / \uc2a4\ud234 / \uc624\ud508\ud615 \ud611\ud0c1 \ub9cc\ub4e6 TODO \uc0c8 \ud574 \uacc4\ud68d\uc740 \uc791\ub144\uc758 \ud53c\ub4dc\ubc31\uc73c\ub85c\ubd80\ud130 \ub098\uc628\ub2e4\ub294 \uac83\uc744 \uae68\ub2ec\uc558\uc2b5\ub2c8\ub2e4. \uc0c8\ud574\uc5d0 \uc774\ub8e8\uace0 \uc2f6\uc740 \uac83\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc2b5\uad00 \uc0dd\ud65c \uc2b5\uad00 \uc77c\uc815\uad00\ub9ac \ubd88\ud3b8\ud558\ub354\ub77c\ub3c4 \uc5b4\ub5a4 TODO \uc571\uc774\ub4e0 \uc77c\ub2e8 \uc0ac\uc6a9\uc744 \ud574 \ubcf4\ub294 \uac83\uc774 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. \ucc45 \uc77d\ub294 \uc2b5\uad00 \ube68\ub9ac \uc77d\uc5b4\uc57c \ud558\ub294 \ucc45\uc774\ub77c\uba74 \uadf8\ub9bc\uc774 \ub9ce\uace0 \uc9e7\uc740 \ucc45\uc73c\ub85c \uc120\ud0dd\ud560 \uac83 \uaf2d \ud544\uc694\ud55c \ucc45\uc774\ub77c\uba74, \ub108\ubb34 \uc5b4\ub824\uc6b4 \ubd80\ubd84\uc744 \uac74\ub108 \ub6f0\uace0 \ub05d\uae4c\uc9c0 \ub2e4 \ubcfc \uac83 \ucf54\ub529 \ud504\ub85c\uc81d\ud2b8 \uc2b5\uad00 \ub9e4\uc6b0 \uc815\ud655\ud55c \ucf54\ub529 \ubcf4\ub2e4\ub294, \uc77c\ub2e8 \ub9cc\ub4e4\uace0 -> \uae54\ub054\ud558\uac8c \ub3d9\uc791\ud558\ub3c4\ub85d \uace0\uce58\uace0 -> \ub354 \ube60\ub974\uac8c \ub3d9\uc791\ud558\ub3c4\ub85d \uace0\uce58\ub294 \uc2b5\uad00\uc744 \ub9cc\ub4e4\uace0 \uc2f6\uc2b5\ub2c8\ub2e4. \uac1c\ubc1c \uc644\uacb0\uc131 \uc788\ub294 \ud504\ub85c\uadf8\ub7a8 \ub9cc\ub4e4\uae30(\uc571, \uc6f9, \uac8c\uc784 \uc0c1\uad00 x) \ud604\uc7ac \uc0ac\uc774\ub4dc \ud504\ub85c\uc81d\ud2b8\ub4e4 \uc644\uc131 OS \ub9cc\ub4e4\uae30 => \uc644\uc131 golang\uc73c\ub85c \uc778\ud130\ud504\ub9ac\ud130 \ub9cc\ub4e4\uae30 => \uc644\uc131 markdown editor => editor\ub85c\uc11c\uc758 \ucd5c\uc18c\ud55c\uc758 \uae30\ub2a5 \uc644\uc131 Unity\ub85c \ub9cc\ub4dc\ub294 \uac8c\uc784(\uc778\ud504\ub7f0) => \uc644\uac15 \ud3ec\ud2b8\ud3f4\ub9ac\uc624: 2022\ub144 1\uc6d4\uae4c\uc9c0 \ubc18\uc601\ud574\uc11c \ud3ec\ud2b8\ud3f4\ub9ac\uc624 \uc0ac\uc774\ud2b8 \uc5c5\ub370\uc774\ud2b8 \uae00\uc744 \uadf8\ub0e5 \uc368\uc11c \ubc14\ub85c \uc5c5\ub370\uc774\ud2b8 \ud560 \uc218 \uc788\ub3c4\ub85d \uad00\ub9ac \ud398\uc774\uc9c0\uac00 \ud544\uc694\ud558\ub2e4\uace0 \ub290\uaf08\uc2b5\ub2c8\ub2e4. \ud68c\uc0ac\uc5d0\uc11c \uc9c4\ud589\ud55c \ud0c0\uc784\ub77c\uc778\uacfc \uc0ac\uc774\ub4dc\ud504\ub85c\uc81d\ud2b8\ub97c \uc9c4\ud589\ud55c \ud0c0\uc784\ub77c\uc778\uc744 \uac19\uc740 \ud398\uc774\uc9c0\uc5d0\uc11c \ubcf4\uc5ec\uc8fc\ub294 \ud398\uc774\uc9c0\uac00 \uc788\uc73c\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. \uc54c\uace0\ub9ac\uc998 2021\ub144\uc5d0\ub294 \uae30\ucd08\uccb4\ub825 \uc815\ub3c4\uc758 \uc54c\uace0\ub9ac\uc998\uc744 \ud588\uc9c0\ub9cc, 2022\ub144\uc5d0\ub294 \ub300\ud68c \uc704\uc8fc\uc758 \uacf5\ubd80\ub85c \ubc14\uafb8\uace0 \uc2f6\uc2b5\ub2c8\ub2e4. 2022\ub144\uc5d0\ub294 HackerCup / CodeJam\uc5d0\uc11c \ubcf8\uc120\uc5d0 \uac00\uae4c\uc774 \uac14\uc73c\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. \ub525\ub7ec\ub2dd \uac15\uc758 \ubcf5\uc2b5 \ubd80\uc2a4\ud2b8\ucea0\ud504 \uac15\uc758\ub4e4 \ubcf5\uc2b5\ud558\uace0 \uae00\ub85c \ub0a8\uae30\uae30 \uc2dc\uac04\uc774 \ub9ce\uc774 \ubd80\uc871\ud558\ub2e4\uba74 \ucf54\ub4dc\uc640 \uc124\uba85 \ub0a8\uae30\uae30 \uc6b4\uc601\uccb4\uc81c \ud575\uc2ec\ub9cc \uac00\uc7a5 \ube60\ub974\uac8c \ubc30\uc6b8 \uc218 \uc788\ub294 \uc0ac\uc774\ud2b8\ub4e4 \uc815\ub9ac => \ud55c \ud398\uc774\uc9c0\ub85c \ud2b8\ub80c\ub4dc 2021 kakao if / naver deview\uc5d0\uc11c \ud544\uc694\ud55c \uc138\ubbf8\ub098\ub4e4 \ubaa8\uc544\uc11c \ubcf4\uae30 \uc5b8\uc5b4 OPIc: AL \ub9d0\uc744 \uc798\ud558\uace0 \uc2f6\uc74c. \uc548\ub4dc\ub85c\uc774\ub4dc speak \uc571\uc73c\ub85c \ub9e4\uc77c \uc5f0\uc2b5\ud558\uae30. \ucde8\ubbf8 \uc0dd\ud65c \uc774\uac83 \ub4e4 \uc911 \ud558\ub098 \uc774\uc0c1 \ud574\ubcf4\uae30 \uac00\uc8fd \uacf5\uc608 / \ubc29\uc1a1 \ub304\uc2a4 / \uc6f9\ub514\uc790\uc778 / \uc6f9 \ud37c\ube14\ub9ac\uc2f1","title":"2021"},{"location":"self-feedback/2021/#2021","text":"","title":"2021\ub144 \ud68c\uace0"},{"location":"self-feedback/2021/#it","text":"","title":"IT"},{"location":"self-feedback/2021/#_1","text":"Computer Science Algorithm: \ud3c9\uc18c\uc5d0 TIL\uc744 \ucc0d\uc744 \uac83\uc774 \uc5c6\uc744 \ub54c \uc54c\uace0\ub9ac\uc998 \ubb38\uc81c\ub97c \ud558\ub098\uc529 \ud478\ub294 \uc6a9\ub3c4\ub85c \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \uafb8\uc900\ud788 \ud558\ub294 \uae30\ucd08\uccb4\ub825 \ub2e8\ub828 \uc815\ub3c4\ub85c \uc5f4\uc2ec\ud788 \ud588\uc2b5\ub2c8\ub2e4. FaceBook HackerCup: 2800th(round2) Atcoder: 8kyu(brown) CodeForce: newbie Leetcode(\ud55c \uc804\uccb4\uc801\uc73c\ub85c 70% \ubb38\uc81c \ud47c \ub4ef) Google Foobar Challenge: Level5 \uc9c4\ucd9c(total 5/5) OS: \uc6b4\uc601\uccb4\uc81c\ub97c bootstrap\ubd80\ud130 CUI \uae30\ubc18\uc73c\ub85c \ub9cc\ub4e4\uc5b4\ubcf4\ub294 \uc6b4\uc601\uccb4\uc81c\uc600\uace0, 80% \uc815\ub3c4 \uc644\uc131 \uc6b4\uc601\uccb4\uc81c \ub9cc\ub4e4\uae30: \uae40\ubc94\uc900. 2005. \ub9cc\ub4e4\uba74\uc11c \ubc30\uc6b0\ub294 OS \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac https://noelbird.github.io/os-making/ versioning semantic versioning: https://semver.org/lang/ko/ \uac8c\uc784 \uc548\uacbd\uc54crun \ub9cc\ub4e4\uc5c8\uc74c => \ubaa9\uacf5 \uc120\uc0dd\ub2d8 \uc120\ubb3c(electronjs) Unity\ub85c \ub9cc\ub4dc\ub294 \uac8c\uc784(inflearn): C# \uc5b8\uc5b4 \uac15\uc758\ub9cc \uc644\ub8cc\ud588\uc74c. \uae30\ud0c0 \uc0ac\uc774\ub4dc \ud504\ub85c\uc81d\ud2b8 markdown editor \ub9cc\ub4e4\uae30(Mars) \uae30\ubcf8\uc801\uc778 \uae30\ub2a5\ub9cc \uad6c\ud604: \ub80c\ub354\ub9c1, \ud30c\uc77c \uc4f0\uae30, \ubd88\ub7ec\uc624\uae30 https://github.com/NoelBird/mars Simple OJ(Online Judgement) \ud55c \uba85\uc758 \uc720\uc800\uc6a9: \ubb38\uc81c 1\uac1c. \ub3c4\ucee4 \uc0ac\uc6a9 x http://playground.noelbird.com:50080/ \ubc11\ubc14\ub2e5\ubd80\ud130 \ub9cc\ub4dc\ub294 \uc778\ud130\ud504\ub9ac\ud130 in Go https://noelbird.github.io/interpreter/02/ mytreepy \uc624\ud508 \uc18c\uc2a4 https://github.com/NoelBird/treepy","title":"\uac1c\ubc1c"},{"location":"self-feedback/2021/#_2","text":"\ub124\uc774\ubc84 \ucee4\ub125\ud2b8 \uc7ac\ub2e8 - \ubd80\uc2a4\ud2b8\ucf54\uc2a4 AI tech course(upstage) 2\uae30 \uba58\ud1a0\ub9c1(NLP \uba58\ud1a0) \ubaa8\ub378 \ucd5c\uc801\ud654 KLUE(Korean NLU Benchmark) \ub370\uc774\ud130\uc14b\uc744 \ud65c\uc6a9\ud55c ODQA(Open Domain Question & Ansering)","title":"\ub525\ub7ec\ub2dd"},{"location":"self-feedback/2021/#_3","text":"\ud30c\uc774\uc36c\uc73c\ub85c \uad6c\ud604: https://noelbird.github.io/daily/2021-05-16/","title":"\uac04\ub2e8\ud55c \ube14\ub85d\uccb4\uc778 \ub9cc\ub4e4\uae30"},{"location":"self-feedback/2021/#_4","text":"\uc791\ub144\uc5d0\ub294 \ucc45\uc744 3\uad8c \uc77d\uc5c8\uc2b5\ub2c8\ub2e4. \ub9ac\ud329\ud1a0\ub9c1 \uac19\uc740 \uc88b\uc740 \ucc45\uc744 \uc77d\uc73c\ub824\ub2c8\uae4c \uc77c\uc815\uc5d0 \uce58\uc5ec\uc11c \uc798 \uc548 \uc77d\uac8c \ub429\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc9e7\uace0 \uadf8\ub9bc\uc774 \ub9ce\uc740 \ucc45\uc774 \ud655\uc2e4\ud788 \uc798 \uc77d\ud788\ub294 \uac83\uc744 \uae68\ub2ec\uc558\uc2b5\ub2c8\ub2e4. \ub514\ubc84\uae45\uc744 \ud1b5\ud574 \ubc30\uc6b0\ub294 \ub9ac\ub205\uc2a4 \ucee4\ub110\uc758 \uad6c\uc870\uc640 \uc6d0\ub9ac(~2\uc7a5) \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc7a5\uc778(\uc644) 1 2 3 4 5 [\ucf04\ud2b8 \ubca1\uc758 \"\ub2e8\uc21c\ud55c \uc124\uacc4\ub97c \uc704\ud55c \ub124 \uac00\uc9c0 \uc6d0\uce59\"] 1. \ubaa8\ub4e0 \ud14c\uc2a4\ud2b8\ub97c \ud1b5\uacfc\ud574\uc57c \ud55c\ub2e4. 2. \uba85\ub8cc\ud558\uace0, \ucda9\ubd84\ud788 \ud45c\ud604\ub418\uace0, \uc77c\uad00\ub418\uc5b4\uc57c \ud55c\ub2e4. 3. \ub3d9\uc791\uc774\ub098 \uc124\uc815\uc5d0 \uc911\ubcf5\uc774 \uc788\uc5b4\uc11c\ub294 \uc548 \ub41c\ub2e4. 4. \uba54\uc11c\ub4dc, \ud074\ub798\uc2a4, \ubaa8\ub4c8\uc758 \uc218\ub294 \uac00\ub2a5\ud55c \uc801\uc5b4\uc57c \ud55c\ub2e4. \ub9ac\ud329\ud130\ub9c1(~2\uc7a5) \uc5c5\ubb34\uc5d0 \ubc14\ub85c \uc4f0\ub294 SQL \ud29c\ub2dd(\uc644) https://noelbird.github.io/daily/2021-07-10/ \ubc11\ubc14\ub2e5\ubd80\ud130 \uc2dc\uc791\ud558\ub294 \ub525\ub7ec\ub2dd(\uc55e\ubd80\ubd84 \uc0b4\uc9dd \ubd24\uc74c) Tucker\uc758 Go \uc5b8\uc5b4 \ud504\ub85c\uadf8\ub798\ubc0d(\uc644) \ubc11\ubc14\ub2e5\ubd80\ud130 \ub9cc\ub4dc\ub294 \uc778\ud130\ud504\ub9ac\ud130 in go(~2\uc7a5) \uc791\ub144\uc5d0 \uc81c\ub300\ub85c \ubabb \ubcf8 \uac83\uc774 \ub108\ubb34 \uc544\uc27d\uc2b5\ub2c8\ub2e4... \ud30c\uc774\uc36c \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d \uc774\ub860\uc5d0 \uce58\uc911\ud574\uc11c, \ud750\ub984\ub300\ub85c \ub530\ub77c\uac00\uae30\uac00 \uc5b4\ub824\uc6e0\uc74c \ud504\ub7f0\ud2b8\uc5d4\ub4dc \uac1c\ubc1c \uc2dc\uc791\ud558\uae30(2014) - \uc704\ud0a4\ubd81\uc2a4 \"\ub124\uc774\ubc84\ub294 \uc774\ub807\uac8c \ud55c\ub2e4\" \ub77c\ub294 \ubb38\uad6c\uac00 \uc788\uc5b4\uc11c \ucc45\uc744 \uc0c0\ub294\ub370, \uc0ac\uc2e4 \ucc45\uc758 \ub0b4\uc6a9\uc774 \ub9ce\uc774 \uc544\uc26c\uc6c0","title":"\ubd24\ub358 \ucc45"},{"location":"self-feedback/2021/#_5","text":"\uace0\ud004\ub9ac\ud2f0 \uac1c\ubc1c \ucee8\ud150\uce20(\uc544\uc9c1 \ubabb \ubd24\uc74c): https://github.com/Integerous/goQuality-dev-contents \uae30\uc220 \ube14\ub85c\uadf8 \uad6c\ub3c5 \uc0ac\uc774\ud2b8: http://daily-devblog.com/","title":"\uc0c8\ub86d\uac8c \uc54c\uac8c\ub41c \ub9c1\ud06c"},{"location":"self-feedback/2021/#_6","text":"\uc0ac\uc774\ub4dc \ud504\ub85c\uc81d\ud2b8 \uae30\uac04\uc744 \ub108\ubb34 \uae38\uac8c \uc7a1\uc544\uc11c, \uc2dc\uc791\ud55c \uac83\uc740 \ub9ce\uc9c0\ub9cc \uc81c\ub300\ub85c \ub05d\ub0b8 \uac83\uc774 \ubcc4\ub85c \uc5c6\uc5c8\uc74c \uacc4\uc18d \uc9c4\ud589\ud558\ub294 \uae34 \ud504\ub85c\uc81d\ud2b8\ub791 \ubcc4\uac1c\ub85c \uc9e7\uac8c 3~4\uc8fc \ub0b4\uc5d0 \ub05d\ub0b4\ub294 \uc0ac\uc774\ub4dc\ud504\ub85c\uc81d\ud2b8\ub97c \uc9c4\ud589\ud558\uba74 \uc88b\uaca0\uc74c \uc54c\uace0\ub9ac\uc998\uc5d0 \ub300\ud574\uc11c \uac1c\ub150\uc740 \uc54c\uc9c0\ub9cc, \ud6c8\ub828\uc774 \ub418\uc9c0 \uc54a\uc740 \uc54c\uace0\ub9ac\uc998\ub4e4\uc774 \ub9ce\uc74c \ud55c \uc8fc\uc81c \uc7a1\uace0 \uc624\ub798 \ud574\ub3c4 \uad1c\ucc2e\uc744 \ub4ef \ucc45 \ucc45 \ub9ac\ubdf0\ud560 \ub54c, \ucc45 \uc77d\uae30 \uc2dc\uc791\ud55c \uc2dc\uc810 / \ub2e4 \uc77d\uc740 \uc2dc\uc810\uc744 \uc801\uc5b4 \ub450\uba74 \ub354 \uc88b\uc744 \ub4ef \ubcf4\uace0 \uc2f6\uc740 \ucc45 \ub9ac\uc2a4\ud2b8\ub97c \uc798 \uad00\ub9ac\ud558\uba74 \uc88b\uaca0\uc74c.. \uc88b\uc740 \ucc45\ub4e4 \ub9ac\uc2a4\ud2b8\uc5c5\uc740 \ub9ce\uc774 \ud574\ub480\uc74c \ud3ec\ud2b8\ud3f4\ub9ac\uc624 \uc0ac\uc774\ud2b8 \ucde8\uc5c5 \uc774\ud6c4\uc5d0 \uac70\uc758 \uc5c5\ub370\uc774\ud2b8 \ub418\uc9c0 \ubabb \ud588\uc74c \ud68c\uc0ac\uc5d0\uc11c \uc9c4\ud589\ud56d \ud0c0\uc784\ub77c\uc778\uacfc \uc77c\uc815\uad00\ub9ac TODO \uc571\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc5c6\uc5b4\uc11c \ud6a8\uc728\uc801\uc778 \uc77c\uc815 \uad00\ub9ac\uac00 \uc5b4\ub824\uc6e0\uc74c","title":"\uc544\uc26c\uc6e0\ub358 \uac83"},{"location":"self-feedback/2021/#_7","text":"\ube75\ub3c4\ub9c8 / \uc7c1\ubc18 / \uc2a4\ud234 / \uc624\ud508\ud615 \ud611\ud0c1 \ub9cc\ub4e6","title":"\ubaa9\uacf5"},{"location":"self-feedback/2021/#todo","text":"\uc0c8 \ud574 \uacc4\ud68d\uc740 \uc791\ub144\uc758 \ud53c\ub4dc\ubc31\uc73c\ub85c\ubd80\ud130 \ub098\uc628\ub2e4\ub294 \uac83\uc744 \uae68\ub2ec\uc558\uc2b5\ub2c8\ub2e4. \uc0c8\ud574\uc5d0 \uc774\ub8e8\uace0 \uc2f6\uc740 \uac83\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc2b5\uad00 \uc0dd\ud65c \uc2b5\uad00 \uc77c\uc815\uad00\ub9ac \ubd88\ud3b8\ud558\ub354\ub77c\ub3c4 \uc5b4\ub5a4 TODO \uc571\uc774\ub4e0 \uc77c\ub2e8 \uc0ac\uc6a9\uc744 \ud574 \ubcf4\ub294 \uac83\uc774 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. \ucc45 \uc77d\ub294 \uc2b5\uad00 \ube68\ub9ac \uc77d\uc5b4\uc57c \ud558\ub294 \ucc45\uc774\ub77c\uba74 \uadf8\ub9bc\uc774 \ub9ce\uace0 \uc9e7\uc740 \ucc45\uc73c\ub85c \uc120\ud0dd\ud560 \uac83 \uaf2d \ud544\uc694\ud55c \ucc45\uc774\ub77c\uba74, \ub108\ubb34 \uc5b4\ub824\uc6b4 \ubd80\ubd84\uc744 \uac74\ub108 \ub6f0\uace0 \ub05d\uae4c\uc9c0 \ub2e4 \ubcfc \uac83 \ucf54\ub529 \ud504\ub85c\uc81d\ud2b8 \uc2b5\uad00 \ub9e4\uc6b0 \uc815\ud655\ud55c \ucf54\ub529 \ubcf4\ub2e4\ub294, \uc77c\ub2e8 \ub9cc\ub4e4\uace0 -> \uae54\ub054\ud558\uac8c \ub3d9\uc791\ud558\ub3c4\ub85d \uace0\uce58\uace0 -> \ub354 \ube60\ub974\uac8c \ub3d9\uc791\ud558\ub3c4\ub85d \uace0\uce58\ub294 \uc2b5\uad00\uc744 \ub9cc\ub4e4\uace0 \uc2f6\uc2b5\ub2c8\ub2e4. \uac1c\ubc1c \uc644\uacb0\uc131 \uc788\ub294 \ud504\ub85c\uadf8\ub7a8 \ub9cc\ub4e4\uae30(\uc571, \uc6f9, \uac8c\uc784 \uc0c1\uad00 x) \ud604\uc7ac \uc0ac\uc774\ub4dc \ud504\ub85c\uc81d\ud2b8\ub4e4 \uc644\uc131 OS \ub9cc\ub4e4\uae30 => \uc644\uc131 golang\uc73c\ub85c \uc778\ud130\ud504\ub9ac\ud130 \ub9cc\ub4e4\uae30 => \uc644\uc131 markdown editor => editor\ub85c\uc11c\uc758 \ucd5c\uc18c\ud55c\uc758 \uae30\ub2a5 \uc644\uc131 Unity\ub85c \ub9cc\ub4dc\ub294 \uac8c\uc784(\uc778\ud504\ub7f0) => \uc644\uac15 \ud3ec\ud2b8\ud3f4\ub9ac\uc624: 2022\ub144 1\uc6d4\uae4c\uc9c0 \ubc18\uc601\ud574\uc11c \ud3ec\ud2b8\ud3f4\ub9ac\uc624 \uc0ac\uc774\ud2b8 \uc5c5\ub370\uc774\ud2b8 \uae00\uc744 \uadf8\ub0e5 \uc368\uc11c \ubc14\ub85c \uc5c5\ub370\uc774\ud2b8 \ud560 \uc218 \uc788\ub3c4\ub85d \uad00\ub9ac \ud398\uc774\uc9c0\uac00 \ud544\uc694\ud558\ub2e4\uace0 \ub290\uaf08\uc2b5\ub2c8\ub2e4. \ud68c\uc0ac\uc5d0\uc11c \uc9c4\ud589\ud55c \ud0c0\uc784\ub77c\uc778\uacfc \uc0ac\uc774\ub4dc\ud504\ub85c\uc81d\ud2b8\ub97c \uc9c4\ud589\ud55c \ud0c0\uc784\ub77c\uc778\uc744 \uac19\uc740 \ud398\uc774\uc9c0\uc5d0\uc11c \ubcf4\uc5ec\uc8fc\ub294 \ud398\uc774\uc9c0\uac00 \uc788\uc73c\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. \uc54c\uace0\ub9ac\uc998 2021\ub144\uc5d0\ub294 \uae30\ucd08\uccb4\ub825 \uc815\ub3c4\uc758 \uc54c\uace0\ub9ac\uc998\uc744 \ud588\uc9c0\ub9cc, 2022\ub144\uc5d0\ub294 \ub300\ud68c \uc704\uc8fc\uc758 \uacf5\ubd80\ub85c \ubc14\uafb8\uace0 \uc2f6\uc2b5\ub2c8\ub2e4. 2022\ub144\uc5d0\ub294 HackerCup / CodeJam\uc5d0\uc11c \ubcf8\uc120\uc5d0 \uac00\uae4c\uc774 \uac14\uc73c\uba74 \uc88b\uaca0\uc2b5\ub2c8\ub2e4. \ub525\ub7ec\ub2dd \uac15\uc758 \ubcf5\uc2b5 \ubd80\uc2a4\ud2b8\ucea0\ud504 \uac15\uc758\ub4e4 \ubcf5\uc2b5\ud558\uace0 \uae00\ub85c \ub0a8\uae30\uae30 \uc2dc\uac04\uc774 \ub9ce\uc774 \ubd80\uc871\ud558\ub2e4\uba74 \ucf54\ub4dc\uc640 \uc124\uba85 \ub0a8\uae30\uae30 \uc6b4\uc601\uccb4\uc81c \ud575\uc2ec\ub9cc \uac00\uc7a5 \ube60\ub974\uac8c \ubc30\uc6b8 \uc218 \uc788\ub294 \uc0ac\uc774\ud2b8\ub4e4 \uc815\ub9ac => \ud55c \ud398\uc774\uc9c0\ub85c \ud2b8\ub80c\ub4dc 2021 kakao if / naver deview\uc5d0\uc11c \ud544\uc694\ud55c \uc138\ubbf8\ub098\ub4e4 \ubaa8\uc544\uc11c \ubcf4\uae30 \uc5b8\uc5b4 OPIc: AL \ub9d0\uc744 \uc798\ud558\uace0 \uc2f6\uc74c. \uc548\ub4dc\ub85c\uc774\ub4dc speak \uc571\uc73c\ub85c \ub9e4\uc77c \uc5f0\uc2b5\ud558\uae30. \ucde8\ubbf8 \uc0dd\ud65c \uc774\uac83 \ub4e4 \uc911 \ud558\ub098 \uc774\uc0c1 \ud574\ubcf4\uae30 \uac00\uc8fd \uacf5\uc608 / \ubc29\uc1a1 \ub304\uc2a4 / \uc6f9\ub514\uc790\uc778 / \uc6f9 \ud37c\ube14\ub9ac\uc2f1","title":"TODO"},{"location":"spring/","text":"\ubaa9\uc801 django\ub85c \uc6f9 \uac1c\ubc1c\uc744 \ubc30\uc6e0\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, python\uc758 \ub3d9\uc801 \ud0c0\uc774\ud551\uacfc GIL(Global Interpreter Lock)\uc73c\ub85c \uc778\ud574, \ub2e4\ub978 \uc5b8\uc5b4\ub97c \uc120\ud0dd\ud558\uae30\ub85c \ub9c8\uc74c\uba39\uc5c8\uc2b5\ub2c8\ub2e4. \ub3d9\uc801 \ud0c0\uc774\ud551\uc73c\ub85c \uc778\ud574\uc11c, \ud568\uc218 \uc6d0\ud615\uc758 \ud0c0\uc785\uc774 \uc5c6\uace0, \ud568\uc218 \uc6d0\ud615\uc758 \ud0c0\uc785\uc774 \uc5c6\uc73c\ub2c8 \ud568\uc218\uc758 \uc6d0\ud615\ub9cc \ubcf4\uace0 \uc815\ud655\ud558\uac8c \uc5b4\ub5a4 \ub3d9\uc791\uc744 \ud558\ub294 \uc9c0 \uc54c \uc218 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. \ub610\ud55c GIL\ub85c \uc778\ud574\uc11c \uc131\ub2a5\uc801\uc778 \uc800\ud558\uac00 \ub108\ubb34 \ucef8\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \ub2e4\ub978 \uc0ac\ub78c\ub4e4\ub3c4 \ub9ce\uc774 \uc4f0\uace0 \uc788\ub294 java\ub85c \uc6f9\uac1c\ubc1c\uc744 \ud574\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4.","title":"intro"},{"location":"spring/#_1","text":"django\ub85c \uc6f9 \uac1c\ubc1c\uc744 \ubc30\uc6e0\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc, python\uc758 \ub3d9\uc801 \ud0c0\uc774\ud551\uacfc GIL(Global Interpreter Lock)\uc73c\ub85c \uc778\ud574, \ub2e4\ub978 \uc5b8\uc5b4\ub97c \uc120\ud0dd\ud558\uae30\ub85c \ub9c8\uc74c\uba39\uc5c8\uc2b5\ub2c8\ub2e4. \ub3d9\uc801 \ud0c0\uc774\ud551\uc73c\ub85c \uc778\ud574\uc11c, \ud568\uc218 \uc6d0\ud615\uc758 \ud0c0\uc785\uc774 \uc5c6\uace0, \ud568\uc218 \uc6d0\ud615\uc758 \ud0c0\uc785\uc774 \uc5c6\uc73c\ub2c8 \ud568\uc218\uc758 \uc6d0\ud615\ub9cc \ubcf4\uace0 \uc815\ud655\ud558\uac8c \uc5b4\ub5a4 \ub3d9\uc791\uc744 \ud558\ub294 \uc9c0 \uc54c \uc218 \uc5c6\uc5c8\uc2b5\ub2c8\ub2e4. \ub610\ud55c GIL\ub85c \uc778\ud574\uc11c \uc131\ub2a5\uc801\uc778 \uc800\ud558\uac00 \ub108\ubb34 \ucef8\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c, \ub2e4\ub978 \uc0ac\ub78c\ub4e4\ub3c4 \ub9ce\uc774 \uc4f0\uace0 \uc788\ub294 java\ub85c \uc6f9\uac1c\ubc1c\uc744 \ud574\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4.","title":"\ubaa9\uc801"},{"location":"spring/01/","text":"day01 https://start.spring.io/ \uc694\uc998 \ucd94\uc138\ub294 gradle\ub85c \ub118\uc5b4\uc624\ub294 \ucd94\uc138\uc784 spring \ubd80\ud2b8\uc5d0\uc11c snapshot\uc740 \ub9cc\ub4e4\uace0 \uc788\ub294 \uac83 M1\uc740 \uc544\uc9c1 \uc815\uc2dd release \ub41c \uac83\uc774 \uc544\ub2d8 \uc815\uc2dd \ub9b4\ub9ac\uc988 \uc911\uc5d0\uc11c \uac00\uc7a5 \ubc84\uc804 \ud070 \uac83\uc73c\ub85c \uc120\ud0dd project metadata Group: \ubcf4\ud1b5 \ud68c\uc0ac\uba85\uc744 \uc801\uc5b4\uc90c artifact: \ube4c\ub4dc \uacb0\uacfc\ubb3c \uc774\ub984(\ud504\ub85c\uc81d\ud2b8 \uba85) dependencies: \uc5b4\ub5a4 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud560 \uac83\uc774\ub0d0 spring web thymeleaf: html \ud15c\ud50c\ub9bf \uc5d4\uc9c4 generate \ubc84\ud2bc \ud074\ub9ad build.gradle\uc740 \ube4c\ub4dc \uc124\uc815\ud30c\uc77c\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 repositories { mavenCentral() # \uc5ec\uae30\uc5d0\uc11c } dependencies { implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' implementation 'org.springframework.boot:spring-boot-starter-web' testImplementation 'org.springframework.boot:spring-boot-starter-test' } dependencies\ub97c mavenCentral()\uc5d0\uc11c \ub2e4\uc6b4 \ub85c\ub4dc \ubc1b\uc74c \uc2a4\ud504\ub9c1\ubd80\ud2b8 \uc2e4\ud589 \uc774 \uc5d0\ub7ec\ud398\uc774\uc9c0\uac00 \ub728\uba74 \uc131\uacf5\uc785\ub2c8\ub2e4. \ud1b0\ucea3\uc774\ub77c\ub294 \uc6f9\uc11c\ubc84\uac00 \ub744\uc6cc\uc9c0\uba74\uc11c \uc2a4\ud504\ub9c1\ubd80\ud2b8\uac00 \uac19\uc774 \uc62c\ub77c\uac11\ub2c8\ub2e4. gradle\uc744 \ud1b5\ud558\uc9c0 \uc54a\uace0, java \uc9c1\uc811 \uc2e4\ud589 settings > gradle \uac80\uc0c9 \uc774\ub807\uac8c \uc2e4\ud589\ud558\uba74 \ud6e8\uc52c \ube60\ub984 controller \ub9cc\ub4e4\uae30 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package hello.hellospring.controller ; import org.springframework.stereotype.Controller ; import org.springframework.ui.Model ; import org.springframework.web.bind.annotation.GetMapping ; @Controller public class HelloController { @GetMapping ( \"hello\" ) public String hello ( Model model ){ model . addAttribute ( \"data\" , \"hello!!\" ); return \"hello\" ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 <!doctype html> < html lang = \"en\" xmlns:th = \"http://www.thymeleaf.org\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Document </ title > </ head > < body > < p th:text = \"'\uc548\ub155\ud558\uc138\uc694. ' + ${data}\" > \uc548\ub155\ud558\uc138\uc694. \uc190\ub2d8 </ p > </ body > </ html > static file static \ud3f4\ub354 \ud558\uc704\uc5d0 html \ud30c\uc77c\uc744 \ub450\uba74, \uadf8\ub300\ub85c \ub4e4\uc5b4\uac08 \uc218 \uc788\uc74c spring\uc740 localhost:8080/hello-spring.html \ub85c \uc811\uc18d\ud558\uac8c \ub418\uba74, \ucee8\ud2b8\ub864\ub7ec\uac00 \uc788\ub294 \uc9c0 \ucc3e\uace0, \uc5c6\uc73c\uba74, static file\uc5d0\uc11c \ucc3e\uc74c Done \uc2a4\ud504\ub9c1 \uc6f9 \uac1c\ubc1c \uae30\ucd08\uc758 \uc815\uc801 \ucee8\ud150\uce20 \uae4c\uc9c0 \ub4e4\uc5c8\uc74c","title":"day1: spring \uc2dc\uc791"},{"location":"spring/01/#day01","text":"https://start.spring.io/ \uc694\uc998 \ucd94\uc138\ub294 gradle\ub85c \ub118\uc5b4\uc624\ub294 \ucd94\uc138\uc784 spring \ubd80\ud2b8\uc5d0\uc11c snapshot\uc740 \ub9cc\ub4e4\uace0 \uc788\ub294 \uac83 M1\uc740 \uc544\uc9c1 \uc815\uc2dd release \ub41c \uac83\uc774 \uc544\ub2d8 \uc815\uc2dd \ub9b4\ub9ac\uc988 \uc911\uc5d0\uc11c \uac00\uc7a5 \ubc84\uc804 \ud070 \uac83\uc73c\ub85c \uc120\ud0dd","title":"day01"},{"location":"spring/01/#project-metadata","text":"Group: \ubcf4\ud1b5 \ud68c\uc0ac\uba85\uc744 \uc801\uc5b4\uc90c artifact: \ube4c\ub4dc \uacb0\uacfc\ubb3c \uc774\ub984(\ud504\ub85c\uc81d\ud2b8 \uba85) dependencies: \uc5b4\ub5a4 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud560 \uac83\uc774\ub0d0 spring web thymeleaf: html \ud15c\ud50c\ub9bf \uc5d4\uc9c4 generate \ubc84\ud2bc \ud074\ub9ad build.gradle\uc740 \ube4c\ub4dc \uc124\uc815\ud30c\uc77c\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 repositories { mavenCentral() # \uc5ec\uae30\uc5d0\uc11c } dependencies { implementation 'org.springframework.boot:spring-boot-starter-thymeleaf' implementation 'org.springframework.boot:spring-boot-starter-web' testImplementation 'org.springframework.boot:spring-boot-starter-test' } dependencies\ub97c mavenCentral()\uc5d0\uc11c \ub2e4\uc6b4 \ub85c\ub4dc \ubc1b\uc74c","title":"project metadata"},{"location":"spring/01/#_1","text":"\uc774 \uc5d0\ub7ec\ud398\uc774\uc9c0\uac00 \ub728\uba74 \uc131\uacf5\uc785\ub2c8\ub2e4. \ud1b0\ucea3\uc774\ub77c\ub294 \uc6f9\uc11c\ubc84\uac00 \ub744\uc6cc\uc9c0\uba74\uc11c \uc2a4\ud504\ub9c1\ubd80\ud2b8\uac00 \uac19\uc774 \uc62c\ub77c\uac11\ub2c8\ub2e4.","title":"\uc2a4\ud504\ub9c1\ubd80\ud2b8 \uc2e4\ud589"},{"location":"spring/01/#gradle-java","text":"settings > gradle \uac80\uc0c9 \uc774\ub807\uac8c \uc2e4\ud589\ud558\uba74 \ud6e8\uc52c \ube60\ub984","title":"gradle\uc744 \ud1b5\ud558\uc9c0 \uc54a\uace0, java \uc9c1\uc811 \uc2e4\ud589"},{"location":"spring/01/#controller","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 package hello.hellospring.controller ; import org.springframework.stereotype.Controller ; import org.springframework.ui.Model ; import org.springframework.web.bind.annotation.GetMapping ; @Controller public class HelloController { @GetMapping ( \"hello\" ) public String hello ( Model model ){ model . addAttribute ( \"data\" , \"hello!!\" ); return \"hello\" ; } } 1 2 3 4 5 6 7 8 9 10 11 12 13 <!doctype html> < html lang = \"en\" xmlns:th = \"http://www.thymeleaf.org\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\" > < meta http-equiv = \"X-UA-Compatible\" content = \"ie=edge\" > < title > Document </ title > </ head > < body > < p th:text = \"'\uc548\ub155\ud558\uc138\uc694. ' + ${data}\" > \uc548\ub155\ud558\uc138\uc694. \uc190\ub2d8 </ p > </ body > </ html >","title":"controller \ub9cc\ub4e4\uae30"},{"location":"spring/01/#static-file","text":"static \ud3f4\ub354 \ud558\uc704\uc5d0 html \ud30c\uc77c\uc744 \ub450\uba74, \uadf8\ub300\ub85c \ub4e4\uc5b4\uac08 \uc218 \uc788\uc74c spring\uc740 localhost:8080/hello-spring.html \ub85c \uc811\uc18d\ud558\uac8c \ub418\uba74, \ucee8\ud2b8\ub864\ub7ec\uac00 \uc788\ub294 \uc9c0 \ucc3e\uace0, \uc5c6\uc73c\uba74, static file\uc5d0\uc11c \ucc3e\uc74c","title":"static file"},{"location":"spring/01/#done","text":"\uc2a4\ud504\ub9c1 \uc6f9 \uac1c\ubc1c \uae30\ucd08\uc758 \uc815\uc801 \ucee8\ud150\uce20 \uae4c\uc9c0 \ub4e4\uc5c8\uc74c","title":"Done"},{"location":"unity/","text":"unity \ud559\uc2b5\ub85c\uadf8 inflearn\uc758 C#\uacfc \uc720\ub2c8\ud2f0\ub85c \ub9cc\ub4dc\ub294 MMORPG \uac8c\uc784 \uac1c\ubc1c \uc2dc\ub9ac\uc988\ub97c \uae30\ubc18\uc73c\ub85c \uc815\ub9ac","title":"unity \ud559\uc2b5\ub85c\uadf8"},{"location":"unity/#unity","text":"inflearn\uc758 C#\uacfc \uc720\ub2c8\ud2f0\ub85c \ub9cc\ub4dc\ub294 MMORPG \uac8c\uc784 \uac1c\ubc1c \uc2dc\ub9ac\uc988\ub97c \uae30\ubc18\uc73c\ub85c \uc815\ub9ac","title":"unity \ud559\uc2b5\ub85c\uadf8"},{"location":"unity/01/","text":"Part3: \uc720\ub2c8\ud2f0 \uc5d4\uc9c4(\uc5d0\uc14b\uad00\ub828) \ud654\uba74\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 Windows > Layouts > 2 by 3 \ub85c \ub450\ub294 \uac83\uc774 \ud50c\ub808\uc774 \ud654\uba74\uc774\ub791 \uac19\uc774 \ubd10\uc11c \uc88b\uc2b5\ub2c8\ub2e4. Unity Chan! \uc774\ub77c\ub294 Asset\uc744 Asset Market\uc5d0\uc11c \ubb34\ub8cc\ub85c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. trouble shooting: Visual Studio\uc5d0\uc11c Unity\uc758 \ud568\uc218, \ubcc0\uc218\ub4f1\uc774 \ubd88\ub7ec\uc640\uc9c0\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. Player.cs \ud30c\uc77c\uc774 \uae30\ud0c0 \ud30c\uc77c\ub85c \ub418\uc5b4 \uc788\uc5c8\ub294\ub370, visual studio installer\uc5d0\uc11c Unity \uad00\ub828\ub41c \ud56d\ubaa9\uc744 \uc5c5\ub370\uc774\ud2b8 \ud574\uc8fc\uba74 \ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud504\ub85c\uc81d\ud2b8 \ub2e4\uc2dc \ub9cc\ub4e4\uc5b4\uc57c \ud560 \uc218\ub3c4 \uc788\uc74c transform reset \ub300\uc0c1\uc5d0 \ub300\ud574\uc11c transform\uc744 \uc798 \ubabb\ud55c \uacbd\uc6b0\uc5d0\ub294 Reset \ubc84\ud2bc\uc774 \uc788\uc5b4\uc11c \ub2e4\uc2dc \uc6d0\ub798\ub300\ub85c \ub3cc\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc88c\ud45c\uacc4 \uc88c\ud45c\uacc4\uc758 \uc885\ub958 \uc88c\ud45c\uacc4\ub294 world \uc88c\ud45c\uc640 \ub85c\uceec \uc88c\ud45c \ub450 \uac1c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc2a4\ud06c\ub9bd\ud2b8\uc5d0\uc11c \ubcc0\uacbd\ud560 \ub54c \uce90\ub9ad\ud130\ub294 world \uc88c\ud45c\ub97c \uae30\uc900\uc73c\ub85c \uc6c0\uc9c1\uc774\uac8c \ub418\ub294\ub370, \uc720\ub2c8\ud2f0\uc5d0\uc11c \uce90\ub9ad\ud130\ub97c \ud074\ub9ad\ud558\uace0 X\ub97c \ub204\ub974\uba74 \ub85c\uceec\uc88c\ud45c\ub97c \uae30\uc900\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c Local\uc774\ub77c\uace0 \uc801\ud78c \ud1a0\uae00 \ubc84\ud2bc\uc744 \ub204\ub974\ub294 \uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ucc38\uace0\ub85c \ubaa8\ub4e0 \ubb3c\uccb4\ub294 \uc790\uc2e0\ub9cc\uc758 \uc88c\ud45c\uacc4\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud68c\uc804 \ud2b9\uc815 \ucd95\uc744 \uae30\uc900\uc73c\ub85c degree\ub97c \uc0ac\uc6a9\ud574\uc11c \uc2dc\uacc4\ubc29\ud5a5\uc73c\ub85c 360\ub3c4 \ud68c\uc804 \ucf54\ub4dc 1 2 3 4 transform . position += new Vector3 ( 0.0f , 0.0f , 1.0f ); // \uc808\ub300\uc88c\ud45c \uae30\uc900\uc73c\ub85c position \ubcc0\ud615 transform . position += new Vector3 . forward ; // \uac00\ub3c5\uc131 \ub192\uc774\uae30 transform . position += transform . TransformDirection ( Vector3 . forward * Time . deltaTime * _speed ); // \uc0c1\ub300\uc88c\ud45c \uae30\uc900\uc73c\ub85c position \ubcc0\ud615 transform . Translate ( Vector3 . right * Time . deltaTime * _speed ); // \ub85c\uceec\uc88c\ud45c \uae30\uc900\uc73c\ub85c \ud3ec\uc9c0\uc158 \ubcc0\ud615 \uce74\uba54\ub77c Ctrl + Shift + F \ub97c \ub204\ub974\uba74, \ud604\uc7ac \ubcf4\uace0 \uc788\ub294 \ud654\uba74\uc774\ub791 \ub3d9\uc77c\ud558\uac8c \uce74\uba54\ub77c\uac00 \uc138\ud305\ub429\ub2c8\ub2e4. \uce74\uba54\ub77c \uc624\ube0c\uc81d\ud2b8\ub97c \uc120\ud0dd\ud558\uace0 \ub2e8\ucd95\ud0a4\ub97c \uc785\ub825\ud560 \uac83! \uc624\ub298\uc758 \uc18c\uc2a4\ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // Player.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Player : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; // Start is called before the first frame update void Start () { } // Update is called once per frame void Update () { // convert coordination system // Local -> World // TransformDirection // World -> Local // InverseTransformDirection // \ub85c\uceec \uc88c\ud45c\uacc4\ub97c \uc774\uc6a9\ud574\uc11c World \uc88c\ud45c\uacc4\ub85c \ubc88\uc5ed // transform.position += transform.TransformDirection(Vector3.forward * Time.deltaTime * _speed); if ( Input . GetKey ( KeyCode . W )) { /*transform.position += new Vector3(0.0f, 0.0f, 1.0f) * Time.deltaTime * _speed;*/ transform . Translate ( Vector3 . forward * Time . deltaTime * _speed ); } if ( Input . GetKey ( KeyCode . S )) { /*transform.position -= new Vector3(0.0f, 0.0f, 1.0f) * Time.deltaTime * _speed;*/ transform . Translate ( Vector3 . back * Time . deltaTime * _speed ); } if ( Input . GetKey ( KeyCode . A )) { /*transform.position += new Vector3(1.0f, 0.0f, 0.0f) * Time.deltaTime * _speed;*/ transform . Translate ( Vector3 . left * Time . deltaTime * _speed ); } if ( Input . GetKey ( KeyCode . D )) { /*transform.position -= new Vector3(1.0f, 0.0f, 0.0f) * Time.deltaTime * _speed;*/ transform . Translate ( Vector3 . right * Time . deltaTime * _speed ); } } }","title":"Part3: \uc720\ub2c8\ud2f0 \uc5d4\uc9c4(\uc5d0\uc14b\uad00\ub828)"},{"location":"unity/01/#part3","text":"\ud654\uba74\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 Windows > Layouts > 2 by 3 \ub85c \ub450\ub294 \uac83\uc774 \ud50c\ub808\uc774 \ud654\uba74\uc774\ub791 \uac19\uc774 \ubd10\uc11c \uc88b\uc2b5\ub2c8\ub2e4. Unity Chan! \uc774\ub77c\ub294 Asset\uc744 Asset Market\uc5d0\uc11c \ubb34\ub8cc\ub85c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. trouble shooting: Visual Studio\uc5d0\uc11c Unity\uc758 \ud568\uc218, \ubcc0\uc218\ub4f1\uc774 \ubd88\ub7ec\uc640\uc9c0\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. Player.cs \ud30c\uc77c\uc774 \uae30\ud0c0 \ud30c\uc77c\ub85c \ub418\uc5b4 \uc788\uc5c8\ub294\ub370, visual studio installer\uc5d0\uc11c Unity \uad00\ub828\ub41c \ud56d\ubaa9\uc744 \uc5c5\ub370\uc774\ud2b8 \ud574\uc8fc\uba74 \ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud504\ub85c\uc81d\ud2b8 \ub2e4\uc2dc \ub9cc\ub4e4\uc5b4\uc57c \ud560 \uc218\ub3c4 \uc788\uc74c","title":"Part3: \uc720\ub2c8\ud2f0 \uc5d4\uc9c4(\uc5d0\uc14b\uad00\ub828)"},{"location":"unity/01/#transform-reset","text":"\ub300\uc0c1\uc5d0 \ub300\ud574\uc11c transform\uc744 \uc798 \ubabb\ud55c \uacbd\uc6b0\uc5d0\ub294 Reset \ubc84\ud2bc\uc774 \uc788\uc5b4\uc11c \ub2e4\uc2dc \uc6d0\ub798\ub300\ub85c \ub3cc\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"transform reset"},{"location":"unity/01/#_1","text":"\uc88c\ud45c\uacc4\uc758 \uc885\ub958 \uc88c\ud45c\uacc4\ub294 world \uc88c\ud45c\uc640 \ub85c\uceec \uc88c\ud45c \ub450 \uac1c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc2a4\ud06c\ub9bd\ud2b8\uc5d0\uc11c \ubcc0\uacbd\ud560 \ub54c \uce90\ub9ad\ud130\ub294 world \uc88c\ud45c\ub97c \uae30\uc900\uc73c\ub85c \uc6c0\uc9c1\uc774\uac8c \ub418\ub294\ub370, \uc720\ub2c8\ud2f0\uc5d0\uc11c \uce90\ub9ad\ud130\ub97c \ud074\ub9ad\ud558\uace0 X\ub97c \ub204\ub974\uba74 \ub85c\uceec\uc88c\ud45c\ub97c \uae30\uc900\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc5d0\uc11c Local\uc774\ub77c\uace0 \uc801\ud78c \ud1a0\uae00 \ubc84\ud2bc\uc744 \ub204\ub974\ub294 \uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ucc38\uace0\ub85c \ubaa8\ub4e0 \ubb3c\uccb4\ub294 \uc790\uc2e0\ub9cc\uc758 \uc88c\ud45c\uacc4\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud68c\uc804 \ud2b9\uc815 \ucd95\uc744 \uae30\uc900\uc73c\ub85c degree\ub97c \uc0ac\uc6a9\ud574\uc11c \uc2dc\uacc4\ubc29\ud5a5\uc73c\ub85c 360\ub3c4 \ud68c\uc804 \ucf54\ub4dc 1 2 3 4 transform . position += new Vector3 ( 0.0f , 0.0f , 1.0f ); // \uc808\ub300\uc88c\ud45c \uae30\uc900\uc73c\ub85c position \ubcc0\ud615 transform . position += new Vector3 . forward ; // \uac00\ub3c5\uc131 \ub192\uc774\uae30 transform . position += transform . TransformDirection ( Vector3 . forward * Time . deltaTime * _speed ); // \uc0c1\ub300\uc88c\ud45c \uae30\uc900\uc73c\ub85c position \ubcc0\ud615 transform . Translate ( Vector3 . right * Time . deltaTime * _speed ); // \ub85c\uceec\uc88c\ud45c \uae30\uc900\uc73c\ub85c \ud3ec\uc9c0\uc158 \ubcc0\ud615","title":"\uc88c\ud45c\uacc4"},{"location":"unity/01/#_2","text":"Ctrl + Shift + F \ub97c \ub204\ub974\uba74, \ud604\uc7ac \ubcf4\uace0 \uc788\ub294 \ud654\uba74\uc774\ub791 \ub3d9\uc77c\ud558\uac8c \uce74\uba54\ub77c\uac00 \uc138\ud305\ub429\ub2c8\ub2e4. \uce74\uba54\ub77c \uc624\ube0c\uc81d\ud2b8\ub97c \uc120\ud0dd\ud558\uace0 \ub2e8\ucd95\ud0a4\ub97c \uc785\ub825\ud560 \uac83!","title":"\uce74\uba54\ub77c"},{"location":"unity/01/#_3","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 // Player.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Player : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; // Start is called before the first frame update void Start () { } // Update is called once per frame void Update () { // convert coordination system // Local -> World // TransformDirection // World -> Local // InverseTransformDirection // \ub85c\uceec \uc88c\ud45c\uacc4\ub97c \uc774\uc6a9\ud574\uc11c World \uc88c\ud45c\uacc4\ub85c \ubc88\uc5ed // transform.position += transform.TransformDirection(Vector3.forward * Time.deltaTime * _speed); if ( Input . GetKey ( KeyCode . W )) { /*transform.position += new Vector3(0.0f, 0.0f, 1.0f) * Time.deltaTime * _speed;*/ transform . Translate ( Vector3 . forward * Time . deltaTime * _speed ); } if ( Input . GetKey ( KeyCode . S )) { /*transform.position -= new Vector3(0.0f, 0.0f, 1.0f) * Time.deltaTime * _speed;*/ transform . Translate ( Vector3 . back * Time . deltaTime * _speed ); } if ( Input . GetKey ( KeyCode . A )) { /*transform.position += new Vector3(1.0f, 0.0f, 0.0f) * Time.deltaTime * _speed;*/ transform . Translate ( Vector3 . left * Time . deltaTime * _speed ); } if ( Input . GetKey ( KeyCode . D )) { /*transform.position -= new Vector3(1.0f, 0.0f, 0.0f) * Time.deltaTime * _speed;*/ transform . Translate ( Vector3 . right * Time . deltaTime * _speed ); } } }","title":"\uc624\ub298\uc758 \uc18c\uc2a4\ucf54\ub4dc"},{"location":"unity/02/","text":"Part3: \uc720\ub2c8\ud2f0\uc5d4\uc9c4\uc5d0\uc11c \ud68c\uc804 \ubd80\ub4dc\ub7fd\uc9c0 \uc54a\uac8c \ud68c\uc804\ud558\ub294 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Player : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; // Start is called before the first frame update void Start () { } //float _yAngle = 0.0f; // Update is called once per frame void Update () { //// \ud68c\uc804 \uac12\uc744 \uc918\uc11c \ud68c\uc804 //_yAngle += Time.deltaTime * _speed; //transform.eulerAngles = new Vector3(0.0f, _yAngle, 0.0f); //transform.Rotate(0.0f, Time.deltaTime * 100.0f, 0.0f); //transform.rotation = Quaternion.Euler(new Vector3(0.0f, _yAngle, 0.0f)); if ( Input . GetKey ( KeyCode . W )) { // transform.Translate(Vector3.forward * Time.deltaTime * _speed); transform . rotation = Quaternion . LookRotation ( Vector3 . forward ); } if ( Input . GetKey ( KeyCode . S )) { //transform.Translate(Vector3.back * Time.deltaTime * _speed); transform . rotation = Quaternion . LookRotation ( Vector3 . back ); } if ( Input . GetKey ( KeyCode . A )) { //transform.Translate(Vector3.left * Time.deltaTime * _speed); transform . rotation = Quaternion . LookRotation ( Vector3 . left ); } if ( Input . GetKey ( KeyCode . D )) { //transform.Translate(Vector3.right * Time.deltaTime * _speed); transform . rotation = Quaternion . LookRotation ( Vector3 . right ); } } } \ud68c\uc804\uacfc \uc774\ub3d9\uc744 \ub3d9\uc2dc\uc5d0 \uc544\ub798\uc640 \uac19\uc774 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uba74 \uc870\uae08 \uc774\uc0c1\ud558\uac8c \uc6c0\uc9c1\uc774\uac8c \ub429\ub2c8\ub2e4. \uce90\ub9ad\ud130\uac00 \ucf54\ub108\uc5d0\uc11c \uc0b4\uc9dd \ub113\uac8c \ud68c\uc804\ud574\uc11c \ub3cc\uc544\uc11c \uc6c0\uc9c1\uc774\ub294 \ub290\ub08c\uc774 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Player : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; // Start is called before the first frame update void Start () { } //float _yAngle = 0.0f; // Update is called once per frame void Update () { //// \ud68c\uc804 \uac12\uc744 \uc918\uc11c \ud68c\uc804 //_yAngle += Time.deltaTime * _speed; //transform.eulerAngles = new Vector3(0.0f, _yAngle, 0.0f); //transform.Rotate(0.0f, Time.deltaTime * 100.0f, 0.0f); //transform.rotation = Quaternion.Euler(new Vector3(0.0f, _yAngle, 0.0f)); if ( Input . GetKey ( KeyCode . W )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . forward ), 0.05f ); transform . Translate ( Vector3 . forward * Time . deltaTime * _speed ); } if ( Input . GetKey ( KeyCode . S )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . back ), 0.05f ); transform . Translate ( Vector3 . forward * Time . deltaTime * _speed ); } if ( Input . GetKey ( KeyCode . A )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . left ), 0.05f ); transform . Translate ( Vector3 . forward * Time . deltaTime * _speed ); } if ( Input . GetKey ( KeyCode . D )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . right ), 1.0f ); transform . Translate ( Vector3 . forward * Time . deltaTime * _speed ); } } } \uc544\ub798\uc640 \uac19\uc774 \uc218\uc815\ud558\uba74 \uc880 \ub354 \uc790\uc5f0\uc2a4\ub7fd\uac8c \uc6c0\uc9c1\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Player : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; // Start is called before the first frame update void Start () { } //float _yAngle = 0.0f; // Update is called once per frame void Update () { //// \ud68c\uc804 \uac12\uc744 \uc918\uc11c \ud68c\uc804 //_yAngle += Time.deltaTime * _speed; //transform.eulerAngles = new Vector3(0.0f, _yAngle, 0.0f); //transform.Rotate(0.0f, Time.deltaTime * 100.0f, 0.0f); //transform.rotation = Quaternion.Euler(new Vector3(0.0f, _yAngle, 0.0f)); if ( Input . GetKey ( KeyCode . W )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . forward ), 0.05f ); transform . position += Vector3 . forward * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . S )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . back ), 0.05f ); transform . position += Vector3 . back * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . A )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . left ), 0.05f ); transform . position += Vector3 . left * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . D )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . right ), 1.0f ); transform . position += Vector3 . right * Time . deltaTime * _speed ; } } } \uc9c0\uae08\uae4c\uc9c0 \uc18c\uc2a4\ucf54\ub4dc \uc815\ub9ac Scripts/Managers/Managers.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Managers : MonoBehaviour { static Managers s_instance ; public static Managers Instance { get { Init (); return s_instance ; } } InputManager _input = new InputManager (); public static InputManager Input { get { return Instance . _input ; } } void Start () { Init (); } // Update is called once per frame void Update () { _input . OnUpdate (); } static void Init () { if ( s_instance == null ) { GameObject go = GameObject . Find ( \"@Managers\" ); if ( go == null ) { go = new GameObject { name = \"@Managers\" }; go . AddComponent < Managers >(); } Managers mg = go . GetComponent < Managers >(); DontDestroyOnLoad ( go ); s_instance = go . GetComponent < Managers >(); } // \ucd08\uae30\ud654 } } Scripts/Managers/InputManager.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 using System ; using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class InputManager { public Action KeyAction = null ; // Update is called once per frame public void OnUpdate () { if ( Input . anyKey == false ) return ; if ( KeyAction != null ) { KeyAction . Invoke (); } } } Scripts/Player.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Player : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; // Start is called before the first frame update void Start () { // Input Manager\uc5d0\ud639\uc2dc \uc5b4\ub5a4\ud0a4\uac00 \ub20c\ub9ac\uac8c \ub418\uba74 OnKeyboard \ud568\uc218\ub97c \uc2e4\ud589\ud574\ub77c! Managers . Input . KeyAction -= OnKeyboard ; // \ud639\uc2dc \ud55c \ubc88 \ub354 \ucd94\uac00\ud588\uc744\uae4c\ubd10 \uc2e4\uc218 \ubc29\uc9c0 Managers . Input . KeyAction += OnKeyboard ; } //float _yAngle = 0.0f; // Update is called once per frame void Update () { } void OnKeyboard () { if ( Input . GetKey ( KeyCode . W )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . forward ), 0.05f ); transform . position += Vector3 . forward * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . S )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . back ), 0.05f ); transform . position += Vector3 . back * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . A )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . left ), 0.05f ); transform . position += Vector3 . left * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . D )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . right ), 1.0f ); transform . position += Vector3 . right * Time . deltaTime * _speed ; } } }","title":"Part3: \uc720\ub2c8\ud2f0\uc5d4\uc9c4\uc5d0\uc11c \ud68c\uc804"},{"location":"unity/02/#part3","text":"\ubd80\ub4dc\ub7fd\uc9c0 \uc54a\uac8c \ud68c\uc804\ud558\ub294 \ubc84\uc804\uc758 \uc18c\uc2a4\ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Player : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; // Start is called before the first frame update void Start () { } //float _yAngle = 0.0f; // Update is called once per frame void Update () { //// \ud68c\uc804 \uac12\uc744 \uc918\uc11c \ud68c\uc804 //_yAngle += Time.deltaTime * _speed; //transform.eulerAngles = new Vector3(0.0f, _yAngle, 0.0f); //transform.Rotate(0.0f, Time.deltaTime * 100.0f, 0.0f); //transform.rotation = Quaternion.Euler(new Vector3(0.0f, _yAngle, 0.0f)); if ( Input . GetKey ( KeyCode . W )) { // transform.Translate(Vector3.forward * Time.deltaTime * _speed); transform . rotation = Quaternion . LookRotation ( Vector3 . forward ); } if ( Input . GetKey ( KeyCode . S )) { //transform.Translate(Vector3.back * Time.deltaTime * _speed); transform . rotation = Quaternion . LookRotation ( Vector3 . back ); } if ( Input . GetKey ( KeyCode . A )) { //transform.Translate(Vector3.left * Time.deltaTime * _speed); transform . rotation = Quaternion . LookRotation ( Vector3 . left ); } if ( Input . GetKey ( KeyCode . D )) { //transform.Translate(Vector3.right * Time.deltaTime * _speed); transform . rotation = Quaternion . LookRotation ( Vector3 . right ); } } }","title":"Part3: \uc720\ub2c8\ud2f0\uc5d4\uc9c4\uc5d0\uc11c \ud68c\uc804"},{"location":"unity/02/#_1","text":"\uc544\ub798\uc640 \uac19\uc774 \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uba74 \uc870\uae08 \uc774\uc0c1\ud558\uac8c \uc6c0\uc9c1\uc774\uac8c \ub429\ub2c8\ub2e4. \uce90\ub9ad\ud130\uac00 \ucf54\ub108\uc5d0\uc11c \uc0b4\uc9dd \ub113\uac8c \ud68c\uc804\ud574\uc11c \ub3cc\uc544\uc11c \uc6c0\uc9c1\uc774\ub294 \ub290\ub08c\uc774 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Player : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; // Start is called before the first frame update void Start () { } //float _yAngle = 0.0f; // Update is called once per frame void Update () { //// \ud68c\uc804 \uac12\uc744 \uc918\uc11c \ud68c\uc804 //_yAngle += Time.deltaTime * _speed; //transform.eulerAngles = new Vector3(0.0f, _yAngle, 0.0f); //transform.Rotate(0.0f, Time.deltaTime * 100.0f, 0.0f); //transform.rotation = Quaternion.Euler(new Vector3(0.0f, _yAngle, 0.0f)); if ( Input . GetKey ( KeyCode . W )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . forward ), 0.05f ); transform . Translate ( Vector3 . forward * Time . deltaTime * _speed ); } if ( Input . GetKey ( KeyCode . S )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . back ), 0.05f ); transform . Translate ( Vector3 . forward * Time . deltaTime * _speed ); } if ( Input . GetKey ( KeyCode . A )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . left ), 0.05f ); transform . Translate ( Vector3 . forward * Time . deltaTime * _speed ); } if ( Input . GetKey ( KeyCode . D )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . right ), 1.0f ); transform . Translate ( Vector3 . forward * Time . deltaTime * _speed ); } } } \uc544\ub798\uc640 \uac19\uc774 \uc218\uc815\ud558\uba74 \uc880 \ub354 \uc790\uc5f0\uc2a4\ub7fd\uac8c \uc6c0\uc9c1\uc785\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Player : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; // Start is called before the first frame update void Start () { } //float _yAngle = 0.0f; // Update is called once per frame void Update () { //// \ud68c\uc804 \uac12\uc744 \uc918\uc11c \ud68c\uc804 //_yAngle += Time.deltaTime * _speed; //transform.eulerAngles = new Vector3(0.0f, _yAngle, 0.0f); //transform.Rotate(0.0f, Time.deltaTime * 100.0f, 0.0f); //transform.rotation = Quaternion.Euler(new Vector3(0.0f, _yAngle, 0.0f)); if ( Input . GetKey ( KeyCode . W )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . forward ), 0.05f ); transform . position += Vector3 . forward * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . S )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . back ), 0.05f ); transform . position += Vector3 . back * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . A )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . left ), 0.05f ); transform . position += Vector3 . left * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . D )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . right ), 1.0f ); transform . position += Vector3 . right * Time . deltaTime * _speed ; } } }","title":"\ud68c\uc804\uacfc \uc774\ub3d9\uc744 \ub3d9\uc2dc\uc5d0"},{"location":"unity/02/#_2","text":"Scripts/Managers/Managers.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Managers : MonoBehaviour { static Managers s_instance ; public static Managers Instance { get { Init (); return s_instance ; } } InputManager _input = new InputManager (); public static InputManager Input { get { return Instance . _input ; } } void Start () { Init (); } // Update is called once per frame void Update () { _input . OnUpdate (); } static void Init () { if ( s_instance == null ) { GameObject go = GameObject . Find ( \"@Managers\" ); if ( go == null ) { go = new GameObject { name = \"@Managers\" }; go . AddComponent < Managers >(); } Managers mg = go . GetComponent < Managers >(); DontDestroyOnLoad ( go ); s_instance = go . GetComponent < Managers >(); } // \ucd08\uae30\ud654 } } Scripts/Managers/InputManager.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 using System ; using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class InputManager { public Action KeyAction = null ; // Update is called once per frame public void OnUpdate () { if ( Input . anyKey == false ) return ; if ( KeyAction != null ) { KeyAction . Invoke (); } } } Scripts/Player.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Player : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; // Start is called before the first frame update void Start () { // Input Manager\uc5d0\ud639\uc2dc \uc5b4\ub5a4\ud0a4\uac00 \ub20c\ub9ac\uac8c \ub418\uba74 OnKeyboard \ud568\uc218\ub97c \uc2e4\ud589\ud574\ub77c! Managers . Input . KeyAction -= OnKeyboard ; // \ud639\uc2dc \ud55c \ubc88 \ub354 \ucd94\uac00\ud588\uc744\uae4c\ubd10 \uc2e4\uc218 \ubc29\uc9c0 Managers . Input . KeyAction += OnKeyboard ; } //float _yAngle = 0.0f; // Update is called once per frame void Update () { } void OnKeyboard () { if ( Input . GetKey ( KeyCode . W )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . forward ), 0.05f ); transform . position += Vector3 . forward * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . S )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . back ), 0.05f ); transform . position += Vector3 . back * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . A )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . left ), 0.05f ); transform . position += Vector3 . left * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . D )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . right ), 1.0f ); transform . position += Vector3 . right * Time . deltaTime * _speed ; } } }","title":"\uc9c0\uae08\uae4c\uc9c0 \uc18c\uc2a4\ucf54\ub4dc \uc815\ub9ac"},{"location":"unity/03/","text":"prefab(Pre-Fabrication) ctrl + shift + N: \uc0c8 game object \uc774 \uccb4\ud06c\ubc15\uc2a4\ub97c \ud574\uc81c\ud558\uba74 \uac8c\uc784\uc5d0\uc11c \ub354 \uc774\uc0c1 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uc624\ube0c\uc81d\ud2b8\ub77c\ub294 \uac83\uc744 \uc54c\ub9bc \ud0f1\ud06c\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c \uc7a0\uc2dc \uaebc\ub461\ub2c8\ub2e4. \ud0f1\ud06c \ub9cc\ub4e4\uae30 Ctrl + Shift + N\uc73c\ub85c \uc0c8\ub85c\uc6b4 game object\ub97c \ub9cc\ub4e4\uace0 \uadf8 \uc544\ub798\uc5d0 3D object -> Cube\ub97c \uc120\ud0dd\ud55c \ud6c4\uc5d0 W, E, R \uc911\uc5d0\uc11c R\uc744 \ub20c\ub7ec\uc11c x\ucd95\ubc29\ud5a5, y\ucd95\ubc29\ud5a5\uc73c\ub85c \ub113\uc9c1\ud558\uac8c \ub298\ub824\uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 Ctrl + D\ub85c \uce74\ud53c\ub97c \ud574\uc90d\ub2c8\ub2e4. \ud0f1\ud06c \uc644\uc131 prefab \ub9cc\ub4e4\uae30 Assets \ubc11\uc5d0 Prefabs\ub77c\ub294 \uc0c8\ub85c\uc6b4 \ud3f4\ub354\ub97c \ub9cc\ub4e4\uace0, \uadf8 \ubc11\uc5d0 Tank\ub97c \ub4dc\ub798\uadf8 \uc564 \ub4dc\ub86d\uc73c\ub85c \ub123\uc73c\uba74 Tank\uac00 Prefab\uc774 \ub429\ub2c8\ub2e4. prefab\uc744 \uc774\ub807\uac8c \ub9cc\ub4e4\uac8c \ub418\uba74, \uc2a4\ud06c\ub9b0\uc0f7\ucc98\ub7fc \uadf8 \uc0c1\ud0dc\ub97c \ucc0d\uc5b4\uc11c \uc800\uc7a5\ud588\ub2e4\uace0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc52c\uc5d0 \uc788\ub294 \ud0f1\ud06c\ub294 \uc9c0\uc6cc\ub3c4 \uc0c1\uad00 \uc5c6\uc2b5\ub2c8\ub2e4. Prefab\uacfc Prefab instance\uc758 \uad00\uacc4\ub294 \ud074\ub798\uc2a4\uc640 \uc624\ube0c\uc81d\ud2b8\uc758 \uad00\uacc4\uc640 \ub9e4\uc6b0 \uc720\uc0ac\ud569\ub2c8\ub2e4. prefab \ubaa8\ub4dc\ub85c \ub4e4\uc5b4\uac00\uae30/\ub098\uc624\uae30 prefab\uc740 drag&drop\uc73c\ub85c \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\ub294\ub370, \uc544\ub798\ucc98\ub7fc \ubc84\ud2bc\uc744 \ud074\ub9ad\ud574\uc11c prefab \ubaa8\ub4dc\ub85c \ub4e4\uc5b4\uac00\uac70\ub098 Assets \ubc11\uc758 prefab\uc744 \ub354\ube14\ud074\ub9ad\ud558\uba74 prefab\uc744 \uc218\uc815\ud560 \uc218 \uc788\ub294 prefab \ubaa8\ub4dc\ub85c \ub4e4\uc5b4\uac11\ub2c8\ub2e4. prefab instance\uc758 \uc18d\uc131 \ubcc0\uacbd(override) Game Object\uc5d0\uc11c \uc9c1\uc811 Speed \ub4f1\uc758 \uc18d\uc131\uc744 \ubcc0\uacbd\ud558\uac8c \ub418\uba74 \ub354 \uc774\uc0c1 prefab\uc758 \uac12\uc744 \ubc14\uafb8\uac70\ub098 \ud558\ub354\ub77c\ub3c4 \uc801\uc6a9\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub9c8\uce58, object\uc5d0\uc11c \uac12\uc744 \ub36e\uc5b4\uc50c\uc6b0\uae30 \ud558\uba74 class\uc758 \uac12\uc774 \ubcc0\uacbd\ub418\ub354\ub77c\ub3c4 \uc801\uc6a9\uc774 \ub418\uc9c0 \uc54a\ub294 \uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4. Overrides \uba54\ub274\ub97c \uc120\ud0dd\ud558\uba74 \uc5b4\ub5a4 \uac12\uc774 \uc5b4\ub5bb\uac8c \ubc14\ub00c\uc5c8\ub294\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Nested Prefab Nested Prefab\uc740 \ud074\ub798\uc2a4\uc5d0\uc11c\uc758 \ud3ec\ud568 \uad00\uacc4\uc640 \uac19\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 class Tank { // \uc628\uac16 \uc815\ubcf4 public float speed = 10.0f ; Player player ; // \ud3ec\ud568 \uad00\uacc4 Nested(\uc911\ucca9\ub41c) Prefab } class Player { } Nested Prefab\uc744 \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc740 Ctrl + Shift + N\uc73c\ub85c \uc0c8\ub85c\uc6b4 \uac8c\uc784 \uc624\ube0c\uc81d\ud2b8\ub97c \ub9cc\ub4e4\uc5b4\uc11c \ud50c\ub808\uc774\uc5b4\uc640 \ud0f1\ud06c\ub97c \ub123\uc5b4\uc900 \ud6c4\uc5d0 Prefabs \ud3f4\ub354\ub85c Drag&Drop \ud574\uc8fc\uba74 Nested Prefab\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4. Tank\ub77c\ub294 Prefab\uc758 \uc18d\uc131\uc744 \ubcc0\uacbd\uc744 \ud558\uba74, PlayerInTank\ub77c\ub294 Nested Prefab\uc5d0\uc11c\ub3c4 \uadf8 \ubcc0\uacbd\ub41c \uac12\uc774 \uc801\uc6a9\ub429\ub2c8\ub2e4. Prefab Variant \ud074\ub798\uc2a4\uc758 \uc0c1\uc18d\uacfc \ub3d9\uc77c\ud55c \uac1c\ub150 \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc740 Prefab Instance\ub97c prefab \ud3f4\ub354\ub85c Drag&Drop \ud558\uba74 \ub429\ub2c8\ub2e4. \uc774\ud6c4\uc5d0 Original Prefab\uc744 \ub9cc\ub4e4\uc9c0 \uc544\ub2c8\uba74 Prefab Variant\ub97c \ub9cc\ub4e4\uc9c0 \uc120\ud0dd\ucc3d\uc774 \ub728\ub294\ub370, Prefab Variant\ub97c \uc120\ud0dd\ud558\uba74 \ub429\ub2c8\ub2e4. \uc774\ud6c4 Prefab Instance\uc758 \ubaa8\uc591\ub3c4 \uc6d0\ub798 Prefab\uacfc\ub294 \uc57d\uac04 \ub2e4\ub978 \ubaa8\uc591\uc774 \ub429\ub2c8\ub2e4. \ud0f1\ud06c\ub9cc \ub0a8\uae30\uace0 \ud654\uba74 \uc815\ub9ac\ub97c \ud55c \ubc88 \ud574\uc90d\ub2c8\ub2e4. Prefab\uc744 \uc2a4\ud06c\ub9bd\ud2b8\uc5d0\uc11c \uc0dd\uc131\ud558\ub294 \ubc29\ubc95 Unity \ud234\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95 \uc52c\uc5d0\uc11c\ub3c4 PrefabTest\ub97c \ub9cc\ub4e4\uace0, Scripts \ubc11\uc5d0\ub3c4 PrefabTest\ub97c \ub9cc\ub4e4\uc5b4\uc90d\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc774 \ucf54\ub4dc\ub97c \uc791\uc131\ud55c \ub2e4\uc74c, PrefabTest.cs \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc5f0\uacb0\ud55c \ub2e4\uc74c prefab\uc5d0\ub294 Tank\ub97c \ub123\uc5b4\uc90d\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // PrefabTest.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class PrefabTest : MonoBehaviour { public GameObject prefab ; // Start is called before the first frame update void Start () { Object . Instantiate ( prefab ); } // Update is called once per frame void Update () { } } \uc544\ub798\uc640 \uac19\uc774 \ud0f1\ud06c\uac00 \uc798 \ub098\uc624\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. Code\ub85c Resource \ubd88\ub7ec\uc624\uae30 \uc544\ub798\uc640 \uac19\uc774 Resources \ubc11\uc5d0 \ud3f4\ub354\ub97c \ub450\uba74 \ubd88\ub7ec\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class PrefabTest : MonoBehaviour { GameObject tank ; // Start is called before the first frame update void Start () { GameObject prefab = Resources . Load < GameObject >( \"Prefabs/Tank\" ); tank = Instantiate ( prefab ); Destroy ( tank , 3.0f ); } // Update is called once per frame void Update () { } } Resource Manager\ub97c \ub9cc\ub4e4\uc5b4\uc11c \uc880 \ub354 \uae54\ub054\ud558\uac8c \uc815\ub9ac\ud55c \ud615\ud0dc scripts/Managers/ResourceManger.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class ResourceManager { public T Load < T >( string path ) where T : Object { return Resources . Load < T >( path ); } public GameObject Instantiate ( string path , Transform parent = null ) { GameObject prefab = Load < GameObject >( $\"Prefabs/{path}\" ); if ( prefab == null ) { Debug . Log ( $\"Failed to load prefab: {path}\" ); return null ; } return Object . Instantiate ( prefab ); } public void Destroy ( GameObject go ) { if ( go == null ) { return ; } Object . Destroy ( go ); } } scripts/Managers/Managers.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Managers : MonoBehaviour { static Managers s_instance ; public static Managers Instance { get { Init (); return s_instance ; } } InputManager _input = new InputManager (); ResourceManager _resource = new ResourceManager (); public static InputManager Input { get { return Instance . _input ; } } public static ResourceManager Resource { get { return Instance . _resource ; } } void Start () { Init (); } void Update () { _input . OnUpdate (); } static void Init () { if ( s_instance == null ) { GameObject go = GameObject . Find ( \"@Managers\" ); if ( go == null ) { go = new GameObject { name = \"@Managers\" }; go . AddComponent < Managers >(); } Managers mg = go . GetComponent < Managers >(); DontDestroyOnLoad ( go ); s_instance = go . GetComponent < Managers >(); } } } scripts/PrefabTest.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class PrefabTest : MonoBehaviour { GameObject prefab ; GameObject tank ; // Start is called before the first frame update void Start () { tank = Managers . Resource . Instantiate ( \"Tank\" ); Managers . Resource . Destroy ( tank ); } // Update is called once per frame void Update () { } } \ud3f4\ub354 \uc815\ub9ac art \ubc11\uc5d0 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc740 \ub9ac\uc18c\uc2a4\ub4e4\uc744 \ub123\uc2b5\ub2c8\ub2e4. Models \ud3f4\ub354\ub85c\ubd80\ud130 UnityChan \uce90\ub9ad\ud130\ub294 prefab\ucc98\ub7fc \ubcf4\uc774\uc9c0\ub9cc \uadf8\ub0e5 \ubcc4\ub3c4\uc758 asset \ud615\ud0dc\uc774\uae30 \ub54c\ubb38\uc5d0, prefab\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc918\uc11c Prefabs \ud3f4\ub354\uc5d0 \ub123\uc5b4\ub461\ub2c8\ub2e4.","title":"prefab(Pre-Fabrication)"},{"location":"unity/03/#prefabpre-fabrication","text":"ctrl + shift + N: \uc0c8 game object \uc774 \uccb4\ud06c\ubc15\uc2a4\ub97c \ud574\uc81c\ud558\uba74 \uac8c\uc784\uc5d0\uc11c \ub354 \uc774\uc0c1 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294 \uc624\ube0c\uc81d\ud2b8\ub77c\ub294 \uac83\uc744 \uc54c\ub9bc \ud0f1\ud06c\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c \uc7a0\uc2dc \uaebc\ub461\ub2c8\ub2e4. \ud0f1\ud06c \ub9cc\ub4e4\uae30 Ctrl + Shift + N\uc73c\ub85c \uc0c8\ub85c\uc6b4 game object\ub97c \ub9cc\ub4e4\uace0 \uadf8 \uc544\ub798\uc5d0 3D object -> Cube\ub97c \uc120\ud0dd\ud55c \ud6c4\uc5d0 W, E, R \uc911\uc5d0\uc11c R\uc744 \ub20c\ub7ec\uc11c x\ucd95\ubc29\ud5a5, y\ucd95\ubc29\ud5a5\uc73c\ub85c \ub113\uc9c1\ud558\uac8c \ub298\ub824\uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 Ctrl + D\ub85c \uce74\ud53c\ub97c \ud574\uc90d\ub2c8\ub2e4. \ud0f1\ud06c \uc644\uc131 prefab \ub9cc\ub4e4\uae30 Assets \ubc11\uc5d0 Prefabs\ub77c\ub294 \uc0c8\ub85c\uc6b4 \ud3f4\ub354\ub97c \ub9cc\ub4e4\uace0, \uadf8 \ubc11\uc5d0 Tank\ub97c \ub4dc\ub798\uadf8 \uc564 \ub4dc\ub86d\uc73c\ub85c \ub123\uc73c\uba74 Tank\uac00 Prefab\uc774 \ub429\ub2c8\ub2e4. prefab\uc744 \uc774\ub807\uac8c \ub9cc\ub4e4\uac8c \ub418\uba74, \uc2a4\ud06c\ub9b0\uc0f7\ucc98\ub7fc \uadf8 \uc0c1\ud0dc\ub97c \ucc0d\uc5b4\uc11c \uc800\uc7a5\ud588\ub2e4\uace0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc52c\uc5d0 \uc788\ub294 \ud0f1\ud06c\ub294 \uc9c0\uc6cc\ub3c4 \uc0c1\uad00 \uc5c6\uc2b5\ub2c8\ub2e4. Prefab\uacfc Prefab instance\uc758 \uad00\uacc4\ub294 \ud074\ub798\uc2a4\uc640 \uc624\ube0c\uc81d\ud2b8\uc758 \uad00\uacc4\uc640 \ub9e4\uc6b0 \uc720\uc0ac\ud569\ub2c8\ub2e4. prefab \ubaa8\ub4dc\ub85c \ub4e4\uc5b4\uac00\uae30/\ub098\uc624\uae30 prefab\uc740 drag&drop\uc73c\ub85c \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\ub294\ub370, \uc544\ub798\ucc98\ub7fc \ubc84\ud2bc\uc744 \ud074\ub9ad\ud574\uc11c prefab \ubaa8\ub4dc\ub85c \ub4e4\uc5b4\uac00\uac70\ub098 Assets \ubc11\uc758 prefab\uc744 \ub354\ube14\ud074\ub9ad\ud558\uba74 prefab\uc744 \uc218\uc815\ud560 \uc218 \uc788\ub294 prefab \ubaa8\ub4dc\ub85c \ub4e4\uc5b4\uac11\ub2c8\ub2e4. prefab instance\uc758 \uc18d\uc131 \ubcc0\uacbd(override) Game Object\uc5d0\uc11c \uc9c1\uc811 Speed \ub4f1\uc758 \uc18d\uc131\uc744 \ubcc0\uacbd\ud558\uac8c \ub418\uba74 \ub354 \uc774\uc0c1 prefab\uc758 \uac12\uc744 \ubc14\uafb8\uac70\ub098 \ud558\ub354\ub77c\ub3c4 \uc801\uc6a9\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub9c8\uce58, object\uc5d0\uc11c \uac12\uc744 \ub36e\uc5b4\uc50c\uc6b0\uae30 \ud558\uba74 class\uc758 \uac12\uc774 \ubcc0\uacbd\ub418\ub354\ub77c\ub3c4 \uc801\uc6a9\uc774 \ub418\uc9c0 \uc54a\ub294 \uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4. Overrides \uba54\ub274\ub97c \uc120\ud0dd\ud558\uba74 \uc5b4\ub5a4 \uac12\uc774 \uc5b4\ub5bb\uac8c \ubc14\ub00c\uc5c8\ub294\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"prefab(Pre-Fabrication)"},{"location":"unity/03/#nested-prefab","text":"Nested Prefab\uc740 \ud074\ub798\uc2a4\uc5d0\uc11c\uc758 \ud3ec\ud568 \uad00\uacc4\uc640 \uac19\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 class Tank { // \uc628\uac16 \uc815\ubcf4 public float speed = 10.0f ; Player player ; // \ud3ec\ud568 \uad00\uacc4 Nested(\uc911\ucca9\ub41c) Prefab } class Player { } Nested Prefab\uc744 \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc740 Ctrl + Shift + N\uc73c\ub85c \uc0c8\ub85c\uc6b4 \uac8c\uc784 \uc624\ube0c\uc81d\ud2b8\ub97c \ub9cc\ub4e4\uc5b4\uc11c \ud50c\ub808\uc774\uc5b4\uc640 \ud0f1\ud06c\ub97c \ub123\uc5b4\uc900 \ud6c4\uc5d0 Prefabs \ud3f4\ub354\ub85c Drag&Drop \ud574\uc8fc\uba74 Nested Prefab\uc774 \uc0dd\uc131\ub429\ub2c8\ub2e4. Tank\ub77c\ub294 Prefab\uc758 \uc18d\uc131\uc744 \ubcc0\uacbd\uc744 \ud558\uba74, PlayerInTank\ub77c\ub294 Nested Prefab\uc5d0\uc11c\ub3c4 \uadf8 \ubcc0\uacbd\ub41c \uac12\uc774 \uc801\uc6a9\ub429\ub2c8\ub2e4. Prefab Variant \ud074\ub798\uc2a4\uc758 \uc0c1\uc18d\uacfc \ub3d9\uc77c\ud55c \uac1c\ub150 \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc740 Prefab Instance\ub97c prefab \ud3f4\ub354\ub85c Drag&Drop \ud558\uba74 \ub429\ub2c8\ub2e4. \uc774\ud6c4\uc5d0 Original Prefab\uc744 \ub9cc\ub4e4\uc9c0 \uc544\ub2c8\uba74 Prefab Variant\ub97c \ub9cc\ub4e4\uc9c0 \uc120\ud0dd\ucc3d\uc774 \ub728\ub294\ub370, Prefab Variant\ub97c \uc120\ud0dd\ud558\uba74 \ub429\ub2c8\ub2e4. \uc774\ud6c4 Prefab Instance\uc758 \ubaa8\uc591\ub3c4 \uc6d0\ub798 Prefab\uacfc\ub294 \uc57d\uac04 \ub2e4\ub978 \ubaa8\uc591\uc774 \ub429\ub2c8\ub2e4. \ud0f1\ud06c\ub9cc \ub0a8\uae30\uace0 \ud654\uba74 \uc815\ub9ac\ub97c \ud55c \ubc88 \ud574\uc90d\ub2c8\ub2e4.","title":"Nested Prefab"},{"location":"unity/03/#prefab","text":"Unity \ud234\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95 \uc52c\uc5d0\uc11c\ub3c4 PrefabTest\ub97c \ub9cc\ub4e4\uace0, Scripts \ubc11\uc5d0\ub3c4 PrefabTest\ub97c \ub9cc\ub4e4\uc5b4\uc90d\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc774 \ucf54\ub4dc\ub97c \uc791\uc131\ud55c \ub2e4\uc74c, PrefabTest.cs \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc5f0\uacb0\ud55c \ub2e4\uc74c prefab\uc5d0\ub294 Tank\ub97c \ub123\uc5b4\uc90d\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 // PrefabTest.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class PrefabTest : MonoBehaviour { public GameObject prefab ; // Start is called before the first frame update void Start () { Object . Instantiate ( prefab ); } // Update is called once per frame void Update () { } } \uc544\ub798\uc640 \uac19\uc774 \ud0f1\ud06c\uac00 \uc798 \ub098\uc624\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. Code\ub85c Resource \ubd88\ub7ec\uc624\uae30 \uc544\ub798\uc640 \uac19\uc774 Resources \ubc11\uc5d0 \ud3f4\ub354\ub97c \ub450\uba74 \ubd88\ub7ec\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ucf54\ub4dc 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class PrefabTest : MonoBehaviour { GameObject tank ; // Start is called before the first frame update void Start () { GameObject prefab = Resources . Load < GameObject >( \"Prefabs/Tank\" ); tank = Instantiate ( prefab ); Destroy ( tank , 3.0f ); } // Update is called once per frame void Update () { } } Resource Manager\ub97c \ub9cc\ub4e4\uc5b4\uc11c \uc880 \ub354 \uae54\ub054\ud558\uac8c \uc815\ub9ac\ud55c \ud615\ud0dc scripts/Managers/ResourceManger.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class ResourceManager { public T Load < T >( string path ) where T : Object { return Resources . Load < T >( path ); } public GameObject Instantiate ( string path , Transform parent = null ) { GameObject prefab = Load < GameObject >( $\"Prefabs/{path}\" ); if ( prefab == null ) { Debug . Log ( $\"Failed to load prefab: {path}\" ); return null ; } return Object . Instantiate ( prefab ); } public void Destroy ( GameObject go ) { if ( go == null ) { return ; } Object . Destroy ( go ); } } scripts/Managers/Managers.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Managers : MonoBehaviour { static Managers s_instance ; public static Managers Instance { get { Init (); return s_instance ; } } InputManager _input = new InputManager (); ResourceManager _resource = new ResourceManager (); public static InputManager Input { get { return Instance . _input ; } } public static ResourceManager Resource { get { return Instance . _resource ; } } void Start () { Init (); } void Update () { _input . OnUpdate (); } static void Init () { if ( s_instance == null ) { GameObject go = GameObject . Find ( \"@Managers\" ); if ( go == null ) { go = new GameObject { name = \"@Managers\" }; go . AddComponent < Managers >(); } Managers mg = go . GetComponent < Managers >(); DontDestroyOnLoad ( go ); s_instance = go . GetComponent < Managers >(); } } } scripts/PrefabTest.cs 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class PrefabTest : MonoBehaviour { GameObject prefab ; GameObject tank ; // Start is called before the first frame update void Start () { tank = Managers . Resource . Instantiate ( \"Tank\" ); Managers . Resource . Destroy ( tank ); } // Update is called once per frame void Update () { } }","title":"Prefab\uc744 \uc2a4\ud06c\ub9bd\ud2b8\uc5d0\uc11c \uc0dd\uc131\ud558\ub294 \ubc29\ubc95"},{"location":"unity/03/#_1","text":"art \ubc11\uc5d0 \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc740 \ub9ac\uc18c\uc2a4\ub4e4\uc744 \ub123\uc2b5\ub2c8\ub2e4. Models \ud3f4\ub354\ub85c\ubd80\ud130 UnityChan \uce90\ub9ad\ud130\ub294 prefab\ucc98\ub7fc \ubcf4\uc774\uc9c0\ub9cc \uadf8\ub0e5 \ubcc4\ub3c4\uc758 asset \ud615\ud0dc\uc774\uae30 \ub54c\ubb38\uc5d0, prefab\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc918\uc11c Prefabs \ud3f4\ub354\uc5d0 \ub123\uc5b4\ub461\ub2c8\ub2e4.","title":"\ud3f4\ub354 \uc815\ub9ac"},{"location":"unity/04/","text":"Collision \ub545\uc744 \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc740 Terrain\uacfc Plain\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uac04\ub2e8\ud558\uac8c \ub9cc\ub4e4 \ub54c\ub294 Plain\uc73c\ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. plain\uc758 \uc0c9\uc0c1\uc744 \uc785\ud788\ub824\uba74 material\uc774 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ubb3c\ub9ac\ubc95\uce59\uc744 \uc801\uc6a9\ud558\ub824\uba74 Object\uc5d0 RigidBody\ub77c\ub294 Component\ub97c \ubd99\uc5ec\uc918\uc57c \ud569\ub2c8\ub2e4. RigidBody\ub77c\ub294 \ucef4\ud3ec\ub10c\ud2b8\ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba74 \ubb3c\ub9ac\ubc95\uce59\uc774 \uc801\uc6a9\ub418\uace0, \ucda9\ub3cc\uc744 \uc2dc\ud0a4\ub824\uace0 \ud55c\ub2e4\uba74, Collider\ub77c\ub294 \uac83\uc774 \uc591 \ubb3c\uccb4 \uac04\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. Plane\uc744 \ub9cc\ub4e4\uba74 \uae30\ubcf8\uc801\uc73c\ub85c Mesh Collider\ub77c\ub294 \uac83\uc744 \uac00\uc9c0\uace0 \uc788\ub294\ub370, \uce90\ub9ad\ud130\uc5d0\ub294 \uc544\ubb34\ub7f0 Collider\uac00 \uc5c6\uc73c\ub2c8 Capsule Collider \ub97c \uc0dd\uc131\ud574\uc11c \uce90\ub9ad\ud130\uc758 \ud06c\uae30\ub9cc\ud07c \ub298\ub824\uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc2e4\ud589\ubc84\ud2bc\uc744 \ub204\ub974\uba74 \uc790\uc5f0\uc2a4\ub7fd\uac8c \ucda9\ub3cc\uc774 \uc77c\uc5b4\ub0a9\ub2c8\ub2e4. \uce90\ub9ad\ud130\uc5d0 \uc788\ub294 isKinematic\uc774\ub77c\ub294 \uc635\uc158\uc744 \uccb4\ud06c\ud558\uba74 Unity\uc758 \ubb3c\ub9ac\uc5d0 \uc601\ud5a5\uc744 \ubc1b\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. FPS\uac8c\uc784 \uac19\uc740 \uacbd\uc6b0\uc5d0 \uc774\ud399\ud2b8\ub97c \ud654\ub824\ud558\uac8c \ud558\uace0 \uc2f6\uc73c\uba74 \uc774 \uae30\ub2a5\uc744 \ucf1c\ub294 \uacbd\uc6b0\uac00 \uc788\uc9c0\ub9cc, \uc77c\ubc18\uc801\uc778 RPG\uac8c\uc784\uc740 \uc774 \uae30\ub2a5\uc744 \ud3c9\uc18c\uc5d0 \ucf1c\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Collision vs Trigger Collision\uc740 \ub300\uccb4\ub8cc \ucda9\ub3cc\uc774 \uc788\uc744 \ub54c \uc0ac\uc6a9(\ucd1d\uc54c => \uc0ac\ub78c) Trigger\ub294 \ubc94\uc704 \uc548\uc5d0 \ub4e4\uc5b4\uac14\ub294\uc9c0 \ud655\uc778\ud558\uace0 \uc2f6\uc744 \ub54c \uc0ac\uc6a9 \ucda9\ub3cc\ud558\ub294 \ub450 \ubb3c\uccb4\uc758 \ub458 \uc911\uc5d0 \ud558\ub098\ub9cc isTrigger\uac00 \uccb4\ud06c\ub418\uc5b4 \uc788\uc5b4\ub3c4 trigger\ub85c \ucc98\ub9ac\uac00 \ub429\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // TestCollision.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class TestCollision : MonoBehaviour { private void OnCollisionEnter ( Collision collision ) { Debug . Log ( \"collision!!\" ); } private void OnTriggerEnter ( Collider other ) { Debug . Log ( \"Triggered!!\" ); } // Start is called before the first frame update void Start () { } // Update is called once per frame void Update () { } } RayCasting 3d \uac8c\uc784\uc5d0\uc11c \uce90\ub9ad\ud130 \ub4f1\uc744 \uc120\ud0dd\ud560 \ub54c, \uad11\uc120\uc744 \uc3f4\uc11c \ucda9\ub3cc\ud558\ub294 \uac83\uc744 \uc120\ud0dd\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ud560 \uc218 \uc788\uc74c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class TestCollision : MonoBehaviour { private void OnCollisionEnter ( Collision collision ) { Debug . Log ( \"collision!!\" ); } private void OnTriggerEnter ( Collider other ) { Debug . Log ( \"Triggered!!\" ); } // Start is called before the first frame update void Start () { } // Update is called once per frame void Update () { Debug . DrawRay ( transform . position + Vector3 . up , Vector3 . forward * 10 , Color . red ); RaycastHit hit ; if ( Physics . Raycast ( transform . position + Vector3 . up , Vector3 . forward , out hit , 10.0f )) { Debug . Log ( $\"ray cast!! {hit.collider.gameObject.name}\" ); } } } \ubb38\uc81c\uc810\uc740 \uce90\ub9ad\ud130\uac00 \ubc14\ub77c\ubcf4\ub294 \ubc29\ud5a5\uc73c\ub85c ray\uac00 \uc3f4\uc9c0\uc9c0 \uc54a\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 cube\ub97c \uc5ec\ub7ec\uac1c \ub450\uac8c \ub418\uba74 \uc81c\uc77c \uccab \ubc88\uc9f8 \uac83\uc5d0\ub9cc hit\uc774 \ub429\ub2c8\ub2e4. screen\uc5d0\uc11c ray\uc3d8\uae30 Local <=> World <=> (ViewPort <=> Screen \ud654\uba74. screen\uacfc viewport\ub294 \uac70\uc758 \uc720\uc0ac. viewport\ub294 2d\uc88c\ud45c\uac12\uc774\uace0 viewport\ub294 \ube44\uc728\ub85c\ub9cc \ud45c\uc2dc) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class TestCollision : MonoBehaviour { private void OnCollisionEnter ( Collision collision ) { Debug . Log ( \"collision!!\" ); } private void OnTriggerEnter ( Collider other ) { Debug . Log ( \"Triggered!!\" ); } // Start is called before the first frame update void Start () { } // Update is called once per frame void Update () { // Local <=> World <=> View Port <=> Screen // Debug.Log(Input.mousePosition); // Screen // Debug.Log(Camera.main.ScreenToViewportPoint(Input.mousePosition)); // ViewPort if ( Input . GetMouseButtonDown ( 0 )) { Ray ray = Camera . main . ScreenPointToRay ( Input . mousePosition ); Debug . DrawRay ( Camera . main . transform . position , ray . direction * 100.0f , Color . red , 1.0f ); RaycastHit hit ; if ( Physics . Raycast ( ray , out hit , 100.0f )) { Debug . Log ( $\"RayCast Camera @ {hit.collider.gameObject.name}\" ); } } // Vector3 mousePos = Camera.main.ScreenToWorldPoint(new Vector3(Input.mousePosition.x, Input.mousePosition.y, Camera.main.nearClipPlane)); // Vector3 dir = mousePos - Camera.main.transform.position; // dir = dir.normalized; } } Layer Mask\ub97c \uc774\uc6a9\ud55c \uc5f0\uc0b0 \ud69f\uc218 \uc904\uc774\uae30 ray\ub97c \uc0ac\uc6a9\ud558\uba74 \uc624\ube0c\uc81d\ud2b8\ub4e4\uc744 \ube44\uad50\ud558\ub294\ub370 \uc5f0\uc0b0\uc774 \uaf64 \ub9ce\uc774 \ub4ed\ub2c8\ub2e4. \ub610\ud55c mesh collider\ucc98\ub7fc \uba74\uc774 \ub9ce\uc740 collider\ub97c \uc0ac\uc6a9\ud558\uac8c \ub418\uba74, \uc5f0\uc0b0\ud69f\uc218\uac00 \ub9e4\uc6b0 \ub9ce\uc544\uc9c0\uac8c \ub418\ubbc0\ub85c Layer Mask\ub97c \uc774\uc6a9\ud574\uc11c \uc6d0\ud558\ub294 \ubb3c\uccb4\ub4e4\uc5d0 \ub300\ud574\uc11c\ub9cc ray\ub97c \uc3d8\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\uc11c Cube\ub4e4\uc5d0 \ub300\ud574\uc11c\ub9cc ray\ub97c \uc3d8\ub824\uace0 \ud55c\ub2e4\uba74, 8\ubc88\uc5d0 \uc0c8\ub85c\uc6b4 Layer\ub97c \uc9c0\uc815\ud574\uc8fc\uace0 bitmasking\uc73c\ub85c ray\uc758 \ub300\uc0c1\uc774 \ub418\ub294 \uac83\ub4e4\ub9cc \uc120\ud0dd\ud558\uba74 \ub429\ub2c8\ub2e4. int mask = 1 << 8; Physics.Raycast(ray, out hit, 100.0f, mask);","title":"Collision"},{"location":"unity/04/#collision","text":"\ub545\uc744 \ub9cc\ub4dc\ub294 \ubc29\ubc95\uc740 Terrain\uacfc Plain\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uac04\ub2e8\ud558\uac8c \ub9cc\ub4e4 \ub54c\ub294 Plain\uc73c\ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. plain\uc758 \uc0c9\uc0c1\uc744 \uc785\ud788\ub824\uba74 material\uc774 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.","title":"Collision"},{"location":"unity/04/#_1","text":"Object\uc5d0 RigidBody\ub77c\ub294 Component\ub97c \ubd99\uc5ec\uc918\uc57c \ud569\ub2c8\ub2e4. RigidBody\ub77c\ub294 \ucef4\ud3ec\ub10c\ud2b8\ub97c \uac00\uc9c0\uace0 \uc788\uc73c\uba74 \ubb3c\ub9ac\ubc95\uce59\uc774 \uc801\uc6a9\ub418\uace0, \ucda9\ub3cc\uc744 \uc2dc\ud0a4\ub824\uace0 \ud55c\ub2e4\uba74, Collider\ub77c\ub294 \uac83\uc774 \uc591 \ubb3c\uccb4 \uac04\uc5d0 \uc815\uc758\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. Plane\uc744 \ub9cc\ub4e4\uba74 \uae30\ubcf8\uc801\uc73c\ub85c Mesh Collider\ub77c\ub294 \uac83\uc744 \uac00\uc9c0\uace0 \uc788\ub294\ub370, \uce90\ub9ad\ud130\uc5d0\ub294 \uc544\ubb34\ub7f0 Collider\uac00 \uc5c6\uc73c\ub2c8 Capsule Collider \ub97c \uc0dd\uc131\ud574\uc11c \uce90\ub9ad\ud130\uc758 \ud06c\uae30\ub9cc\ud07c \ub298\ub824\uc90d\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc2e4\ud589\ubc84\ud2bc\uc744 \ub204\ub974\uba74 \uc790\uc5f0\uc2a4\ub7fd\uac8c \ucda9\ub3cc\uc774 \uc77c\uc5b4\ub0a9\ub2c8\ub2e4. \uce90\ub9ad\ud130\uc5d0 \uc788\ub294 isKinematic\uc774\ub77c\ub294 \uc635\uc158\uc744 \uccb4\ud06c\ud558\uba74 Unity\uc758 \ubb3c\ub9ac\uc5d0 \uc601\ud5a5\uc744 \ubc1b\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. FPS\uac8c\uc784 \uac19\uc740 \uacbd\uc6b0\uc5d0 \uc774\ud399\ud2b8\ub97c \ud654\ub824\ud558\uac8c \ud558\uace0 \uc2f6\uc73c\uba74 \uc774 \uae30\ub2a5\uc744 \ucf1c\ub294 \uacbd\uc6b0\uac00 \uc788\uc9c0\ub9cc, \uc77c\ubc18\uc801\uc778 RPG\uac8c\uc784\uc740 \uc774 \uae30\ub2a5\uc744 \ud3c9\uc18c\uc5d0 \ucf1c\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"\ubb3c\ub9ac\ubc95\uce59\uc744 \uc801\uc6a9\ud558\ub824\uba74"},{"location":"unity/04/#collision-vs-trigger","text":"Collision\uc740 \ub300\uccb4\ub8cc \ucda9\ub3cc\uc774 \uc788\uc744 \ub54c \uc0ac\uc6a9(\ucd1d\uc54c => \uc0ac\ub78c) Trigger\ub294 \ubc94\uc704 \uc548\uc5d0 \ub4e4\uc5b4\uac14\ub294\uc9c0 \ud655\uc778\ud558\uace0 \uc2f6\uc744 \ub54c \uc0ac\uc6a9 \ucda9\ub3cc\ud558\ub294 \ub450 \ubb3c\uccb4\uc758 \ub458 \uc911\uc5d0 \ud558\ub098\ub9cc isTrigger\uac00 \uccb4\ud06c\ub418\uc5b4 \uc788\uc5b4\ub3c4 trigger\ub85c \ucc98\ub9ac\uac00 \ub429\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 // TestCollision.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class TestCollision : MonoBehaviour { private void OnCollisionEnter ( Collision collision ) { Debug . Log ( \"collision!!\" ); } private void OnTriggerEnter ( Collider other ) { Debug . Log ( \"Triggered!!\" ); } // Start is called before the first frame update void Start () { } // Update is called once per frame void Update () { } }","title":"Collision vs Trigger"},{"location":"unity/04/#raycasting","text":"3d \uac8c\uc784\uc5d0\uc11c \uce90\ub9ad\ud130 \ub4f1\uc744 \uc120\ud0dd\ud560 \ub54c, \uad11\uc120\uc744 \uc3f4\uc11c \ucda9\ub3cc\ud558\ub294 \uac83\uc744 \uc120\ud0dd\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \ud560 \uc218 \uc788\uc74c 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class TestCollision : MonoBehaviour { private void OnCollisionEnter ( Collision collision ) { Debug . Log ( \"collision!!\" ); } private void OnTriggerEnter ( Collider other ) { Debug . Log ( \"Triggered!!\" ); } // Start is called before the first frame update void Start () { } // Update is called once per frame void Update () { Debug . DrawRay ( transform . position + Vector3 . up , Vector3 . forward * 10 , Color . red ); RaycastHit hit ; if ( Physics . Raycast ( transform . position + Vector3 . up , Vector3 . forward , out hit , 10.0f )) { Debug . Log ( $\"ray cast!! {hit.collider.gameObject.name}\" ); } } } \ubb38\uc81c\uc810\uc740 \uce90\ub9ad\ud130\uac00 \ubc14\ub77c\ubcf4\ub294 \ubc29\ud5a5\uc73c\ub85c ray\uac00 \uc3f4\uc9c0\uc9c0 \uc54a\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 cube\ub97c \uc5ec\ub7ec\uac1c \ub450\uac8c \ub418\uba74 \uc81c\uc77c \uccab \ubc88\uc9f8 \uac83\uc5d0\ub9cc hit\uc774 \ub429\ub2c8\ub2e4.","title":"RayCasting"},{"location":"unity/04/#screen-ray","text":"Local <=> World <=> (ViewPort <=> Screen \ud654\uba74. screen\uacfc viewport\ub294 \uac70\uc758 \uc720\uc0ac. viewport\ub294 2d\uc88c\ud45c\uac12\uc774\uace0 viewport\ub294 \ube44\uc728\ub85c\ub9cc \ud45c\uc2dc) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class TestCollision : MonoBehaviour { private void OnCollisionEnter ( Collision collision ) { Debug . Log ( \"collision!!\" ); } private void OnTriggerEnter ( Collider other ) { Debug . Log ( \"Triggered!!\" ); } // Start is called before the first frame update void Start () { } // Update is called once per frame void Update () { // Local <=> World <=> View Port <=> Screen // Debug.Log(Input.mousePosition); // Screen // Debug.Log(Camera.main.ScreenToViewportPoint(Input.mousePosition)); // ViewPort if ( Input . GetMouseButtonDown ( 0 )) { Ray ray = Camera . main . ScreenPointToRay ( Input . mousePosition ); Debug . DrawRay ( Camera . main . transform . position , ray . direction * 100.0f , Color . red , 1.0f ); RaycastHit hit ; if ( Physics . Raycast ( ray , out hit , 100.0f )) { Debug . Log ( $\"RayCast Camera @ {hit.collider.gameObject.name}\" ); } } // Vector3 mousePos = Camera.main.ScreenToWorldPoint(new Vector3(Input.mousePosition.x, Input.mousePosition.y, Camera.main.nearClipPlane)); // Vector3 dir = mousePos - Camera.main.transform.position; // dir = dir.normalized; } }","title":"screen\uc5d0\uc11c ray\uc3d8\uae30"},{"location":"unity/04/#layer-mask","text":"ray\ub97c \uc0ac\uc6a9\ud558\uba74 \uc624\ube0c\uc81d\ud2b8\ub4e4\uc744 \ube44\uad50\ud558\ub294\ub370 \uc5f0\uc0b0\uc774 \uaf64 \ub9ce\uc774 \ub4ed\ub2c8\ub2e4. \ub610\ud55c mesh collider\ucc98\ub7fc \uba74\uc774 \ub9ce\uc740 collider\ub97c \uc0ac\uc6a9\ud558\uac8c \ub418\uba74, \uc5f0\uc0b0\ud69f\uc218\uac00 \ub9e4\uc6b0 \ub9ce\uc544\uc9c0\uac8c \ub418\ubbc0\ub85c Layer Mask\ub97c \uc774\uc6a9\ud574\uc11c \uc6d0\ud558\ub294 \ubb3c\uccb4\ub4e4\uc5d0 \ub300\ud574\uc11c\ub9cc ray\ub97c \uc3d8\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\uc11c Cube\ub4e4\uc5d0 \ub300\ud574\uc11c\ub9cc ray\ub97c \uc3d8\ub824\uace0 \ud55c\ub2e4\uba74, 8\ubc88\uc5d0 \uc0c8\ub85c\uc6b4 Layer\ub97c \uc9c0\uc815\ud574\uc8fc\uace0 bitmasking\uc73c\ub85c ray\uc758 \ub300\uc0c1\uc774 \ub418\ub294 \uac83\ub4e4\ub9cc \uc120\ud0dd\ud558\uba74 \ub429\ub2c8\ub2e4. int mask = 1 << 8; Physics.Raycast(ray, out hit, 100.0f, mask);","title":"Layer Mask\ub97c \uc774\uc6a9\ud55c \uc5f0\uc0b0 \ud69f\uc218 \uc904\uc774\uae30"},{"location":"unity/05/","text":"Camera 1 2 3 4 5 6 7 8 9 10 11 12 // Define.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Define { public enum CameraMode { QuaterView , } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 // CameraController.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class CameraController : MonoBehaviour { [SerializeField] Define . CameraMode _mode = Define . CameraMode . QuaterView ; [SerializeField] Vector3 _delta ; [SerializeField] GameObject _player ; // Start is called before the first frame update void Start () { } // player\uac00 \uc774\ub3d9\ud55c \ub2e4\uc74c\uc5d0 \uc5c5\ub370\uc774\ud2b8 \ub418\uc5b4\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 LateUpdate()\ub97c \ud558\uba74 \ub428 void LateUpdate () { if ( _mode == Define . CameraMode . QuaterView ) { transform . position = _player . transform . position + _delta ; transform . LookAt ( _player . transform ); } } public void SetQuaterView ( Vector3 delta ) { _mode = Define . CameraMode . QuaterView ; _delta = delta ; } } \ud074\ub9ad\ud558\uba74 \ud574\ub2f9 \uc704\uce58\ub85c \uce90\ub9ad\ud130 \uc774\ub3d9 MouseEvent\ub97c \ucd94\uac00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // Utils/Define.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Define { public enum MouseEvent { Press , Click , } public enum CameraMode { QuaterView , } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 //Managers/InputManager.cs using System ; using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class InputManager { public Action KeyAction = null ; public Action < Define . MouseEvent > MouseAction = null ; bool _pressed = false ; // Update is called once per frame public void OnUpdate () { if ( Input . anyKey && KeyAction != null ) { KeyAction . Invoke (); } if ( MouseAction != null ) { if ( Input . GetMouseButton ( 0 )) { MouseAction . Invoke ( Define . MouseEvent . Press ); _pressed = true ; } else { if ( _pressed ) MouseAction . Invoke ( Define . MouseEvent . Click ); _pressed = false ; } } } } \uc7a5\uc560\ubb3c\uc5d0 \uc758\ud574\uc11c \uce74\uba54\ub77c\uac00 \uac00\ub824\uc84c\uc744 \ub54c \uce74\uba54\ub77c\uac00 \uc7a5\uc560\ubb3c \uc55e\uc73c\ub85c \uc774\ub3d9\ud558\ub3c4\ub85d \uad6c\ud604 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // Controllers/CameraController.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class CameraController : MonoBehaviour { [SerializeField] Define . CameraMode _mode = Define . CameraMode . QuaterView ; [SerializeField] Vector3 _delta = new Vector3 ( 0.0f , 6.0f , - 5.0f ); [SerializeField] GameObject _player ; // Start is called before the first frame update void Start () { } // Update is called once per frame void LateUpdate () { if ( _mode == Define . CameraMode . QuaterView ) { RaycastHit hit ; if ( Physics . Raycast ( _player . transform . position , _delta , out hit , _delta . magnitude , LayerMask . GetMask ( \"Wall\" ))) { float dist = ( hit . point - _player . transform . position ). magnitude * 0.8f ; transform . position = _player . transform . position + _delta . normalized * dist ; } else { transform . position = _player . transform . position + _delta ; transform . LookAt ( _player . transform ); } } } public void SetQuaterView ( Vector3 delta ) { _mode = Define . CameraMode . QuaterView ; _delta = delta ; } } tip: camera\ub97c prefab\uc73c\ub85c \uad00\ub9ac \uce74\uba54\ub77c\ub97c \uc790\uc8fc \uc0ac\uc6a9\ud558\uac8c \ub418\ub294 \uacbd\uc6b0\uc5d0 prefab\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc11c \uad00\ub9ac\ud558\uba74, \ucd94\ud6c4\uc5d0 camera manager\uac19\uc740 \uac83\ub3c4 \ub9cc\ub4e4\uc5b4\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc74c","title":"Camera"},{"location":"unity/05/#camera","text":"1 2 3 4 5 6 7 8 9 10 11 12 // Define.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Define { public enum CameraMode { QuaterView , } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 // CameraController.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class CameraController : MonoBehaviour { [SerializeField] Define . CameraMode _mode = Define . CameraMode . QuaterView ; [SerializeField] Vector3 _delta ; [SerializeField] GameObject _player ; // Start is called before the first frame update void Start () { } // player\uac00 \uc774\ub3d9\ud55c \ub2e4\uc74c\uc5d0 \uc5c5\ub370\uc774\ud2b8 \ub418\uc5b4\uc57c \ud558\uae30 \ub54c\ubb38\uc5d0 LateUpdate()\ub97c \ud558\uba74 \ub428 void LateUpdate () { if ( _mode == Define . CameraMode . QuaterView ) { transform . position = _player . transform . position + _delta ; transform . LookAt ( _player . transform ); } } public void SetQuaterView ( Vector3 delta ) { _mode = Define . CameraMode . QuaterView ; _delta = delta ; } }","title":"Camera"},{"location":"unity/05/#_1","text":"MouseEvent\ub97c \ucd94\uac00 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 // Utils/Define.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class Define { public enum MouseEvent { Press , Click , } public enum CameraMode { QuaterView , } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 //Managers/InputManager.cs using System ; using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class InputManager { public Action KeyAction = null ; public Action < Define . MouseEvent > MouseAction = null ; bool _pressed = false ; // Update is called once per frame public void OnUpdate () { if ( Input . anyKey && KeyAction != null ) { KeyAction . Invoke (); } if ( MouseAction != null ) { if ( Input . GetMouseButton ( 0 )) { MouseAction . Invoke ( Define . MouseEvent . Press ); _pressed = true ; } else { if ( _pressed ) MouseAction . Invoke ( Define . MouseEvent . Click ); _pressed = false ; } } } }","title":"\ud074\ub9ad\ud558\uba74 \ud574\ub2f9 \uc704\uce58\ub85c \uce90\ub9ad\ud130 \uc774\ub3d9"},{"location":"unity/05/#_2","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 // Controllers/CameraController.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class CameraController : MonoBehaviour { [SerializeField] Define . CameraMode _mode = Define . CameraMode . QuaterView ; [SerializeField] Vector3 _delta = new Vector3 ( 0.0f , 6.0f , - 5.0f ); [SerializeField] GameObject _player ; // Start is called before the first frame update void Start () { } // Update is called once per frame void LateUpdate () { if ( _mode == Define . CameraMode . QuaterView ) { RaycastHit hit ; if ( Physics . Raycast ( _player . transform . position , _delta , out hit , _delta . magnitude , LayerMask . GetMask ( \"Wall\" ))) { float dist = ( hit . point - _player . transform . position ). magnitude * 0.8f ; transform . position = _player . transform . position + _delta . normalized * dist ; } else { transform . position = _player . transform . position + _delta ; transform . LookAt ( _player . transform ); } } } public void SetQuaterView ( Vector3 delta ) { _mode = Define . CameraMode . QuaterView ; _delta = delta ; } }","title":"\uc7a5\uc560\ubb3c\uc5d0 \uc758\ud574\uc11c \uce74\uba54\ub77c\uac00 \uac00\ub824\uc84c\uc744 \ub54c \uce74\uba54\ub77c\uac00 \uc7a5\uc560\ubb3c \uc55e\uc73c\ub85c \uc774\ub3d9\ud558\ub3c4\ub85d \uad6c\ud604"},{"location":"unity/05/#tip-camera-prefab","text":"\uce74\uba54\ub77c\ub97c \uc790\uc8fc \uc0ac\uc6a9\ud558\uac8c \ub418\ub294 \uacbd\uc6b0\uc5d0 prefab\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc11c \uad00\ub9ac\ud558\uba74, \ucd94\ud6c4\uc5d0 camera manager\uac19\uc740 \uac83\ub3c4 \ub9cc\ub4e4\uc5b4\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc74c","title":"tip: camera\ub97c prefab\uc73c\ub85c \uad00\ub9ac"},{"location":"unity/06/","text":"Animation \uce90\ub9ad\ud130\uc5d0 Add component\ub85c Animation\uacfc Animator\ub97c \ubd99\uc77c \uc218 \uc788\ub294\ub370, Animation\uc740 Legacy Component\ub77c\uc11c \uc694\uc998\uc5d4 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc694\uc0c8 Animation\uc758 \ubc29\uc2dd\uc740 Mecanim Animation \ubc29\uc2dd\uc774\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4. Animator\uc758 Controller \ubd80\ubd84\uc5d0\ub294 Animations\uc758 Animator \ubc11\uc5d0 \uc788\ub294 \uac83\ub4e4\uc744 \uc5f0\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0c8\ub85c Animator Controller\ub97c \ub9cc\ub4e4\uc5b4\uc8fc\uace0, PlayerAnimController\ub85c \uc784\uc2dc\ub85c(\ud559\uc2b5 \ubaa9\uc801\uc73c\ub85c \ubc30\uc6b0\uace0 \uc0ad\uc81c \uc608\uc815) \ub9cc\ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \ucc3d\uc774 \ub728\uac8c \ub418\uace0, Alt + \ub9c8\uc6b0\uc2a4 \uc67c\ucabd \ud074\ub9ad + \ub4dc\ub798\uadf8 \ub85c \ud654\uba74\uc744 \uc774\ub3d9\ud560 \uc218 \uc788\uace0, \ud720\ub85c zoom in/out\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Entry\uc5d0\uc11c SetStateMachine Default State\ub97c \uc120\ud0dd\ud55c \ud6c4\uc5d0 RUN00_F\ub97c \ub204\ub974\uba74 \uc704\uc640 \uac19\uc774 \uc5f0\uacb0\ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 WAIT00\ucc98\ub7fc \ud45c\uc2dc\ub41c \ubd80\ubd84\uc740 \ubcc0\uacbd\ud574\ub3c4 \uc6d0\ub798\uc758 animation \uad00\ub828\ub41c \ud30c\uc77c\uc5d0\ub294 \uc601\ud5a5\uc774 \uc5c6\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc774 PlayerController.cs \uc5d0 Update()\ud568\uc218 \uc548\uc5d0 \ub2e4\uc74c\uc758 \ubd80\ubd84\uc744 \ub123\uc73c\uba74 \uc774\ub3d9 \uc911\uc77c \ub54c \ub2e4\ub978 \uc885\ub958\uc758 \uc560\ub2c8\uba54\uc774\uc158\uc744 \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 // Controllers/PlayerController.cs if ( _moveToDest ) { Animator anim = GetComponent < Animator >(); anim . Play ( \"RUN\" ); } else { Animator anim = GetComponent < Animator >(); anim . Play ( \"WAIT\" ); } \uc804\uccb4 \uc2a4\ud06c\ub9bd\ud2b8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 // Controllers/PlayerController.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class PlayerController : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; bool _moveToDest = false ; Vector3 _destPos ; void Start () { // Input Manager\uc5d0\ud639\uc2dc \uc5b4\ub5a4\ud0a4\uac00 \ub20c\ub9ac\uac8c \ub418\uba74 OnKeyboard \ud568\uc218\ub97c \uc2e4\ud589\ud574\ub77c! Managers . Input . KeyAction -= OnKeyboard ; // \ud639\uc2dc \ud55c \ubc88 \ub354 \ucd94\uac00\ud588\uc744\uae4c\ubd10 \uc2e4\uc218 \ubc29\uc9c0 Managers . Input . KeyAction += OnKeyboard ; Managers . Input . MouseAction -= OnMouseClicked ; Managers . Input . MouseAction += OnMouseClicked ; } //float _yAngle = 0.0f; // Update is called once per frame void Update () { if ( _moveToDest ) { Vector3 dir = _destPos - transform . position ; if ( dir . magnitude < 0.0001 ) { _moveToDest = false ; } else { //float moveDist = _speed * Time.deltaTime; //if (moveDist >= dir.magnitude) // moveDist = dir.magnitude; float moveDist = Mathf . Clamp ( _speed * Time . deltaTime , 0 , dir . magnitude ); transform . position = transform . position + dir . normalized * moveDist * 0.9f ; transform . LookAt ( _destPos ); // LookAt\uc744 \ud558\uba74 \ud55c \ubc88\uc5d0 \ub9ce\uc774 \ub3cc\uae30 \ub54c\ubb38\uc5d0 \ub04a\uaca8 \ubcf4\uc77c \uc218 \uc788\uc74c // transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(dir), 20 * Time.deltaTime); } } if ( _moveToDest ) { Animator anim = GetComponent < Animator >(); anim . Play ( \"RUN\" ); } else { Animator anim = GetComponent < Animator >(); anim . Play ( \"WAIT\" ); } } void OnKeyboard () { if ( Input . GetKey ( KeyCode . W )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . forward ), 0.05f ); transform . position += Vector3 . forward * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . S )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . back ), 0.05f ); transform . position += Vector3 . back * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . A )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . left ), 0.05f ); transform . position += Vector3 . left * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . D )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . right ), 1.0f ); transform . position += Vector3 . right * Time . deltaTime * _speed ; } _moveToDest = false ; } void OnMouseClicked ( Define . MouseEvent evt ) { //if (evt != Define.MouseEvent.Click) // return; Ray ray = Camera . main . ScreenPointToRay ( Input . mousePosition ); Debug . DrawRay ( Camera . main . transform . position , ray . direction * 100.0f , Color . red , 1.0f ); RaycastHit hit ; if ( Physics . Raycast ( ray , out hit , 100.0f , LayerMask . GetMask ( \"Wall\" ))) { _destPos = hit . point ; _moveToDest = true ; // Debug.Log($\"RayCast Camera @ {hit.collider.gameObject.name}\"); } } } \uc560\ub2c8\uba54\uc774\uc158 \ube14\ub80c\ub529 \uce90\ub9ad\ud130\uac00 \ub6f0\ub2e4\uac00 \uba48\ucd94\uac8c \ub418\uba74, \uac11\uc791\uc2a4\ub7fd\uac8c \uba48\ucd94\uae30 \ub54c\ubb38\uc5d0, RUN \ubaa8\uc158\uacfc WAIT \ubaa8\uc158\uc744 \uc801\uc808\ud55c \ube44\uc728\ub85c \uc11e\uc5b4\uc918\uc57c \ud569\ub2c8\ub2e4. WAIT_RUN\uc774\ub77c\uace0 \uc774\ub984\uc744 \ubc14\uafbc \ub2e4\uc74c\uc5d0 \ub354\ube14\ud074\ub9ad\uc73c\ub85c \ub4e4\uc5b4\uac00\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \ud654\uba74\uc774 \ub098\uc635\ub2c8\ub2e4. \uc544\ub798 \ubd80\ubd84\ucc98\ub7fc Lerp\ub85c \ucc9c\ucc9c\ud788 \ubcc0\ud654\ub418\ub3c4\ub85d \ud558\uace0, SetFloat\uac12\uc73c\ub85c \uac12\uc744 \ubcc0\uacbd\uc2dc\ud0a4\uba74 \ucc9c\ucc9c\ud788 \uba48\ucd94\ub294 \uac78 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 if ( _moveToDest ) { wait_run_ratio = Mathf . Lerp ( wait_run_ratio , 1 , 10.0f * Time . deltaTime ); Animator anim = GetComponent < Animator >(); anim . SetFloat ( \"wait_run_ratio\" , wait_run_ratio ); anim . Play ( \"WAIT_RUN\" ); } else { wait_run_ratio = Mathf . Lerp ( wait_run_ratio , 0 , 10.0f * Time . deltaTime ); Animator anim = GetComponent < Animator >(); anim . SetFloat ( \"wait_run_ratio\" , wait_run_ratio ); anim . Play ( \"WAIT_RUN\" ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class PlayerController : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; bool _moveToDest = false ; Vector3 _destPos ; void Start () { // Input Manager\uc5d0\ud639\uc2dc \uc5b4\ub5a4\ud0a4\uac00 \ub20c\ub9ac\uac8c \ub418\uba74 OnKeyboard \ud568\uc218\ub97c \uc2e4\ud589\ud574\ub77c! Managers . Input . KeyAction -= OnKeyboard ; // \ud639\uc2dc \ud55c \ubc88 \ub354 \ucd94\uac00\ud588\uc744\uae4c\ubd10 \uc2e4\uc218 \ubc29\uc9c0 Managers . Input . KeyAction += OnKeyboard ; Managers . Input . MouseAction -= OnMouseClicked ; Managers . Input . MouseAction += OnMouseClicked ; } //float _yAngle = 0.0f; // Update is called once per frame float wait_run_ratio = 0 ; void Update () { if ( _moveToDest ) { Vector3 dir = _destPos - transform . position ; if ( dir . magnitude < 0.0001 ) { _moveToDest = false ; } else { //float moveDist = _speed * Time.deltaTime; //if (moveDist >= dir.magnitude) // moveDist = dir.magnitude; float moveDist = Mathf . Clamp ( _speed * Time . deltaTime , 0 , dir . magnitude ); transform . position = transform . position + dir . normalized * moveDist * 0.9f ; transform . LookAt ( _destPos ); // LookAt\uc744 \ud558\uba74 \ud55c \ubc88\uc5d0 \ub9ce\uc774 \ub3cc\uae30 \ub54c\ubb38\uc5d0 \ub04a\uaca8 \ubcf4\uc77c \uc218 \uc788\uc74c // transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(dir), 20 * Time.deltaTime); } } if ( _moveToDest ) { wait_run_ratio = Mathf . Lerp ( wait_run_ratio , 1 , 10.0f * Time . deltaTime ); Animator anim = GetComponent < Animator >(); anim . SetFloat ( \"wait_run_ratio\" , wait_run_ratio ); anim . Play ( \"WAIT_RUN\" ); } else { wait_run_ratio = Mathf . Lerp ( wait_run_ratio , 0 , 10.0f * Time . deltaTime ); Animator anim = GetComponent < Animator >(); anim . SetFloat ( \"wait_run_ratio\" , wait_run_ratio ); anim . Play ( \"WAIT_RUN\" ); } } void OnKeyboard () { if ( Input . GetKey ( KeyCode . W )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . forward ), 0.05f ); transform . position += Vector3 . forward * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . S )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . back ), 0.05f ); transform . position += Vector3 . back * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . A )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . left ), 0.05f ); transform . position += Vector3 . left * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . D )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . right ), 1.0f ); transform . position += Vector3 . right * Time . deltaTime * _speed ; } _moveToDest = false ; } void OnMouseClicked ( Define . MouseEvent evt ) { //if (evt != Define.MouseEvent.Click) // return; Ray ray = Camera . main . ScreenPointToRay ( Input . mousePosition ); Debug . DrawRay ( Camera . main . transform . position , ray . direction * 100.0f , Color . red , 1.0f ); RaycastHit hit ; if ( Physics . Raycast ( ray , out hit , 100.0f , LayerMask . GetMask ( \"Wall\" ))) { _destPos = hit . point ; _moveToDest = true ; // Debug.Log($\"RayCast Camera @ {hit.collider.gameObject.name}\"); } } }","title":"Animation"},{"location":"unity/06/#animation","text":"\uce90\ub9ad\ud130\uc5d0 Add component\ub85c Animation\uacfc Animator\ub97c \ubd99\uc77c \uc218 \uc788\ub294\ub370, Animation\uc740 Legacy Component\ub77c\uc11c \uc694\uc998\uc5d4 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc694\uc0c8 Animation\uc758 \ubc29\uc2dd\uc740 Mecanim Animation \ubc29\uc2dd\uc774\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4. Animator\uc758 Controller \ubd80\ubd84\uc5d0\ub294 Animations\uc758 Animator \ubc11\uc5d0 \uc788\ub294 \uac83\ub4e4\uc744 \uc5f0\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0c8\ub85c Animator Controller\ub97c \ub9cc\ub4e4\uc5b4\uc8fc\uace0, PlayerAnimController\ub85c \uc784\uc2dc\ub85c(\ud559\uc2b5 \ubaa9\uc801\uc73c\ub85c \ubc30\uc6b0\uace0 \uc0ad\uc81c \uc608\uc815) \ub9cc\ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \ucc3d\uc774 \ub728\uac8c \ub418\uace0, Alt + \ub9c8\uc6b0\uc2a4 \uc67c\ucabd \ud074\ub9ad + \ub4dc\ub798\uadf8 \ub85c \ud654\uba74\uc744 \uc774\ub3d9\ud560 \uc218 \uc788\uace0, \ud720\ub85c zoom in/out\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Entry\uc5d0\uc11c SetStateMachine Default State\ub97c \uc120\ud0dd\ud55c \ud6c4\uc5d0 RUN00_F\ub97c \ub204\ub974\uba74 \uc704\uc640 \uac19\uc774 \uc5f0\uacb0\ub429\ub2c8\ub2e4. \uadf8\ub9ac\uace0 WAIT00\ucc98\ub7fc \ud45c\uc2dc\ub41c \ubd80\ubd84\uc740 \ubcc0\uacbd\ud574\ub3c4 \uc6d0\ub798\uc758 animation \uad00\ub828\ub41c \ud30c\uc77c\uc5d0\ub294 \uc601\ud5a5\uc774 \uc5c6\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc774 PlayerController.cs \uc5d0 Update()\ud568\uc218 \uc548\uc5d0 \ub2e4\uc74c\uc758 \ubd80\ubd84\uc744 \ub123\uc73c\uba74 \uc774\ub3d9 \uc911\uc77c \ub54c \ub2e4\ub978 \uc885\ub958\uc758 \uc560\ub2c8\uba54\uc774\uc158\uc744 \uc2e4\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 // Controllers/PlayerController.cs if ( _moveToDest ) { Animator anim = GetComponent < Animator >(); anim . Play ( \"RUN\" ); } else { Animator anim = GetComponent < Animator >(); anim . Play ( \"WAIT\" ); } \uc804\uccb4 \uc2a4\ud06c\ub9bd\ud2b8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 // Controllers/PlayerController.cs using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class PlayerController : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; bool _moveToDest = false ; Vector3 _destPos ; void Start () { // Input Manager\uc5d0\ud639\uc2dc \uc5b4\ub5a4\ud0a4\uac00 \ub20c\ub9ac\uac8c \ub418\uba74 OnKeyboard \ud568\uc218\ub97c \uc2e4\ud589\ud574\ub77c! Managers . Input . KeyAction -= OnKeyboard ; // \ud639\uc2dc \ud55c \ubc88 \ub354 \ucd94\uac00\ud588\uc744\uae4c\ubd10 \uc2e4\uc218 \ubc29\uc9c0 Managers . Input . KeyAction += OnKeyboard ; Managers . Input . MouseAction -= OnMouseClicked ; Managers . Input . MouseAction += OnMouseClicked ; } //float _yAngle = 0.0f; // Update is called once per frame void Update () { if ( _moveToDest ) { Vector3 dir = _destPos - transform . position ; if ( dir . magnitude < 0.0001 ) { _moveToDest = false ; } else { //float moveDist = _speed * Time.deltaTime; //if (moveDist >= dir.magnitude) // moveDist = dir.magnitude; float moveDist = Mathf . Clamp ( _speed * Time . deltaTime , 0 , dir . magnitude ); transform . position = transform . position + dir . normalized * moveDist * 0.9f ; transform . LookAt ( _destPos ); // LookAt\uc744 \ud558\uba74 \ud55c \ubc88\uc5d0 \ub9ce\uc774 \ub3cc\uae30 \ub54c\ubb38\uc5d0 \ub04a\uaca8 \ubcf4\uc77c \uc218 \uc788\uc74c // transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(dir), 20 * Time.deltaTime); } } if ( _moveToDest ) { Animator anim = GetComponent < Animator >(); anim . Play ( \"RUN\" ); } else { Animator anim = GetComponent < Animator >(); anim . Play ( \"WAIT\" ); } } void OnKeyboard () { if ( Input . GetKey ( KeyCode . W )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . forward ), 0.05f ); transform . position += Vector3 . forward * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . S )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . back ), 0.05f ); transform . position += Vector3 . back * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . A )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . left ), 0.05f ); transform . position += Vector3 . left * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . D )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . right ), 1.0f ); transform . position += Vector3 . right * Time . deltaTime * _speed ; } _moveToDest = false ; } void OnMouseClicked ( Define . MouseEvent evt ) { //if (evt != Define.MouseEvent.Click) // return; Ray ray = Camera . main . ScreenPointToRay ( Input . mousePosition ); Debug . DrawRay ( Camera . main . transform . position , ray . direction * 100.0f , Color . red , 1.0f ); RaycastHit hit ; if ( Physics . Raycast ( ray , out hit , 100.0f , LayerMask . GetMask ( \"Wall\" ))) { _destPos = hit . point ; _moveToDest = true ; // Debug.Log($\"RayCast Camera @ {hit.collider.gameObject.name}\"); } } }","title":"Animation"},{"location":"unity/06/#_1","text":"\uce90\ub9ad\ud130\uac00 \ub6f0\ub2e4\uac00 \uba48\ucd94\uac8c \ub418\uba74, \uac11\uc791\uc2a4\ub7fd\uac8c \uba48\ucd94\uae30 \ub54c\ubb38\uc5d0, RUN \ubaa8\uc158\uacfc WAIT \ubaa8\uc158\uc744 \uc801\uc808\ud55c \ube44\uc728\ub85c \uc11e\uc5b4\uc918\uc57c \ud569\ub2c8\ub2e4. WAIT_RUN\uc774\ub77c\uace0 \uc774\ub984\uc744 \ubc14\uafbc \ub2e4\uc74c\uc5d0 \ub354\ube14\ud074\ub9ad\uc73c\ub85c \ub4e4\uc5b4\uac00\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \ud654\uba74\uc774 \ub098\uc635\ub2c8\ub2e4. \uc544\ub798 \ubd80\ubd84\ucc98\ub7fc Lerp\ub85c \ucc9c\ucc9c\ud788 \ubcc0\ud654\ub418\ub3c4\ub85d \ud558\uace0, SetFloat\uac12\uc73c\ub85c \uac12\uc744 \ubcc0\uacbd\uc2dc\ud0a4\uba74 \ucc9c\ucc9c\ud788 \uba48\ucd94\ub294 \uac78 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. 1 2 3 4 5 6 7 8 9 10 11 12 13 if ( _moveToDest ) { wait_run_ratio = Mathf . Lerp ( wait_run_ratio , 1 , 10.0f * Time . deltaTime ); Animator anim = GetComponent < Animator >(); anim . SetFloat ( \"wait_run_ratio\" , wait_run_ratio ); anim . Play ( \"WAIT_RUN\" ); } else { wait_run_ratio = Mathf . Lerp ( wait_run_ratio , 0 , 10.0f * Time . deltaTime ); Animator anim = GetComponent < Animator >(); anim . SetFloat ( \"wait_run_ratio\" , wait_run_ratio ); anim . Play ( \"WAIT_RUN\" ); } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 using System.Collections ; using System.Collections.Generic ; using UnityEngine ; public class PlayerController : MonoBehaviour { /*public float _speed = 10.0f;*/ [SerializeField] float _speed = 10.0f ; bool _moveToDest = false ; Vector3 _destPos ; void Start () { // Input Manager\uc5d0\ud639\uc2dc \uc5b4\ub5a4\ud0a4\uac00 \ub20c\ub9ac\uac8c \ub418\uba74 OnKeyboard \ud568\uc218\ub97c \uc2e4\ud589\ud574\ub77c! Managers . Input . KeyAction -= OnKeyboard ; // \ud639\uc2dc \ud55c \ubc88 \ub354 \ucd94\uac00\ud588\uc744\uae4c\ubd10 \uc2e4\uc218 \ubc29\uc9c0 Managers . Input . KeyAction += OnKeyboard ; Managers . Input . MouseAction -= OnMouseClicked ; Managers . Input . MouseAction += OnMouseClicked ; } //float _yAngle = 0.0f; // Update is called once per frame float wait_run_ratio = 0 ; void Update () { if ( _moveToDest ) { Vector3 dir = _destPos - transform . position ; if ( dir . magnitude < 0.0001 ) { _moveToDest = false ; } else { //float moveDist = _speed * Time.deltaTime; //if (moveDist >= dir.magnitude) // moveDist = dir.magnitude; float moveDist = Mathf . Clamp ( _speed * Time . deltaTime , 0 , dir . magnitude ); transform . position = transform . position + dir . normalized * moveDist * 0.9f ; transform . LookAt ( _destPos ); // LookAt\uc744 \ud558\uba74 \ud55c \ubc88\uc5d0 \ub9ce\uc774 \ub3cc\uae30 \ub54c\ubb38\uc5d0 \ub04a\uaca8 \ubcf4\uc77c \uc218 \uc788\uc74c // transform.rotation = Quaternion.Slerp(transform.rotation, Quaternion.LookRotation(dir), 20 * Time.deltaTime); } } if ( _moveToDest ) { wait_run_ratio = Mathf . Lerp ( wait_run_ratio , 1 , 10.0f * Time . deltaTime ); Animator anim = GetComponent < Animator >(); anim . SetFloat ( \"wait_run_ratio\" , wait_run_ratio ); anim . Play ( \"WAIT_RUN\" ); } else { wait_run_ratio = Mathf . Lerp ( wait_run_ratio , 0 , 10.0f * Time . deltaTime ); Animator anim = GetComponent < Animator >(); anim . SetFloat ( \"wait_run_ratio\" , wait_run_ratio ); anim . Play ( \"WAIT_RUN\" ); } } void OnKeyboard () { if ( Input . GetKey ( KeyCode . W )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . forward ), 0.05f ); transform . position += Vector3 . forward * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . S )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . back ), 0.05f ); transform . position += Vector3 . back * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . A )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . left ), 0.05f ); transform . position += Vector3 . left * Time . deltaTime * _speed ; } if ( Input . GetKey ( KeyCode . D )) { transform . rotation = Quaternion . Slerp ( transform . rotation , Quaternion . LookRotation ( Vector3 . right ), 1.0f ); transform . position += Vector3 . right * Time . deltaTime * _speed ; } _moveToDest = false ; } void OnMouseClicked ( Define . MouseEvent evt ) { //if (evt != Define.MouseEvent.Click) // return; Ray ray = Camera . main . ScreenPointToRay ( Input . mousePosition ); Debug . DrawRay ( Camera . main . transform . position , ray . direction * 100.0f , Color . red , 1.0f ); RaycastHit hit ; if ( Physics . Raycast ( ray , out hit , 100.0f , LayerMask . GetMask ( \"Wall\" ))) { _destPos = hit . point ; _moveToDest = true ; // Debug.Log($\"RayCast Camera @ {hit.collider.gameObject.name}\"); } } }","title":"\uc560\ub2c8\uba54\uc774\uc158 \ube14\ub80c\ub529"},{"location":"whoami/aboutme/","text":"NoelBird portfolio site: http://noelbird.com github: http://github.com/NoelBird","title":"whoami"},{"location":"whoami/aboutme/#noelbird","text":"portfolio site: http://noelbird.com github: http://github.com/NoelBird","title":"NoelBird"}]}